TranslationUnitDecl 0x1c4559cc878 <<invalid sloc>> <invalid sloc>
|-NamespaceDecl 0x1c4559cd198 <<invalid sloc>> <invalid sloc> implicit hlsl
| |-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| | |-TemplateTypeParmDecl 0x1c4559cd220 <<invalid sloc>> <invalid sloc> class depth 0 index 0 element
| | | `-TemplateArgument type 'float'
| | |   `-BuiltinType 0x1c4559cca80 'float'
| | |-NonTypeTemplateParmDecl 0x1c4559cd320 <<invalid sloc>> <invalid sloc> 'int' depth 0 index 1 element_count
| | | `-TemplateArgument expr '4'
| | |   `-IntegerLiteral 0x1c4559cd380 <<invalid sloc>> 'int' 4
| | `-TypeAliasDecl 0x1c4559cd4a0 <<invalid sloc>> <invalid sloc> implicit vector 'vector<element, element_count>'
| |   `-DependentSizedExtVectorType 0x1c4559cd450 'vector<element, element_count>' dependent <invalid sloc>
| |     |-TemplateTypeParmType 0x1c4559cd2a0 'element' dependent depth 0 index 0
| |     | `-TemplateTypeParm 0x1c4559cd220 'element'
| |     `-DeclRefExpr 0x1c4559cd3f0 <<invalid sloc>> 'int' lvalue NonTypeTemplateParm 0x1c4559cd320 'element_count' 'int'
| |-ClassTemplateDecl 0x1c455ce4370 <<invalid sloc>> <invalid sloc> implicit Buffer
| | |-TemplateTypeParmDecl 0x1c455ce4138 <<invalid sloc>> <invalid sloc> typename depth 0 index 0 element_type
| | |-ConceptSpecializationExpr 0x1c455ce4310 <<invalid sloc>> 'bool' Concept 0x1c4559cd630 '__is_typed_resource_element_compatible'
| | | |-ImplicitConceptSpecializationDecl 0x1c455ce4240 <<invalid sloc>> <invalid sloc>
| | | | `-TemplateArgument type 'type-parameter-0-0'
| | | |   `-TemplateTypeParmType 0x1c455ce4210 'type-parameter-0-0' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1c455ce41c0 depth 0 index 0
| | | `-TemplateArgument type 'element_type':'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0x1c4559cd5b0 'element_type' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0x1c4559cd558 'element_type'
| | `-CXXRecordDecl 0x1c455ce4030 <<invalid sloc>> <invalid sloc> implicit <undeserialized declarations> class Buffer
| |   `-FinalAttr 0x1c455ce40d8 <<invalid sloc>> Implicit final
| |-ClassTemplateDecl 0x1c455ce48f0 <<invalid sloc>> <invalid sloc> implicit RWBuffer
| | |-TemplateTypeParmDecl 0x1c455ce46b8 <<invalid sloc>> <invalid sloc> typename depth 0 index 0 element_type
| | |-ConceptSpecializationExpr 0x1c455ce4890 <<invalid sloc>> 'bool' Concept 0x1c4559cd630 '__is_typed_resource_element_compatible'
| | | |-ImplicitConceptSpecializationDecl 0x1c455ce47c0 <<invalid sloc>> <invalid sloc>
| | | | `-TemplateArgument type 'type-parameter-0-0'
| | | |   `-TemplateTypeParmType 0x1c455ce4790 'type-parameter-0-0' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1c455ce4740 depth 0 index 0
| | | `-TemplateArgument type 'element_type':'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0x1c4559cd5b0 'element_type' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0x1c4559cd558 'element_type'
| | |-CXXRecordDecl 0x1c455ce45b0 <<invalid sloc>> <invalid sloc> implicit class RWBuffer definition
| | | |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | | | |-DefaultConstructor exists non_trivial user_provided
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-FinalAttr 0x1c455ce4658 <<invalid sloc>> Implicit final
| | | |-FieldDecl 0x1c455f8e5d0 <<invalid sloc>> <invalid sloc> implicit __handle '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]'
| | | |-CXXConstructorDecl 0x1c455f8e660 <<invalid sloc>> <invalid sloc> RWBuffer<element_type> 'void ()' inline
| | | | |-CompoundStmt 0x1c455f8e9f0 <<invalid sloc>>
| | | | | `-BinaryOperator 0x1c455f8e9b8 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' '='
| | | | |   |-MemberExpr 0x1c455f8e988 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f8e5d0
| | | | |   | `-CXXThisExpr 0x1c455f8e978 <<invalid sloc>> 'RWBuffer<element_type>' lvalue implicit this
| | | | |   `-CallExpr 0x1c455f8e948 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]'
| | | | |     |-ImplicitCastExpr 0x1c455f8e930 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| | | | |     | `-DeclRefExpr 0x1c455f8e910 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f8e7d0 '__builtin_hlsl_resource_uninitializedhandle' 'void (...) noexcept'
| | | | |     `-MemberExpr 0x1c455f8e750 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f8e5d0
| | | | |       `-CXXThisExpr 0x1c455f8e740 <<invalid sloc>> 'RWBuffer<element_type>' lvalue implicit this
| | | | `-AlwaysInlineAttr 0x1c455f885f0 <<invalid sloc>> Implicit always_inline
| | | |-CXXConstructorDecl 0x1c455f886f0 <<invalid sloc>> <invalid sloc> RWBuffer<element_type> 'void (unsigned int, unsigned int, int, unsigned int, const char *)' inline
| | | | |-ParmVarDecl 0x1c455f887b8 <<invalid sloc>> <invalid sloc> registerNo 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f88840 <<invalid sloc>> <invalid sloc> spaceNo 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f888c8 <<invalid sloc>> <invalid sloc> range 'int'
| | | | |-ParmVarDecl 0x1c455f88950 <<invalid sloc>> <invalid sloc> index 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f889d8 <<invalid sloc>> <invalid sloc> name 'const char *'
| | | | |-CompoundStmt 0x1c455f88e60 <<invalid sloc>>
| | | | | `-BinaryOperator 0x1c455f88e28 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' '='
| | | | |   |-MemberExpr 0x1c455f88df8 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f8e5d0
| | | | |   | `-CXXThisExpr 0x1c455f88de8 <<invalid sloc>> 'RWBuffer<element_type>' lvalue implicit this
| | | | |   `-CallExpr 0x1c455f88d90 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]'
| | | | |     |-ImplicitCastExpr 0x1c455f88d78 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| | | | |     | `-DeclRefExpr 0x1c455f88d58 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f88c18 '__builtin_hlsl_resource_handlefrombinding' 'void (...) noexcept'
| | | | |     |-MemberExpr 0x1c455f88a80 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f8e5d0
| | | | |     | `-CXXThisExpr 0x1c455f88a70 <<invalid sloc>> 'RWBuffer<element_type>' lvalue implicit this
| | | | |     |-DeclRefExpr 0x1c455f88ab0 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f887b8 'registerNo' 'unsigned int'
| | | | |     |-DeclRefExpr 0x1c455f88ae8 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f88840 'spaceNo' 'unsigned int'
| | | | |     |-DeclRefExpr 0x1c455f88b20 <<invalid sloc>> 'int' ParmVar 0x1c455f888c8 'range' 'int'
| | | | |     |-DeclRefExpr 0x1c455f88b58 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f88950 'index' 'unsigned int'
| | | | |     `-DeclRefExpr 0x1c455f88b90 <<invalid sloc>> 'const char *' ParmVar 0x1c455f889d8 'name' 'const char *'
| | | | `-AlwaysInlineAttr 0x1c455f88e78 <<invalid sloc>> Implicit always_inline
| | | |-CXXConstructorDecl 0x1c455f88f80 <<invalid sloc>> <invalid sloc> RWBuffer<element_type> 'void (unsigned int, int, unsigned int, unsigned int, const char *)' inline
| | | | |-ParmVarDecl 0x1c455f89048 <<invalid sloc>> <invalid sloc> spaceNo 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f890d0 <<invalid sloc>> <invalid sloc> range 'int'
| | | | |-ParmVarDecl 0x1c455f89158 <<invalid sloc>> <invalid sloc> index 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f891e0 <<invalid sloc>> <invalid sloc> orderId 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f89268 <<invalid sloc>> <invalid sloc> name 'const char *'
| | | | |-CompoundStmt 0x1c455f896f0 <<invalid sloc>>
| | | | | `-BinaryOperator 0x1c455f896b8 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' '='
| | | | |   |-MemberExpr 0x1c455f89688 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f8e5d0
| | | | |   | `-CXXThisExpr 0x1c455f89678 <<invalid sloc>> 'RWBuffer<element_type>' lvalue implicit this
| | | | |   `-CallExpr 0x1c455f89620 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]'
| | | | |     |-ImplicitCastExpr 0x1c455f89608 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| | | | |     | `-DeclRefExpr 0x1c455f895e8 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f894a8 '__builtin_hlsl_resource_handlefromimplicitbinding' 'void (...) noexcept'
| | | | |     |-MemberExpr 0x1c455f89310 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f8e5d0
| | | | |     | `-CXXThisExpr 0x1c455f89300 <<invalid sloc>> 'RWBuffer<element_type>' lvalue implicit this
| | | | |     |-DeclRefExpr 0x1c455f89340 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f89048 'spaceNo' 'unsigned int'
| | | | |     |-DeclRefExpr 0x1c455f89378 <<invalid sloc>> 'int' ParmVar 0x1c455f890d0 'range' 'int'
| | | | |     |-DeclRefExpr 0x1c455f893b0 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f89158 'index' 'unsigned int'
| | | | |     |-DeclRefExpr 0x1c455f893e8 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f891e0 'orderId' 'unsigned int'
| | | | |     `-DeclRefExpr 0x1c455f89420 <<invalid sloc>> 'const char *' ParmVar 0x1c455f89268 'name' 'const char *'
| | | | `-AlwaysInlineAttr 0x1c455f89708 <<invalid sloc>> Implicit always_inline
| | | |-CXXMethodDecl 0x1c455f89910 <<invalid sloc>> <invalid sloc> operator[] 'const hlsl_device element_type &(unsigned int) const'
| | | | |-ParmVarDecl 0x1c455f899d0 <<invalid sloc>> <invalid sloc> Index 'unsigned int'
| | | | |-CompoundStmt 0x1c455f89d38 <<invalid sloc>>
| | | | | `-ReturnStmt 0x1c455f89d28 <<invalid sloc>>
| | | | |   `-UnaryOperator 0x1c455f89cf8 <<invalid sloc>> 'hlsl_device element_type' prefix '*' cannot overflow
| | | | |     `-CallExpr 0x1c455f89cc0 <<invalid sloc>> 'hlsl_device element_type *'
| | | | |       |-ImplicitCastExpr 0x1c455f89ca8 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| | | | |       | `-DeclRefExpr 0x1c455f89c88 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f89b48 '__builtin_hlsl_resource_getpointer' 'void (...) noexcept'
| | | | |       |-MemberExpr 0x1c455f89a90 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f8e5d0
| | | | |       | `-CXXThisExpr 0x1c455f89a80 <<invalid sloc>> 'const RWBuffer<element_type>' lvalue implicit this
| | | | |       `-DeclRefExpr 0x1c455f89ac0 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f899d0 'Index' 'unsigned int'
| | | | `-AlwaysInlineAttr 0x1c455f89d50 <<invalid sloc>> Implicit always_inline
| | | |-CXXMethodDecl 0x1c455f89eb0 <<invalid sloc>> <invalid sloc> operator[] 'hlsl_device element_type &(unsigned int)'
| | | | |-ParmVarDecl 0x1c455f89f70 <<invalid sloc>> <invalid sloc> Index 'unsigned int'
| | | | |-CompoundStmt 0x1c455f8a110 <<invalid sloc>>
| | | | | `-ReturnStmt 0x1c455f8a100 <<invalid sloc>>
| | | | |   `-UnaryOperator 0x1c455f8a0d0 <<invalid sloc>> 'hlsl_device element_type' prefix '*' cannot overflow
| | | | |     `-CallExpr 0x1c455f8a098 <<invalid sloc>> 'hlsl_device element_type *'
| | | | |       |-ImplicitCastExpr 0x1c455f8a080 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| | | | |       | `-DeclRefExpr 0x1c455f8a060 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f89b48 '__builtin_hlsl_resource_getpointer' 'void (...) noexcept'
| | | | |       |-MemberExpr 0x1c455f89ff8 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f8e5d0
| | | | |       | `-CXXThisExpr 0x1c455f89fe8 <<invalid sloc>> 'RWBuffer<element_type>' lvalue implicit this
| | | | |       `-DeclRefExpr 0x1c455f8a028 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f89f70 'Index' 'unsigned int'
| | | | `-AlwaysInlineAttr 0x1c455f8a128 <<invalid sloc>> Implicit always_inline
| | | `-CXXMethodDecl 0x1c455f8a230 <<invalid sloc>> <invalid sloc> Load 'element_type (unsigned int)'
| | |   |-ParmVarDecl 0x1c455f8a2f0 <<invalid sloc>> <invalid sloc> Index 'unsigned int'
| | |   |-CompoundStmt 0x1c455f8a490 <<invalid sloc>>
| | |   | `-ReturnStmt 0x1c455f8a480 <<invalid sloc>>
| | |   |   `-UnaryOperator 0x1c455f8a450 <<invalid sloc>> 'hlsl_device element_type' prefix '*' cannot overflow
| | |   |     `-CallExpr 0x1c455f8a418 <<invalid sloc>> 'hlsl_device element_type *'
| | |   |       |-ImplicitCastExpr 0x1c455f8a400 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| | |   |       | `-DeclRefExpr 0x1c455f8a3e0 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f89b48 '__builtin_hlsl_resource_getpointer' 'void (...) noexcept'
| | |   |       |-MemberExpr 0x1c455f8a378 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f8e5d0
| | |   |       | `-CXXThisExpr 0x1c455f8a368 <<invalid sloc>> 'RWBuffer<element_type>' lvalue implicit this
| | |   |       `-DeclRefExpr 0x1c455f8a3a8 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f8a2f0 'Index' 'unsigned int'
| | |   `-AlwaysInlineAttr 0x1c455f8a4a8 <<invalid sloc>> Implicit always_inline
| | `-ClassTemplateSpecializationDecl 0x1c455f8e230 <<invalid sloc>> <invalid sloc> class RWBuffer definition implicit_instantiation
| |   |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |   | |-DefaultConstructor exists non_trivial user_provided
| |   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial
| |   |-TemplateArgument type 'float'
| |   | `-BuiltinType 0x1c4559cca80 'float'
| |   |-FinalAttr 0x1c455f8a508 <<invalid sloc>> Implicit final
| |   |-FieldDecl 0x1c455f86480 <<invalid sloc>> <invalid sloc> implicit referenced __handle '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(float)]]'
| |   |-CXXConstructorDecl 0x1c455f86510 <<invalid sloc>> <invalid sloc> RWBuffer 'void ()' implicit_instantiation inline instantiated_from 0x1c455f8e660
| |   | `-AlwaysInlineAttr 0x1c455f865d0 <<invalid sloc>> Implicit always_inline
| |   |-CXXConstructorDecl 0x1c455f868e0 <<invalid sloc>> <invalid sloc> used RWBuffer 'void (unsigned int, unsigned int, int, unsigned int, const char *)' implicit_instantiation inline instantiated_from 0x1c455f886f0
| |   | |-ParmVarDecl 0x1c455f86648 <<invalid sloc>> <invalid sloc> used registerNo 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f866b8 <<invalid sloc>> <invalid sloc> used spaceNo 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f86728 <<invalid sloc>> <invalid sloc> used range 'int'
| |   | |-ParmVarDecl 0x1c455f86798 <<invalid sloc>> <invalid sloc> used index 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f86808 <<invalid sloc>> <invalid sloc> used name 'const char *'
| |   | |-CompoundStmt 0x1c455f90108 <<invalid sloc>>
| |   | | `-BinaryOperator 0x1c455f900e8 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(float)]]' lvalue '='
| |   | |   |-MemberExpr 0x1c455f8fe48 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(float)]]' lvalue .__handle 0x1c455f86480
| |   | |   | `-CXXThisExpr 0x1c455f8fe38 <<invalid sloc>> 'hlsl::RWBuffer<float>' lvalue implicit this
| |   | |   `-CallExpr 0x1c455f90000 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(float)]]'
| |   | |     |-ImplicitCastExpr 0x1c455f8ffe8 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |   | |     | `-DeclRefExpr 0x1c455f88d58 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f88c18 '__builtin_hlsl_resource_handlefrombinding' 'void (...) noexcept'
| |   | |     |-ImplicitCastExpr 0x1c455f90058 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(float)]]' <LValueToRValue>
| |   | |     | `-MemberExpr 0x1c455f8fea0 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(float)]]' lvalue .__handle 0x1c455f86480
| |   | |     |   `-CXXThisExpr 0x1c455f8fe90 <<invalid sloc>> 'hlsl::RWBuffer<float>' lvalue implicit this
| |   | |     |-ImplicitCastExpr 0x1c455f90070 <<invalid sloc>> 'unsigned int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f8fed0 <<invalid sloc>> 'unsigned int' lvalue ParmVar 0x1c455f86648 'registerNo' 'unsigned int'
| |   | |     |-ImplicitCastExpr 0x1c455f90088 <<invalid sloc>> 'unsigned int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f8ff08 <<invalid sloc>> 'unsigned int' lvalue ParmVar 0x1c455f866b8 'spaceNo' 'unsigned int'
| |   | |     |-ImplicitCastExpr 0x1c455f900a0 <<invalid sloc>> 'int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f8ff40 <<invalid sloc>> 'int' lvalue ParmVar 0x1c455f86728 'range' 'int'
| |   | |     |-ImplicitCastExpr 0x1c455f900b8 <<invalid sloc>> 'unsigned int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f8ff78 <<invalid sloc>> 'unsigned int' lvalue ParmVar 0x1c455f86798 'index' 'unsigned int'
| |   | |     `-ImplicitCastExpr 0x1c455f900d0 <<invalid sloc>> 'const char *' <LValueToRValue>
| |   | |       `-DeclRefExpr 0x1c455f8ffb0 <<invalid sloc>> 'const char *' lvalue ParmVar 0x1c455f86808 'name' 'const char *'
| |   | `-AlwaysInlineAttr 0x1c455f869c8 <<invalid sloc>> Implicit always_inline
| |   |-CXXConstructorDecl 0x1c455f86ce8 <<invalid sloc>> <invalid sloc> used RWBuffer 'void (unsigned int, int, unsigned int, unsigned int, const char *)' implicit_instantiation inline instantiated_from 0x1c455f88f80
| |   | |-ParmVarDecl 0x1c455f86a50 <<invalid sloc>> <invalid sloc> used spaceNo 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f86ac0 <<invalid sloc>> <invalid sloc> used range 'int'
| |   | |-ParmVarDecl 0x1c455f86b30 <<invalid sloc>> <invalid sloc> used index 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f86ba0 <<invalid sloc>> <invalid sloc> used orderId 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f86c10 <<invalid sloc>> <invalid sloc> used name 'const char *'
| |   | |-CompoundStmt 0x1c455f903f0 <<invalid sloc>>
| |   | | `-BinaryOperator 0x1c455f903d0 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(float)]]' lvalue '='
| |   | |   |-MemberExpr 0x1c455f90130 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(float)]]' lvalue .__handle 0x1c455f86480
| |   | |   | `-CXXThisExpr 0x1c455f90120 <<invalid sloc>> 'hlsl::RWBuffer<float>' lvalue implicit this
| |   | |   `-CallExpr 0x1c455f902e8 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(float)]]'
| |   | |     |-ImplicitCastExpr 0x1c455f902d0 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |   | |     | `-DeclRefExpr 0x1c455f895e8 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f894a8 '__builtin_hlsl_resource_handlefromimplicitbinding' 'void (...) noexcept'
| |   | |     |-ImplicitCastExpr 0x1c455f90340 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(float)]]' <LValueToRValue>
| |   | |     | `-MemberExpr 0x1c455f90188 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(UAV)]] [[hlsl::contained_type(float)]]' lvalue .__handle 0x1c455f86480
| |   | |     |   `-CXXThisExpr 0x1c455f90178 <<invalid sloc>> 'hlsl::RWBuffer<float>' lvalue implicit this
| |   | |     |-ImplicitCastExpr 0x1c455f90358 <<invalid sloc>> 'unsigned int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f901b8 <<invalid sloc>> 'unsigned int' lvalue ParmVar 0x1c455f86a50 'spaceNo' 'unsigned int'
| |   | |     |-ImplicitCastExpr 0x1c455f90370 <<invalid sloc>> 'int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f901f0 <<invalid sloc>> 'int' lvalue ParmVar 0x1c455f86ac0 'range' 'int'
| |   | |     |-ImplicitCastExpr 0x1c455f90388 <<invalid sloc>> 'unsigned int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f90228 <<invalid sloc>> 'unsigned int' lvalue ParmVar 0x1c455f86b30 'index' 'unsigned int'
| |   | |     |-ImplicitCastExpr 0x1c455f903a0 <<invalid sloc>> 'unsigned int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f90260 <<invalid sloc>> 'unsigned int' lvalue ParmVar 0x1c455f86ba0 'orderId' 'unsigned int'
| |   | |     `-ImplicitCastExpr 0x1c455f903b8 <<invalid sloc>> 'const char *' <LValueToRValue>
| |   | |       `-DeclRefExpr 0x1c455f90298 <<invalid sloc>> 'const char *' lvalue ParmVar 0x1c455f86c10 'name' 'const char *'
| |   | `-AlwaysInlineAttr 0x1c455f86dd0 <<invalid sloc>> Implicit always_inline
| |   |-CXXMethodDecl 0x1c455f87010 <<invalid sloc>> <invalid sloc> operator[] 'const hlsl_device float &(unsigned int) const' implicit_instantiation instantiated_from 0x1c455f89910
| |   | |-ParmVarDecl 0x1c455f86f00 <<invalid sloc>> <invalid sloc> Index 'unsigned int'
| |   | `-AlwaysInlineAttr 0x1c455f870d0 <<invalid sloc>> Implicit always_inline
| |   |-CXXMethodDecl 0x1c455f872a0 <<invalid sloc>> <invalid sloc> operator[] 'hlsl_device float &(unsigned int)' implicit_instantiation instantiated_from 0x1c455f89eb0
| |   | |-ParmVarDecl 0x1c455f87190 <<invalid sloc>> <invalid sloc> Index 'unsigned int'
| |   | `-AlwaysInlineAttr 0x1c455f87360 <<invalid sloc>> Implicit always_inline
| |   |-CXXMethodDecl 0x1c455f87500 <<invalid sloc>> <invalid sloc> Load 'float (unsigned int)' implicit_instantiation instantiated_from 0x1c455f8a230
| |   | |-ParmVarDecl 0x1c455f87430 <<invalid sloc>> <invalid sloc> Index 'unsigned int'
| |   | `-AlwaysInlineAttr 0x1c455f875c0 <<invalid sloc>> Implicit always_inline
| |   |-CXXConstructorDecl 0x1c455f878e0 <<invalid sloc>> <invalid sloc> implicit constexpr RWBuffer 'void (const RWBuffer<float> &)' inline default trivial noexcept-unevaluated 0x1c455f878e0
| |   | `-ParmVarDecl 0x1c455f87a10 <<invalid sloc>> <invalid sloc> 'const RWBuffer<float> &'
| |   |-CXXConstructorDecl 0x1c455f87b00 <<invalid sloc>> <invalid sloc> implicit constexpr RWBuffer 'void (RWBuffer<float> &&)' inline default trivial noexcept-unevaluated 0x1c455f87b00
| |   | `-ParmVarDecl 0x1c455f87c30 <<invalid sloc>> <invalid sloc> 'RWBuffer<float> &&'
| |   `-CXXDestructorDecl 0x1c455f95d80 <<invalid sloc>> <invalid sloc> implicit referenced ~RWBuffer 'void () noexcept' inline default trivial
| |-ClassTemplateDecl 0x1c455ce4e70 <<invalid sloc>> <invalid sloc> implicit RasterizerOrderedBuffer
| | |-TemplateTypeParmDecl 0x1c455ce4c38 <<invalid sloc>> <invalid sloc> typename depth 0 index 0 element_type
| | |-ConceptSpecializationExpr 0x1c455ce4e10 <<invalid sloc>> 'bool' Concept 0x1c4559cd818 '__is_structured_resource_element_compatible'
| | | |-ImplicitConceptSpecializationDecl 0x1c455ce4d40 <<invalid sloc>> <invalid sloc>
| | | | `-TemplateArgument type 'type-parameter-0-0'
| | | |   `-TemplateTypeParmType 0x1c455ce4d10 'type-parameter-0-0' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1c455ce4cc0 depth 0 index 0
| | | `-TemplateArgument type 'element_type':'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0x1c4559cd6d0 'element_type' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0x1c4559cd678 'element_type'
| | `-CXXRecordDecl 0x1c455ce4b30 <<invalid sloc>> <invalid sloc> implicit <undeserialized declarations> class RasterizerOrderedBuffer
| |   `-FinalAttr 0x1c455ce4bd8 <<invalid sloc>> Implicit final
| |-ClassTemplateDecl 0x1c455cebb60 <<invalid sloc>> <invalid sloc> implicit StructuredBuffer
| | |-TemplateTypeParmDecl 0x1c455ceb928 <<invalid sloc>> <invalid sloc> typename depth 0 index 0 element_type
| | |-ConceptSpecializationExpr 0x1c455cebb00 <<invalid sloc>> 'bool' Concept 0x1c4559cd818 '__is_structured_resource_element_compatible'
| | | |-ImplicitConceptSpecializationDecl 0x1c455ceba30 <<invalid sloc>> <invalid sloc>
| | | | `-TemplateArgument type 'type-parameter-0-0'
| | | |   `-TemplateTypeParmType 0x1c455ceba00 'type-parameter-0-0' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1c455ceb9b0 depth 0 index 0
| | | `-TemplateArgument type 'element_type':'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0x1c4559cd6d0 'element_type' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0x1c4559cd678 'element_type'
| | |-CXXRecordDecl 0x1c455ceb820 <<invalid sloc>> <invalid sloc> implicit class StructuredBuffer definition
| | | |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | | | |-DefaultConstructor exists non_trivial user_provided
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-FinalAttr 0x1c455ceb8c8 <<invalid sloc>> Implicit final
| | | |-FieldDecl 0x1c455f93150 <<invalid sloc>> <invalid sloc> implicit __handle '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]'
| | | |-CXXConstructorDecl 0x1c455f931e0 <<invalid sloc>> <invalid sloc> StructuredBuffer<element_type> 'void ()' inline
| | | | |-CompoundStmt 0x1c455f933e0 <<invalid sloc>>
| | | | | `-BinaryOperator 0x1c455f933a8 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]' '='
| | | | |   |-MemberExpr 0x1c455f93378 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f93150
| | | | |   | `-CXXThisExpr 0x1c455f93368 <<invalid sloc>> 'StructuredBuffer<element_type>' lvalue implicit this
| | | | |   `-CallExpr 0x1c455f93338 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]'
| | | | |     |-ImplicitCastExpr 0x1c455f93320 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| | | | |     | `-DeclRefExpr 0x1c455f93300 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f8e7d0 '__builtin_hlsl_resource_uninitializedhandle' 'void (...) noexcept'
| | | | |     `-MemberExpr 0x1c455f932d0 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f93150
| | | | |       `-CXXThisExpr 0x1c455f932c0 <<invalid sloc>> 'StructuredBuffer<element_type>' lvalue implicit this
| | | | `-AlwaysInlineAttr 0x1c455f933f8 <<invalid sloc>> Implicit always_inline
| | | |-CXXConstructorDecl 0x1c455f934a0 <<invalid sloc>> <invalid sloc> StructuredBuffer<element_type> 'void (unsigned int, unsigned int, int, unsigned int, const char *)' inline
| | | | |-ParmVarDecl 0x1c455f93568 <<invalid sloc>> <invalid sloc> registerNo 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f935f0 <<invalid sloc>> <invalid sloc> spaceNo 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f93678 <<invalid sloc>> <invalid sloc> range 'int'
| | | | |-ParmVarDecl 0x1c455f93700 <<invalid sloc>> <invalid sloc> index 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f93788 <<invalid sloc>> <invalid sloc> name 'const char *'
| | | | |-CompoundStmt 0x1c455f93a80 <<invalid sloc>>
| | | | | `-BinaryOperator 0x1c455f93a48 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]' '='
| | | | |   |-MemberExpr 0x1c455f93a18 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f93150
| | | | |   | `-CXXThisExpr 0x1c455f93a08 <<invalid sloc>> 'StructuredBuffer<element_type>' lvalue implicit this
| | | | |   `-CallExpr 0x1c455f939b0 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]'
| | | | |     |-ImplicitCastExpr 0x1c455f93998 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| | | | |     | `-DeclRefExpr 0x1c455f93978 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f88c18 '__builtin_hlsl_resource_handlefrombinding' 'void (...) noexcept'
| | | | |     |-MemberExpr 0x1c455f93830 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f93150
| | | | |     | `-CXXThisExpr 0x1c455f93820 <<invalid sloc>> 'StructuredBuffer<element_type>' lvalue implicit this
| | | | |     |-DeclRefExpr 0x1c455f93860 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f93568 'registerNo' 'unsigned int'
| | | | |     |-DeclRefExpr 0x1c455f93898 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f935f0 'spaceNo' 'unsigned int'
| | | | |     |-DeclRefExpr 0x1c455f938d0 <<invalid sloc>> 'int' ParmVar 0x1c455f93678 'range' 'int'
| | | | |     |-DeclRefExpr 0x1c455f93908 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f93700 'index' 'unsigned int'
| | | | |     `-DeclRefExpr 0x1c455f93940 <<invalid sloc>> 'const char *' ParmVar 0x1c455f93788 'name' 'const char *'
| | | | `-AlwaysInlineAttr 0x1c455f93a98 <<invalid sloc>> Implicit always_inline
| | | |-CXXConstructorDecl 0x1c455f93b40 <<invalid sloc>> <invalid sloc> StructuredBuffer<element_type> 'void (unsigned int, int, unsigned int, unsigned int, const char *)' inline
| | | | |-ParmVarDecl 0x1c455f93c08 <<invalid sloc>> <invalid sloc> spaceNo 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f93c90 <<invalid sloc>> <invalid sloc> range 'int'
| | | | |-ParmVarDecl 0x1c455f93d18 <<invalid sloc>> <invalid sloc> index 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f93da0 <<invalid sloc>> <invalid sloc> orderId 'unsigned int'
| | | | |-ParmVarDecl 0x1c455f93e28 <<invalid sloc>> <invalid sloc> name 'const char *'
| | | | |-CompoundStmt 0x1c455f94120 <<invalid sloc>>
| | | | | `-BinaryOperator 0x1c455f940e8 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]' '='
| | | | |   |-MemberExpr 0x1c455f940b8 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f93150
| | | | |   | `-CXXThisExpr 0x1c455f940a8 <<invalid sloc>> 'StructuredBuffer<element_type>' lvalue implicit this
| | | | |   `-CallExpr 0x1c455f94050 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]'
| | | | |     |-ImplicitCastExpr 0x1c455f94038 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| | | | |     | `-DeclRefExpr 0x1c455f94018 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f894a8 '__builtin_hlsl_resource_handlefromimplicitbinding' 'void (...) noexcept'
| | | | |     |-MemberExpr 0x1c455f93ed0 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f93150
| | | | |     | `-CXXThisExpr 0x1c455f93ec0 <<invalid sloc>> 'StructuredBuffer<element_type>' lvalue implicit this
| | | | |     |-DeclRefExpr 0x1c455f93f00 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f93c08 'spaceNo' 'unsigned int'
| | | | |     |-DeclRefExpr 0x1c455f93f38 <<invalid sloc>> 'int' ParmVar 0x1c455f93c90 'range' 'int'
| | | | |     |-DeclRefExpr 0x1c455f93f70 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f93d18 'index' 'unsigned int'
| | | | |     |-DeclRefExpr 0x1c455f93fa8 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f93da0 'orderId' 'unsigned int'
| | | | |     `-DeclRefExpr 0x1c455f93fe0 <<invalid sloc>> 'const char *' ParmVar 0x1c455f93e28 'name' 'const char *'
| | | | `-AlwaysInlineAttr 0x1c455f94138 <<invalid sloc>> Implicit always_inline
| | | |-CXXMethodDecl 0x1c455f94280 <<invalid sloc>> <invalid sloc> operator[] 'const hlsl_device element_type &(unsigned int) const'
| | | | |-ParmVarDecl 0x1c455f94340 <<invalid sloc>> <invalid sloc> Index 'unsigned int'
| | | | |-CompoundStmt 0x1c455f94518 <<invalid sloc>>
| | | | | `-ReturnStmt 0x1c455f94508 <<invalid sloc>>
| | | | |   `-UnaryOperator 0x1c455f944d8 <<invalid sloc>> 'hlsl_device element_type' prefix '*' cannot overflow
| | | | |     `-CallExpr 0x1c455f944a0 <<invalid sloc>> 'hlsl_device element_type *'
| | | | |       |-ImplicitCastExpr 0x1c455f94488 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| | | | |       | `-DeclRefExpr 0x1c455f94468 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f89b48 '__builtin_hlsl_resource_getpointer' 'void (...) noexcept'
| | | | |       |-MemberExpr 0x1c455f94400 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f93150
| | | | |       | `-CXXThisExpr 0x1c455f943f0 <<invalid sloc>> 'const StructuredBuffer<element_type>' lvalue implicit this
| | | | |       `-DeclRefExpr 0x1c455f94430 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f94340 'Index' 'unsigned int'
| | | | `-AlwaysInlineAttr 0x1c455f94530 <<invalid sloc>> Implicit always_inline
| | | `-CXXMethodDecl 0x1c455f945f0 <<invalid sloc>> <invalid sloc> Load 'element_type (unsigned int)'
| | |   |-ParmVarDecl 0x1c455f946b0 <<invalid sloc>> <invalid sloc> Index 'unsigned int'
| | |   |-CompoundStmt 0x1c455f94850 <<invalid sloc>>
| | |   | `-ReturnStmt 0x1c455f94840 <<invalid sloc>>
| | |   |   `-UnaryOperator 0x1c455f94810 <<invalid sloc>> 'hlsl_device element_type' prefix '*' cannot overflow
| | |   |     `-CallExpr 0x1c455f947d8 <<invalid sloc>> 'hlsl_device element_type *'
| | |   |       |-ImplicitCastExpr 0x1c455f947c0 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| | |   |       | `-DeclRefExpr 0x1c455f947a0 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f89b48 '__builtin_hlsl_resource_getpointer' 'void (...) noexcept'
| | |   |       |-MemberExpr 0x1c455f94738 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(element_type)]]' lvalue .__handle 0x1c455f93150
| | |   |       | `-CXXThisExpr 0x1c455f94728 <<invalid sloc>> 'StructuredBuffer<element_type>' lvalue implicit this
| | |   |       `-DeclRefExpr 0x1c455f94768 <<invalid sloc>> 'unsigned int' ParmVar 0x1c455f946b0 'Index' 'unsigned int'
| | |   `-AlwaysInlineAttr 0x1c455f94868 <<invalid sloc>> Implicit always_inline
| | `-ClassTemplateSpecializationDecl 0x1c455f96eb8 <<invalid sloc>> <invalid sloc> class StructuredBuffer definition implicit_instantiation
| |   |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |   | |-DefaultConstructor exists non_trivial user_provided
| |   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |   | |-MoveConstructor exists simple trivial
| |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| |   | |-MoveAssignment exists simple trivial needs_implicit
| |   | `-Destructor simple irrelevant trivial
| |   |-TemplateArgument type 'float'
| |   | `-BuiltinType 0x1c4559cca80 'float'
| |   |-FinalAttr 0x1c455f948c8 <<invalid sloc>> Implicit final
| |   |-FieldDecl 0x1c455f94a40 <<invalid sloc>> <invalid sloc> implicit referenced __handle '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(float)]]'
| |   |-CXXConstructorDecl 0x1c455f94ad0 <<invalid sloc>> <invalid sloc> StructuredBuffer 'void ()' implicit_instantiation inline instantiated_from 0x1c455f931e0
| |   | `-AlwaysInlineAttr 0x1c455f94b90 <<invalid sloc>> Implicit always_inline
| |   |-CXXConstructorDecl 0x1c455f94ea0 <<invalid sloc>> <invalid sloc> StructuredBuffer 'void (unsigned int, unsigned int, int, unsigned int, const char *)' implicit_instantiation inline instantiated_from 0x1c455f934a0
| |   | |-ParmVarDecl 0x1c455f94c08 <<invalid sloc>> <invalid sloc> registerNo 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f94c78 <<invalid sloc>> <invalid sloc> spaceNo 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f94ce8 <<invalid sloc>> <invalid sloc> range 'int'
| |   | |-ParmVarDecl 0x1c455f94d58 <<invalid sloc>> <invalid sloc> index 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f94dc8 <<invalid sloc>> <invalid sloc> name 'const char *'
| |   | `-AlwaysInlineAttr 0x1c455f94f88 <<invalid sloc>> Implicit always_inline
| |   |-CXXConstructorDecl 0x1c455f8eeb8 <<invalid sloc>> <invalid sloc> used StructuredBuffer 'void (unsigned int, int, unsigned int, unsigned int, const char *)' implicit_instantiation inline instantiated_from 0x1c455f93b40
| |   | |-ParmVarDecl 0x1c455f8ec20 <<invalid sloc>> <invalid sloc> used spaceNo 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f8ec90 <<invalid sloc>> <invalid sloc> used range 'int'
| |   | |-ParmVarDecl 0x1c455f8ed00 <<invalid sloc>> <invalid sloc> used index 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f8ed70 <<invalid sloc>> <invalid sloc> used orderId 'unsigned int'
| |   | |-ParmVarDecl 0x1c455f8ede0 <<invalid sloc>> <invalid sloc> used name 'const char *'
| |   | |-CompoundStmt 0x1c455f906c0 <<invalid sloc>>
| |   | | `-BinaryOperator 0x1c455f906a0 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(float)]]' lvalue '='
| |   | |   |-MemberExpr 0x1c455f90418 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(float)]]' lvalue .__handle 0x1c455f94a40
| |   | |   | `-CXXThisExpr 0x1c455f90408 <<invalid sloc>> 'hlsl::StructuredBuffer<float>' lvalue implicit this
| |   | |   `-CallExpr 0x1c455f905b8 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(float)]]'
| |   | |     |-ImplicitCastExpr 0x1c455f905a0 <<invalid sloc>> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |   | |     | `-DeclRefExpr 0x1c455f94018 <<invalid sloc>> '<builtin fn type>' Function 0x1c455f894a8 '__builtin_hlsl_resource_handlefromimplicitbinding' 'void (...) noexcept'
| |   | |     |-ImplicitCastExpr 0x1c455f90610 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(float)]]' <LValueToRValue>
| |   | |     | `-MemberExpr 0x1c455f90458 <<invalid sloc>> '__hlsl_resource_t [[hlsl::resource_class(SRV)]] [[hlsl::raw_buffer]] [[hlsl::contained_type(float)]]' lvalue .__handle 0x1c455f94a40
| |   | |     |   `-CXXThisExpr 0x1c455f90448 <<invalid sloc>> 'hlsl::StructuredBuffer<float>' lvalue implicit this
| |   | |     |-ImplicitCastExpr 0x1c455f90628 <<invalid sloc>> 'unsigned int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f90488 <<invalid sloc>> 'unsigned int' lvalue ParmVar 0x1c455f8ec20 'spaceNo' 'unsigned int'
| |   | |     |-ImplicitCastExpr 0x1c455f90640 <<invalid sloc>> 'int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f904c0 <<invalid sloc>> 'int' lvalue ParmVar 0x1c455f8ec90 'range' 'int'
| |   | |     |-ImplicitCastExpr 0x1c455f90658 <<invalid sloc>> 'unsigned int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f904f8 <<invalid sloc>> 'unsigned int' lvalue ParmVar 0x1c455f8ed00 'index' 'unsigned int'
| |   | |     |-ImplicitCastExpr 0x1c455f90670 <<invalid sloc>> 'unsigned int' <LValueToRValue>
| |   | |     | `-DeclRefExpr 0x1c455f90530 <<invalid sloc>> 'unsigned int' lvalue ParmVar 0x1c455f8ed70 'orderId' 'unsigned int'
| |   | |     `-ImplicitCastExpr 0x1c455f90688 <<invalid sloc>> 'const char *' <LValueToRValue>
| |   | |       `-DeclRefExpr 0x1c455f90568 <<invalid sloc>> 'const char *' lvalue ParmVar 0x1c455f8ede0 'name' 'const char *'
| |   | `-AlwaysInlineAttr 0x1c455f8efa0 <<invalid sloc>> Implicit always_inline
| |   |-CXXMethodDecl 0x1c455f8f150 <<invalid sloc>> <invalid sloc> operator[] 'const hlsl_device float &(unsigned int) const' implicit_instantiation instantiated_from 0x1c455f94280
| |   | |-ParmVarDecl 0x1c455f8f080 <<invalid sloc>> <invalid sloc> Index 'unsigned int'
| |   | `-AlwaysInlineAttr 0x1c455f8f210 <<invalid sloc>> Implicit always_inline
| |   |-CXXMethodDecl 0x1c455f8f340 <<invalid sloc>> <invalid sloc> Load 'float (unsigned int)' implicit_instantiation instantiated_from 0x1c455f945f0
| |   | |-ParmVarDecl 0x1c455f8f270 <<invalid sloc>> <invalid sloc> Index 'unsigned int'
| |   | `-AlwaysInlineAttr 0x1c455f8f400 <<invalid sloc>> Implicit always_inline
| |   |-CXXConstructorDecl 0x1c455f8f730 <<invalid sloc>> <invalid sloc> implicit constexpr StructuredBuffer 'void (const StructuredBuffer<float> &)' inline default trivial noexcept-unevaluated 0x1c455f8f730
| |   | `-ParmVarDecl 0x1c455f8f860 <<invalid sloc>> <invalid sloc> 'const StructuredBuffer<float> &'
| |   |-CXXConstructorDecl 0x1c455f8f950 <<invalid sloc>> <invalid sloc> implicit constexpr StructuredBuffer 'void (StructuredBuffer<float> &&)' inline default trivial noexcept-unevaluated 0x1c455f8f950
| |   | `-ParmVarDecl 0x1c455f8fa80 <<invalid sloc>> <invalid sloc> 'StructuredBuffer<float> &&'
| |   `-CXXDestructorDecl 0x1c455f8fd18 <<invalid sloc>> <invalid sloc> implicit referenced ~StructuredBuffer 'void () noexcept' inline default trivial
| |-ClassTemplateDecl 0x1c455cec0e0 <<invalid sloc>> <invalid sloc> implicit RWStructuredBuffer
| | |-TemplateTypeParmDecl 0x1c455cebea8 <<invalid sloc>> <invalid sloc> typename depth 0 index 0 element_type
| | |-ConceptSpecializationExpr 0x1c455cec080 <<invalid sloc>> 'bool' Concept 0x1c4559cd818 '__is_structured_resource_element_compatible'
| | | |-ImplicitConceptSpecializationDecl 0x1c455cebfb0 <<invalid sloc>> <invalid sloc>
| | | | `-TemplateArgument type 'type-parameter-0-0'
| | | |   `-TemplateTypeParmType 0x1c455cebf80 'type-parameter-0-0' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1c455cebf30 depth 0 index 0
| | | `-TemplateArgument type 'element_type':'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0x1c4559cd6d0 'element_type' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0x1c4559cd678 'element_type'
| | `-CXXRecordDecl 0x1c455cebda0 <<invalid sloc>> <invalid sloc> implicit <undeserialized declarations> class RWStructuredBuffer
| |   `-FinalAttr 0x1c455cebe48 <<invalid sloc>> Implicit final
| |-ClassTemplateDecl 0x1c455cec660 <<invalid sloc>> <invalid sloc> implicit AppendStructuredBuffer
| | |-TemplateTypeParmDecl 0x1c455cec428 <<invalid sloc>> <invalid sloc> typename depth 0 index 0 element_type
| | |-ConceptSpecializationExpr 0x1c455cec600 <<invalid sloc>> 'bool' Concept 0x1c4559cd818 '__is_structured_resource_element_compatible'
| | | |-ImplicitConceptSpecializationDecl 0x1c455cec530 <<invalid sloc>> <invalid sloc>
| | | | `-TemplateArgument type 'type-parameter-0-0'
| | | |   `-TemplateTypeParmType 0x1c455cec500 'type-parameter-0-0' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1c455cec4b0 depth 0 index 0
| | | `-TemplateArgument type 'element_type':'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0x1c4559cd6d0 'element_type' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0x1c4559cd678 'element_type'
| | `-CXXRecordDecl 0x1c455cec320 <<invalid sloc>> <invalid sloc> implicit <undeserialized declarations> class AppendStructuredBuffer
| |   `-FinalAttr 0x1c455cec3c8 <<invalid sloc>> Implicit final
| |-ClassTemplateDecl 0x1c455ce99c0 <<invalid sloc>> <invalid sloc> implicit ConsumeStructuredBuffer
| | |-TemplateTypeParmDecl 0x1c455ce9788 <<invalid sloc>> <invalid sloc> typename depth 0 index 0 element_type
| | |-ConceptSpecializationExpr 0x1c455ce9960 <<invalid sloc>> 'bool' Concept 0x1c4559cd818 '__is_structured_resource_element_compatible'
| | | |-ImplicitConceptSpecializationDecl 0x1c455ce9890 <<invalid sloc>> <invalid sloc>
| | | | `-TemplateArgument type 'type-parameter-0-0'
| | | |   `-TemplateTypeParmType 0x1c455ce9860 'type-parameter-0-0' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1c455ce9810 depth 0 index 0
| | | `-TemplateArgument type 'element_type':'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0x1c4559cd6d0 'element_type' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0x1c4559cd678 'element_type'
| | `-CXXRecordDecl 0x1c455ce9680 <<invalid sloc>> <invalid sloc> implicit <undeserialized declarations> class ConsumeStructuredBuffer
| |   `-FinalAttr 0x1c455ce9728 <<invalid sloc>> Implicit final
| |-ClassTemplateDecl 0x1c455ce9f40 <<invalid sloc>> <invalid sloc> implicit RasterizerOrderedStructuredBuffer
| | |-TemplateTypeParmDecl 0x1c455ce9d08 <<invalid sloc>> <invalid sloc> typename depth 0 index 0 element_type
| | |-ConceptSpecializationExpr 0x1c455ce9ee0 <<invalid sloc>> 'bool' Concept 0x1c4559cd818 '__is_structured_resource_element_compatible'
| | | |-ImplicitConceptSpecializationDecl 0x1c455ce9e10 <<invalid sloc>> <invalid sloc>
| | | | `-TemplateArgument type 'type-parameter-0-0'
| | | |   `-TemplateTypeParmType 0x1c455ce9de0 'type-parameter-0-0' dependent depth 0 index 0
| | | |     `-TemplateTypeParm 0x1c455ce9d90 depth 0 index 0
| | | `-TemplateArgument type 'element_type':'type-parameter-0-0'
| | |   `-TemplateTypeParmType 0x1c4559cd6d0 'element_type' dependent depth 0 index 0
| | |     `-TemplateTypeParm 0x1c4559cd678 'element_type'
| | `-CXXRecordDecl 0x1c455ce9c00 <<invalid sloc>> <invalid sloc> implicit <undeserialized declarations> class RasterizerOrderedStructuredBuffer
| |   `-FinalAttr 0x1c455ce9ca8 <<invalid sloc>> Implicit final
| |-CXXRecordDecl 0x1c455cea180 <<invalid sloc>> <invalid sloc> implicit <undeserialized declarations> class ByteAddressBuffer
| | `-FinalAttr 0x1c455cea228 <<invalid sloc>> Implicit final
| |-CXXRecordDecl 0x1c455cea2b0 <<invalid sloc>> <invalid sloc> implicit <undeserialized declarations> class RWByteAddressBuffer
| | `-FinalAttr 0x1c455cea358 <<invalid sloc>> Implicit final
| `-CXXRecordDecl 0x1c455cea3e0 <<invalid sloc>> <invalid sloc> implicit <undeserialized declarations> class RasterizerOrderedByteAddressBuffer
|   `-FinalAttr 0x1c455cea488 <<invalid sloc>> Implicit final
|-ConceptDecl 0x1c4559cd630 <<invalid sloc>> <invalid sloc> __is_typed_resource_element_compatible
| |-TemplateTypeParmDecl 0x1c4559cd558 <<invalid sloc>> <invalid sloc> referenced typename depth 0 index 0 element_type
| `-TypeTraitExpr 0x1c4559cd610 <<invalid sloc>> 'bool' __builtin_hlsl_is_typed_resource_element_compatible
|   `-TemplateTypeParmType 0x1c4559cd5b0 'element_type' dependent depth 0 index 0
|     `-TemplateTypeParm 0x1c4559cd558 'element_type'
|-ConceptDecl 0x1c4559cd818 <<invalid sloc>> <invalid sloc> __is_structured_resource_element_compatible
| |-TemplateTypeParmDecl 0x1c4559cd678 <<invalid sloc>> <invalid sloc> referenced typename depth 0 index 0 element_type
| `-BinaryOperator 0x1c4559cd7f8 <<invalid sloc>> 'bool' lvalue '&&'
|   |-UnaryOperator 0x1c4559cd750 <<invalid sloc>> 'bool' lvalue prefix '!' cannot overflow
|   | `-TypeTraitExpr 0x1c4559cd730 <<invalid sloc>> 'bool' __builtin_hlsl_is_intangible
|   |   `-TemplateTypeParmType 0x1c4559cd6d0 'element_type' dependent depth 0 index 0
|   |     `-TemplateTypeParm 0x1c4559cd678 'element_type'
|   `-BinaryOperator 0x1c4559cd7d8 <<invalid sloc>> 'bool' lvalue '>='
|     |-UnaryExprOrTypeTraitExpr 0x1c4559cd768 <<invalid sloc>> 'bool' sizeof 'element_type'
|     `-IntegerLiteral 0x1c4559cd7b0 <<invalid sloc>> '__size_t':'unsigned long' 1
|-UsingDirectiveDecl 0x1c455cea510 <<invalid sloc>> <invalid sloc> Namespace 0x1c4559cd198 'hlsl'
|-TypedefDecl 0x1c455ceaa00 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x1c455cea740 '__NSConstantString_tag'
|   `-CXXRecord 0x1c455cea690 '__NSConstantString_tag'
|-TypedefDecl 0x1c4559cd140 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'void *'
| `-PointerType 0x1c4559cd080 'void *'
|   `-BuiltinType 0x1c4559cc8e0 'void'
|-NamespaceDecl 0x1c455ceaa58 prev 0x1c4559cd198 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_basic_types.h:12:1, line:118:1> line:12:11 hlsl
| |-original Namespace 0x1c4559cd198 'hlsl'
| |-TypedefDecl 0x1c455ceaae0 <line:32:1, col:13> col:13 referenced int32_t 'int'
| | `-BuiltinType 0x1c4559cc980 'int'
| |-TypedefDecl 0x1c455ceab50 <line:35:1, col:22> col:22 referenced uint 'unsigned int'
| | `-BuiltinType 0x1c4559cca20 'unsigned int'
| |-TypedefDecl 0x1c455ceabc0 <line:36:1, col:22> col:22 referenced uint32_t 'unsigned int'
| | `-BuiltinType 0x1c4559cca20 'unsigned int'
| |-TypedefDecl 0x1c455ceac30 <line:39:1, col:15> col:15 referenced float32_t 'float'
| | `-BuiltinType 0x1c4559cca80 'float'
| |-TypedefDecl 0x1c455ceaca0 <line:42:1, col:23> col:23 referenced uint64_t 'unsigned long'
| | `-BuiltinType 0x1c4559cca40 'unsigned long'
| |-TypedefDecl 0x1c455cead10 <line:43:1, col:14> col:14 referenced int64_t 'long'
| | `-BuiltinType 0x1c4559cc9a0 'long'
| |-TypedefDecl 0x1c455cead80 <line:46:1, col:16> col:16 referenced float64_t 'double'
| | `-BuiltinType 0x1c4559ccaa0 'double'
| |-TypedefDecl 0x1c455ceb060 <line:60:1, col:25> col:25 bool1 'vector<bool, 1>'
| | `-ElaboratedType 0x1c455ceafd0 'vector<bool, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455ceaf60 'vector<bool, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'bool'
| |     | `-BuiltinType 0x1c4559cc900 'bool'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455ceae40 <col:22> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455ceae00 <col:22> 'int' 1
| |     `-ExtVectorType 0x1c455ceaf20 'vector<bool, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455ceae70 'bool' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cc900 'bool'
| |-TypedefDecl 0x1c455ceb2e0 <line:61:1, col:25> col:25 referenced bool2 'vector<bool, 2>'
| | `-ElaboratedType 0x1c455ceb250 'vector<bool, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455ceb1e0 'vector<bool, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'bool'
| |     | `-BuiltinType 0x1c4559cc900 'bool'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455ceb0f0 <col:22> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455ceb0c8 <col:22> 'int' 2
| |     `-ExtVectorType 0x1c455ceb1a0 'vector<bool, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455ceae70 'bool' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cc900 'bool'
| |-TypedefDecl 0x1c455ceb560 <line:62:1, col:25> col:25 referenced bool3 'vector<bool, 3>'
| | `-ElaboratedType 0x1c455ceb4d0 'vector<bool, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455ceb460 'vector<bool, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'bool'
| |     | `-BuiltinType 0x1c4559cc900 'bool'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455ceb370 <col:22> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455ceb348 <col:22> 'int' 3
| |     `-ExtVectorType 0x1c455ceb420 'vector<bool, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455ceae70 'bool' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cc900 'bool'
| |-TypedefDecl 0x1c455d01f60 <line:63:1, col:25> col:25 referenced bool4 'vector<bool, 4>'
| | `-ElaboratedType 0x1c455d01ed0 'vector<bool, 4>' sugar
| |   `-TemplateSpecializationType 0x1c455d01e60 'vector<bool, 4>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'bool'
| |     | `-BuiltinType 0x1c4559cc900 'bool'
| |     |-TemplateArgument expr '4'
| |     | `-ConstantExpr 0x1c455ceb5f0 <col:22> 'int'
| |     |   |-value: Int 4
| |     |   `-IntegerLiteral 0x1c455ceb5c8 <col:22> 'int' 4
| |     `-ExtVectorType 0x1c455d01e20 'vector<bool, 4>' 4
| |       `-SubstTemplateTypeParmType 0x1c455ceae70 'bool' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cc900 'bool'
| |-TypedefDecl 0x1c455d02220 <line:64:1, col:24> col:24 int1 'vector<int, 1>'
| | `-ElaboratedType 0x1c455d02190 'vector<int, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455d02120 'vector<int, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int'
| |     | `-BuiltinType 0x1c4559cc980 'int'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455d01ff8 <col:21> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455d01fd0 <col:21> 'int' 1
| |     `-ExtVectorType 0x1c455d020e0 'vector<int, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455d02030 'int' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cc980 'int'
| |-TypedefDecl 0x1c455d024b0 <line:65:1, col:24> col:24 referenced int2 'vector<int, 2>'
| | `-ElaboratedType 0x1c455d02420 'vector<int, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455d023b0 'vector<int, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int'
| |     | `-BuiltinType 0x1c4559cc980 'int'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455d022b8 <col:21> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455d02290 <col:21> 'int' 2
| |     `-ExtVectorType 0x1c455d02370 'vector<int, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455d02030 'int' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cc980 'int'
| |-TypedefDecl 0x1c455d02740 <line:66:1, col:24> col:24 referenced int3 'vector<int, 3>'
| | `-ElaboratedType 0x1c455d026b0 'vector<int, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455d02640 'vector<int, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int'
| |     | `-BuiltinType 0x1c4559cc980 'int'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455d02548 <col:21> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455d02520 <col:21> 'int' 3
| |     `-ExtVectorType 0x1c455d02600 'vector<int, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455d02030 'int' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cc980 'int'
| |-TypedefDecl 0x1c455d029d0 <line:67:1, col:24> col:24 referenced int4 'vector<int, 4>'
| | `-ElaboratedType 0x1c455d02940 'vector<int, 4>' sugar
| |   `-TemplateSpecializationType 0x1c455d028d0 'vector<int, 4>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int'
| |     | `-BuiltinType 0x1c4559cc980 'int'
| |     |-TemplateArgument expr '4'
| |     | `-ConstantExpr 0x1c455d027d8 <col:21> 'int'
| |     |   |-value: Int 4
| |     |   `-IntegerLiteral 0x1c455d027b0 <col:21> 'int' 4
| |     `-ExtVectorType 0x1c455d02890 'vector<int, 4>' 4
| |       `-SubstTemplateTypeParmType 0x1c455d02030 'int' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cc980 'int'
| |-TypedefDecl 0x1c455d02d10 <line:68:1, col:25> col:25 uint1 'vector<uint, 1>'
| | `-ElaboratedType 0x1c455d02c80 'vector<uint, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455d02c10 'vector<uint, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint':'unsigned int'
| |     | `-ElaboratedType 0x1c455d02a60 'uint' sugar
| |     |   `-TypedefType 0x1c455d02a30 'hlsl::uint' sugar
| |     |     |-Typedef 0x1c455ceab50 'uint'
| |     |     `-BuiltinType 0x1c4559cca20 'unsigned int'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455d02ad8 <col:22> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455d02ab0 <col:22> 'int' 1
| |     `-ExtVectorType 0x1c455d02bd0 'vector<uint, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455d02b10 'uint' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d02a60 'uint' sugar
| |           `-TypedefType 0x1c455d02a30 'hlsl::uint' sugar
| |             |-Typedef 0x1c455ceab50 'uint'
| |             `-BuiltinType 0x1c4559cca20 'unsigned int'
| |-TypedefDecl 0x1c455cffd90 <line:69:1, col:25> col:25 referenced uint2 'vector<uint, 2>'
| | `-ElaboratedType 0x1c455cffd00 'vector<uint, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455cffc90 'vector<uint, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint':'unsigned int'
| |     | `-ElaboratedType 0x1c455d02a60 'uint' sugar
| |     |   `-TypedefType 0x1c455d02a30 'hlsl::uint' sugar
| |     |     |-Typedef 0x1c455ceab50 'uint'
| |     |     `-BuiltinType 0x1c4559cca20 'unsigned int'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455d02da0 <col:22> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455d02d78 <col:22> 'int' 2
| |     `-ExtVectorType 0x1c455cffc50 'vector<uint, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455d02b10 'uint' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d02a60 'uint' sugar
| |           `-TypedefType 0x1c455d02a30 'hlsl::uint' sugar
| |             |-Typedef 0x1c455ceab50 'uint'
| |             `-BuiltinType 0x1c4559cca20 'unsigned int'
| |-TypedefDecl 0x1c455d00010 <line:70:1, col:25> col:25 referenced uint3 'vector<uint, 3>'
| | `-ElaboratedType 0x1c455cfff80 'vector<uint, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455cfff10 'vector<uint, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint':'unsigned int'
| |     | `-ElaboratedType 0x1c455d02a60 'uint' sugar
| |     |   `-TypedefType 0x1c455d02a30 'hlsl::uint' sugar
| |     |     |-Typedef 0x1c455ceab50 'uint'
| |     |     `-BuiltinType 0x1c4559cca20 'unsigned int'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455cffe20 <col:22> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455cffdf8 <col:22> 'int' 3
| |     `-ExtVectorType 0x1c455cffed0 'vector<uint, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455d02b10 'uint' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d02a60 'uint' sugar
| |           `-TypedefType 0x1c455d02a30 'hlsl::uint' sugar
| |             |-Typedef 0x1c455ceab50 'uint'
| |             `-BuiltinType 0x1c4559cca20 'unsigned int'
| |-TypedefDecl 0x1c455d00290 <line:71:1, col:25> col:25 referenced uint4 'vector<uint, 4>'
| | `-ElaboratedType 0x1c455d00200 'vector<uint, 4>' sugar
| |   `-TemplateSpecializationType 0x1c455d00190 'vector<uint, 4>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint':'unsigned int'
| |     | `-ElaboratedType 0x1c455d02a60 'uint' sugar
| |     |   `-TypedefType 0x1c455d02a30 'hlsl::uint' sugar
| |     |     |-Typedef 0x1c455ceab50 'uint'
| |     |     `-BuiltinType 0x1c4559cca20 'unsigned int'
| |     |-TemplateArgument expr '4'
| |     | `-ConstantExpr 0x1c455d000a0 <col:22> 'int'
| |     |   |-value: Int 4
| |     |   `-IntegerLiteral 0x1c455d00078 <col:22> 'int' 4
| |     `-ExtVectorType 0x1c455d00150 'vector<uint, 4>' 4
| |       `-SubstTemplateTypeParmType 0x1c455d02b10 'uint' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d02a60 'uint' sugar
| |           `-TypedefType 0x1c455d02a30 'hlsl::uint' sugar
| |             |-Typedef 0x1c455ceab50 'uint'
| |             `-BuiltinType 0x1c4559cca20 'unsigned int'
| |-TypedefDecl 0x1c455d005a0 <line:72:1, col:28> col:28 int32_t1 'vector<int32_t, 1>'
| | `-ElaboratedType 0x1c455d00510 'vector<int32_t, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455d004a0 'vector<int32_t, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int32_t':'int'
| |     | `-ElaboratedType 0x1c455d00320 'int32_t' sugar
| |     |   `-TypedefType 0x1c455d002f0 'hlsl::int32_t' sugar
| |     |     |-Typedef 0x1c455ceaae0 'int32_t'
| |     |     `-BuiltinType 0x1c4559cc980 'int'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455d00398 <col:25> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455d00370 <col:25> 'int' 1
| |     `-ExtVectorType 0x1c455d00460 'vector<int32_t, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455d003d0 'int32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d00320 'int32_t' sugar
| |           `-TypedefType 0x1c455d002f0 'hlsl::int32_t' sugar
| |             |-Typedef 0x1c455ceaae0 'int32_t'
| |             `-BuiltinType 0x1c4559cc980 'int'
| |-TypedefDecl 0x1c455d007f0 <line:73:1, col:28> col:28 int32_t2 'vector<int32_t, 2>'
| | `-ElaboratedType 0x1c455d00760 'vector<int32_t, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455d006f0 'vector<int32_t, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int32_t':'int'
| |     | `-ElaboratedType 0x1c455d00320 'int32_t' sugar
| |     |   `-TypedefType 0x1c455d002f0 'hlsl::int32_t' sugar
| |     |     |-Typedef 0x1c455ceaae0 'int32_t'
| |     |     `-BuiltinType 0x1c4559cc980 'int'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455d00630 <col:25> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455d00608 <col:25> 'int' 2
| |     `-ExtVectorType 0x1c455d006b0 'vector<int32_t, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455d003d0 'int32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d00320 'int32_t' sugar
| |           `-TypedefType 0x1c455d002f0 'hlsl::int32_t' sugar
| |             |-Typedef 0x1c455ceaae0 'int32_t'
| |             `-BuiltinType 0x1c4559cc980 'int'
| |-TypedefDecl 0x1c455d00a40 <line:74:1, col:28> col:28 int32_t3 'vector<int32_t, 3>'
| | `-ElaboratedType 0x1c455d009b0 'vector<int32_t, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455d00940 'vector<int32_t, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int32_t':'int'
| |     | `-ElaboratedType 0x1c455d00320 'int32_t' sugar
| |     |   `-TypedefType 0x1c455d002f0 'hlsl::int32_t' sugar
| |     |     |-Typedef 0x1c455ceaae0 'int32_t'
| |     |     `-BuiltinType 0x1c4559cc980 'int'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455d00880 <col:25> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455d00858 <col:25> 'int' 3
| |     `-ExtVectorType 0x1c455d00900 'vector<int32_t, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455d003d0 'int32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d00320 'int32_t' sugar
| |           `-TypedefType 0x1c455d002f0 'hlsl::int32_t' sugar
| |             |-Typedef 0x1c455ceaae0 'int32_t'
| |             `-BuiltinType 0x1c4559cc980 'int'
| |-TypedefDecl 0x1c455d2c890 <line:75:1, col:28> col:28 int32_t4 'vector<int32_t, 4>'
| | `-ElaboratedType 0x1c455d2c800 'vector<int32_t, 4>' sugar
| |   `-TemplateSpecializationType 0x1c455d2c790 'vector<int32_t, 4>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int32_t':'int'
| |     | `-ElaboratedType 0x1c455d00320 'int32_t' sugar
| |     |   `-TypedefType 0x1c455d002f0 'hlsl::int32_t' sugar
| |     |     |-Typedef 0x1c455ceaae0 'int32_t'
| |     |     `-BuiltinType 0x1c4559cc980 'int'
| |     |-TemplateArgument expr '4'
| |     | `-ConstantExpr 0x1c455d00ad0 <col:25> 'int'
| |     |   |-value: Int 4
| |     |   `-IntegerLiteral 0x1c455d00aa8 <col:25> 'int' 4
| |     `-ExtVectorType 0x1c455d00b50 'vector<int32_t, 4>' 4
| |       `-SubstTemplateTypeParmType 0x1c455d003d0 'int32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d00320 'int32_t' sugar
| |           `-TypedefType 0x1c455d002f0 'hlsl::int32_t' sugar
| |             |-Typedef 0x1c455ceaae0 'int32_t'
| |             `-BuiltinType 0x1c4559cc980 'int'
| |-TypedefDecl 0x1c455d2cba0 <line:76:1, col:29> col:29 uint32_t1 'vector<uint32_t, 1>'
| | `-ElaboratedType 0x1c455d2cb10 'vector<uint32_t, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455d2caa0 'vector<uint32_t, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint32_t':'unsigned int'
| |     | `-ElaboratedType 0x1c455d2c920 'uint32_t' sugar
| |     |   `-TypedefType 0x1c455d2c8f0 'hlsl::uint32_t' sugar
| |     |     |-Typedef 0x1c455ceabc0 'uint32_t'
| |     |     `-BuiltinType 0x1c4559cca20 'unsigned int'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455d2c998 <col:26> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455d2c970 <col:26> 'int' 1
| |     `-ExtVectorType 0x1c455d2ca60 'vector<uint32_t, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455d2c9d0 'uint32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2c920 'uint32_t' sugar
| |           `-TypedefType 0x1c455d2c8f0 'hlsl::uint32_t' sugar
| |             |-Typedef 0x1c455ceabc0 'uint32_t'
| |             `-BuiltinType 0x1c4559cca20 'unsigned int'
| |-TypedefDecl 0x1c455d2cdf0 <line:77:1, col:29> col:29 referenced uint32_t2 'vector<uint32_t, 2>'
| | `-ElaboratedType 0x1c455d2cd60 'vector<uint32_t, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455d2ccf0 'vector<uint32_t, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint32_t':'unsigned int'
| |     | `-ElaboratedType 0x1c455d2c920 'uint32_t' sugar
| |     |   `-TypedefType 0x1c455d2c8f0 'hlsl::uint32_t' sugar
| |     |     |-Typedef 0x1c455ceabc0 'uint32_t'
| |     |     `-BuiltinType 0x1c4559cca20 'unsigned int'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455d2cc30 <col:26> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455d2cc08 <col:26> 'int' 2
| |     `-ExtVectorType 0x1c455d2ccb0 'vector<uint32_t, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455d2c9d0 'uint32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2c920 'uint32_t' sugar
| |           `-TypedefType 0x1c455d2c8f0 'hlsl::uint32_t' sugar
| |             |-Typedef 0x1c455ceabc0 'uint32_t'
| |             `-BuiltinType 0x1c4559cca20 'unsigned int'
| |-TypedefDecl 0x1c455d2d040 <line:78:1, col:29> col:29 uint32_t3 'vector<uint32_t, 3>'
| | `-ElaboratedType 0x1c455d2cfb0 'vector<uint32_t, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455d2cf40 'vector<uint32_t, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint32_t':'unsigned int'
| |     | `-ElaboratedType 0x1c455d2c920 'uint32_t' sugar
| |     |   `-TypedefType 0x1c455d2c8f0 'hlsl::uint32_t' sugar
| |     |     |-Typedef 0x1c455ceabc0 'uint32_t'
| |     |     `-BuiltinType 0x1c4559cca20 'unsigned int'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455d2ce80 <col:26> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455d2ce58 <col:26> 'int' 3
| |     `-ExtVectorType 0x1c455d2cf00 'vector<uint32_t, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455d2c9d0 'uint32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2c920 'uint32_t' sugar
| |           `-TypedefType 0x1c455d2c8f0 'hlsl::uint32_t' sugar
| |             |-Typedef 0x1c455ceabc0 'uint32_t'
| |             `-BuiltinType 0x1c4559cca20 'unsigned int'
| |-TypedefDecl 0x1c455d2d290 <line:79:1, col:29> col:29 referenced uint32_t4 'vector<uint32_t, 4>'
| | `-ElaboratedType 0x1c455d2d200 'vector<uint32_t, 4>' sugar
| |   `-TemplateSpecializationType 0x1c455d2d190 'vector<uint32_t, 4>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint32_t':'unsigned int'
| |     | `-ElaboratedType 0x1c455d2c920 'uint32_t' sugar
| |     |   `-TypedefType 0x1c455d2c8f0 'hlsl::uint32_t' sugar
| |     |     |-Typedef 0x1c455ceabc0 'uint32_t'
| |     |     `-BuiltinType 0x1c4559cca20 'unsigned int'
| |     |-TemplateArgument expr '4'
| |     | `-ConstantExpr 0x1c455d2d0d0 <col:26> 'int'
| |     |   |-value: Int 4
| |     |   `-IntegerLiteral 0x1c455d2d0a8 <col:26> 'int' 4
| |     `-ExtVectorType 0x1c455d2d150 'vector<uint32_t, 4>' 4
| |       `-SubstTemplateTypeParmType 0x1c455d2c9d0 'uint32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2c920 'uint32_t' sugar
| |           `-TypedefType 0x1c455d2c8f0 'hlsl::uint32_t' sugar
| |             |-Typedef 0x1c455ceabc0 'uint32_t'
| |             `-BuiltinType 0x1c4559cca20 'unsigned int'
| |-TypedefDecl 0x1c455d2d5d0 <line:80:1, col:28> col:28 int64_t1 'vector<int64_t, 1>'
| | `-ElaboratedType 0x1c455d2d540 'vector<int64_t, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455d2d4d0 'vector<int64_t, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int64_t':'long'
| |     | `-ElaboratedType 0x1c455d2d320 'int64_t' sugar
| |     |   `-TypedefType 0x1c455d2d2f0 'hlsl::int64_t' sugar
| |     |     |-Typedef 0x1c455cead10 'int64_t'
| |     |     `-BuiltinType 0x1c4559cc9a0 'long'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455d2d398 <col:25> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455d2d370 <col:25> 'int' 1
| |     `-ExtVectorType 0x1c455d2d490 'vector<int64_t, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455d2d3d0 'int64_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2d320 'int64_t' sugar
| |           `-TypedefType 0x1c455d2d2f0 'hlsl::int64_t' sugar
| |             |-Typedef 0x1c455cead10 'int64_t'
| |             `-BuiltinType 0x1c4559cc9a0 'long'
| |-TypedefDecl 0x1c455d2d9a0 <line:81:1, col:28> col:28 referenced int64_t2 'vector<int64_t, 2>'
| | `-ElaboratedType 0x1c455d2d910 'vector<int64_t, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455d2d8a0 'vector<int64_t, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int64_t':'long'
| |     | `-ElaboratedType 0x1c455d2d320 'int64_t' sugar
| |     |   `-TypedefType 0x1c455d2d2f0 'hlsl::int64_t' sugar
| |     |     |-Typedef 0x1c455cead10 'int64_t'
| |     |     `-BuiltinType 0x1c4559cc9a0 'long'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455d2d660 <col:25> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455d2d638 <col:25> 'int' 2
| |     `-ExtVectorType 0x1c455d2d710 'vector<int64_t, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455d2d3d0 'int64_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2d320 'int64_t' sugar
| |           `-TypedefType 0x1c455d2d2f0 'hlsl::int64_t' sugar
| |             |-Typedef 0x1c455cead10 'int64_t'
| |             `-BuiltinType 0x1c4559cc9a0 'long'
| |-TypedefDecl 0x1c455d2dc20 <line:82:1, col:28> col:28 referenced int64_t3 'vector<int64_t, 3>'
| | `-ElaboratedType 0x1c455d2db90 'vector<int64_t, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455d2db20 'vector<int64_t, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int64_t':'long'
| |     | `-ElaboratedType 0x1c455d2d320 'int64_t' sugar
| |     |   `-TypedefType 0x1c455d2d2f0 'hlsl::int64_t' sugar
| |     |     |-Typedef 0x1c455cead10 'int64_t'
| |     |     `-BuiltinType 0x1c4559cc9a0 'long'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455d2da30 <col:25> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455d2da08 <col:25> 'int' 3
| |     `-ExtVectorType 0x1c455d2dae0 'vector<int64_t, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455d2d3d0 'int64_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2d320 'int64_t' sugar
| |           `-TypedefType 0x1c455d2d2f0 'hlsl::int64_t' sugar
| |             |-Typedef 0x1c455cead10 'int64_t'
| |             `-BuiltinType 0x1c4559cc9a0 'long'
| |-TypedefDecl 0x1c455d2dea0 <line:83:1, col:28> col:28 referenced int64_t4 'vector<int64_t, 4>'
| | `-ElaboratedType 0x1c455d2de10 'vector<int64_t, 4>' sugar
| |   `-TemplateSpecializationType 0x1c455d2dda0 'vector<int64_t, 4>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'int64_t':'long'
| |     | `-ElaboratedType 0x1c455d2d320 'int64_t' sugar
| |     |   `-TypedefType 0x1c455d2d2f0 'hlsl::int64_t' sugar
| |     |     |-Typedef 0x1c455cead10 'int64_t'
| |     |     `-BuiltinType 0x1c4559cc9a0 'long'
| |     |-TemplateArgument expr '4'
| |     | `-ConstantExpr 0x1c455d2dcb0 <col:25> 'int'
| |     |   |-value: Int 4
| |     |   `-IntegerLiteral 0x1c455d2dc88 <col:25> 'int' 4
| |     `-ExtVectorType 0x1c455d2dd60 'vector<int64_t, 4>' 4
| |       `-SubstTemplateTypeParmType 0x1c455d2d3d0 'int64_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2d320 'int64_t' sugar
| |           `-TypedefType 0x1c455d2d2f0 'hlsl::int64_t' sugar
| |             |-Typedef 0x1c455cead10 'int64_t'
| |             `-BuiltinType 0x1c4559cc9a0 'long'
| |-TypedefDecl 0x1c455d2e1e0 <line:84:1, col:29> col:29 uint64_t1 'vector<uint64_t, 1>'
| | `-ElaboratedType 0x1c455d2e150 'vector<uint64_t, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455d2e0e0 'vector<uint64_t, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint64_t':'unsigned long'
| |     | `-ElaboratedType 0x1c455d2df30 'uint64_t' sugar
| |     |   `-TypedefType 0x1c455d2df00 'hlsl::uint64_t' sugar
| |     |     |-Typedef 0x1c455ceaca0 'uint64_t'
| |     |     `-BuiltinType 0x1c4559cca40 'unsigned long'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455d2dfa8 <col:26> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455d2df80 <col:26> 'int' 1
| |     `-ExtVectorType 0x1c455d2e0a0 'vector<uint64_t, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455d2dfe0 'uint64_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2df30 'uint64_t' sugar
| |           `-TypedefType 0x1c455d2df00 'hlsl::uint64_t' sugar
| |             |-Typedef 0x1c455ceaca0 'uint64_t'
| |             `-BuiltinType 0x1c4559cca40 'unsigned long'
| |-TypedefDecl 0x1c455d2e460 <line:85:1, col:29> col:29 referenced uint64_t2 'vector<uint64_t, 2>'
| | `-ElaboratedType 0x1c455d2e3d0 'vector<uint64_t, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455d2e360 'vector<uint64_t, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint64_t':'unsigned long'
| |     | `-ElaboratedType 0x1c455d2df30 'uint64_t' sugar
| |     |   `-TypedefType 0x1c455d2df00 'hlsl::uint64_t' sugar
| |     |     |-Typedef 0x1c455ceaca0 'uint64_t'
| |     |     `-BuiltinType 0x1c4559cca40 'unsigned long'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455d2e270 <col:26> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455d2e248 <col:26> 'int' 2
| |     `-ExtVectorType 0x1c455d2e320 'vector<uint64_t, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455d2dfe0 'uint64_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2df30 'uint64_t' sugar
| |           `-TypedefType 0x1c455d2df00 'hlsl::uint64_t' sugar
| |             |-Typedef 0x1c455ceaca0 'uint64_t'
| |             `-BuiltinType 0x1c4559cca40 'unsigned long'
| |-TypedefDecl 0x1c455d2e6e0 <line:86:1, col:29> col:29 referenced uint64_t3 'vector<uint64_t, 3>'
| | `-ElaboratedType 0x1c455d2e650 'vector<uint64_t, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455d2e5e0 'vector<uint64_t, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint64_t':'unsigned long'
| |     | `-ElaboratedType 0x1c455d2df30 'uint64_t' sugar
| |     |   `-TypedefType 0x1c455d2df00 'hlsl::uint64_t' sugar
| |     |     |-Typedef 0x1c455ceaca0 'uint64_t'
| |     |     `-BuiltinType 0x1c4559cca40 'unsigned long'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455d2e4f0 <col:26> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455d2e4c8 <col:26> 'int' 3
| |     `-ExtVectorType 0x1c455d2e5a0 'vector<uint64_t, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455d2dfe0 'uint64_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2df30 'uint64_t' sugar
| |           `-TypedefType 0x1c455d2df00 'hlsl::uint64_t' sugar
| |             |-Typedef 0x1c455ceaca0 'uint64_t'
| |             `-BuiltinType 0x1c4559cca40 'unsigned long'
| |-TypedefDecl 0x1c455d2b780 <line:87:1, col:29> col:29 referenced uint64_t4 'vector<uint64_t, 4>'
| | `-ElaboratedType 0x1c455d2b6f0 'vector<uint64_t, 4>' sugar
| |   `-TemplateSpecializationType 0x1c455d2b680 'vector<uint64_t, 4>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'uint64_t':'unsigned long'
| |     | `-ElaboratedType 0x1c455d2df30 'uint64_t' sugar
| |     |   `-TypedefType 0x1c455d2df00 'hlsl::uint64_t' sugar
| |     |     |-Typedef 0x1c455ceaca0 'uint64_t'
| |     |     `-BuiltinType 0x1c4559cca40 'unsigned long'
| |     |-TemplateArgument expr '4'
| |     | `-ConstantExpr 0x1c455d2e770 <col:26> 'int'
| |     |   |-value: Int 4
| |     |   `-IntegerLiteral 0x1c455d2e748 <col:26> 'int' 4
| |     `-ExtVectorType 0x1c455d2e820 'vector<uint64_t, 4>' 4
| |       `-SubstTemplateTypeParmType 0x1c455d2dfe0 'uint64_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2df30 'uint64_t' sugar
| |           `-TypedefType 0x1c455d2df00 'hlsl::uint64_t' sugar
| |             |-Typedef 0x1c455ceaca0 'uint64_t'
| |             `-BuiltinType 0x1c4559cca40 'unsigned long'
| |-TypedefDecl 0x1c455d2ba40 <line:89:1, col:25> col:25 half1 'vector<half, 1>'
| | `-ElaboratedType 0x1c455d2b9b0 'vector<half, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455d2b940 'vector<half, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'half'
| |     | `-BuiltinType 0x1c4559cd0d0 'half'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455d2b818 <col:22> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455d2b7f0 <col:22> 'int' 1
| |     `-ExtVectorType 0x1c455d2b900 'vector<half, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455d2b850 'half' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cd0d0 'half'
| |-TypedefDecl 0x1c455d2bcd0 <line:90:1, col:25> col:25 referenced half2 'vector<half, 2>'
| | `-ElaboratedType 0x1c455d2bc40 'vector<half, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455d2bbd0 'vector<half, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'half'
| |     | `-BuiltinType 0x1c4559cd0d0 'half'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455d2bad8 <col:22> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455d2bab0 <col:22> 'int' 2
| |     `-ExtVectorType 0x1c455d2bb90 'vector<half, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455d2b850 'half' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cd0d0 'half'
| |-TypedefDecl 0x1c455d2bf60 <line:91:1, col:25> col:25 referenced half3 'vector<half, 3>'
| | `-ElaboratedType 0x1c455d2bed0 'vector<half, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455d2be60 'vector<half, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'half'
| |     | `-BuiltinType 0x1c4559cd0d0 'half'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455d2bd68 <col:22> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455d2bd40 <col:22> 'int' 3
| |     `-ExtVectorType 0x1c455d2be20 'vector<half, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455d2b850 'half' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cd0d0 'half'
| |-TypedefDecl 0x1c455d2c1f0 <line:92:1, col:25> col:25 referenced half4 'vector<half, 4>'
| | `-ElaboratedType 0x1c455d2c160 'vector<half, 4>' sugar
| |   `-TemplateSpecializationType 0x1c455d2c0f0 'vector<half, 4>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'half'
| |     | `-BuiltinType 0x1c4559cd0d0 'half'
| |     |-TemplateArgument expr '4'
| |     | `-ConstantExpr 0x1c455d2bff8 <col:22> 'int'
| |     |   |-value: Int 4
| |     |   `-IntegerLiteral 0x1c455d2bfd0 <col:22> 'int' 4
| |     `-ExtVectorType 0x1c455d2c0b0 'vector<half, 4>' 4
| |       `-SubstTemplateTypeParmType 0x1c455d2b850 'half' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cd0d0 'half'
| |-TypedefDecl 0x1c455d2c4b0 <line:93:1, col:26> col:26 float1 'vector<float, 1>'
| | `-ElaboratedType 0x1c455d2c420 'vector<float, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455d2c3b0 'vector<float, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'float'
| |     | `-BuiltinType 0x1c4559cca80 'float'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455d2c288 <col:23> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455d2c260 <col:23> 'int' 1
| |     `-ExtVectorType 0x1c455d2c370 'vector<float, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455d2c2c0 'float' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cca80 'float'
| |-TypedefDecl 0x1c455d2a670 <line:94:1, col:26> col:26 referenced float2 'vector<float, 2>'
| | `-ElaboratedType 0x1c455d2a5e0 'vector<float, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455d2a570 'vector<float, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'float'
| |     | `-BuiltinType 0x1c4559cca80 'float'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455d2c548 <col:23> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455d2c520 <col:23> 'int' 2
| |     `-ExtVectorType 0x1c455d2c600 'vector<float, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455d2c2c0 'float' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cca80 'float'
| |-TypedefDecl 0x1c455d2a900 <line:95:1, col:26> col:26 referenced float3 'vector<float, 3>'
| | `-ElaboratedType 0x1c455d2a870 'vector<float, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455d2a800 'vector<float, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'float'
| |     | `-BuiltinType 0x1c4559cca80 'float'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455d2a708 <col:23> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455d2a6e0 <col:23> 'int' 3
| |     `-ExtVectorType 0x1c455d2a7c0 'vector<float, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455d2c2c0 'float' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cca80 'float'
| |-TypedefDecl 0x1c455d2ab90 <line:96:1, col:26> col:26 referenced float4 'vector<float, 4>'
| | `-ElaboratedType 0x1c455d2ab00 'vector<float, 4>' sugar
| |   `-TemplateSpecializationType 0x1c455d2aa90 'vector<float, 4>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'float'
| |     | `-BuiltinType 0x1c4559cca80 'float'
| |     |-TemplateArgument expr '4'
| |     | `-ConstantExpr 0x1c455d2a998 <col:23> 'int'
| |     |   |-value: Int 4
| |     |   `-IntegerLiteral 0x1c455d2a970 <col:23> 'int' 4
| |     `-ExtVectorType 0x1c455d2aa50 'vector<float, 4>' 4
| |       `-SubstTemplateTypeParmType 0x1c455d2c2c0 'float' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559cca80 'float'
| |-TypedefDecl 0x1c455d2ae50 <line:97:1, col:27> col:27 double1 'vector<double, 1>'
| | `-ElaboratedType 0x1c455d2adc0 'vector<double, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455d2ad50 'vector<double, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'double'
| |     | `-BuiltinType 0x1c4559ccaa0 'double'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455d2ac28 <col:24> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455d2ac00 <col:24> 'int' 1
| |     `-ExtVectorType 0x1c455d2ad10 'vector<double, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455d2ac60 'double' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559ccaa0 'double'
| |-TypedefDecl 0x1c455d2b0e0 <line:98:1, col:27> col:27 referenced double2 'vector<double, 2>'
| | `-ElaboratedType 0x1c455d2b050 'vector<double, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455d2afe0 'vector<double, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'double'
| |     | `-BuiltinType 0x1c4559ccaa0 'double'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455d2aee8 <col:24> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455d2aec0 <col:24> 'int' 2
| |     `-ExtVectorType 0x1c455d2afa0 'vector<double, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455d2ac60 'double' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559ccaa0 'double'
| |-TypedefDecl 0x1c455d2b370 <line:99:1, col:27> col:27 referenced double3 'vector<double, 3>'
| | `-ElaboratedType 0x1c455d2b2e0 'vector<double, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455d2b270 'vector<double, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'double'
| |     | `-BuiltinType 0x1c4559ccaa0 'double'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455d2b178 <col:24> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455d2b150 <col:24> 'int' 3
| |     `-ExtVectorType 0x1c455d2b230 'vector<double, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455d2ac60 'double' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559ccaa0 'double'
| |-TypedefDecl 0x1c455d2ea40 <line:100:1, col:27> col:27 referenced double4 'vector<double, 4>'
| | `-ElaboratedType 0x1c455d2e9b0 'vector<double, 4>' sugar
| |   `-TemplateSpecializationType 0x1c455d2b500 'vector<double, 4>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'double'
| |     | `-BuiltinType 0x1c4559ccaa0 'double'
| |     |-TemplateArgument expr '4'
| |     | `-ConstantExpr 0x1c455d2b408 <col:24> 'int'
| |     |   |-value: Int 4
| |     |   `-IntegerLiteral 0x1c455d2b3e0 <col:24> 'int' 4
| |     `-ExtVectorType 0x1c455d2b4c0 'vector<double, 4>' 4
| |       `-SubstTemplateTypeParmType 0x1c455d2ac60 'double' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-BuiltinType 0x1c4559ccaa0 'double'
| |-TypedefDecl 0x1c455d2ed50 <line:109:1, col:30> col:30 float32_t1 'vector<float32_t, 1>'
| | `-ElaboratedType 0x1c455d2ecc0 'vector<float32_t, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455d2ec50 'vector<float32_t, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'float32_t':'float'
| |     | `-ElaboratedType 0x1c455d2ead0 'float32_t' sugar
| |     |   `-TypedefType 0x1c455d2eaa0 'hlsl::float32_t' sugar
| |     |     |-Typedef 0x1c455ceac30 'float32_t'
| |     |     `-BuiltinType 0x1c4559cca80 'float'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455d2eb48 <col:27> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455d2eb20 <col:27> 'int' 1
| |     `-ExtVectorType 0x1c455d2ec10 'vector<float32_t, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455d2eb80 'float32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2ead0 'float32_t' sugar
| |           `-TypedefType 0x1c455d2eaa0 'hlsl::float32_t' sugar
| |             |-Typedef 0x1c455ceac30 'float32_t'
| |             `-BuiltinType 0x1c4559cca80 'float'
| |-TypedefDecl 0x1c455d2efa0 <line:110:1, col:30> col:30 float32_t2 'vector<float32_t, 2>'
| | `-ElaboratedType 0x1c455d2ef10 'vector<float32_t, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455d2eea0 'vector<float32_t, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'float32_t':'float'
| |     | `-ElaboratedType 0x1c455d2ead0 'float32_t' sugar
| |     |   `-TypedefType 0x1c455d2eaa0 'hlsl::float32_t' sugar
| |     |     |-Typedef 0x1c455ceac30 'float32_t'
| |     |     `-BuiltinType 0x1c4559cca80 'float'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455d2ede0 <col:27> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455d2edb8 <col:27> 'int' 2
| |     `-ExtVectorType 0x1c455d2ee60 'vector<float32_t, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455d2eb80 'float32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2ead0 'float32_t' sugar
| |           `-TypedefType 0x1c455d2eaa0 'hlsl::float32_t' sugar
| |             |-Typedef 0x1c455ceac30 'float32_t'
| |             `-BuiltinType 0x1c4559cca80 'float'
| |-TypedefDecl 0x1c455d2f1f0 <line:111:1, col:30> col:30 float32_t3 'vector<float32_t, 3>'
| | `-ElaboratedType 0x1c455d2f160 'vector<float32_t, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455d2f0f0 'vector<float32_t, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'float32_t':'float'
| |     | `-ElaboratedType 0x1c455d2ead0 'float32_t' sugar
| |     |   `-TypedefType 0x1c455d2eaa0 'hlsl::float32_t' sugar
| |     |     |-Typedef 0x1c455ceac30 'float32_t'
| |     |     `-BuiltinType 0x1c4559cca80 'float'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455d2f030 <col:27> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455d2f008 <col:27> 'int' 3
| |     `-ExtVectorType 0x1c455d2f0b0 'vector<float32_t, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455d2eb80 'float32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2ead0 'float32_t' sugar
| |           `-TypedefType 0x1c455d2eaa0 'hlsl::float32_t' sugar
| |             |-Typedef 0x1c455ceac30 'float32_t'
| |             `-BuiltinType 0x1c4559cca80 'float'
| |-TypedefDecl 0x1c455d2f440 <line:112:1, col:30> col:30 float32_t4 'vector<float32_t, 4>'
| | `-ElaboratedType 0x1c455d2f3b0 'vector<float32_t, 4>' sugar
| |   `-TemplateSpecializationType 0x1c455d2f340 'vector<float32_t, 4>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'float32_t':'float'
| |     | `-ElaboratedType 0x1c455d2ead0 'float32_t' sugar
| |     |   `-TypedefType 0x1c455d2eaa0 'hlsl::float32_t' sugar
| |     |     |-Typedef 0x1c455ceac30 'float32_t'
| |     |     `-BuiltinType 0x1c4559cca80 'float'
| |     |-TemplateArgument expr '4'
| |     | `-ConstantExpr 0x1c455d2f280 <col:27> 'int'
| |     |   |-value: Int 4
| |     |   `-IntegerLiteral 0x1c455d2f258 <col:27> 'int' 4
| |     `-ExtVectorType 0x1c455d2f300 'vector<float32_t, 4>' 4
| |       `-SubstTemplateTypeParmType 0x1c455d2eb80 'float32_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2ead0 'float32_t' sugar
| |           `-TypedefType 0x1c455d2eaa0 'hlsl::float32_t' sugar
| |             |-Typedef 0x1c455ceac30 'float32_t'
| |             `-BuiltinType 0x1c4559cca80 'float'
| |-TypedefDecl 0x1c455d2f750 <line:113:1, col:30> col:30 float64_t1 'vector<float64_t, 1>'
| | `-ElaboratedType 0x1c455d2f6c0 'vector<float64_t, 1>' sugar
| |   `-TemplateSpecializationType 0x1c455d2f650 'vector<float64_t, 1>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'float64_t':'double'
| |     | `-ElaboratedType 0x1c455d2f4d0 'float64_t' sugar
| |     |   `-TypedefType 0x1c455d2f4a0 'hlsl::float64_t' sugar
| |     |     |-Typedef 0x1c455cead80 'float64_t'
| |     |     `-BuiltinType 0x1c4559ccaa0 'double'
| |     |-TemplateArgument expr '1'
| |     | `-ConstantExpr 0x1c455d2f548 <col:27> 'int'
| |     |   |-value: Int 1
| |     |   `-IntegerLiteral 0x1c455d2f520 <col:27> 'int' 1
| |     `-ExtVectorType 0x1c455d2f610 'vector<float64_t, 1>' 1
| |       `-SubstTemplateTypeParmType 0x1c455d2f580 'float64_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2f4d0 'float64_t' sugar
| |           `-TypedefType 0x1c455d2f4a0 'hlsl::float64_t' sugar
| |             |-Typedef 0x1c455cead80 'float64_t'
| |             `-BuiltinType 0x1c4559ccaa0 'double'
| |-TypedefDecl 0x1c455d31ce0 <line:114:1, col:30> col:30 float64_t2 'vector<float64_t, 2>'
| | `-ElaboratedType 0x1c455d2f910 'vector<float64_t, 2>' sugar
| |   `-TemplateSpecializationType 0x1c455d2f8a0 'vector<float64_t, 2>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'float64_t':'double'
| |     | `-ElaboratedType 0x1c455d2f4d0 'float64_t' sugar
| |     |   `-TypedefType 0x1c455d2f4a0 'hlsl::float64_t' sugar
| |     |     |-Typedef 0x1c455cead80 'float64_t'
| |     |     `-BuiltinType 0x1c4559ccaa0 'double'
| |     |-TemplateArgument expr '2'
| |     | `-ConstantExpr 0x1c455d2f7e0 <col:27> 'int'
| |     |   |-value: Int 2
| |     |   `-IntegerLiteral 0x1c455d2f7b8 <col:27> 'int' 2
| |     `-ExtVectorType 0x1c455d2f860 'vector<float64_t, 2>' 2
| |       `-SubstTemplateTypeParmType 0x1c455d2f580 'float64_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2f4d0 'float64_t' sugar
| |           `-TypedefType 0x1c455d2f4a0 'hlsl::float64_t' sugar
| |             |-Typedef 0x1c455cead80 'float64_t'
| |             `-BuiltinType 0x1c4559ccaa0 'double'
| |-TypedefDecl 0x1c455d31f30 <line:115:1, col:30> col:30 float64_t3 'vector<float64_t, 3>'
| | `-ElaboratedType 0x1c455d31ea0 'vector<float64_t, 3>' sugar
| |   `-TemplateSpecializationType 0x1c455d31e30 'vector<float64_t, 3>' sugar alias
| |     |-name: 'vector':'hlsl::vector' qualified
| |     | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
| |     |-TemplateArgument type 'float64_t':'double'
| |     | `-ElaboratedType 0x1c455d2f4d0 'float64_t' sugar
| |     |   `-TypedefType 0x1c455d2f4a0 'hlsl::float64_t' sugar
| |     |     |-Typedef 0x1c455cead80 'float64_t'
| |     |     `-BuiltinType 0x1c4559ccaa0 'double'
| |     |-TemplateArgument expr '3'
| |     | `-ConstantExpr 0x1c455d31d70 <col:27> 'int'
| |     |   |-value: Int 3
| |     |   `-IntegerLiteral 0x1c455d31d48 <col:27> 'int' 3
| |     `-ExtVectorType 0x1c455d31df0 'vector<float64_t, 3>' 3
| |       `-SubstTemplateTypeParmType 0x1c455d2f580 'float64_t' sugar class depth 0 index 0 element final
| |         |-TypeAliasTemplate 0x1c4559cd500 'vector'
| |         `-ElaboratedType 0x1c455d2f4d0 'float64_t' sugar
| |           `-TypedefType 0x1c455d2f4a0 'hlsl::float64_t' sugar
| |             |-Typedef 0x1c455cead80 'float64_t'
| |             `-BuiltinType 0x1c4559ccaa0 'double'
| `-TypedefDecl 0x1c455d32180 <line:116:1, col:30> col:30 float64_t4 'vector<float64_t, 4>'
|   `-ElaboratedType 0x1c455d320f0 'vector<float64_t, 4>' sugar
|     `-TemplateSpecializationType 0x1c455d32080 'vector<float64_t, 4>' sugar alias
|       |-name: 'vector':'hlsl::vector' qualified
|       | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
|       |-TemplateArgument type 'float64_t':'double'
|       | `-ElaboratedType 0x1c455d2f4d0 'float64_t' sugar
|       |   `-TypedefType 0x1c455d2f4a0 'hlsl::float64_t' sugar
|       |     |-Typedef 0x1c455cead80 'float64_t'
|       |     `-BuiltinType 0x1c4559ccaa0 'double'
|       |-TemplateArgument expr '4'
|       | `-ConstantExpr 0x1c455d31fc0 <col:27> 'int'
|       |   |-value: Int 4
|       |   `-IntegerLiteral 0x1c455d31f98 <col:27> 'int' 4
|       `-ExtVectorType 0x1c455d32040 'vector<float64_t, 4>' 4
|         `-SubstTemplateTypeParmType 0x1c455d2f580 'float64_t' sugar class depth 0 index 0 element final
|           |-TypeAliasTemplate 0x1c4559cd500 'vector'
|           `-ElaboratedType 0x1c455d2f4d0 'float64_t' sugar
|             `-TypedefType 0x1c455d2f4a0 'hlsl::float64_t' sugar
|               |-Typedef 0x1c455cead80 'float64_t'
|               `-BuiltinType 0x1c4559ccaa0 'double'
|-NamespaceDecl 0x1c455d32658 prev 0x1c455ceaa58 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_detail.h:12:1, line:53:1> line:12:11 hlsl
| |-original Namespace 0x1c4559cd198 'hlsl'
| `-NamespaceDecl 0x1c455d326c8 <line:14:1, line:52:1> line:14:11 __detail
|   |-ClassTemplateDecl 0x1c455d329b0 <line:16:1, line:18:1> line:16:42 is_same
|   | |-TemplateTypeParmDecl 0x1c455d32750 <col:11, col:20> col:20 typename depth 0 index 0 T
|   | |-TemplateTypeParmDecl 0x1c455d327d0 <col:23, col:32> col:32 typename depth 0 index 1 U
|   | `-CXXRecordDecl 0x1c455d328a8 <col:35, line:18:1> line:16:42 struct is_same definition
|   |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-PackedAttr 0x1c455d32950 <<invalid sloc>> Implicit
|   |   |-CXXRecordDecl 0x1c455d32df0 <col:35, col:42> col:42 implicit struct is_same
|   |   `-VarDecl 0x1c455d32ea8 <line:17:3, col:29> col:21 value 'const hlsl_private bool' static cinit
|   |     `-CXXBoolLiteralExpr 0x1c455d32f30 <col:29> 'bool' false
|   |-ClassTemplatePartialSpecializationDecl 0x1c455d33168 <line:20:1, line:22:1> line:20:30 struct is_same definition explicit_specialization
|   | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | |-MoveConstructor exists simple trivial needs_implicit
|   | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | |-MoveAssignment exists simple trivial needs_implicit
|   | | `-Destructor simple irrelevant trivial needs_implicit
|   | |-TemplateArgument type 'type-parameter-0-0'
|   | | `-TemplateTypeParmType 0x1c4559cd270 'type-parameter-0-0' dependent depth 0 index 0
|   | |-TemplateArgument type 'type-parameter-0-0'
|   | | `-TemplateTypeParmType 0x1c4559cd270 'type-parameter-0-0' dependent depth 0 index 0
|   | |-TemplateTypeParmDecl 0x1c455d32fb8 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | |-PackedAttr 0x1c455d333c0 <<invalid sloc>> Implicit
|   | |-CXXRecordDecl 0x1c455d33488 <col:23, col:30> col:30 implicit struct is_same
|   | `-VarDecl 0x1c455d33540 <line:21:3, col:29> col:21 value 'const hlsl_private bool' static cinit
|   |   `-CXXBoolLiteralExpr 0x1c455d335a8 <col:29> 'bool' true
|   |-ClassTemplateDecl 0x1c455d33850 <line:24:1, col:49> col:38 enable_if
|   | |-NonTypeTemplateParmDecl 0x1c455d33640 <col:11, col:16> col:16 'bool' depth 0 index 0 B
|   | |-TemplateTypeParmDecl 0x1c455d336a0 <col:19, col:28> col:28 typename depth 0 index 1 T
|   | `-CXXRecordDecl 0x1c455d33748 <col:31, col:49> col:38 struct enable_if definition
|   |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-PackedAttr 0x1c455d337f0 <<invalid sloc>> Implicit
|   |   `-CXXRecordDecl 0x1c455d33b58 <col:31, col:38> col:38 implicit struct enable_if
|   |-ClassTemplatePartialSpecializationDecl 0x1c455d2fac0 <line:26:1, line:28:1> line:26:30 struct enable_if definition explicit_specialization
|   | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | |-MoveConstructor exists simple trivial needs_implicit
|   | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | |-MoveAssignment exists simple trivial needs_implicit
|   | | `-Destructor simple irrelevant trivial needs_implicit
|   | |-TemplateArgument integral 'true'
|   | |-TemplateArgument type 'type-parameter-0-0'
|   | | `-TemplateTypeParmType 0x1c4559cd270 'type-parameter-0-0' dependent depth 0 index 0
|   | |-TemplateTypeParmDecl 0x1c455d33c18 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | |-PackedAttr 0x1c455d2fd50 <<invalid sloc>> Implicit
|   | |-CXXRecordDecl 0x1c455d2fe18 <col:23, col:30> col:30 implicit struct enable_if
|   | `-TypeAliasDecl 0x1c455d2fed0 <line:27:3, col:16> col:9 Type 'T'
|   |   `-TemplateTypeParmType 0x1c455d33c70 'T' dependent depth 0 index 0
|   |     `-TemplateTypeParm 0x1c455d33c18 'T'
|   |-TypeAliasTemplateDecl 0x1c455d302c0 <line:30:1, line:31:47> col:1 enable_if_t
|   | |-NonTypeTemplateParmDecl 0x1c455d2ff70 <line:30:11, col:16> col:16 referenced 'bool' depth 0 index 0 B
|   | |-TemplateTypeParmDecl 0x1c455d2ffe0 <col:19, col:29> col:25 referenced class depth 0 index 1 T
|   | | `-TemplateArgument type 'void'
|   | |   `-BuiltinType 0x1c4559cc8e0 'void'
|   | `-TypeAliasDecl 0x1c455d30260 <line:31:1, col:47> col:7 enable_if_t 'typename enable_if<B, T>::Type'
|   |   `-DependentNameType 0x1c455d301e0 'typename enable_if<B, T>::Type' dependent
|   |-FunctionTemplateDecl 0x1c455d34400 <line:33:1, line:37:1> line:35:1 bit_cast
|   | |-TemplateTypeParmDecl 0x1c455d30318 <line:33:11, col:20> col:20 referenced typename depth 0 index 0 U
|   | |-TemplateTypeParmDecl 0x1c455d303a0 <col:23, col:32> col:32 referenced typename depth 0 index 1 T
|   | |-NonTypeTemplateParmDecl 0x1c455d30438 <col:35, col:39> col:39 referenced 'int' depth 0 index 2 N
|   | `-FunctionDecl 0x1c455d34358 <line:34:1, line:37:1> line:35:1 constexpr bit_cast 'enable_if_t<sizeof(U) == sizeof(T), vector<U, N>> (vector<T, N>)' implicit-inline
|   |   |-ParmVarDecl 0x1c455d34210 <col:10, col:23> col:23 referenced V 'vector<T, N>'
|   |   `-CompoundStmt 0x1c455d346f8 <col:26, line:37:1>
|   |     `-ReturnStmt 0x1c455d346e8 <line:36:3, col:44>
|   |       `-BuiltinBitCastExpr 0x1c455d346c0 <col:10, col:44> 'vector<U, N>' <Dependent>
|   |         `-DeclRefExpr 0x1c455d34678 <col:43> 'vector<T, N>' lvalue ParmVar 0x1c455d34210 'V' 'vector<T, N>'
|   |-FunctionTemplateDecl 0x1c455d34e50 <line:39:1, line:42:1> line:40:50 bit_cast
|   | |-TemplateTypeParmDecl 0x1c455d34710 <line:39:11, col:20> col:20 referenced typename depth 0 index 0 U
|   | |-TemplateTypeParmDecl 0x1c455d34790 <col:23, col:32> col:32 referenced typename depth 0 index 1 T
|   | `-FunctionDecl 0x1c455d34da8 <line:40:1, line:42:1> line:40:50 constexpr bit_cast 'enable_if_t<sizeof(U) == sizeof(T), U> (T)' implicit-inline
|   |   |-ParmVarDecl 0x1c455d34c68 <col:59, col:61> col:61 referenced F 'T'
|   |   `-CompoundStmt 0x1c455d30cc8 <col:64, line:42:1>
|   |     `-ReturnStmt 0x1c455d30cb8 <line:41:3, col:33>
|   |       `-BuiltinBitCastExpr 0x1c455d30c90 <col:10, col:33> 'U' <Dependent>
|   |         `-DeclRefExpr 0x1c455d30c60 <col:32> 'T' lvalue ParmVar 0x1c455d34c68 'F' 'T'
|   |-ClassTemplateDecl 0x1c455d30e88 <line:44:1, line:46:1> line:44:30 is_arithmetic
|   | |-TemplateTypeParmDecl 0x1c455d30ce0 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | |-CXXRecordDecl 0x1c455d30d80 <col:23, line:46:1> line:44:30 struct is_arithmetic definition
|   | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-PackedAttr 0x1c455d30e28 <<invalid sloc>> Implicit
|   | | |-CXXRecordDecl 0x1c455d31138 <col:23, col:30> col:30 implicit struct is_arithmetic
|   | | `-VarDecl 0x1c455d311f0 <line:45:3, col:46> col:21 Value 'const hlsl_private bool' static cinit
|   | |   `-TypeTraitExpr 0x1c455d31268 <col:29, col:46> 'bool' __is_arithmetic
|   | |     `-TemplateTypeParmType 0x1c455d30d30 'T' dependent depth 0 index 0
|   | |       `-TemplateTypeParm 0x1c455d30ce0 'T'
|   | |-ClassTemplateSpecializationDecl 0x1c455f5c808 <line:44:1, line:46:1> line:44:30 struct is_arithmetic definition implicit_instantiation
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument type 'half'
|   | | | `-BuiltinType 0x1c4559cd0d0 'half'
|   | | |-PackedAttr 0x1c455f5c9b8 <<invalid sloc>> Implicit
|   | | |-CXXRecordDecl 0x1c455f5ca80 <col:23, col:30> col:30 implicit struct is_arithmetic
|   | | `-VarDecl 0x1c455f5cb28 <line:45:3, col:46> col:21 referenced Value 'const bool' implicit_instantiation static cinit
|   | |   `-TypeTraitExpr 0x1c455f5cbe0 <col:29, col:46> 'bool' __is_arithmetic
|   | |     `-SubstTemplateTypeParmType 0x1c455f5cba0 'half' sugar typename depth 0 index 0 T
|   | |       |-ClassTemplateSpecialization 0x1c455f5c808 'is_arithmetic'
|   | |       `-BuiltinType 0x1c4559cd0d0 'half'
|   | `-ClassTemplateSpecializationDecl 0x1c455f76808 <line:44:1, line:46:1> line:44:30 struct is_arithmetic definition implicit_instantiation
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument type 'float'
|   |   | `-BuiltinType 0x1c4559cca80 'float'
|   |   |-PackedAttr 0x1c455f769b8 <<invalid sloc>> Implicit
|   |   |-CXXRecordDecl 0x1c455f76a80 <col:23, col:30> col:30 implicit struct is_arithmetic
|   |   `-VarDecl 0x1c455f76b28 <line:45:3, col:46> col:21 referenced Value 'const bool' implicit_instantiation static cinit
|   |     `-TypeTraitExpr 0x1c455f76be0 <col:29, col:46> 'bool' __is_arithmetic
|   |       `-SubstTemplateTypeParmType 0x1c455f76ba0 'float' sugar typename depth 0 index 0 T
|   |         |-ClassTemplateSpecialization 0x1c455f76808 'is_arithmetic'
|   |         `-BuiltinType 0x1c4559cca80 'float'
|   `-TypeAliasTemplateDecl 0x1c455d35010 <line:48:1, line:50:58> line:49:1 HLSL_FIXED_VECTOR
|     |-TemplateTypeParmDecl 0x1c455d312b8 <line:48:11, col:20> col:20 referenced typename depth 0 index 0 T
|     |-NonTypeTemplateParmDecl 0x1c455d31358 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 N
|     `-TypeAliasDecl 0x1c455d31b30 <line:49:1, line:50:58> line:49:7 HLSL_FIXED_VECTOR 'vector<__detail::enable_if_t<(N > 1 && N <= 4), T>, N>'
|       `-ElaboratedType 0x1c455d31aa0 'vector<__detail::enable_if_t<(N > 1 && N <= 4), T>, N>' sugar dependent
|         `-TemplateSpecializationType 0x1c455d31a30 'vector<__detail::enable_if_t<(N > 1 && N <= 4), T>, N>' sugar dependent alias
|           |-name: 'vector':'hlsl::vector' qualified
|           | `-TypeAliasTemplateDecl 0x1c4559cd500 <<invalid sloc>> <invalid sloc> implicit vector
|           |-TemplateArgument type '__detail::enable_if_t<(N > 1 && N <= 4), T>':'enable_if<(value-parameter-0-1 > 1 && value-parameter-0-1 <= 4), type-parameter-0-0>::Type'
|           | `-ElaboratedType 0x1c455d31850 '__detail::enable_if_t<(N > 1 && N <= 4), T>' sugar dependent
|           |   `-TemplateSpecializationType 0x1c455d317e0 'enable_if_t<(N > 1 && N <= 4), T>' sugar dependent alias
|           |     |-name: '__detail::enable_if_t':'hlsl::__detail::enable_if_t' qualified
|           |     | |-NestedNameSpecifier Namespace 0x1c455d326c8 '__detail'
|           |     | `-TypeAliasTemplateDecl 0x1c455d302c0 <line:30:1, line:31:47> col:1 enable_if_t
|           |     |-TemplateArgument expr '(N > 1 && N <= 4)':'(value-parameter-0-1 > 1 && value-parameter-0-1 <= 4)'
|           |     | `-ParenExpr 0x1c455d31500 <line:50:34, col:50> 'bool'
|           |     |   `-BinaryOperator 0x1c455d314e0 <col:35, col:49> 'bool' '&&'
|           |     |     |-BinaryOperator 0x1c455d31458 <col:35, col:39> 'bool' '>'
|           |     |     | |-DeclRefExpr 0x1c455d31410 <col:35> 'int' NonTypeTemplateParm 0x1c455d31358 'N' 'int'
|           |     |     | `-IntegerLiteral 0x1c455d31430 <col:39> 'int' 1
|           |     |     `-BinaryOperator 0x1c455d314c0 <col:44, col:49> 'bool' '<='
|           |     |       |-DeclRefExpr 0x1c455d31478 <col:44> 'int' NonTypeTemplateParm 0x1c455d31358 'N' 'int'
|           |     |       `-IntegerLiteral 0x1c455d31498 <col:49> 'int' 4
|           |     |-TemplateArgument type 'T':'type-parameter-0-0'
|           |     | `-TemplateTypeParmType 0x1c455d31310 'T' dependent depth 0 index 0
|           |     |   `-TemplateTypeParm 0x1c455d312b8 'T'
|           |     `-DependentNameType 0x1c455d31780 'typename enable_if<(N > 1 && N <= 4), T>::Type' dependent
|           |-TemplateArgument expr 'N':'value-parameter-0-1'
|           | `-DeclRefExpr 0x1c455d31908 <col:57> 'int' NonTypeTemplateParm 0x1c455d31358 'N' 'int'
|           `-DependentSizedExtVectorType 0x1c455d319e0 'vector<__detail::enable_if_t<(N > 1 && N <= 4), T>, N>' dependent <invalid sloc>
|             |-SubstTemplateTypeParmType 0x1c455d31940 '__detail::enable_if_t<(N > 1 && N <= 4), T>' sugar dependent class depth 0 index 0 element final
|             | |-TypeAliasTemplate 0x1c4559cd500 'vector'
|             | `-ElaboratedType 0x1c455d31850 '__detail::enable_if_t<(N > 1 && N <= 4), T>' sugar dependent
|             |   `-TemplateSpecializationType 0x1c455d317e0 'enable_if_t<(N > 1 && N <= 4), T>' sugar dependent alias
|             |     |-name: '__detail::enable_if_t':'hlsl::__detail::enable_if_t' qualified
|             |     | |-NestedNameSpecifier Namespace 0x1c455d326c8 '__detail'
|             |     | `-TypeAliasTemplateDecl 0x1c455d302c0 <line:30:1, line:31:47> col:1 enable_if_t
|             |     |-TemplateArgument expr '(N > 1 && N <= 4)':'(value-parameter-0-1 > 1 && value-parameter-0-1 <= 4)'
|             |     | `-ParenExpr 0x1c455d31500 <line:50:34, col:50> 'bool'
|             |     |   `-BinaryOperator 0x1c455d314e0 <col:35, col:49> 'bool' '&&'
|             |     |     |-BinaryOperator 0x1c455d31458 <col:35, col:39> 'bool' '>'
|             |     |     | |-DeclRefExpr 0x1c455d31410 <col:35> 'int' NonTypeTemplateParm 0x1c455d31358 'N' 'int'
|             |     |     | `-IntegerLiteral 0x1c455d31430 <col:39> 'int' 1
|             |     |     `-BinaryOperator 0x1c455d314c0 <col:44, col:49> 'bool' '<='
|             |     |       |-DeclRefExpr 0x1c455d31478 <col:44> 'int' NonTypeTemplateParm 0x1c455d31358 'N' 'int'
|             |     |       `-IntegerLiteral 0x1c455d31498 <col:49> 'int' 4
|             |     |-TemplateArgument type 'T':'type-parameter-0-0'
|             |     | `-TemplateTypeParmType 0x1c455d31310 'T' dependent depth 0 index 0
|             |     |   `-TemplateTypeParm 0x1c455d312b8 'T'
|             |     `-DependentNameType 0x1c455d31780 'typename enable_if<(N > 1 && N <= 4), T>::Type' dependent
|             `-SubstNonTypeTemplateParmExpr 0x1c455d31978 <<invalid sloc>> 'int'
|               |-NonTypeTemplateParmDecl 0x1c4559cd320 <<invalid sloc>> <invalid sloc> 'int' depth 0 index 1 element_count
|               | `-TemplateArgument expr '4'
|               |   `-IntegerLiteral 0x1c4559cd380 <<invalid sloc>> 'int' 4
|               `-DeclRefExpr 0x1c455d31908 <col:57> 'int' NonTypeTemplateParm 0x1c455d31358 'N' 'int'
|-NamespaceDecl 0x1c455d350b0 prev 0x1c455d32658 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_alias_intrinsics.h:12:1, line:2810:1> line:12:11 hlsl
| |-original Namespace 0x1c4559cd198 'hlsl'
| |-FunctionDecl 0x1c455d35238 <line:20:3, line:72:14> col:6 abs 'half (half)'
| | |-ParmVarDecl 0x1c455d35148 <col:10> col:14 'half'
| | |-BuiltinAliasAttr 0x1c455d352e8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d35368 <line:72:6> Implicit
| | `-ConstAttr 0x1c455d35398 <col:6> Implicit
| |-FunctionDecl 0x1c455d35590 <line:20:3, line:75:16> col:7 abs 'half2 (half2)'
| | |-ParmVarDecl 0x1c455d35460 <col:11> col:16 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d35640 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d356c0 <line:75:7> Implicit
| | `-ConstAttr 0x1c455d356f0 <col:7> Implicit
| |-FunctionDecl 0x1c455d358f0 <line:20:3, line:78:16> col:7 abs 'half3 (half3)'
| | |-ParmVarDecl 0x1c455d357c0 <col:11> col:16 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d359a0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d35a20 <line:78:7> Implicit
| | `-ConstAttr 0x1c455d35a50 <col:7> Implicit
| |-FunctionDecl 0x1c455d35c50 <line:20:3, line:81:16> col:7 abs 'half4 (half4)'
| | |-ParmVarDecl 0x1c455d35b20 <col:11> col:16 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d35d00 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d35d80 <line:81:7> Implicit
| | `-ConstAttr 0x1c455d35db0 <col:7> Implicit
| |-FunctionDecl 0x1c455d35f08 <line:20:3, line:84:12> col:5 abs 'int (int)'
| | |-ParmVarDecl 0x1c455d35e18 <col:9> col:12 'int'
| | |-BuiltinAliasAttr 0x1c455d35fb8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d38388 <line:84:5> Implicit
| | `-ConstAttr 0x1c455d383b8 <col:5> Implicit
| |-FunctionDecl 0x1c455d385c0 <line:20:3, line:86:14> col:6 abs 'int2 (int2)'
| | |-ParmVarDecl 0x1c455d38490 <col:10> col:14 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455d38670 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d386f0 <line:86:6> Implicit
| | `-ConstAttr 0x1c455d38720 <col:6> Implicit
| |-FunctionDecl 0x1c455d38920 <line:20:3, line:88:14> col:6 abs 'int3 (int3)'
| | |-ParmVarDecl 0x1c455d387f0 <col:10> col:14 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455d389d0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d38a50 <line:88:6> Implicit
| | `-ConstAttr 0x1c455d38a80 <col:6> Implicit
| |-FunctionDecl 0x1c455d38c80 <line:20:3, line:90:14> col:6 abs 'int4 (int4)'
| | |-ParmVarDecl 0x1c455d38b50 <col:10> col:14 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455d38d30 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d38db0 <line:90:6> Implicit
| | `-ConstAttr 0x1c455d38de0 <col:6> Implicit
| |-FunctionDecl 0x1c455d38f60 <line:92:1, col:40> col:16 constexpr abs 'uint (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455d38e30 <col:20, col:25> col:25 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455d39080 <col:28, col:40>
| |   `-ReturnStmt 0x1c455d39070 <col:30, col:37>
| |     `-ImplicitCastExpr 0x1c455d39058 <col:37> 'uint':'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x1c455d39038 <col:37> 'uint':'unsigned int' lvalue ParmVar 0x1c455d38e30 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455d39250 <line:93:1, col:42> col:17 constexpr abs 'uint2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455d39120 <col:21, col:27> col:27 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455d37278 <col:30, col:42>
| |   `-ReturnStmt 0x1c455d37268 <col:32, col:39>
| |     `-ImplicitCastExpr 0x1c455d37250 <col:39> 'uint2':'vector<uint, 2>' <LValueToRValue>
| |       `-DeclRefExpr 0x1c455d37230 <col:39> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455d39120 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455d37440 <line:94:1, col:42> col:17 constexpr abs 'uint3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455d37310 <col:21, col:27> col:27 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455d37560 <col:30, col:42>
| |   `-ReturnStmt 0x1c455d37550 <col:32, col:39>
| |     `-ImplicitCastExpr 0x1c455d37538 <col:39> 'uint3':'vector<uint, 3>' <LValueToRValue>
| |       `-DeclRefExpr 0x1c455d37518 <col:39> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455d37310 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455d37730 <line:95:1, col:42> col:17 constexpr abs 'uint4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455d37600 <col:21, col:27> col:27 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455d37850 <col:30, col:42>
| |   `-ReturnStmt 0x1c455d37840 <col:32, col:39>
| |     `-ImplicitCastExpr 0x1c455d37828 <col:39> 'uint4':'vector<uint, 4>' <LValueToRValue>
| |       `-DeclRefExpr 0x1c455d37808 <col:39> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455d37600 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455d37988 <line:20:3, line:98:16> col:7 abs 'float (float)'
| | |-ParmVarDecl 0x1c455d37890 <col:11> col:16 'float'
| | |-BuiltinAliasAttr 0x1c455d37a38 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d37ab8 <line:98:7> Implicit
| | `-ConstAttr 0x1c455d37ae8 <col:7> Implicit
| |-FunctionDecl 0x1c455d37cf0 <line:20:3, line:100:18> col:8 abs 'float2 (float2)'
| | |-ParmVarDecl 0x1c455d37bc0 <col:12> col:18 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d37da0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d37e20 <line:100:8> Implicit
| | `-ConstAttr 0x1c455d37e50 <col:8> Implicit
| |-FunctionDecl 0x1c455d38050 <line:20:3, line:102:18> col:8 abs 'float3 (float3)'
| | |-ParmVarDecl 0x1c455d37f20 <col:12> col:18 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d38100 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d38180 <line:102:8> Implicit
| | `-ConstAttr 0x1c455d381b0 <col:8> Implicit
| |-FunctionDecl 0x1c455d395d0 <line:20:3, line:104:18> col:8 abs 'float4 (float4)'
| | |-ParmVarDecl 0x1c455d394a0 <col:12> col:18 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d39680 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d39700 <line:104:8> Implicit
| | `-ConstAttr 0x1c455d39730 <col:8> Implicit
| |-FunctionDecl 0x1c455d398c0 <line:20:3, line:107:20> col:9 abs 'int64_t (int64_t)'
| | |-ParmVarDecl 0x1c455d39790 <col:13> col:20 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455d39970 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d399f0 <line:107:9> Implicit
| | `-ConstAttr 0x1c455d39a20 <col:9> Implicit
| |-FunctionDecl 0x1c455d39c20 <line:20:3, line:109:22> col:10 abs 'int64_t2 (int64_t2)'
| | |-ParmVarDecl 0x1c455d39af0 <col:14> col:22 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455d39cd0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d39d50 <line:109:10> Implicit
| | `-ConstAttr 0x1c455d39d80 <col:10> Implicit
| |-FunctionDecl 0x1c455d39f80 <line:20:3, line:111:22> col:10 abs 'int64_t3 (int64_t3)'
| | |-ParmVarDecl 0x1c455d39e50 <col:14> col:22 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455d3a030 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d3a0b0 <line:111:10> Implicit
| | `-ConstAttr 0x1c455d3a0e0 <col:10> Implicit
| |-FunctionDecl 0x1c455d3a2e0 <line:20:3, line:113:22> col:10 abs 'int64_t4 (int64_t4)'
| | |-ParmVarDecl 0x1c455d3a1b0 <col:14> col:22 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455d3a390 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d3a410 <line:113:10> Implicit
| | `-ConstAttr 0x1c455d3d890 <col:10> Implicit
| |-FunctionDecl 0x1c455d3da10 <line:115:1, col:48> col:20 constexpr abs 'uint64_t (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455d3d8e0 <col:24, col:33> col:33 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455d3db30 <col:36, col:48>
| |   `-ReturnStmt 0x1c455d3db20 <col:38, col:45>
| |     `-ImplicitCastExpr 0x1c455d3db08 <col:45> 'uint64_t':'unsigned long' <LValueToRValue>
| |       `-DeclRefExpr 0x1c455d3dae8 <col:45> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455d3d8e0 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455d3dd00 <line:116:1, col:50> col:21 constexpr abs 'uint64_t2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455d3dbd0 <col:25, col:35> col:35 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455d3de20 <col:38, col:50>
| |   `-ReturnStmt 0x1c455d3de10 <col:40, col:47>
| |     `-ImplicitCastExpr 0x1c455d3ddf8 <col:47> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue>
| |       `-DeclRefExpr 0x1c455d3ddd8 <col:47> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455d3dbd0 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455d3dff0 <line:117:1, col:50> col:21 constexpr abs 'uint64_t3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455d3dec0 <col:25, col:35> col:35 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455d3e110 <col:38, col:50>
| |   `-ReturnStmt 0x1c455d3e100 <col:40, col:47>
| |     `-ImplicitCastExpr 0x1c455d3e0e8 <col:47> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue>
| |       `-DeclRefExpr 0x1c455d3e0c8 <col:47> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455d3dec0 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455d3e2e0 <line:118:1, col:50> col:21 constexpr abs 'uint64_t4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455d3e1b0 <col:25, col:35> col:35 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455d3e400 <col:38, col:50>
| |   `-ReturnStmt 0x1c455d3e3f0 <col:40, col:47>
| |     `-ImplicitCastExpr 0x1c455d3e3d8 <col:47> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue>
| |       `-DeclRefExpr 0x1c455d3e3b8 <col:47> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455d3e1b0 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455d3e538 <line:20:3, line:121:18> col:8 abs 'double (double)'
| | |-ParmVarDecl 0x1c455d3e440 <col:12> col:18 'double'
| | |-BuiltinAliasAttr 0x1c455d3e5e8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d3e668 <line:121:8> Implicit
| | `-ConstAttr 0x1c455d3e698 <col:8> Implicit
| |-FunctionDecl 0x1c455d3a588 <line:20:3, line:123:20> col:9 abs 'double2 (double2)'
| | |-ParmVarDecl 0x1c455d3e770 <col:13> col:20 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455d3a638 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d3a6b8 <line:123:9> Implicit
| | `-ConstAttr 0x1c455d3a6e8 <col:9> Implicit
| |-FunctionDecl 0x1c455d3a8f0 <line:20:3, line:125:20> col:9 abs 'double3 (double3)'
| | |-ParmVarDecl 0x1c455d3a7c0 <col:13> col:20 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455d3a9a0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d3aa20 <line:125:9> Implicit
| | `-ConstAttr 0x1c455d3aa50 <col:9> Implicit
| |-FunctionDecl 0x1c455d3ac50 <line:20:3, line:127:20> col:9 abs 'double4 (double4)'
| | |-ParmVarDecl 0x1c455d3ab20 <col:13> col:20 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455d3ad00 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_abs
| | |-NoThrowAttr 0x1c455d3ad80 <line:127:9> Implicit
| | `-ConstAttr 0x1c455d3adb0 <col:9> Implicit
| |-FunctionDecl 0x1c455d3aed0 <line:20:3, line:139:15> col:6 acos 'half (half)'
| | |-ParmVarDecl 0x1c455d3ae18 <col:11> col:15 'half'
| | |-BuiltinAliasAttr 0x1c455d3af80 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_acos
| | |-NoThrowAttr 0x1c455d3b000 <line:139:6> Implicit
| | `-ConstAttr 0x1c455d3b030 <col:6> Implicit
| |-FunctionDecl 0x1c455d3b130 <line:20:3, line:142:17> col:7 acos 'half2 (half2)'
| | |-ParmVarDecl 0x1c455d3b080 <col:12> col:17 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d3b1e0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_acos
| | |-NoThrowAttr 0x1c455d3b260 <line:142:7> Implicit
| | `-ConstAttr 0x1c455d3b290 <col:7> Implicit
| |-FunctionDecl 0x1c455d3b3a0 <line:20:3, line:145:17> col:7 acos 'half3 (half3)'
| | |-ParmVarDecl 0x1c455d3b2f0 <col:12> col:17 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d3b450 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_acos
| | |-NoThrowAttr 0x1c455d3b4d0 <line:145:7> Implicit
| | `-ConstAttr 0x1c455d3b500 <col:7> Implicit
| |-FunctionDecl 0x1c455d3ea50 <line:20:3, line:148:17> col:7 acos 'half4 (half4)'
| | |-ParmVarDecl 0x1c455d3e9a0 <col:12> col:17 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d3eb00 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_acos
| | |-NoThrowAttr 0x1c455d3eb80 <line:148:7> Implicit
| | `-ConstAttr 0x1c455d3ebb0 <col:7> Implicit
| |-FunctionDecl 0x1c455d3ecd0 <line:20:3, line:151:17> col:7 used acos 'float (float)'
| | |-ParmVarDecl 0x1c455d3ec18 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455d3ed80 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_acos
| | |-NoThrowAttr 0x1c455d3ee00 <line:151:7> Implicit
| | `-ConstAttr 0x1c455d3ee30 <col:7> Implicit
| |-FunctionDecl 0x1c455d3ef40 <line:20:3, line:153:19> col:8 used acos 'float2 (float2)'
| | |-ParmVarDecl 0x1c455d3ee90 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d3eff0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_acos
| | |-NoThrowAttr 0x1c455d3f070 <line:153:8> Implicit
| | `-ConstAttr 0x1c455d3f0a0 <col:8> Implicit
| |-FunctionDecl 0x1c455d3f1b0 <line:20:3, line:155:19> col:8 used acos 'float3 (float3)'
| | |-ParmVarDecl 0x1c455d3f100 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d3f260 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_acos
| | |-NoThrowAttr 0x1c455d3f2e0 <line:155:8> Implicit
| | `-ConstAttr 0x1c455d3f310 <col:8> Implicit
| |-FunctionDecl 0x1c455d3f420 <line:20:3, line:157:19> col:8 used acos 'float4 (float4)'
| | |-ParmVarDecl 0x1c455d3f370 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d3f4d0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_acos
| | |-NoThrowAttr 0x1c455d3f550 <line:157:8> Implicit
| | `-ConstAttr 0x1c455d3f580 <col:8> Implicit
| |-FunctionDecl 0x1c455d3f830 <line:22:3, line:175:41> col:11 AddUint64 'uint32_t2 (uint32_t2, uint32_t2)'
| | |-ParmVarDecl 0x1c455d3f660 <col:21> col:30 'uint32_t2':'vector<uint32_t, 2>'
| | |-ParmVarDecl 0x1c455d3f6e0 <col:32> col:41 'uint32_t2':'vector<uint32_t, 2>'
| | |-AvailabilityAttr 0x1c455d3f8e8 <line:22:18, col:61> shadermodel 6.0 0 0 "" "" 0
| | |-BuiltinAliasAttr 0x1c455d3b6a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_adduint64
| | |-NoThrowAttr 0x1c455d3b6f0 <line:175:11> Implicit
| | `-ConstAttr 0x1c455d3b720 <col:11> Implicit
| |-FunctionDecl 0x1c455d3b9c0 <line:22:3, line:178:41> col:11 AddUint64 'uint32_t4 (uint32_t4, uint32_t4)'
| | |-ParmVarDecl 0x1c455d3b7f0 <col:21> col:30 'uint32_t4':'vector<uint32_t, 4>'
| | |-ParmVarDecl 0x1c455d3b870 <col:32> col:41 'uint32_t4':'vector<uint32_t, 4>'
| | |-AvailabilityAttr 0x1c455d3ba78 <line:22:18, col:61> shadermodel 6.0 0 0 "" "" 0
| | |-BuiltinAliasAttr 0x1c455d3bb40 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_adduint64
| | |-NoThrowAttr 0x1c455d3bb90 <line:178:11> Implicit
| | `-ConstAttr 0x1c455d3bbc0 <col:11> Implicit
| |-FunctionDecl 0x1c455d3bd10 <line:20:3, line:217:14> col:6 all 'bool (half)'
| | |-ParmVarDecl 0x1c455d3bc28 <col:10> col:14 'half'
| | |-BuiltinAliasAttr 0x1c455d3bdc0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d3be40 <line:217:6> Implicit
| | `-ConstAttr 0x1c455d3be70 <col:6> Implicit
| |-FunctionDecl 0x1c455d3bff0 <line:20:3, line:220:15> col:6 all 'bool (half2)'
| | |-ParmVarDecl 0x1c455d3bec0 <col:10> col:15 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d3c0a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d3c120 <line:220:6> Implicit
| | `-ConstAttr 0x1c455d3c150 <col:6> Implicit
| |-FunctionDecl 0x1c455d3c2e0 <line:20:3, line:223:15> col:6 all 'bool (half3)'
| | |-ParmVarDecl 0x1c455d3c1b0 <col:10> col:15 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d3c390 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d3c410 <line:223:6> Implicit
| | `-ConstAttr 0x1c455d3c440 <col:6> Implicit
| |-FunctionDecl 0x1c455d3fab0 <line:20:3, line:226:15> col:6 all 'bool (half4)'
| | |-ParmVarDecl 0x1c455d3c4a0 <col:10> col:15 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d3fb60 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d3fbe0 <line:226:6> Implicit
| | `-ConstAttr 0x1c455d3fc10 <col:6> Implicit
| |-FunctionDecl 0x1c455d3fd60 <line:20:3, line:229:14> col:6 all 'bool (bool)'
| | |-ParmVarDecl 0x1c455d3fc70 <col:10> col:14 'bool'
| | |-BuiltinAliasAttr 0x1c455d3fe10 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d3fe90 <line:229:6> Implicit
| | `-ConstAttr 0x1c455d3fec0 <col:6> Implicit
| |-FunctionDecl 0x1c455d400c0 <line:20:3, line:231:15> col:6 all 'bool (bool2)'
| | |-ParmVarDecl 0x1c455d3ff90 <col:10> col:15 'bool2':'vector<bool, 2>'
| | |-BuiltinAliasAttr 0x1c455d40170 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d401f0 <line:231:6> Implicit
| | `-ConstAttr 0x1c455d40220 <col:6> Implicit
| |-FunctionDecl 0x1c455d40420 <line:20:3, line:233:15> col:6 all 'bool (bool3)'
| | |-ParmVarDecl 0x1c455d402f0 <col:10> col:15 'bool3':'vector<bool, 3>'
| | |-BuiltinAliasAttr 0x1c455d404d0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d40550 <line:233:6> Implicit
| | `-ConstAttr 0x1c455d40580 <col:6> Implicit
| |-FunctionDecl 0x1c455d40780 <line:20:3, line:235:15> col:6 all 'bool (bool4)'
| | |-ParmVarDecl 0x1c455d40650 <col:10> col:15 'bool4':'vector<bool, 4>'
| | |-BuiltinAliasAttr 0x1c455d40830 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d408b0 <line:235:6> Implicit
| | `-ConstAttr 0x1c455d408e0 <col:6> Implicit
| |-FunctionDecl 0x1c455d43ef0 <line:20:3, line:239:13> col:6 all 'bool (int)'
| | |-ParmVarDecl 0x1c455d40958 <col:10> col:13 'int'
| | |-BuiltinAliasAttr 0x1c455d43fa0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-BuiltinAliasAttr 0x1c455d44008 <col:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d44058 <line:239:6> Implicit
| | `-ConstAttr 0x1c455d44088 <col:6> Implicit
| |-FunctionDecl 0x1c455d44210 <line:20:3, line:241:14> col:6 all 'bool (int2)'
| | |-ParmVarDecl 0x1c455d440e8 <col:10> col:14 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455d442c0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d44340 <line:241:6> Implicit
| | `-ConstAttr 0x1c455d44370 <col:6> Implicit
| |-FunctionDecl 0x1c455d44500 <line:20:3, line:243:14> col:6 all 'bool (int3)'
| | |-ParmVarDecl 0x1c455d443d0 <col:10> col:14 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455d445b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d44630 <line:243:6> Implicit
| | `-ConstAttr 0x1c455d44660 <col:6> Implicit
| |-FunctionDecl 0x1c455d447f0 <line:20:3, line:245:14> col:6 all 'bool (int4)'
| | |-ParmVarDecl 0x1c455d446c0 <col:10> col:14 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455d448a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d44920 <line:245:6> Implicit
| | `-ConstAttr 0x1c455d44950 <col:6> Implicit
| |-FunctionDecl 0x1c455d44ae0 <line:20:3, line:248:14> col:6 all 'bool (uint)'
| | |-ParmVarDecl 0x1c455d449b0 <col:10> col:14 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455d44b90 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d44c10 <line:248:6> Implicit
| | `-ConstAttr 0x1c455d44c40 <col:6> Implicit
| |-FunctionDecl 0x1c455d44dd0 <line:20:3, line:250:15> col:6 all 'bool (uint2)'
| | |-ParmVarDecl 0x1c455d44ca0 <col:10> col:15 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455d44e80 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d41ce8 <line:250:6> Implicit
| | `-ConstAttr 0x1c455d41d18 <col:6> Implicit
| |-FunctionDecl 0x1c455d41ea0 <line:20:3, line:252:15> col:6 all 'bool (uint3)'
| | |-ParmVarDecl 0x1c455d41d78 <col:10> col:15 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455d41f50 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d41fd0 <line:252:6> Implicit
| | `-ConstAttr 0x1c455d42000 <col:6> Implicit
| |-FunctionDecl 0x1c455d42190 <line:20:3, line:254:15> col:6 all 'bool (uint4)'
| | |-ParmVarDecl 0x1c455d42060 <col:10> col:15 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455d42240 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d422c0 <line:254:6> Implicit
| | `-ConstAttr 0x1c455d422f0 <col:6> Implicit
| |-FunctionDecl 0x1c455d42440 <line:20:3, line:257:15> col:6 all 'bool (float)'
| | |-ParmVarDecl 0x1c455d42358 <col:10> col:15 'float'
| | |-BuiltinAliasAttr 0x1c455d424f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d42570 <line:257:6> Implicit
| | `-ConstAttr 0x1c455d425a0 <col:6> Implicit
| |-FunctionDecl 0x1c455d42730 <line:20:3, line:259:16> col:6 all 'bool (float2)'
| | |-ParmVarDecl 0x1c455d42600 <col:10> col:16 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d427e0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d42860 <line:259:6> Implicit
| | `-ConstAttr 0x1c455d42890 <col:6> Implicit
| |-FunctionDecl 0x1c455d42a20 <line:20:3, line:261:16> col:6 all 'bool (float3)'
| | |-ParmVarDecl 0x1c455d428f0 <col:10> col:16 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d42ad0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d42b50 <line:261:6> Implicit
| | `-ConstAttr 0x1c455d42b80 <col:6> Implicit
| |-FunctionDecl 0x1c455d40c20 <line:20:3, line:263:16> col:6 all 'bool (float4)'
| | |-ParmVarDecl 0x1c455d42be0 <col:10> col:16 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d40cd0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d40d50 <line:263:6> Implicit
| | `-ConstAttr 0x1c455d40d80 <col:6> Implicit
| |-FunctionDecl 0x1c455d40f10 <line:20:3, line:266:17> col:6 all 'bool (int64_t)'
| | |-ParmVarDecl 0x1c455d40de0 <col:10> col:17 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455d40fc0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d41040 <line:266:6> Implicit
| | `-ConstAttr 0x1c455d41070 <col:6> Implicit
| |-FunctionDecl 0x1c455d41200 <line:20:3, line:268:18> col:6 all 'bool (int64_t2)'
| | |-ParmVarDecl 0x1c455d410d0 <col:10> col:18 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455d412b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d41330 <line:268:6> Implicit
| | `-ConstAttr 0x1c455d41360 <col:6> Implicit
| |-FunctionDecl 0x1c455d414f0 <line:20:3, line:270:18> col:6 all 'bool (int64_t3)'
| | |-ParmVarDecl 0x1c455d413c0 <col:10> col:18 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455d415a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d41620 <line:270:6> Implicit
| | `-ConstAttr 0x1c455d41650 <col:6> Implicit
| |-FunctionDecl 0x1c455d417e0 <line:20:3, line:272:18> col:6 all 'bool (int64_t4)'
| | |-ParmVarDecl 0x1c455d416b0 <col:10> col:18 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455d41890 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d41910 <line:272:6> Implicit
| | `-ConstAttr 0x1c455d41940 <col:6> Implicit
| |-FunctionDecl 0x1c455d41ad0 <line:20:3, line:275:18> col:6 all 'bool (uint64_t)'
| | |-ParmVarDecl 0x1c455d419a0 <col:10> col:18 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455d41b80 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d45048 <line:275:6> Implicit
| | `-ConstAttr 0x1c455d45078 <col:6> Implicit
| |-FunctionDecl 0x1c455d45200 <line:20:3, line:277:19> col:6 all 'bool (uint64_t2)'
| | |-ParmVarDecl 0x1c455d450d8 <col:10> col:19 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455d452b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d45330 <line:277:6> Implicit
| | `-ConstAttr 0x1c455d45360 <col:6> Implicit
| |-FunctionDecl 0x1c455d454f0 <line:20:3, line:279:19> col:6 all 'bool (uint64_t3)'
| | |-ParmVarDecl 0x1c455d453c0 <col:10> col:19 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455d455a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d45620 <line:279:6> Implicit
| | `-ConstAttr 0x1c455d45650 <col:6> Implicit
| |-FunctionDecl 0x1c455d457e0 <line:20:3, line:281:19> col:6 all 'bool (uint64_t4)'
| | |-ParmVarDecl 0x1c455d456b0 <col:10> col:19 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455d45890 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d45910 <line:281:6> Implicit
| | `-ConstAttr 0x1c455d45940 <col:6> Implicit
| |-FunctionDecl 0x1c455d45a90 <line:20:3, line:284:16> col:6 all 'bool (double)'
| | |-ParmVarDecl 0x1c455d459a8 <col:10> col:16 'double'
| | |-BuiltinAliasAttr 0x1c455d45b40 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d45bc0 <line:284:6> Implicit
| | `-ConstAttr 0x1c455d45bf0 <col:6> Implicit
| |-FunctionDecl 0x1c455d45d80 <line:20:3, line:286:17> col:6 all 'bool (double2)'
| | |-ParmVarDecl 0x1c455d45c50 <col:10> col:17 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455d45e30 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d45eb0 <line:286:6> Implicit
| | `-ConstAttr 0x1c455d45ee0 <col:6> Implicit
| |-FunctionDecl 0x1c455d461b0 <line:20:3, line:288:17> col:6 all 'bool (double3)'
| | |-ParmVarDecl 0x1c455d45f40 <col:10> col:17 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455d46260 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d462e0 <line:288:6> Implicit
| | `-ConstAttr 0x1c455d46310 <col:6> Implicit
| |-FunctionDecl 0x1c455d464a0 <line:20:3, line:290:17> col:6 all 'bool (double4)'
| | |-ParmVarDecl 0x1c455d46370 <col:10> col:17 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455d46550 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_all
| | |-NoThrowAttr 0x1c455d465d0 <line:290:6> Implicit
| | `-ConstAttr 0x1c455d46600 <col:6> Implicit
| |-FunctionDecl 0x1c455d467f0 <line:20:3, line:305:24> col:6 and 'bool (bool, bool)'
| | |-ParmVarDecl 0x1c455d46660 <col:10, col:15> col:15 x 'bool'
| | |-ParmVarDecl 0x1c455d466e0 <col:18, col:23> col:23 y 'bool'
| | |-BuiltinAliasAttr 0x1c455d468a8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_and
| | |-NoThrowAttr 0x1c455d46928 <line:305:6> Implicit
| | `-ConstAttr 0x1c455d46958 <col:6> Implicit
| |-FunctionDecl 0x1c455d46b80 <line:20:3, line:307:27> col:7 and 'bool2 (bool2, bool2)'
| | |-ParmVarDecl 0x1c455d469a8 <col:11, col:17> col:17 x 'bool2':'vector<bool, 2>'
| | |-ParmVarDecl 0x1c455d46a28 <col:20, col:26> col:26 y 'bool2':'vector<bool, 2>'
| | |-BuiltinAliasAttr 0x1c455d46c38 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_and
| | |-NoThrowAttr 0x1c455d46cb8 <line:307:7> Implicit
| | `-ConstAttr 0x1c455d46ce8 <col:7> Implicit
| |-FunctionDecl 0x1c455d46f20 <line:20:3, line:309:27> col:7 and 'bool3 (bool3, bool3)'
| | |-ParmVarDecl 0x1c455d46d48 <col:11, col:17> col:17 x 'bool3':'vector<bool, 3>'
| | |-ParmVarDecl 0x1c455d46dc8 <col:20, col:26> col:26 y 'bool3':'vector<bool, 3>'
| | |-BuiltinAliasAttr 0x1c455d46fd8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_and
| | |-NoThrowAttr 0x1c455d47058 <line:309:7> Implicit
| | `-ConstAttr 0x1c455d47088 <col:7> Implicit
| |-FunctionDecl 0x1c455d42fb0 <line:20:3, line:311:27> col:7 and 'bool4 (bool4, bool4)'
| | |-ParmVarDecl 0x1c455d42de0 <col:11, col:17> col:17 x 'bool4':'vector<bool, 4>'
| | |-ParmVarDecl 0x1c455d42e60 <col:20, col:26> col:26 y 'bool4':'vector<bool, 4>'
| | |-BuiltinAliasAttr 0x1c455d43068 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_and
| | |-NoThrowAttr 0x1c455d430e8 <line:311:7> Implicit
| | `-ConstAttr 0x1c455d43118 <col:7> Implicit
| |-FunctionDecl 0x1c455d43230 <line:20:3, line:351:14> col:6 any 'bool (half)'
| | |-ParmVarDecl 0x1c455d43180 <col:10> col:14 'half'
| | |-BuiltinAliasAttr 0x1c455d432e0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d43360 <line:351:6> Implicit
| | `-ConstAttr 0x1c455d43390 <col:6> Implicit
| |-FunctionDecl 0x1c455d43490 <line:20:3, line:354:15> col:6 any 'bool (half2)'
| | |-ParmVarDecl 0x1c455d433e0 <col:10> col:15 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d43540 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d435c0 <line:354:6> Implicit
| | `-ConstAttr 0x1c455d435f0 <col:6> Implicit
| |-FunctionDecl 0x1c455d43700 <line:20:3, line:357:15> col:6 any 'bool (half3)'
| | |-ParmVarDecl 0x1c455d43650 <col:10> col:15 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d437b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d43830 <line:357:6> Implicit
| | `-ConstAttr 0x1c455d43860 <col:6> Implicit
| |-FunctionDecl 0x1c455d43970 <line:20:3, line:360:15> col:6 any 'bool (half4)'
| | |-ParmVarDecl 0x1c455d438c0 <col:10> col:15 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d43a20 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d43aa0 <line:360:6> Implicit
| | `-ConstAttr 0x1c455d43ad0 <col:6> Implicit
| |-FunctionDecl 0x1c455d43be0 <line:20:3, line:363:14> col:6 any 'bool (bool)'
| | |-ParmVarDecl 0x1c455d43b30 <col:10> col:14 'bool'
| | |-BuiltinAliasAttr 0x1c455d43c90 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d43d10 <line:363:6> Implicit
| | `-ConstAttr 0x1c455d43d40 <col:6> Implicit
| |-FunctionDecl 0x1c455d472d0 <line:20:3, line:365:15> col:6 any 'bool (bool2)'
| | |-ParmVarDecl 0x1c455d47220 <col:10> col:15 'bool2':'vector<bool, 2>'
| | |-BuiltinAliasAttr 0x1c455d47380 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d47400 <line:365:6> Implicit
| | `-ConstAttr 0x1c455d47430 <col:6> Implicit
| |-FunctionDecl 0x1c455d47540 <line:20:3, line:367:15> col:6 any 'bool (bool3)'
| | |-ParmVarDecl 0x1c455d47490 <col:10> col:15 'bool3':'vector<bool, 3>'
| | |-BuiltinAliasAttr 0x1c455d475f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d47670 <line:367:6> Implicit
| | `-ConstAttr 0x1c455d476a0 <col:6> Implicit
| |-FunctionDecl 0x1c455d477b0 <line:20:3, line:369:15> col:6 any 'bool (bool4)'
| | |-ParmVarDecl 0x1c455d47700 <col:10> col:15 'bool4':'vector<bool, 4>'
| | |-BuiltinAliasAttr 0x1c455d47860 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d478e0 <line:369:6> Implicit
| | `-ConstAttr 0x1c455d47910 <col:6> Implicit
| |-FunctionDecl 0x1c455d47a38 <line:20:3, line:373:13> col:6 any 'bool (int)'
| | |-ParmVarDecl 0x1c455d47988 <col:10> col:13 'int'
| | |-BuiltinAliasAttr 0x1c455d47ae8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-BuiltinAliasAttr 0x1c455d47b50 <col:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d47ba0 <line:373:6> Implicit
| | `-ConstAttr 0x1c455d47bd0 <col:6> Implicit
| |-FunctionDecl 0x1c455d47ce0 <line:20:3, line:375:14> col:6 any 'bool (int2)'
| | |-ParmVarDecl 0x1c455d47c30 <col:10> col:14 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455d47d90 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d47e10 <line:375:6> Implicit
| | `-ConstAttr 0x1c455d47e40 <col:6> Implicit
| |-FunctionDecl 0x1c455d47f50 <line:20:3, line:377:14> col:6 any 'bool (int3)'
| | |-ParmVarDecl 0x1c455d47ea0 <col:10> col:14 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455d48000 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d48080 <line:377:6> Implicit
| | `-ConstAttr 0x1c455d480b0 <col:6> Implicit
| |-FunctionDecl 0x1c455d48330 <line:20:3, line:379:14> col:6 any 'bool (int4)'
| | |-ParmVarDecl 0x1c455d48110 <col:10> col:14 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455d483e0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d48460 <line:379:6> Implicit
| | `-ConstAttr 0x1c455d48490 <col:6> Implicit
| |-FunctionDecl 0x1c455d485a0 <line:20:3, line:382:14> col:6 any 'bool (uint)'
| | |-ParmVarDecl 0x1c455d484f0 <col:10> col:14 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455d48650 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d486d0 <line:382:6> Implicit
| | `-ConstAttr 0x1c455d48700 <col:6> Implicit
| |-FunctionDecl 0x1c455d48810 <line:20:3, line:384:15> col:6 any 'bool (uint2)'
| | |-ParmVarDecl 0x1c455d48760 <col:10> col:15 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455d488c0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d48940 <line:384:6> Implicit
| | `-ConstAttr 0x1c455d48970 <col:6> Implicit
| |-FunctionDecl 0x1c455d48a80 <line:20:3, line:386:15> col:6 any 'bool (uint3)'
| | |-ParmVarDecl 0x1c455d489d0 <col:10> col:15 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455d48b30 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d48bb0 <line:386:6> Implicit
| | `-ConstAttr 0x1c455d48be0 <col:6> Implicit
| |-FunctionDecl 0x1c455d48cf0 <line:20:3, line:388:15> col:6 any 'bool (uint4)'
| | |-ParmVarDecl 0x1c455d48c40 <col:10> col:15 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455d48da0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d48e20 <line:388:6> Implicit
| | `-ConstAttr 0x1c455d48e50 <col:6> Implicit
| |-FunctionDecl 0x1c455d48f68 <line:20:3, line:391:15> col:6 any 'bool (float)'
| | |-ParmVarDecl 0x1c455d48eb8 <col:10> col:15 'float'
| | |-BuiltinAliasAttr 0x1c455d49018 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d49098 <line:391:6> Implicit
| | `-ConstAttr 0x1c455d490c8 <col:6> Implicit
| |-FunctionDecl 0x1c455d491d8 <line:20:3, line:393:16> col:6 any 'bool (float2)'
| | |-ParmVarDecl 0x1c455d49128 <col:10> col:16 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d49288 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d66040 <line:393:6> Implicit
| | `-ConstAttr 0x1c455d66070 <col:6> Implicit
| |-FunctionDecl 0x1c455d66180 <line:20:3, line:395:16> col:6 any 'bool (float3)'
| | |-ParmVarDecl 0x1c455d660d0 <col:10> col:16 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d66230 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d662b0 <line:395:6> Implicit
| | `-ConstAttr 0x1c455d662e0 <col:6> Implicit
| |-FunctionDecl 0x1c455d663f0 <line:20:3, line:397:16> col:6 any 'bool (float4)'
| | |-ParmVarDecl 0x1c455d66340 <col:10> col:16 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d664a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d66520 <line:397:6> Implicit
| | `-ConstAttr 0x1c455d66550 <col:6> Implicit
| |-FunctionDecl 0x1c455d66660 <line:20:3, line:400:17> col:6 any 'bool (int64_t)'
| | |-ParmVarDecl 0x1c455d665b0 <col:10> col:17 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455d66710 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d66790 <line:400:6> Implicit
| | `-ConstAttr 0x1c455d667c0 <col:6> Implicit
| |-FunctionDecl 0x1c455d668d0 <line:20:3, line:402:18> col:6 any 'bool (int64_t2)'
| | |-ParmVarDecl 0x1c455d66820 <col:10> col:18 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455d66980 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d66a00 <line:402:6> Implicit
| | `-ConstAttr 0x1c455d66a30 <col:6> Implicit
| |-FunctionDecl 0x1c455d66b40 <line:20:3, line:404:18> col:6 any 'bool (int64_t3)'
| | |-ParmVarDecl 0x1c455d66a90 <col:10> col:18 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455d66bf0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d66c70 <line:404:6> Implicit
| | `-ConstAttr 0x1c455d66ca0 <col:6> Implicit
| |-FunctionDecl 0x1c455d66db0 <line:20:3, line:406:18> col:6 any 'bool (int64_t4)'
| | |-ParmVarDecl 0x1c455d66d00 <col:10> col:18 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455d66e60 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d66ee0 <line:406:6> Implicit
| | `-ConstAttr 0x1c455d66f10 <col:6> Implicit
| |-FunctionDecl 0x1c455d68260 <line:20:3, line:409:18> col:6 any 'bool (uint64_t)'
| | |-ParmVarDecl 0x1c455d66f70 <col:10> col:18 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455d68310 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d68390 <line:409:6> Implicit
| | `-ConstAttr 0x1c455d683c0 <col:6> Implicit
| |-FunctionDecl 0x1c455d684d0 <line:20:3, line:411:19> col:6 any 'bool (uint64_t2)'
| | |-ParmVarDecl 0x1c455d68420 <col:10> col:19 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455d68580 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d68600 <line:411:6> Implicit
| | `-ConstAttr 0x1c455d68630 <col:6> Implicit
| |-FunctionDecl 0x1c455d68740 <line:20:3, line:413:19> col:6 any 'bool (uint64_t3)'
| | |-ParmVarDecl 0x1c455d68690 <col:10> col:19 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455d687f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d68870 <line:413:6> Implicit
| | `-ConstAttr 0x1c455d688a0 <col:6> Implicit
| |-FunctionDecl 0x1c455d689b0 <line:20:3, line:415:19> col:6 any 'bool (uint64_t4)'
| | |-ParmVarDecl 0x1c455d68900 <col:10> col:19 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455d68a60 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d68ae0 <line:415:6> Implicit
| | `-ConstAttr 0x1c455d68b10 <col:6> Implicit
| |-FunctionDecl 0x1c455d68c28 <line:20:3, line:418:16> col:6 any 'bool (double)'
| | |-ParmVarDecl 0x1c455d68b78 <col:10> col:16 'double'
| | |-BuiltinAliasAttr 0x1c455d68cd8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d68d58 <line:418:6> Implicit
| | `-ConstAttr 0x1c455d68d88 <col:6> Implicit
| |-FunctionDecl 0x1c455d68e98 <line:20:3, line:420:17> col:6 any 'bool (double2)'
| | |-ParmVarDecl 0x1c455d68de8 <col:10> col:17 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455d68f48 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d68fc8 <line:420:6> Implicit
| | `-ConstAttr 0x1c455d68ff8 <col:6> Implicit
| |-FunctionDecl 0x1c455d69108 <line:20:3, line:422:17> col:6 any 'bool (double3)'
| | |-ParmVarDecl 0x1c455d69058 <col:10> col:17 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455d691b8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d6a480 <line:422:6> Implicit
| | `-ConstAttr 0x1c455d6a4b0 <col:6> Implicit
| |-FunctionDecl 0x1c455d6a5c0 <line:20:3, line:424:17> col:6 any 'bool (double4)'
| | |-ParmVarDecl 0x1c455d6a510 <col:10> col:17 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455d6a670 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_any
| | |-NoThrowAttr 0x1c455d6a6f0 <line:424:6> Implicit
| | `-ConstAttr 0x1c455d6a720 <col:6> Implicit
| |-FunctionDecl 0x1c455d6a958 <line:20:3, line:436:27> col:8 asdouble 'double (uint, uint)'
| | |-ParmVarDecl 0x1c455d6a780 <col:17> col:21 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455d6a800 <col:23> col:27 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455d6aa10 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_asdouble
| | |-NoThrowAttr 0x1c455d6aa90 <line:436:8> Implicit
| | `-ConstAttr 0x1c455d6aac0 <col:8> Implicit
| |-FunctionDecl 0x1c455d6ace0 <line:20:3, line:438:30> col:9 asdouble 'double2 (uint2, uint2)'
| | |-ParmVarDecl 0x1c455d6ab10 <col:18> col:23 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455d6ab90 <col:25> col:30 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455d6ad98 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_asdouble
| | |-NoThrowAttr 0x1c455d6ae18 <line:438:9> Implicit
| | `-ConstAttr 0x1c455d6ae48 <col:9> Implicit
| |-FunctionDecl 0x1c455d6b080 <line:20:3, line:440:30> col:9 asdouble 'double3 (uint3, uint3)'
| | |-ParmVarDecl 0x1c455d6aea8 <col:18> col:23 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455d6af28 <col:25> col:30 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455d6b138 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_asdouble
| | |-NoThrowAttr 0x1c455d6b1b8 <line:440:9> Implicit
| | `-ConstAttr 0x1c455d6b1e8 <col:9> Implicit
| |-FunctionDecl 0x1c455d67150 <line:20:3, line:442:30> col:9 asdouble 'double4 (uint4, uint4)'
| | |-ParmVarDecl 0x1c455d6b248 <col:18> col:23 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455d6b2c8 <col:25> col:30 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455d67208 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_asdouble
| | |-NoThrowAttr 0x1c455d67288 <line:442:9> Implicit
| | `-ConstAttr 0x1c455d672b8 <col:9> Implicit
| |-FunctionDecl 0x1c455d673d8 <line:20:3, line:454:15> col:6 asin 'half (half)'
| | |-ParmVarDecl 0x1c455d67320 <col:11> col:15 'half'
| | |-BuiltinAliasAttr 0x1c455d67488 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_asin
| | |-NoThrowAttr 0x1c455d67508 <line:454:6> Implicit
| | `-ConstAttr 0x1c455d67538 <col:6> Implicit
| |-FunctionDecl 0x1c455d67638 <line:20:3, line:457:17> col:7 asin 'half2 (half2)'
| | |-ParmVarDecl 0x1c455d67588 <col:12> col:17 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d676e8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_asin
| | |-NoThrowAttr 0x1c455d67768 <line:457:7> Implicit
| | `-ConstAttr 0x1c455d67798 <col:7> Implicit
| |-FunctionDecl 0x1c455d678a8 <line:20:3, line:460:17> col:7 asin 'half3 (half3)'
| | |-ParmVarDecl 0x1c455d677f8 <col:12> col:17 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d67958 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_asin
| | |-NoThrowAttr 0x1c455d679d8 <line:460:7> Implicit
| | `-ConstAttr 0x1c455d67a08 <col:7> Implicit
| |-FunctionDecl 0x1c455d67b18 <line:20:3, line:463:17> col:7 asin 'half4 (half4)'
| | |-ParmVarDecl 0x1c455d67a68 <col:12> col:17 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d67bc8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_asin
| | |-NoThrowAttr 0x1c455d67c48 <line:463:7> Implicit
| | `-ConstAttr 0x1c455d67c78 <col:7> Implicit
| |-FunctionDecl 0x1c455d67d98 <line:20:3, line:466:17> col:7 used asin 'float (float)'
| | |-ParmVarDecl 0x1c455d67ce0 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455d67e48 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_asin
| | |-NoThrowAttr 0x1c455d67ec8 <line:466:7> Implicit
| | `-ConstAttr 0x1c455d67ef8 <col:7> Implicit
| |-FunctionDecl 0x1c455d68008 <line:20:3, line:468:19> col:8 used asin 'float2 (float2)'
| | |-ParmVarDecl 0x1c455d67f58 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d680b8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_asin
| | |-NoThrowAttr 0x1c455d6d7b0 <line:468:8> Implicit
| | `-ConstAttr 0x1c455d6d7e0 <col:8> Implicit
| |-FunctionDecl 0x1c455d6d8f0 <line:20:3, line:470:19> col:8 used asin 'float3 (float3)'
| | |-ParmVarDecl 0x1c455d6d840 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d6d9a0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_asin
| | |-NoThrowAttr 0x1c455d6da20 <line:470:8> Implicit
| | `-ConstAttr 0x1c455d6da50 <col:8> Implicit
| |-FunctionDecl 0x1c455d6db60 <line:20:3, line:472:19> col:8 used asin 'float4 (float4)'
| | |-ParmVarDecl 0x1c455d6dab0 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d6dc10 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_asin
| | |-NoThrowAttr 0x1c455d6dc90 <line:472:8> Implicit
| | `-ConstAttr 0x1c455d6dcc0 <col:8> Implicit
| |-FunctionDecl 0x1c455d6dde0 <line:20:3, line:484:15> col:6 atan 'half (half)'
| | |-ParmVarDecl 0x1c455d6dd28 <col:11> col:15 'half'
| | |-BuiltinAliasAttr 0x1c455d6de90 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan
| | |-NoThrowAttr 0x1c455d6df10 <line:484:6> Implicit
| | `-ConstAttr 0x1c455d6df40 <col:6> Implicit
| |-FunctionDecl 0x1c455d6e040 <line:20:3, line:487:17> col:7 atan 'half2 (half2)'
| | |-ParmVarDecl 0x1c455d6df90 <col:12> col:17 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d6e0f0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan
| | |-NoThrowAttr 0x1c455d6e170 <line:487:7> Implicit
| | `-ConstAttr 0x1c455d6e1a0 <col:7> Implicit
| |-FunctionDecl 0x1c455d6e2b0 <line:20:3, line:490:17> col:7 atan 'half3 (half3)'
| | |-ParmVarDecl 0x1c455d6e200 <col:12> col:17 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d6e360 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan
| | |-NoThrowAttr 0x1c455d6e3e0 <line:490:7> Implicit
| | `-ConstAttr 0x1c455d6e410 <col:7> Implicit
| |-FunctionDecl 0x1c455d6e520 <line:20:3, line:493:17> col:7 atan 'half4 (half4)'
| | |-ParmVarDecl 0x1c455d6e470 <col:12> col:17 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d6e5d0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan
| | |-NoThrowAttr 0x1c455d6e650 <line:493:7> Implicit
| | `-ConstAttr 0x1c455d6e680 <col:7> Implicit
| |-FunctionDecl 0x1c455d6e8c0 <line:20:3, line:496:17> col:7 used atan 'float (float)'
| | |-ParmVarDecl 0x1c455d6e6e8 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455d6e970 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan
| | |-NoThrowAttr 0x1c455d6e9f0 <line:496:7> Implicit
| | `-ConstAttr 0x1c455d6ea20 <col:7> Implicit
| |-FunctionDecl 0x1c455d6eb30 <line:20:3, line:498:19> col:8 used atan 'float2 (float2)'
| | |-ParmVarDecl 0x1c455d6ea80 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d6ebe0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan
| | |-NoThrowAttr 0x1c455d6ec60 <line:498:8> Implicit
| | `-ConstAttr 0x1c455d6ec90 <col:8> Implicit
| |-FunctionDecl 0x1c455d6eda0 <line:20:3, line:500:19> col:8 used atan 'float3 (float3)'
| | |-ParmVarDecl 0x1c455d6ecf0 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d6ee50 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan
| | |-NoThrowAttr 0x1c455d6eed0 <line:500:8> Implicit
| | `-ConstAttr 0x1c455d6ef00 <col:8> Implicit
| |-FunctionDecl 0x1c455d6f010 <line:20:3, line:502:19> col:8 used atan 'float4 (float4)'
| | |-ParmVarDecl 0x1c455d6ef60 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d6f0c0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan
| | |-NoThrowAttr 0x1c455d6f140 <line:502:8> Implicit
| | `-ConstAttr 0x1c455d6f170 <col:8> Implicit
| |-FunctionDecl 0x1c455d6f378 <line:20:3, line:516:26> col:6 atan2 'half (half, half)'
| | |-ParmVarDecl 0x1c455d6f1d8 <col:12, col:17> col:17 y 'half'
| | |-ParmVarDecl 0x1c455d6f260 <col:20, col:25> col:25 x 'half'
| | |-BuiltinAliasAttr 0x1c455d6f430 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan2
| | |-NoThrowAttr 0x1c455d6f4b0 <line:516:6> Implicit
| | `-ConstAttr 0x1c455d6f4e0 <col:6> Implicit
| |-FunctionDecl 0x1c455d6f700 <line:20:3, line:519:29> col:7 atan2 'half2 (half2, half2)'
| | |-ParmVarDecl 0x1c455d6f530 <col:13, col:19> col:19 y 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455d6f5b0 <col:22, col:28> col:28 x 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d6f7b8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan2
| | |-NoThrowAttr 0x1c455d6f838 <line:519:7> Implicit
| | `-ConstAttr 0x1c455d6f868 <col:7> Implicit
| |-FunctionDecl 0x1c455d6b770 <line:20:3, line:522:29> col:7 atan2 'half3 (half3, half3)'
| | |-ParmVarDecl 0x1c455d6b5a0 <col:13, col:19> col:19 y 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455d6b620 <col:22, col:28> col:28 x 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d6b828 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan2
| | |-NoThrowAttr 0x1c455d6b8a8 <line:522:7> Implicit
| | `-ConstAttr 0x1c455d6b8d8 <col:7> Implicit
| |-FunctionDecl 0x1c455d6bb10 <line:20:3, line:525:29> col:7 atan2 'half4 (half4, half4)'
| | |-ParmVarDecl 0x1c455d6b938 <col:13, col:19> col:19 y 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455d6b9b8 <col:22, col:28> col:28 x 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d6bbc8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan2
| | |-NoThrowAttr 0x1c455d6bc48 <line:525:7> Implicit
| | `-ConstAttr 0x1c455d6bc78 <col:7> Implicit
| |-FunctionDecl 0x1c455d6be88 <line:20:3, line:528:29> col:7 used atan2 'float (float, float)'
| | |-ParmVarDecl 0x1c455d6bce0 <col:13, col:19> col:19 y 'float'
| | |-ParmVarDecl 0x1c455d6bd68 <col:22, col:28> col:28 x 'float'
| | |-BuiltinAliasAttr 0x1c455d6bf40 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan2
| | |-NoThrowAttr 0x1c455d6bfc0 <line:528:7> Implicit
| | `-ConstAttr 0x1c455d6bff0 <col:7> Implicit
| |-FunctionDecl 0x1c455d6c220 <line:20:3, line:530:32> col:8 used atan2 'float2 (float2, float2)'
| | |-ParmVarDecl 0x1c455d6c050 <col:14, col:21> col:21 y 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455d6c0d0 <col:24, col:31> col:31 x 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d6c2d8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan2
| | |-NoThrowAttr 0x1c455d6c358 <line:530:8> Implicit
| | `-ConstAttr 0x1c455d6c388 <col:8> Implicit
| |-FunctionDecl 0x1c455d6fa00 <line:20:3, line:532:32> col:8 used atan2 'float3 (float3, float3)'
| | |-ParmVarDecl 0x1c455d6c3e8 <col:14, col:21> col:21 y 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455d6c468 <col:24, col:31> col:31 x 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d6fab8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan2
| | |-NoThrowAttr 0x1c455d6fb38 <line:532:8> Implicit
| | `-ConstAttr 0x1c455d6fb68 <col:8> Implicit
| |-FunctionDecl 0x1c455d6fda0 <line:20:3, line:534:32> col:8 used atan2 'float4 (float4, float4)'
| | |-ParmVarDecl 0x1c455d6fbc8 <col:14, col:21> col:21 y 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455d6fc48 <col:24, col:31> col:31 x 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d6fe58 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_atan2
| | |-NoThrowAttr 0x1c455d6fed8 <line:534:8> Implicit
| | `-ConstAttr 0x1c455d6ff08 <col:8> Implicit
| |-FunctionDecl 0x1c455d70028 <line:20:3, line:547:15> col:6 ceil 'half (half)'
| | |-ParmVarDecl 0x1c455d6ff70 <col:11> col:15 'half'
| | |-BuiltinAliasAttr 0x1c455d700d8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_ceil
| | |-NoThrowAttr 0x1c455d70158 <line:547:6> Implicit
| | `-ConstAttr 0x1c455d70188 <col:6> Implicit
| |-FunctionDecl 0x1c455d70288 <line:20:3, line:550:17> col:7 ceil 'half2 (half2)'
| | |-ParmVarDecl 0x1c455d701d8 <col:12> col:17 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d70338 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_ceil
| | |-NoThrowAttr 0x1c455d703b8 <line:550:7> Implicit
| | `-ConstAttr 0x1c455d703e8 <col:7> Implicit
| |-FunctionDecl 0x1c455d704f8 <line:20:3, line:553:17> col:7 ceil 'half3 (half3)'
| | |-ParmVarDecl 0x1c455d70448 <col:12> col:17 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d705a8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_ceil
| | |-NoThrowAttr 0x1c455d70628 <line:553:7> Implicit
| | `-ConstAttr 0x1c455d70658 <col:7> Implicit
| |-FunctionDecl 0x1c455d70768 <line:20:3, line:556:17> col:7 ceil 'half4 (half4)'
| | |-ParmVarDecl 0x1c455d706b8 <col:12> col:17 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d70818 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_ceil
| | |-NoThrowAttr 0x1c455d70898 <line:556:7> Implicit
| | `-ConstAttr 0x1c455d708c8 <col:7> Implicit
| |-FunctionDecl 0x1c455d6c6d0 <line:20:3, line:559:17> col:7 used ceil 'float (float)'
| | |-ParmVarDecl 0x1c455d70930 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455d6c780 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_ceil
| | |-NoThrowAttr 0x1c455d6c800 <line:559:7> Implicit
| | `-ConstAttr 0x1c455d6c830 <col:7> Implicit
| |-FunctionDecl 0x1c455d6c940 <line:20:3, line:561:19> col:8 used ceil 'float2 (float2)'
| | |-ParmVarDecl 0x1c455d6c890 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d6c9f0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_ceil
| | |-NoThrowAttr 0x1c455d6ca70 <line:561:8> Implicit
| | `-ConstAttr 0x1c455d6caa0 <col:8> Implicit
| |-FunctionDecl 0x1c455d6cbb0 <line:20:3, line:563:19> col:8 used ceil 'float3 (float3)'
| | |-ParmVarDecl 0x1c455d6cb00 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d6cc60 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_ceil
| | |-NoThrowAttr 0x1c455d6cce0 <line:563:8> Implicit
| | `-ConstAttr 0x1c455d6cd10 <col:8> Implicit
| |-FunctionDecl 0x1c455d6ce20 <line:20:3, line:565:19> col:8 used ceil 'float4 (float4)'
| | |-ParmVarDecl 0x1c455d6cd70 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d6ced0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_ceil
| | |-NoThrowAttr 0x1c455d6cf50 <line:565:8> Implicit
| | `-ConstAttr 0x1c455d6cf80 <col:8> Implicit
| |-FunctionDecl 0x1c455d6d238 <line:20:3, line:584:28> col:6 clamp 'half (half, half, half)'
| | |-ParmVarDecl 0x1c455d6cfe8 <col:12> col:16 'half'
| | |-ParmVarDecl 0x1c455d6d070 <col:18> col:22 'half'
| | |-ParmVarDecl 0x1c455d6d0f8 <col:24> col:28 'half'
| | |-BuiltinAliasAttr 0x1c455d6d2f8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d6d378 <line:584:6> Implicit
| | `-ConstAttr 0x1c455d6d3a8 <col:6> Implicit
| |-FunctionDecl 0x1c455d71bf0 <line:20:3, line:587:32> col:7 clamp 'half2 (half2, half2, half2)'
| | |-ParmVarDecl 0x1c455d6d3f8 <col:13> col:18 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455d6d478 <col:20> col:25 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455d6d4f8 <col:27> col:32 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d71cb0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d71d30 <line:587:7> Implicit
| | `-ConstAttr 0x1c455d71d60 <col:7> Implicit
| |-FunctionDecl 0x1c455d72050 <line:20:3, line:590:32> col:7 clamp 'half3 (half3, half3, half3)'
| | |-ParmVarDecl 0x1c455d71dc0 <col:13> col:18 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455d71e40 <col:20> col:25 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455d71ec0 <col:27> col:32 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d72110 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d72190 <line:590:7> Implicit
| | `-ConstAttr 0x1c455d721c0 <col:7> Implicit
| |-FunctionDecl 0x1c455d724b0 <line:20:3, line:593:32> col:7 clamp 'half4 (half4, half4, half4)'
| | |-ParmVarDecl 0x1c455d72220 <col:13> col:18 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455d722a0 <col:20> col:25 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455d72320 <col:27> col:32 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d72570 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d725f0 <line:593:7> Implicit
| | `-ConstAttr 0x1c455d72620 <col:7> Implicit
| |-FunctionDecl 0x1c455d728d8 <line:20:3, line:624:24> col:5 clamp 'int (int, int, int)'
| | |-ParmVarDecl 0x1c455d72688 <col:11> col:14 'int'
| | |-ParmVarDecl 0x1c455d72710 <col:16> col:19 'int'
| | |-ParmVarDecl 0x1c455d72798 <col:21> col:24 'int'
| | |-BuiltinAliasAttr 0x1c455d72998 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d72a18 <line:624:5> Implicit
| | `-ConstAttr 0x1c455d72a48 <col:5> Implicit
| |-FunctionDecl 0x1c455d70c70 <line:20:3, line:626:28> col:6 clamp 'int2 (int2, int2, int2)'
| | |-ParmVarDecl 0x1c455d72aa8 <col:12> col:16 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455d72b28 <col:18> col:22 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455d70ae0 <col:24> col:28 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455d70d30 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d70db0 <line:626:6> Implicit
| | `-ConstAttr 0x1c455d70de0 <col:6> Implicit
| |-FunctionDecl 0x1c455d710d0 <line:20:3, line:628:28> col:6 clamp 'int3 (int3, int3, int3)'
| | |-ParmVarDecl 0x1c455d70e40 <col:12> col:16 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455d70ec0 <col:18> col:22 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455d70f40 <col:24> col:28 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455d71190 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d71210 <line:628:6> Implicit
| | `-ConstAttr 0x1c455d71240 <col:6> Implicit
| |-FunctionDecl 0x1c455d71530 <line:20:3, line:630:28> col:6 clamp 'int4 (int4, int4, int4)'
| | |-ParmVarDecl 0x1c455d712a0 <col:12> col:16 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455d71320 <col:18> col:22 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455d713a0 <col:24> col:28 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455d715f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d71670 <line:630:6> Implicit
| | `-ConstAttr 0x1c455d716a0 <col:6> Implicit
| |-FunctionDecl 0x1c455d71990 <line:20:3, line:633:28> col:6 clamp 'uint (uint, uint, uint)'
| | |-ParmVarDecl 0x1c455d71700 <col:12> col:16 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455d71780 <col:18> col:22 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455d71800 <col:24> col:28 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455d71a50 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d74f20 <line:633:6> Implicit
| | `-ConstAttr 0x1c455d74f50 <col:6> Implicit
| |-FunctionDecl 0x1c455d75240 <line:20:3, line:635:32> col:7 clamp 'uint2 (uint2, uint2, uint2)'
| | |-ParmVarDecl 0x1c455d74fb0 <col:13> col:18 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455d75030 <col:20> col:25 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455d750b0 <col:27> col:32 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455d75300 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d75380 <line:635:7> Implicit
| | `-ConstAttr 0x1c455d753b0 <col:7> Implicit
| |-FunctionDecl 0x1c455d756a0 <line:20:3, line:637:32> col:7 clamp 'uint3 (uint3, uint3, uint3)'
| | |-ParmVarDecl 0x1c455d75410 <col:13> col:18 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455d75490 <col:20> col:25 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455d75510 <col:27> col:32 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455d75760 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d757e0 <line:637:7> Implicit
| | `-ConstAttr 0x1c455d75810 <col:7> Implicit
| |-FunctionDecl 0x1c455d75b00 <line:20:3, line:639:32> col:7 clamp 'uint4 (uint4, uint4, uint4)'
| | |-ParmVarDecl 0x1c455d75870 <col:13> col:18 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455d758f0 <col:20> col:25 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455d75970 <col:27> col:32 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455d75bc0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d75c40 <line:639:7> Implicit
| | `-ConstAttr 0x1c455d75c70 <col:7> Implicit
| |-FunctionDecl 0x1c455d760b0 <line:20:3, line:642:40> col:9 clamp 'int64_t (int64_t, int64_t, int64_t)'
| | |-ParmVarDecl 0x1c455d75cd0 <col:15> col:22 'int64_t':'long'
| | |-ParmVarDecl 0x1c455d75d50 <col:24> col:31 'int64_t':'long'
| | |-ParmVarDecl 0x1c455d75dd0 <col:33> col:40 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455d76170 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d761f0 <line:642:9> Implicit
| | `-ConstAttr 0x1c455d76220 <col:9> Implicit
| |-FunctionDecl 0x1c455d76510 <line:20:3, line:644:44> col:10 clamp 'int64_t2 (int64_t2, int64_t2, int64_t2)'
| | |-ParmVarDecl 0x1c455d76280 <col:16> col:24 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455d76300 <col:26> col:34 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455d76380 <col:36> col:44 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455d765d0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d76650 <line:644:10> Implicit
| | `-ConstAttr 0x1c455d76680 <col:10> Implicit
| |-FunctionDecl 0x1c455d76970 <line:20:3, line:646:44> col:10 clamp 'int64_t3 (int64_t3, int64_t3, int64_t3)'
| | |-ParmVarDecl 0x1c455d766e0 <col:16> col:24 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455d76760 <col:26> col:34 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455d767e0 <col:36> col:44 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455d76a30 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d76ab0 <line:646:10> Implicit
| | `-ConstAttr 0x1c455d76ae0 <col:10> Implicit
| |-FunctionDecl 0x1c455d76dd0 <line:20:3, line:648:44> col:10 clamp 'int64_t4 (int64_t4, int64_t4, int64_t4)'
| | |-ParmVarDecl 0x1c455d76b40 <col:16> col:24 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455d76bc0 <col:26> col:34 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455d76c40 <col:36> col:44 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455d76e90 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d76f10 <line:648:10> Implicit
| | `-ConstAttr 0x1c455d76f40 <col:10> Implicit
| |-FunctionDecl 0x1c455d72f10 <line:20:3, line:651:44> col:10 clamp 'uint64_t (uint64_t, uint64_t, uint64_t)'
| | |-ParmVarDecl 0x1c455d76fa0 <col:16> col:24 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455d72d00 <col:26> col:34 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455d72d80 <col:36> col:44 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455d72fd0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d73050 <line:651:10> Implicit
| | `-ConstAttr 0x1c455d73080 <col:10> Implicit
| |-FunctionDecl 0x1c455d73370 <line:20:3, line:653:48> col:11 clamp 'uint64_t2 (uint64_t2, uint64_t2, uint64_t2)'
| | |-ParmVarDecl 0x1c455d730e0 <col:17> col:26 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455d73160 <col:28> col:37 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455d731e0 <col:39> col:48 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455d73430 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d734b0 <line:653:11> Implicit
| | `-ConstAttr 0x1c455d734e0 <col:11> Implicit
| |-FunctionDecl 0x1c455d737d0 <line:20:3, line:655:48> col:11 clamp 'uint64_t3 (uint64_t3, uint64_t3, uint64_t3)'
| | |-ParmVarDecl 0x1c455d73540 <col:17> col:26 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455d735c0 <col:28> col:37 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455d73640 <col:39> col:48 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455d73890 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d73910 <line:655:11> Implicit
| | `-ConstAttr 0x1c455d73940 <col:11> Implicit
| |-FunctionDecl 0x1c455d73c30 <line:20:3, line:657:48> col:11 clamp 'uint64_t4 (uint64_t4, uint64_t4, uint64_t4)'
| | |-ParmVarDecl 0x1c455d739a0 <col:17> col:26 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455d73a20 <col:28> col:37 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455d73aa0 <col:39> col:48 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455d77140 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d771c0 <line:657:11> Implicit
| | `-ConstAttr 0x1c455d771f0 <col:11> Implicit
| |-FunctionDecl 0x1c455d774a8 <line:20:3, line:660:32> col:7 clamp 'float (float, float, float)'
| | |-ParmVarDecl 0x1c455d77258 <col:13> col:18 'float'
| | |-ParmVarDecl 0x1c455d772e0 <col:20> col:25 'float'
| | |-ParmVarDecl 0x1c455d77368 <col:27> col:32 'float'
| | |-BuiltinAliasAttr 0x1c455d77568 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d775e8 <line:660:7> Implicit
| | `-ConstAttr 0x1c455d77618 <col:7> Implicit
| |-FunctionDecl 0x1c455d77900 <line:20:3, line:662:36> col:8 clamp 'float2 (float2, float2, float2)'
| | |-ParmVarDecl 0x1c455d77678 <col:14> col:20 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455d776f8 <col:22> col:28 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455d77778 <col:30> col:36 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d779c0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d77a40 <line:662:8> Implicit
| | `-ConstAttr 0x1c455d77a70 <col:8> Implicit
| |-FunctionDecl 0x1c455d77d60 <line:20:3, line:664:36> col:8 clamp 'float3 (float3, float3, float3)'
| | |-ParmVarDecl 0x1c455d77ad0 <col:14> col:20 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455d77b50 <col:22> col:28 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455d77bd0 <col:30> col:36 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d77e20 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d77ea0 <line:664:8> Implicit
| | `-ConstAttr 0x1c455d77ed0 <col:8> Implicit
| |-FunctionDecl 0x1c455d73e90 <line:20:3, line:666:36> col:8 clamp 'float4 (float4, float4, float4)'
| | |-ParmVarDecl 0x1c455d77f30 <col:14> col:20 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455d77fb0 <col:22> col:28 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455d78030 <col:30> col:36 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d73f50 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d73fd0 <line:666:8> Implicit
| | `-ConstAttr 0x1c455d74000 <col:8> Implicit
| |-FunctionDecl 0x1c455d742b8 <line:20:3, line:669:36> col:8 clamp 'double (double, double, double)'
| | |-ParmVarDecl 0x1c455d74068 <col:14> col:20 'double'
| | |-ParmVarDecl 0x1c455d740f0 <col:22> col:28 'double'
| | |-ParmVarDecl 0x1c455d74178 <col:30> col:36 'double'
| | |-BuiltinAliasAttr 0x1c455d74378 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d743f8 <line:669:8> Implicit
| | `-ConstAttr 0x1c455d74428 <col:8> Implicit
| |-FunctionDecl 0x1c455d74710 <line:20:3, line:671:40> col:9 clamp 'double2 (double2, double2, double2)'
| | |-ParmVarDecl 0x1c455d74488 <col:15> col:22 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455d74508 <col:24> col:31 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455d74588 <col:33> col:40 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455d747d0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d74850 <line:671:9> Implicit
| | `-ConstAttr 0x1c455d74880 <col:9> Implicit
| |-FunctionDecl 0x1c455d74b70 <line:20:3, line:673:40> col:9 clamp 'double3 (double3, double3, double3)'
| | |-ParmVarDecl 0x1c455d748e0 <col:15> col:22 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455d74960 <col:24> col:31 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455d749e0 <col:33> col:40 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455d74c30 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d74cb0 <line:673:9> Implicit
| | `-ConstAttr 0x1c455d74ce0 <col:9> Implicit
| |-FunctionDecl 0x1c455d7a680 <line:20:3, line:675:40> col:9 clamp 'double4 (double4, double4, double4)'
| | |-ParmVarDecl 0x1c455d74d40 <col:15> col:22 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455d7a470 <col:24> col:31 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455d7a4f0 <col:33> col:40 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455d7a740 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clamp
| | |-NoThrowAttr 0x1c455d7a7c0 <line:675:9> Implicit
| | `-ConstAttr 0x1c455d7a7f0 <col:9> Implicit
| |-FunctionDecl 0x1c455d7a940 <line:20:3, line:686:16> col:6 clip 'void (float)'
| | |-ParmVarDecl 0x1c455d7a858 <col:11> col:16 'float'
| | |-BuiltinAliasAttr 0x1c455d7a9f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clip
| | |-NoThrowAttr 0x1c455d7aa70 <line:686:6> Implicit
| | `-ConstAttr 0x1c455d7aaa0 <col:6> Implicit
| |-FunctionDecl 0x1c455d7ac20 <line:20:3, line:688:17> col:6 clip 'void (float2)'
| | |-ParmVarDecl 0x1c455d7aaf0 <col:11> col:17 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d7acd0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clip
| | |-NoThrowAttr 0x1c455d7ad50 <line:688:6> Implicit
| | `-ConstAttr 0x1c455d7ad80 <col:6> Implicit
| |-FunctionDecl 0x1c455d7af10 <line:20:3, line:690:17> col:6 clip 'void (float3)'
| | |-ParmVarDecl 0x1c455d7ade0 <col:11> col:17 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d7afc0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clip
| | |-NoThrowAttr 0x1c455d7b040 <line:690:6> Implicit
| | `-ConstAttr 0x1c455d7b070 <col:6> Implicit
| |-FunctionDecl 0x1c455d7b200 <line:20:3, line:692:17> col:6 clip 'void (float4)'
| | |-ParmVarDecl 0x1c455d7b0d0 <col:11> col:17 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d7b2b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_clip
| | |-NoThrowAttr 0x1c455d7b330 <line:692:6> Implicit
| | `-ConstAttr 0x1c455d7b360 <col:6> Implicit
| |-FunctionDecl 0x1c455d79390 <line:20:3, line:704:14> col:6 cos 'half (half)'
| | |-ParmVarDecl 0x1c455d7b3c8 <col:10> col:14 'half'
| | |-BuiltinAliasAttr 0x1c455d79440 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cos
| | |-NoThrowAttr 0x1c455d794c0 <line:704:6> Implicit
| | `-ConstAttr 0x1c455d794f0 <col:6> Implicit
| |-FunctionDecl 0x1c455d795f0 <line:20:3, line:707:16> col:7 cos 'half2 (half2)'
| | |-ParmVarDecl 0x1c455d79540 <col:11> col:16 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d796a0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cos
| | |-NoThrowAttr 0x1c455d79720 <line:707:7> Implicit
| | `-ConstAttr 0x1c455d79750 <col:7> Implicit
| |-FunctionDecl 0x1c455d79860 <line:20:3, line:710:16> col:7 cos 'half3 (half3)'
| | |-ParmVarDecl 0x1c455d797b0 <col:11> col:16 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d79910 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cos
| | |-NoThrowAttr 0x1c455d79990 <line:710:7> Implicit
| | `-ConstAttr 0x1c455d799c0 <col:7> Implicit
| |-FunctionDecl 0x1c455d79ad0 <line:20:3, line:713:16> col:7 cos 'half4 (half4)'
| | |-ParmVarDecl 0x1c455d79a20 <col:11> col:16 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d79b80 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cos
| | |-NoThrowAttr 0x1c455d79c00 <line:713:7> Implicit
| | `-ConstAttr 0x1c455d79c30 <col:7> Implicit
| |-FunctionDecl 0x1c455d79d50 <line:20:3, line:716:16> col:7 used cos 'float (float)'
| | |-ParmVarDecl 0x1c455d79c98 <col:11> col:16 'float'
| | |-BuiltinAliasAttr 0x1c455d79e00 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cos
| | |-NoThrowAttr 0x1c455d79e80 <line:716:7> Implicit
| | `-ConstAttr 0x1c455d79eb0 <col:7> Implicit
| |-FunctionDecl 0x1c455d79fc0 <line:20:3, line:718:18> col:8 used cos 'float2 (float2)'
| | |-ParmVarDecl 0x1c455d79f10 <col:12> col:18 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d7a070 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cos
| | |-NoThrowAttr 0x1c455d7a0f0 <line:718:8> Implicit
| | `-ConstAttr 0x1c455d7a120 <col:8> Implicit
| |-FunctionDecl 0x1c455d7a230 <line:20:3, line:720:18> col:8 used cos 'float3 (float3)'
| | |-ParmVarDecl 0x1c455d7a180 <col:12> col:18 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d7a2e0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cos
| | |-NoThrowAttr 0x1c455d7b580 <line:720:8> Implicit
| | `-ConstAttr 0x1c455d7b5b0 <col:8> Implicit
| |-FunctionDecl 0x1c455d7b6c0 <line:20:3, line:722:18> col:8 used cos 'float4 (float4)'
| | |-ParmVarDecl 0x1c455d7b610 <col:12> col:18 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d7b770 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cos
| | |-NoThrowAttr 0x1c455d7b7f0 <line:722:8> Implicit
| | `-ConstAttr 0x1c455d7b820 <col:8> Implicit
| |-FunctionDecl 0x1c455d7b940 <line:20:3, line:734:15> col:6 cosh 'half (half)'
| | |-ParmVarDecl 0x1c455d7b888 <col:11> col:15 'half'
| | |-BuiltinAliasAttr 0x1c455d7b9f0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cosh
| | |-NoThrowAttr 0x1c455d7ba70 <line:734:6> Implicit
| | `-ConstAttr 0x1c455d7baa0 <col:6> Implicit
| |-FunctionDecl 0x1c455d7bba0 <line:20:3, line:737:17> col:7 cosh 'half2 (half2)'
| | |-ParmVarDecl 0x1c455d7baf0 <col:12> col:17 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d7bc50 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cosh
| | |-NoThrowAttr 0x1c455d7bcd0 <line:737:7> Implicit
| | `-ConstAttr 0x1c455d7bd00 <col:7> Implicit
| |-FunctionDecl 0x1c455d7be10 <line:20:3, line:740:17> col:7 cosh 'half3 (half3)'
| | |-ParmVarDecl 0x1c455d7bd60 <col:12> col:17 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d7bec0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cosh
| | |-NoThrowAttr 0x1c455d7bf40 <line:740:7> Implicit
| | `-ConstAttr 0x1c455d7bf70 <col:7> Implicit
| |-FunctionDecl 0x1c455d7c080 <line:20:3, line:743:17> col:7 cosh 'half4 (half4)'
| | |-ParmVarDecl 0x1c455d7bfd0 <col:12> col:17 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d7c130 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cosh
| | |-NoThrowAttr 0x1c455d7c1b0 <line:743:7> Implicit
| | `-ConstAttr 0x1c455d7c1e0 <col:7> Implicit
| |-FunctionDecl 0x1c455d7c300 <line:20:3, line:746:17> col:7 used cosh 'float (float)'
| | |-ParmVarDecl 0x1c455d7c248 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455d7c3b0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cosh
| | |-NoThrowAttr 0x1c455d7c430 <line:746:7> Implicit
| | `-ConstAttr 0x1c455d7c460 <col:7> Implicit
| |-FunctionDecl 0x1c455d69370 <line:20:3, line:748:19> col:8 used cosh 'float2 (float2)'
| | |-ParmVarDecl 0x1c455d7c4c0 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d69420 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cosh
| | |-NoThrowAttr 0x1c455d694a0 <line:748:8> Implicit
| | `-ConstAttr 0x1c455d694d0 <col:8> Implicit
| |-FunctionDecl 0x1c455d695e0 <line:20:3, line:750:19> col:8 used cosh 'float3 (float3)'
| | |-ParmVarDecl 0x1c455d69530 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d69690 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cosh
| | |-NoThrowAttr 0x1c455d69710 <line:750:8> Implicit
| | `-ConstAttr 0x1c455d69740 <col:8> Implicit
| |-FunctionDecl 0x1c455d69850 <line:20:3, line:752:19> col:8 used cosh 'float4 (float4)'
| | |-ParmVarDecl 0x1c455d697a0 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d69900 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_cosh
| | |-NoThrowAttr 0x1c455d69980 <line:752:8> Implicit
| | `-ConstAttr 0x1c455d699b0 <col:8> Implicit
| |-FunctionDecl 0x1c455d69b30 <line:797:1, col:80> col:19 countbits 'const uint (int)' inline
| | |-ParmVarDecl 0x1c455d69a08 <col:29, col:33> col:33 used x 'int'
| | `-CompoundStmt 0x1c455d69fc8 <col:36, col:80>
| |   `-ReturnStmt 0x1c455d69fb8 <col:38, col:77>
| |     `-ImplicitCastExpr 0x1c455d69fa0 <col:45, col:77> 'const uint':'const unsigned int' <IntegralCast>
| |       `-CallExpr 0x1c455d69f58 <col:45, col:77> 'int'
| |         |-ImplicitCastExpr 0x1c455d69f40 <col:45> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d69e80 <col:45> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d69f88 <col:76> 'int' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d69eb8 <col:76> 'int' lvalue ParmVar 0x1c455d69a08 'x' 'int'
| |-FunctionDecl 0x1c455d6a120 <line:798:1, line:800:1> line:798:20 countbits 'const uint2 (int2)' inline
| | |-ParmVarDecl 0x1c455d69ff0 <col:30, col:35> col:35 used x 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455d6a2c0 <col:38, line:800:1>
| |   `-ReturnStmt 0x1c455d6a2b0 <line:799:3, col:42>
| |     `-ImplicitCastExpr 0x1c455d6a298 <col:10, col:42> 'vector<uint, 2>' <IntegralCast>
| |       `-CallExpr 0x1c455d6a250 <col:10, col:42> 'int2':'vector<int, 2>'
| |         |-ImplicitCastExpr 0x1c455d6a238 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d6a1f8 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d6a280 <col:41> 'int2':'vector<int, 2>' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d6a218 <col:41> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455d69ff0 'x' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455d782f0 <line:801:1, line:803:1> line:801:20 countbits 'const uint3 (int3)' inline
| | |-ParmVarDecl 0x1c455d6a2e8 <col:30, col:35> col:35 used x 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455d78490 <col:38, line:803:1>
| |   `-ReturnStmt 0x1c455d78480 <line:802:3, col:42>
| |     `-ImplicitCastExpr 0x1c455d78468 <col:10, col:42> 'vector<uint, 3>' <IntegralCast>
| |       `-CallExpr 0x1c455d78420 <col:10, col:42> 'int3':'vector<int, 3>'
| |         |-ImplicitCastExpr 0x1c455d78408 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d783c8 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d78450 <col:41> 'int3':'vector<int, 3>' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d783e8 <col:41> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455d6a2e8 'x' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455d785e0 <line:804:1, line:806:1> line:804:20 countbits 'const uint4 (int4)' inline
| | |-ParmVarDecl 0x1c455d784b8 <col:30, col:35> col:35 used x 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455d78780 <col:38, line:806:1>
| |   `-ReturnStmt 0x1c455d78770 <line:805:3, col:42>
| |     `-ImplicitCastExpr 0x1c455d78758 <col:10, col:42> 'vector<uint, 4>' <IntegralCast>
| |       `-CallExpr 0x1c455d78710 <col:10, col:42> 'int4':'vector<int, 4>'
| |         |-ImplicitCastExpr 0x1c455d786f8 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d786b8 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d78740 <col:41> 'int4':'vector<int, 4>' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d786d8 <col:41> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455d784b8 'x' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455d788d0 <line:808:1, line:810:1> line:808:19 countbits 'const uint (uint)' inline
| | |-ParmVarDecl 0x1c455d787a8 <col:29, col:34> col:34 used x 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455d78a58 <col:37, line:810:1>
| |   `-ReturnStmt 0x1c455d78a48 <line:809:3, col:42>
| |     `-CallExpr 0x1c455d78a00 <col:10, col:42> 'uint':'unsigned int'
| |       |-ImplicitCastExpr 0x1c455d789e8 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455d789a8 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |       `-ImplicitCastExpr 0x1c455d78a30 <col:41> 'uint':'unsigned int' <LValueToRValue>
| |         `-DeclRefExpr 0x1c455d789c8 <col:41> 'uint':'unsigned int' lvalue ParmVar 0x1c455d787a8 'x' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455d78bb0 <line:811:1, line:813:1> line:811:20 countbits 'const uint2 (uint2)' inline
| | |-ParmVarDecl 0x1c455d78a80 <col:30, col:36> col:36 used x 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455d78d38 <col:39, line:813:1>
| |   `-ReturnStmt 0x1c455d78d28 <line:812:3, col:42>
| |     `-CallExpr 0x1c455d78ce0 <col:10, col:42> 'uint2':'vector<uint, 2>'
| |       |-ImplicitCastExpr 0x1c455d78cc8 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455d78c88 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |       `-ImplicitCastExpr 0x1c455d78d10 <col:41> 'uint2':'vector<uint, 2>' <LValueToRValue>
| |         `-DeclRefExpr 0x1c455d78ca8 <col:41> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455d78a80 'x' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455d78e90 <line:814:1, line:816:1> line:814:20 countbits 'const uint3 (uint3)' inline
| | |-ParmVarDecl 0x1c455d78d60 <col:30, col:36> col:36 used x 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455d79018 <col:39, line:816:1>
| |   `-ReturnStmt 0x1c455d79008 <line:815:3, col:42>
| |     `-CallExpr 0x1c455d78fc0 <col:10, col:42> 'uint3':'vector<uint, 3>'
| |       |-ImplicitCastExpr 0x1c455d78fa8 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455d78f68 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |       `-ImplicitCastExpr 0x1c455d78ff0 <col:41> 'uint3':'vector<uint, 3>' <LValueToRValue>
| |         `-DeclRefExpr 0x1c455d78f88 <col:41> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455d78d60 'x' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455d79170 <line:817:1, line:819:1> line:817:20 countbits 'const uint4 (uint4)' inline
| | |-ParmVarDecl 0x1c455d79040 <col:30, col:36> col:36 used x 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455d7d850 <col:39, line:819:1>
| |   `-ReturnStmt 0x1c455d7d840 <line:818:3, col:42>
| |     `-CallExpr 0x1c455d7d7f8 <col:10, col:42> 'uint4':'vector<uint, 4>'
| |       |-ImplicitCastExpr 0x1c455d7d7e0 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455d7d7a0 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |       `-ImplicitCastExpr 0x1c455d7d828 <col:41> 'uint4':'vector<uint, 4>' <LValueToRValue>
| |         `-DeclRefExpr 0x1c455d7d7c0 <col:41> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455d79040 'x' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455d7d9a0 <line:821:1, line:823:1> line:821:19 countbits 'const uint (int64_t)' inline
| | |-ParmVarDecl 0x1c455d7d878 <col:29, col:37> col:37 used x 'int64_t':'long'
| | `-CompoundStmt 0x1c455d7db40 <col:40, line:823:1>
| |   `-ReturnStmt 0x1c455d7db30 <line:822:3, col:42>
| |     `-ImplicitCastExpr 0x1c455d7db18 <col:10, col:42> 'const uint':'const unsigned int' <IntegralCast>
| |       `-CallExpr 0x1c455d7dad0 <col:10, col:42> 'int64_t':'long'
| |         |-ImplicitCastExpr 0x1c455d7dab8 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d7da78 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d7db00 <col:41> 'int64_t':'long' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d7da98 <col:41> 'int64_t':'long' lvalue ParmVar 0x1c455d7d878 'x' 'int64_t':'long'
| |-FunctionDecl 0x1c455d7dc90 <line:824:1, line:826:1> line:824:20 countbits 'const uint2 (int64_t2)' inline
| | |-ParmVarDecl 0x1c455d7db68 <col:30, col:39> col:39 used x 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455d7de30 <col:42, line:826:1>
| |   `-ReturnStmt 0x1c455d7de20 <line:825:3, col:42>
| |     `-ImplicitCastExpr 0x1c455d7de08 <col:10, col:42> 'vector<uint, 2>' <IntegralCast>
| |       `-CallExpr 0x1c455d7ddc0 <col:10, col:42> 'int64_t2':'vector<int64_t, 2>'
| |         |-ImplicitCastExpr 0x1c455d7dda8 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d7dd68 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d7ddf0 <col:41> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d7dd88 <col:41> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455d7db68 'x' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455d7df80 <line:827:1, line:829:1> line:827:20 countbits 'const uint3 (int64_t3)' inline
| | |-ParmVarDecl 0x1c455d7de58 <col:30, col:39> col:39 used x 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455d7e120 <col:42, line:829:1>
| |   `-ReturnStmt 0x1c455d7e110 <line:828:3, col:42>
| |     `-ImplicitCastExpr 0x1c455d7e0f8 <col:10, col:42> 'vector<uint, 3>' <IntegralCast>
| |       `-CallExpr 0x1c455d7e0b0 <col:10, col:42> 'int64_t3':'vector<int64_t, 3>'
| |         |-ImplicitCastExpr 0x1c455d7e098 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d7e058 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d7e0e0 <col:41> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d7e078 <col:41> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455d7de58 'x' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455d7e270 <line:830:1, line:832:1> line:830:20 countbits 'const uint4 (int64_t4)' inline
| | |-ParmVarDecl 0x1c455d7e148 <col:30, col:39> col:39 used x 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455d7e410 <col:42, line:832:1>
| |   `-ReturnStmt 0x1c455d7e400 <line:831:3, col:42>
| |     `-ImplicitCastExpr 0x1c455d7e3e8 <col:10, col:42> 'vector<uint, 4>' <IntegralCast>
| |       `-CallExpr 0x1c455d7e3a0 <col:10, col:42> 'int64_t4':'vector<int64_t, 4>'
| |         |-ImplicitCastExpr 0x1c455d7e388 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d7e348 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d7e3d0 <col:41> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d7e368 <col:41> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455d7e148 'x' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455d7e560 <line:834:1, line:836:1> line:834:19 countbits 'const uint (uint64_t)' inline
| | |-ParmVarDecl 0x1c455d7e438 <col:29, col:38> col:38 used x 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455d7e700 <col:41, line:836:1>
| |   `-ReturnStmt 0x1c455d7e6f0 <line:835:3, col:42>
| |     `-ImplicitCastExpr 0x1c455d7e6d8 <col:10, col:42> 'const uint':'const unsigned int' <IntegralCast>
| |       `-CallExpr 0x1c455d7e690 <col:10, col:42> 'uint64_t':'unsigned long'
| |         |-ImplicitCastExpr 0x1c455d7e678 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d7e638 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d7e6c0 <col:41> 'uint64_t':'unsigned long' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d7e658 <col:41> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455d7e438 'x' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455d7e970 <line:837:1, line:839:1> line:837:20 countbits 'const uint2 (uint64_t2)' inline
| | |-ParmVarDecl 0x1c455d7e728 <col:30, col:40> col:40 used x 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455d7eb10 <col:43, line:839:1>
| |   `-ReturnStmt 0x1c455d7eb00 <line:838:3, col:42>
| |     `-ImplicitCastExpr 0x1c455d7eae8 <col:10, col:42> 'vector<uint, 2>' <IntegralCast>
| |       `-CallExpr 0x1c455d7eaa0 <col:10, col:42> 'uint64_t2':'vector<uint64_t, 2>'
| |         |-ImplicitCastExpr 0x1c455d7ea88 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d7ea48 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d7ead0 <col:41> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d7ea68 <col:41> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455d7e728 'x' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455d7ec60 <line:840:1, line:842:1> line:840:20 countbits 'const uint3 (uint64_t3)' inline
| | |-ParmVarDecl 0x1c455d7eb38 <col:30, col:40> col:40 used x 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455d7ee00 <col:43, line:842:1>
| |   `-ReturnStmt 0x1c455d7edf0 <line:841:3, col:42>
| |     `-ImplicitCastExpr 0x1c455d7edd8 <col:10, col:42> 'vector<uint, 3>' <IntegralCast>
| |       `-CallExpr 0x1c455d7ed90 <col:10, col:42> 'uint64_t3':'vector<uint64_t, 3>'
| |         |-ImplicitCastExpr 0x1c455d7ed78 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d7ed38 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d7edc0 <col:41> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d7ed58 <col:41> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455d7eb38 'x' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455d7ef50 <line:843:1, line:845:1> line:843:20 countbits 'const uint4 (uint64_t4)' inline
| | |-ParmVarDecl 0x1c455d7ee28 <col:30, col:40> col:40 used x 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455d7f0f0 <col:43, line:845:1>
| |   `-ReturnStmt 0x1c455d7f0e0 <line:844:3, col:42>
| |     `-ImplicitCastExpr 0x1c455d7f0c8 <col:10, col:42> 'vector<uint, 4>' <IntegralCast>
| |       `-CallExpr 0x1c455d7f080 <col:10, col:42> 'uint64_t4':'vector<uint64_t, 4>'
| |         |-ImplicitCastExpr 0x1c455d7f068 <col:10> 'void (*)(...) noexcept' <BuiltinFnToFnPtr>
| |         | `-DeclRefExpr 0x1c455d7f028 <col:10> '<builtin fn type>' Function 0x1c455d69cc8 '__builtin_elementwise_popcount' 'void (...) noexcept'
| |         `-ImplicitCastExpr 0x1c455d7f0b0 <col:41> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue>
| |           `-DeclRefExpr 0x1c455d7f048 <col:41> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455d7ee28 'x' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455d7f1e8 <line:20:3, line:857:18> col:6 degrees 'half (half)'
| | |-ParmVarDecl 0x1c455d7f130 <col:14> col:18 'half'
| | |-BuiltinAliasAttr 0x1c455d7f298 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_degrees
| | |-NoThrowAttr 0x1c455d7f318 <line:857:6> Implicit
| | `-ConstAttr 0x1c455d7f348 <col:6> Implicit
| |-FunctionDecl 0x1c455d7f448 <line:20:3, line:860:20> col:7 degrees 'half2 (half2)'
| | |-ParmVarDecl 0x1c455d7f398 <col:15> col:20 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d7f4f8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_degrees
| | |-NoThrowAttr 0x1c455d7f578 <line:860:7> Implicit
| | `-ConstAttr 0x1c455d7f5a8 <col:7> Implicit
| |-FunctionDecl 0x1c455d7f6b8 <line:20:3, line:863:20> col:7 degrees 'half3 (half3)'
| | |-ParmVarDecl 0x1c455d7f608 <col:15> col:20 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d7f768 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_degrees
| | |-NoThrowAttr 0x1c455d7f7e8 <line:863:7> Implicit
| | `-ConstAttr 0x1c455d7f818 <col:7> Implicit
| |-FunctionDecl 0x1c455d7fa70 <line:20:3, line:866:20> col:7 degrees 'half4 (half4)'
| | |-ParmVarDecl 0x1c455d7f9c0 <col:15> col:20 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d7fb20 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_degrees
| | |-NoThrowAttr 0x1c455d7fba0 <line:866:7> Implicit
| | `-ConstAttr 0x1c455d7fbd0 <col:7> Implicit
| |-FunctionDecl 0x1c455d7fcf0 <line:20:3, line:869:20> col:7 used degrees 'float (float)'
| | |-ParmVarDecl 0x1c455d7fc38 <col:15> col:20 'float'
| | |-BuiltinAliasAttr 0x1c455d7fda0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_degrees
| | |-NoThrowAttr 0x1c455d7fe20 <line:869:7> Implicit
| | `-ConstAttr 0x1c455d7fe50 <col:7> Implicit
| |-FunctionDecl 0x1c455d7ff60 <line:20:3, line:871:22> col:8 used degrees 'float2 (float2)'
| | |-ParmVarDecl 0x1c455d7feb0 <col:16> col:22 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d80010 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_degrees
| | |-NoThrowAttr 0x1c455d80090 <line:871:8> Implicit
| | `-ConstAttr 0x1c455d800c0 <col:8> Implicit
| |-FunctionDecl 0x1c455d801d0 <line:20:3, line:873:22> col:8 used degrees 'float3 (float3)'
| | |-ParmVarDecl 0x1c455d80120 <col:16> col:22 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d80280 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_degrees
| | |-NoThrowAttr 0x1c455d80300 <line:873:8> Implicit
| | `-ConstAttr 0x1c455d80330 <col:8> Implicit
| |-FunctionDecl 0x1c455d80440 <line:20:3, line:875:22> col:8 used degrees 'float4 (float4)'
| | |-ParmVarDecl 0x1c455d80390 <col:16> col:22 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d804f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_degrees
| | |-NoThrowAttr 0x1c455d80570 <line:875:8> Implicit
| | `-ConstAttr 0x1c455d805a0 <col:8> Implicit
| |-FunctionDecl 0x1c455d80768 <line:20:3, line:888:20> col:6 dot 'half (half, half)'
| | |-ParmVarDecl 0x1c455d80608 <col:10> col:14 'half'
| | |-ParmVarDecl 0x1c455d80690 <col:16> col:20 'half'
| | |-BuiltinAliasAttr 0x1c455d80820 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d808a0 <line:888:6> Implicit
| | `-ConstAttr 0x1c455d808d0 <col:6> Implicit
| |-FunctionDecl 0x1c455d7c7e8 <line:20:3, line:891:22> col:6 dot 'half (half2, half2)'
| | |-ParmVarDecl 0x1c455d80920 <col:10> col:15 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455d7c690 <col:17> col:22 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455d7c8a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d7c920 <line:891:6> Implicit
| | `-ConstAttr 0x1c455d7c950 <col:6> Implicit
| |-FunctionDecl 0x1c455d7cb88 <line:20:3, line:894:22> col:6 dot 'half (half3, half3)'
| | |-ParmVarDecl 0x1c455d7c9b0 <col:10> col:15 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455d7ca30 <col:17> col:22 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455d7cc40 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d7ccc0 <line:894:6> Implicit
| | `-ConstAttr 0x1c455d7ccf0 <col:6> Implicit
| |-FunctionDecl 0x1c455d7cf28 <line:20:3, line:897:22> col:6 dot 'half (half4, half4)'
| | |-ParmVarDecl 0x1c455d7cd50 <col:10> col:15 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455d7cdd0 <col:17> col:22 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455d7cfe0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d7d060 <line:897:6> Implicit
| | `-ConstAttr 0x1c455d7d090 <col:6> Implicit
| |-FunctionDecl 0x1c455d7d258 <line:20:3, line:928:23> col:7 dot 'float (float, float)'
| | |-ParmVarDecl 0x1c455d7d0f8 <col:11> col:16 'float'
| | |-ParmVarDecl 0x1c455d7d180 <col:18> col:23 'float'
| | |-BuiltinAliasAttr 0x1c455d7d310 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d7d390 <line:928:7> Implicit
| | `-ConstAttr 0x1c455d7d3c0 <col:7> Implicit
| |-FunctionDecl 0x1c455d80ad0 <line:20:3, line:930:25> col:7 dot 'float (float2, float2)'
| | |-ParmVarDecl 0x1c455d7d420 <col:11> col:17 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455d7d4a0 <col:19> col:25 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455d80b88 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d80c08 <line:930:7> Implicit
| | `-ConstAttr 0x1c455d80c38 <col:7> Implicit
| |-FunctionDecl 0x1c455d80e78 <line:20:3, line:932:25> col:7 dot 'float (float3, float3)'
| | |-ParmVarDecl 0x1c455d80c98 <col:11> col:17 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455d80d18 <col:19> col:25 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455d80f30 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d80fb0 <line:932:7> Implicit
| | `-ConstAttr 0x1c455d80fe0 <col:7> Implicit
| |-FunctionDecl 0x1c455d81218 <line:20:3, line:934:25> col:7 dot 'float (float4, float4)'
| | |-ParmVarDecl 0x1c455d81040 <col:11> col:17 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455d810c0 <col:19> col:25 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455d812d0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d81350 <line:934:7> Implicit
| | `-ConstAttr 0x1c455d81380 <col:7> Implicit
| |-FunctionDecl 0x1c455d81588 <line:20:3, line:937:26> col:8 dot 'double (double, double)'
| | |-ParmVarDecl 0x1c455d813e8 <col:12> col:18 'double'
| | |-ParmVarDecl 0x1c455d81470 <col:20> col:26 'double'
| | |-BuiltinAliasAttr 0x1c455d81640 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d816c0 <line:937:8> Implicit
| | `-ConstAttr 0x1c455d816f0 <col:8> Implicit
| |-FunctionDecl 0x1c455d818f8 <line:20:3, line:940:17> col:5 dot 'int (int, int)'
| | |-ParmVarDecl 0x1c455d81758 <col:9> col:12 'int'
| | |-ParmVarDecl 0x1c455d817e0 <col:14> col:17 'int'
| | |-BuiltinAliasAttr 0x1c455d819b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d81a30 <line:940:5> Implicit
| | `-ConstAttr 0x1c455d81a60 <col:5> Implicit
| |-FunctionDecl 0x1c455d83fd8 <line:20:3, line:942:19> col:5 dot 'int (int2, int2)'
| | |-ParmVarDecl 0x1c455d83e00 <col:9> col:13 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455d83e80 <col:15> col:19 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455d84090 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d84110 <line:942:5> Implicit
| | `-ConstAttr 0x1c455d84140 <col:5> Implicit
| |-FunctionDecl 0x1c455d84378 <line:20:3, line:944:19> col:5 dot 'int (int3, int3)'
| | |-ParmVarDecl 0x1c455d841a0 <col:9> col:13 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455d84220 <col:15> col:19 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455d84430 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d844b0 <line:944:5> Implicit
| | `-ConstAttr 0x1c455d844e0 <col:5> Implicit
| |-FunctionDecl 0x1c455d84718 <line:20:3, line:946:19> col:5 dot 'int (int4, int4)'
| | |-ParmVarDecl 0x1c455d84540 <col:9> col:13 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455d845c0 <col:15> col:19 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455d847d0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d84850 <line:946:5> Implicit
| | `-ConstAttr 0x1c455d84880 <col:5> Implicit
| |-FunctionDecl 0x1c455d84ab0 <line:20:3, line:949:20> col:6 dot 'uint (uint, uint)'
| | |-ParmVarDecl 0x1c455d848e0 <col:10> col:14 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455d84960 <col:16> col:20 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455d84b68 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d84be8 <line:949:6> Implicit
| | `-ConstAttr 0x1c455d84c18 <col:6> Implicit
| |-FunctionDecl 0x1c455d81c50 <line:20:3, line:951:22> col:6 dot 'uint (uint2, uint2)'
| | |-ParmVarDecl 0x1c455d84c78 <col:10> col:15 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455d84cf8 <col:17> col:22 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455d81d08 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d81d88 <line:951:6> Implicit
| | `-ConstAttr 0x1c455d81db8 <col:6> Implicit
| |-FunctionDecl 0x1c455d81ff0 <line:20:3, line:953:22> col:6 dot 'uint (uint3, uint3)'
| | |-ParmVarDecl 0x1c455d81e18 <col:10> col:15 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455d81e98 <col:17> col:22 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455d820a8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d82128 <line:953:6> Implicit
| | `-ConstAttr 0x1c455d82158 <col:6> Implicit
| |-FunctionDecl 0x1c455d82390 <line:20:3, line:955:22> col:6 dot 'uint (uint4, uint4)'
| | |-ParmVarDecl 0x1c455d821b8 <col:10> col:15 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455d82238 <col:17> col:22 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455d82448 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d824c8 <line:955:6> Implicit
| | `-ConstAttr 0x1c455d824f8 <col:6> Implicit
| |-FunctionDecl 0x1c455d82730 <line:20:3, line:958:29> col:9 dot 'int64_t (int64_t, int64_t)'
| | |-ParmVarDecl 0x1c455d82558 <col:13> col:20 'int64_t':'long'
| | |-ParmVarDecl 0x1c455d825d8 <col:22> col:29 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455d827e8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d82868 <line:958:9> Implicit
| | `-ConstAttr 0x1c455d82898 <col:9> Implicit
| |-FunctionDecl 0x1c455d82ad0 <line:20:3, line:960:31> col:9 dot 'int64_t (int64_t2, int64_t2)'
| | |-ParmVarDecl 0x1c455d828f8 <col:13> col:21 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455d82978 <col:23> col:31 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455d82b88 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d82d38 <line:960:9> Implicit
| | `-ConstAttr 0x1c455d82d68 <col:9> Implicit
| |-FunctionDecl 0x1c455d82fa0 <line:20:3, line:962:31> col:9 dot 'int64_t (int64_t3, int64_t3)'
| | |-ParmVarDecl 0x1c455d82dc8 <col:13> col:21 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455d82e48 <col:23> col:31 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455d83058 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d830d8 <line:962:9> Implicit
| | `-ConstAttr 0x1c455d83108 <col:9> Implicit
| |-FunctionDecl 0x1c455d83340 <line:20:3, line:964:31> col:9 dot 'int64_t (int64_t4, int64_t4)'
| | |-ParmVarDecl 0x1c455d83168 <col:13> col:21 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455d831e8 <col:23> col:31 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455d833f8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d83478 <line:964:9> Implicit
| | `-ConstAttr 0x1c455d834a8 <col:9> Implicit
| |-FunctionDecl 0x1c455d836e0 <line:20:3, line:967:32> col:10 dot 'uint64_t (uint64_t, uint64_t)'
| | |-ParmVarDecl 0x1c455d83508 <col:14> col:22 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455d83588 <col:24> col:32 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455d83798 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d83818 <line:967:10> Implicit
| | `-ConstAttr 0x1c455d83848 <col:10> Implicit
| |-FunctionDecl 0x1c455d83a80 <line:20:3, line:969:34> col:10 dot 'uint64_t (uint64_t2, uint64_t2)'
| | |-ParmVarDecl 0x1c455d838a8 <col:14> col:23 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455d83928 <col:25> col:34 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455d83b38 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455d83bb8 <line:969:10> Implicit
| | `-ConstAttr 0x1c455d83be8 <col:10> Implicit
| |-FunctionDecl 0x1c455dc0260 <line:20:3, line:971:34> col:10 dot 'uint64_t (uint64_t3, uint64_t3)'
| | |-ParmVarDecl 0x1c455d83c48 <col:14> col:23 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455dc0110 <col:25> col:34 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455dc0318 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455dc0398 <line:971:10> Implicit
| | `-ConstAttr 0x1c455dc03c8 <col:10> Implicit
| |-FunctionDecl 0x1c455dc0600 <line:20:3, line:973:34> col:10 dot 'uint64_t (uint64_t4, uint64_t4)'
| | |-ParmVarDecl 0x1c455dc0428 <col:14> col:23 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455dc04a8 <col:25> col:34 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455dc06b8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot
| | |-NoThrowAttr 0x1c455dc0738 <line:973:10> Implicit
| | `-ConstAttr 0x1c455dc0768 <col:10> Implicit
| |-FunctionDecl 0x1c455dc0a78 <line:22:3, line:983:37> col:5 dot4add_i8packed 'int (uint, uint, int)'
| | |-ParmVarDecl 0x1c455dc07d8 <col:22> col:26 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455dc0858 <col:28> col:32 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455dc08e0 <col:34> col:37 'int'
| | |-AvailabilityAttr 0x1c455dc0b38 <line:22:18, col:61> shadermodel 6.4 0 0 "" "" 0
| | |-BuiltinAliasAttr 0x1c455dc0c00 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot4add_i8packed
| | |-NoThrowAttr 0x1c455dc0c50 <line:983:5> Implicit
| | `-ConstAttr 0x1c455dc0c80 <col:5> Implicit
| |-FunctionDecl 0x1c455dc0ed0 <line:22:3, line:989:39> col:6 dot4add_u8packed 'uint (uint, uint, uint)'
| | |-ParmVarDecl 0x1c455dc0ce0 <col:23> col:27 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455dc0d60 <col:29> col:33 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455dc0de0 <col:35> col:39 'uint':'unsigned int'
| | |-AvailabilityAttr 0x1c455dc0f90 <line:22:18, col:61> shadermodel 6.4 0 0 "" "" 0
| | |-BuiltinAliasAttr 0x1c455dc1058 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_dot4add_u8packed
| | |-NoThrowAttr 0x1c455dc10a8 <line:989:6> Implicit
| | `-ConstAttr 0x1c455dc10d8 <col:6> Implicit
| |-FunctionDecl 0x1c455dc3520 <line:20:3, line:1003:14> col:6 exp 'half (half)'
| | |-ParmVarDecl 0x1c455dc3468 <col:10> col:14 'half'
| | |-BuiltinAliasAttr 0x1c455dc35d0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp
| | |-NoThrowAttr 0x1c455dc3650 <line:1003:6> Implicit
| | `-ConstAttr 0x1c455dc3680 <col:6> Implicit
| |-FunctionDecl 0x1c455dc3780 <line:20:3, line:1006:16> col:7 exp 'half2 (half2)'
| | |-ParmVarDecl 0x1c455dc36d0 <col:11> col:16 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dc3830 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp
| | |-NoThrowAttr 0x1c455dc38b0 <line:1006:7> Implicit
| | `-ConstAttr 0x1c455dc38e0 <col:7> Implicit
| |-FunctionDecl 0x1c455dc39f0 <line:20:3, line:1009:16> col:7 exp 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dc3940 <col:11> col:16 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dc3aa0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp
| | |-NoThrowAttr 0x1c455dc3b20 <line:1009:7> Implicit
| | `-ConstAttr 0x1c455dc3b50 <col:7> Implicit
| |-FunctionDecl 0x1c455dc3c60 <line:20:3, line:1012:16> col:7 exp 'half4 (half4)'
| | |-ParmVarDecl 0x1c455dc3bb0 <col:11> col:16 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dc3d10 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp
| | |-NoThrowAttr 0x1c455dc3d90 <line:1012:7> Implicit
| | `-ConstAttr 0x1c455dc3dc0 <col:7> Implicit
| |-FunctionDecl 0x1c455dc3ee0 <line:20:3, line:1015:16> col:7 used exp 'float (float)'
| | |-ParmVarDecl 0x1c455dc3e28 <col:11> col:16 'float'
| | |-BuiltinAliasAttr 0x1c455dc3f90 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp
| | |-NoThrowAttr 0x1c455dc4010 <line:1015:7> Implicit
| | `-ConstAttr 0x1c455dc4040 <col:7> Implicit
| |-FunctionDecl 0x1c455dc4150 <line:20:3, line:1017:18> col:8 used exp 'float2 (float2)'
| | |-ParmVarDecl 0x1c455dc40a0 <col:12> col:18 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dc4200 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp
| | |-NoThrowAttr 0x1c455dc4280 <line:1017:8> Implicit
| | `-ConstAttr 0x1c455dc42b0 <col:8> Implicit
| |-FunctionDecl 0x1c455dc4550 <line:20:3, line:1019:18> col:8 used exp 'float3 (float3)'
| | |-ParmVarDecl 0x1c455dc4310 <col:12> col:18 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dc4600 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp
| | |-NoThrowAttr 0x1c455dc4680 <line:1019:8> Implicit
| | `-ConstAttr 0x1c455dc46b0 <col:8> Implicit
| |-FunctionDecl 0x1c455dc47c0 <line:20:3, line:1021:18> col:8 used exp 'float4 (float4)'
| | |-ParmVarDecl 0x1c455dc4710 <col:12> col:18 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455dc4870 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp
| | |-NoThrowAttr 0x1c455dc48f0 <line:1021:8> Implicit
| | `-ConstAttr 0x1c455dc4920 <col:8> Implicit
| |-FunctionDecl 0x1c455dc4a40 <line:20:3, line:1035:15> col:6 exp2 'half (half)'
| | |-ParmVarDecl 0x1c455dc4988 <col:11> col:15 'half'
| | |-BuiltinAliasAttr 0x1c455dc4af0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp2
| | |-NoThrowAttr 0x1c455dc4b70 <line:1035:6> Implicit
| | `-ConstAttr 0x1c455dc4ba0 <col:6> Implicit
| |-FunctionDecl 0x1c455dc4ca0 <line:20:3, line:1038:17> col:7 exp2 'half2 (half2)'
| | |-ParmVarDecl 0x1c455dc4bf0 <col:12> col:17 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dc4d50 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp2
| | |-NoThrowAttr 0x1c455dc4dd0 <line:1038:7> Implicit
| | `-ConstAttr 0x1c455dc4e00 <col:7> Implicit
| |-FunctionDecl 0x1c455dc4f10 <line:20:3, line:1041:17> col:7 exp2 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dc4e60 <col:12> col:17 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dc4fc0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp2
| | |-NoThrowAttr 0x1c455dc5040 <line:1041:7> Implicit
| | `-ConstAttr 0x1c455dc5070 <col:7> Implicit
| |-FunctionDecl 0x1c455dc5180 <line:20:3, line:1044:17> col:7 exp2 'half4 (half4)'
| | |-ParmVarDecl 0x1c455dc50d0 <col:12> col:17 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dc5230 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp2
| | |-NoThrowAttr 0x1c455dc52b0 <line:1044:7> Implicit
| | `-ConstAttr 0x1c455dc52e0 <col:7> Implicit
| |-FunctionDecl 0x1c455dc5400 <line:20:3, line:1047:17> col:7 used exp2 'float (float)'
| | |-ParmVarDecl 0x1c455dc5348 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455dc54b0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp2
| | |-NoThrowAttr 0x1c455dc1220 <line:1047:7> Implicit
| | `-ConstAttr 0x1c455dc1250 <col:7> Implicit
| |-FunctionDecl 0x1c455dc1360 <line:20:3, line:1049:19> col:8 used exp2 'float2 (float2)'
| | |-ParmVarDecl 0x1c455dc12b0 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dc1410 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp2
| | |-NoThrowAttr 0x1c455dc1490 <line:1049:8> Implicit
| | `-ConstAttr 0x1c455dc14c0 <col:8> Implicit
| |-FunctionDecl 0x1c455dc15d0 <line:20:3, line:1051:19> col:8 used exp2 'float3 (float3)'
| | |-ParmVarDecl 0x1c455dc1520 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dc1680 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp2
| | |-NoThrowAttr 0x1c455dc1700 <line:1051:8> Implicit
| | `-ConstAttr 0x1c455dc1730 <col:8> Implicit
| |-FunctionDecl 0x1c455dc1840 <line:20:3, line:1053:19> col:8 used exp2 'float4 (float4)'
| | |-ParmVarDecl 0x1c455dc1790 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455dc18f0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_exp2
| | |-NoThrowAttr 0x1c455dc1970 <line:1053:8> Implicit
| | `-ConstAttr 0x1c455dc19a0 <col:8> Implicit
| |-FunctionDecl 0x1c455dc1b30 <line:20:3, line:1092:22> col:6 firstbithigh 'uint (int)'
| | |-ParmVarDecl 0x1c455dc1a08 <col:19> col:22 'int'
| | |-BuiltinAliasAttr 0x1c455dc1be0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc1c60 <line:1092:6> Implicit
| | `-ConstAttr 0x1c455dc1c90 <col:6> Implicit
| |-FunctionDecl 0x1c455dc1e10 <line:20:3, line:1094:24> col:7 firstbithigh 'uint2 (int2)'
| | |-ParmVarDecl 0x1c455dc1ce0 <col:20> col:24 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455dc1ec0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc1f40 <line:1094:7> Implicit
| | `-ConstAttr 0x1c455dc1f70 <col:7> Implicit
| |-FunctionDecl 0x1c455dc2100 <line:20:3, line:1096:24> col:7 firstbithigh 'uint3 (int3)'
| | |-ParmVarDecl 0x1c455dc1fd0 <col:20> col:24 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455dc21b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc5678 <line:1096:7> Implicit
| | `-ConstAttr 0x1c455dc56a8 <col:7> Implicit
| |-FunctionDecl 0x1c455dc5830 <line:20:3, line:1098:24> col:7 firstbithigh 'uint4 (int4)'
| | |-ParmVarDecl 0x1c455dc5708 <col:20> col:24 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455dc58e0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc5960 <line:1098:7> Implicit
| | `-ConstAttr 0x1c455dc5990 <col:7> Implicit
| |-FunctionDecl 0x1c455dc5aa0 <line:20:3, line:1101:23> col:6 firstbithigh 'uint (uint)'
| | |-ParmVarDecl 0x1c455dc59f0 <col:19> col:23 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455dc5b50 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc5bd0 <line:1101:6> Implicit
| | `-ConstAttr 0x1c455dc5c00 <col:6> Implicit
| |-FunctionDecl 0x1c455dc5d10 <line:20:3, line:1103:25> col:7 firstbithigh 'uint2 (uint2)'
| | |-ParmVarDecl 0x1c455dc5c60 <col:20> col:25 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455dc5dc0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc5e40 <line:1103:7> Implicit
| | `-ConstAttr 0x1c455dc5e70 <col:7> Implicit
| |-FunctionDecl 0x1c455dc5f80 <line:20:3, line:1105:25> col:7 firstbithigh 'uint3 (uint3)'
| | |-ParmVarDecl 0x1c455dc5ed0 <col:20> col:25 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455dc6030 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc60b0 <line:1105:7> Implicit
| | `-ConstAttr 0x1c455dc60e0 <col:7> Implicit
| |-FunctionDecl 0x1c455dc61f0 <line:20:3, line:1107:25> col:7 firstbithigh 'uint4 (uint4)'
| | |-ParmVarDecl 0x1c455dc6140 <col:20> col:25 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455dc62a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc6320 <line:1107:7> Implicit
| | `-ConstAttr 0x1c455dc6350 <col:7> Implicit
| |-FunctionDecl 0x1c455dc64e0 <line:20:3, line:1110:26> col:6 firstbithigh 'uint (int64_t)'
| | |-ParmVarDecl 0x1c455dc63b0 <col:19> col:26 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455dc6590 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc6610 <line:1110:6> Implicit
| | `-ConstAttr 0x1c455dc2330 <col:6> Implicit
| |-FunctionDecl 0x1c455dc24c0 <line:20:3, line:1112:28> col:7 firstbithigh 'uint2 (int64_t2)'
| | |-ParmVarDecl 0x1c455dc2390 <col:20> col:28 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455dc2570 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc25f0 <line:1112:7> Implicit
| | `-ConstAttr 0x1c455dc2620 <col:7> Implicit
| |-FunctionDecl 0x1c455dc27b0 <line:20:3, line:1114:28> col:7 firstbithigh 'uint3 (int64_t3)'
| | |-ParmVarDecl 0x1c455dc2680 <col:20> col:28 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455dc2860 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc28e0 <line:1114:7> Implicit
| | `-ConstAttr 0x1c455dc2910 <col:7> Implicit
| |-FunctionDecl 0x1c455dc2aa0 <line:20:3, line:1116:28> col:7 firstbithigh 'uint4 (int64_t4)'
| | |-ParmVarDecl 0x1c455dc2970 <col:20> col:28 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455dc2b50 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc2bd0 <line:1116:7> Implicit
| | `-ConstAttr 0x1c455dc2c00 <col:7> Implicit
| |-FunctionDecl 0x1c455dc2d90 <line:20:3, line:1119:27> col:6 firstbithigh 'uint (uint64_t)'
| | |-ParmVarDecl 0x1c455dc2c60 <col:19> col:27 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455dc2e40 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc2ec0 <line:1119:6> Implicit
| | `-ConstAttr 0x1c455dc2ef0 <col:6> Implicit
| |-FunctionDecl 0x1c455dc3080 <line:20:3, line:1121:29> col:7 firstbithigh 'uint2 (uint64_t2)'
| | |-ParmVarDecl 0x1c455dc2f50 <col:20> col:29 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455dc3130 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc31b0 <line:1121:7> Implicit
| | `-ConstAttr 0x1c455dc31e0 <col:7> Implicit
| |-FunctionDecl 0x1c455dc78e0 <line:20:3, line:1123:29> col:7 firstbithigh 'uint3 (uint64_t3)'
| | |-ParmVarDecl 0x1c455dc3240 <col:20> col:29 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455dc7990 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc7a10 <line:1123:7> Implicit
| | `-ConstAttr 0x1c455dc7a40 <col:7> Implicit
| |-FunctionDecl 0x1c455dc7bd0 <line:20:3, line:1125:29> col:7 firstbithigh 'uint4 (uint64_t4)'
| | |-ParmVarDecl 0x1c455dc7aa0 <col:20> col:29 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455dc7c80 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbithigh
| | |-NoThrowAttr 0x1c455dc7d00 <line:1125:7> Implicit
| | `-ConstAttr 0x1c455dc7d30 <col:7> Implicit
| |-FunctionDecl 0x1c455dc7e48 <line:20:3, line:1164:21> col:6 firstbitlow 'uint (int)'
| | |-ParmVarDecl 0x1c455dc7d98 <col:18> col:21 'int'
| | |-BuiltinAliasAttr 0x1c455dc7ef8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dc7f78 <line:1164:6> Implicit
| | `-ConstAttr 0x1c455dc7fa8 <col:6> Implicit
| |-FunctionDecl 0x1c455dc80a8 <line:20:3, line:1166:23> col:7 firstbitlow 'uint2 (int2)'
| | |-ParmVarDecl 0x1c455dc7ff8 <col:19> col:23 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455dc8158 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dc81d8 <line:1166:7> Implicit
| | `-ConstAttr 0x1c455dc8208 <col:7> Implicit
| |-FunctionDecl 0x1c455dc8318 <line:20:3, line:1168:23> col:7 firstbitlow 'uint3 (int3)'
| | |-ParmVarDecl 0x1c455dc8268 <col:19> col:23 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455dc83c8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dc8448 <line:1168:7> Implicit
| | `-ConstAttr 0x1c455dc8478 <col:7> Implicit
| |-FunctionDecl 0x1c455dc8588 <line:20:3, line:1170:23> col:7 firstbitlow 'uint4 (int4)'
| | |-ParmVarDecl 0x1c455dc84d8 <col:19> col:23 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455dc8638 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dc86b8 <line:1170:7> Implicit
| | `-ConstAttr 0x1c455dc86e8 <col:7> Implicit
| |-FunctionDecl 0x1c455dc9aa0 <line:20:3, line:1173:22> col:6 firstbitlow 'uint (uint)'
| | |-ParmVarDecl 0x1c455dc8748 <col:18> col:22 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455dc9b50 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dc9bd0 <line:1173:6> Implicit
| | `-ConstAttr 0x1c455dc9c00 <col:6> Implicit
| |-FunctionDecl 0x1c455dc9d10 <line:20:3, line:1175:24> col:7 firstbitlow 'uint2 (uint2)'
| | |-ParmVarDecl 0x1c455dc9c60 <col:19> col:24 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455dc9dc0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dc9e40 <line:1175:7> Implicit
| | `-ConstAttr 0x1c455dc9e70 <col:7> Implicit
| |-FunctionDecl 0x1c455dc9f80 <line:20:3, line:1177:24> col:7 firstbitlow 'uint3 (uint3)'
| | |-ParmVarDecl 0x1c455dc9ed0 <col:19> col:24 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455dca030 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dca0b0 <line:1177:7> Implicit
| | `-ConstAttr 0x1c455dca0e0 <col:7> Implicit
| |-FunctionDecl 0x1c455dca1f0 <line:20:3, line:1179:24> col:7 firstbitlow 'uint4 (uint4)'
| | |-ParmVarDecl 0x1c455dca140 <col:19> col:24 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455dca2a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dca320 <line:1179:7> Implicit
| | `-ConstAttr 0x1c455dca350 <col:7> Implicit
| |-FunctionDecl 0x1c455dca460 <line:20:3, line:1182:25> col:6 firstbitlow 'uint (int64_t)'
| | |-ParmVarDecl 0x1c455dca3b0 <col:18> col:25 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455dca510 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dca590 <line:1182:6> Implicit
| | `-ConstAttr 0x1c455dca5c0 <col:6> Implicit
| |-FunctionDecl 0x1c455dca6d0 <line:20:3, line:1184:27> col:7 firstbitlow 'uint2 (int64_t2)'
| | |-ParmVarDecl 0x1c455dca620 <col:19> col:27 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455dca780 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dca800 <line:1184:7> Implicit
| | `-ConstAttr 0x1c455dca830 <col:7> Implicit
| |-FunctionDecl 0x1c455dca940 <line:20:3, line:1186:27> col:7 firstbitlow 'uint3 (int64_t3)'
| | |-ParmVarDecl 0x1c455dca890 <col:19> col:27 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455dca9f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dcaa70 <line:1186:7> Implicit
| | `-ConstAttr 0x1c455dc8990 <col:7> Implicit
| |-FunctionDecl 0x1c455dc8aa0 <line:20:3, line:1188:27> col:7 firstbitlow 'uint4 (int64_t4)'
| | |-ParmVarDecl 0x1c455dc89f0 <col:19> col:27 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455dc8b50 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dc8bd0 <line:1188:7> Implicit
| | `-ConstAttr 0x1c455dc8c00 <col:7> Implicit
| |-FunctionDecl 0x1c455dc8d10 <line:20:3, line:1191:26> col:6 firstbitlow 'uint (uint64_t)'
| | |-ParmVarDecl 0x1c455dc8c60 <col:18> col:26 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455dc8dc0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dc8e40 <line:1191:6> Implicit
| | `-ConstAttr 0x1c455dc8e70 <col:6> Implicit
| |-FunctionDecl 0x1c455dc8f80 <line:20:3, line:1193:28> col:7 firstbitlow 'uint2 (uint64_t2)'
| | |-ParmVarDecl 0x1c455dc8ed0 <col:19> col:28 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455dc9030 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dc90b0 <line:1193:7> Implicit
| | `-ConstAttr 0x1c455dc90e0 <col:7> Implicit
| |-FunctionDecl 0x1c455dc91f0 <line:20:3, line:1195:28> col:7 firstbitlow 'uint3 (uint64_t3)'
| | |-ParmVarDecl 0x1c455dc9140 <col:19> col:28 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455dc92a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dc9320 <line:1195:7> Implicit
| | `-ConstAttr 0x1c455dc9350 <col:7> Implicit
| |-FunctionDecl 0x1c455dc9460 <line:20:3, line:1197:28> col:7 firstbitlow 'uint4 (uint64_t4)'
| | |-ParmVarDecl 0x1c455dc93b0 <col:19> col:28 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455dc9510 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_firstbitlow
| | |-NoThrowAttr 0x1c455dc9590 <line:1197:7> Implicit
| | `-ConstAttr 0x1c455dc95c0 <col:7> Implicit
| |-FunctionDecl 0x1c455dc96e0 <line:20:3, line:1210:16> col:6 floor 'half (half)'
| | |-ParmVarDecl 0x1c455dc9628 <col:12> col:16 'half'
| | |-BuiltinAliasAttr 0x1c455dc9790 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_floor
| | |-NoThrowAttr 0x1c455dc9810 <line:1210:6> Implicit
| | `-ConstAttr 0x1c455dc9840 <col:6> Implicit
| |-FunctionDecl 0x1c455dc6770 <line:20:3, line:1213:18> col:7 floor 'half2 (half2)'
| | |-ParmVarDecl 0x1c455dc9890 <col:13> col:18 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dc6820 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_floor
| | |-NoThrowAttr 0x1c455dc68a0 <line:1213:7> Implicit
| | `-ConstAttr 0x1c455dc68d0 <col:7> Implicit
| |-FunctionDecl 0x1c455dc69e0 <line:20:3, line:1216:18> col:7 floor 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dc6930 <col:13> col:18 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dc6a90 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_floor
| | |-NoThrowAttr 0x1c455dc6b10 <line:1216:7> Implicit
| | `-ConstAttr 0x1c455dc6b40 <col:7> Implicit
| |-FunctionDecl 0x1c455dc6c50 <line:20:3, line:1219:18> col:7 floor 'half4 (half4)'
| | |-ParmVarDecl 0x1c455dc6ba0 <col:13> col:18 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dc6d00 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_floor
| | |-NoThrowAttr 0x1c455dc6d80 <line:1219:7> Implicit
| | `-ConstAttr 0x1c455dc6db0 <col:7> Implicit
| |-FunctionDecl 0x1c455dc6ed0 <line:20:3, line:1222:18> col:7 used floor 'float (float)'
| | |-ParmVarDecl 0x1c455dc6e18 <col:13> col:18 'float'
| | |-BuiltinAliasAttr 0x1c455dc6f80 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_floor
| | |-NoThrowAttr 0x1c455dc7000 <line:1222:7> Implicit
| | `-ConstAttr 0x1c455dc7030 <col:7> Implicit
| |-FunctionDecl 0x1c455dc7140 <line:20:3, line:1224:20> col:8 used floor 'float2 (float2)'
| | |-ParmVarDecl 0x1c455dc7090 <col:14> col:20 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dc71f0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_floor
| | |-NoThrowAttr 0x1c455dc7270 <line:1224:8> Implicit
| | `-ConstAttr 0x1c455dc72a0 <col:8> Implicit
| |-FunctionDecl 0x1c455dc73b0 <line:20:3, line:1226:20> col:8 used floor 'float3 (float3)'
| | |-ParmVarDecl 0x1c455dc7300 <col:14> col:20 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dc7460 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_floor
| | |-NoThrowAttr 0x1c455dc74e0 <line:1226:8> Implicit
| | `-ConstAttr 0x1c455dc7510 <col:8> Implicit
| |-FunctionDecl 0x1c455dc7620 <line:20:3, line:1228:20> col:8 used floor 'float4 (float4)'
| | |-ParmVarDecl 0x1c455dc7570 <col:14> col:20 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455dc76d0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_floor
| | |-NoThrowAttr 0x1c455dccdd0 <line:1228:8> Implicit
| | `-ConstAttr 0x1c455dcce00 <col:8> Implicit
| |-FunctionDecl 0x1c455dccf20 <line:20:3, line:1242:15> col:6 frac 'half (half)'
| | |-ParmVarDecl 0x1c455dcce68 <col:11> col:15 'half'
| | |-BuiltinAliasAttr 0x1c455dccfd0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_frac
| | |-NoThrowAttr 0x1c455dcd050 <line:1242:6> Implicit
| | `-ConstAttr 0x1c455dcd080 <col:6> Implicit
| |-FunctionDecl 0x1c455dcd180 <line:20:3, line:1245:17> col:7 frac 'half2 (half2)'
| | |-ParmVarDecl 0x1c455dcd0d0 <col:12> col:17 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dcd230 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_frac
| | |-NoThrowAttr 0x1c455dcd2b0 <line:1245:7> Implicit
| | `-ConstAttr 0x1c455dcd2e0 <col:7> Implicit
| |-FunctionDecl 0x1c455dcd3f0 <line:20:3, line:1248:17> col:7 frac 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dcd340 <col:12> col:17 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dcd4a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_frac
| | |-NoThrowAttr 0x1c455dcd520 <line:1248:7> Implicit
| | `-ConstAttr 0x1c455dcd550 <col:7> Implicit
| |-FunctionDecl 0x1c455dcd660 <line:20:3, line:1251:17> col:7 frac 'half4 (half4)'
| | |-ParmVarDecl 0x1c455dcd5b0 <col:12> col:17 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dcd710 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_frac
| | |-NoThrowAttr 0x1c455dcd790 <line:1251:7> Implicit
| | `-ConstAttr 0x1c455dcd7c0 <col:7> Implicit
| |-FunctionDecl 0x1c455dcd8e0 <line:20:3, line:1254:17> col:7 used frac 'float (float)'
| | |-ParmVarDecl 0x1c455dcd828 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455dcd990 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_frac
| | |-NoThrowAttr 0x1c455dcda10 <line:1254:7> Implicit
| | `-ConstAttr 0x1c455dcda40 <col:7> Implicit
| |-FunctionDecl 0x1c455dcdb50 <line:20:3, line:1256:19> col:8 used frac 'float2 (float2)'
| | |-ParmVarDecl 0x1c455dcdaa0 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dcdc00 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_frac
| | |-NoThrowAttr 0x1c455dcdc80 <line:1256:8> Implicit
| | `-ConstAttr 0x1c455dcdcb0 <col:8> Implicit
| |-FunctionDecl 0x1c455dcabb0 <line:20:3, line:1258:19> col:8 used frac 'float3 (float3)'
| | |-ParmVarDecl 0x1c455dcdd10 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dcac60 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_frac
| | |-NoThrowAttr 0x1c455dcace0 <line:1258:8> Implicit
| | `-ConstAttr 0x1c455dcad10 <col:8> Implicit
| |-FunctionDecl 0x1c455dcae20 <line:20:3, line:1260:19> col:8 used frac 'float4 (float4)'
| | |-ParmVarDecl 0x1c455dcad70 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455dcaed0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_frac
| | |-NoThrowAttr 0x1c455dcaf50 <line:1260:8> Implicit
| | `-ConstAttr 0x1c455dcaf80 <col:8> Implicit
| |-FunctionDecl 0x1c455dcb098 <line:20:3, line:1275:16> col:6 isinf 'bool (half)'
| | |-ParmVarDecl 0x1c455dcafe8 <col:12> col:16 'half'
| | |-BuiltinAliasAttr 0x1c455dcb148 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_isinf
| | |-NoThrowAttr 0x1c455dcb1c8 <line:1275:6> Implicit
| | `-ConstAttr 0x1c455dcb1f8 <col:6> Implicit
| |-FunctionDecl 0x1c455dcb370 <line:20:3, line:1278:18> col:7 isinf 'bool2 (half2)'
| | |-ParmVarDecl 0x1c455dcb248 <col:13> col:18 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dcb420 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_isinf
| | |-NoThrowAttr 0x1c455dcb4a0 <line:1278:7> Implicit
| | `-ConstAttr 0x1c455dcb4d0 <col:7> Implicit
| |-FunctionDecl 0x1c455dcb660 <line:20:3, line:1281:18> col:7 isinf 'bool3 (half3)'
| | |-ParmVarDecl 0x1c455dcb530 <col:13> col:18 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dcb710 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_isinf
| | |-NoThrowAttr 0x1c455dcb790 <line:1281:7> Implicit
| | `-ConstAttr 0x1c455dcb7c0 <col:7> Implicit
| |-FunctionDecl 0x1c455dcb950 <line:20:3, line:1284:18> col:7 isinf 'bool4 (half4)'
| | |-ParmVarDecl 0x1c455dcb820 <col:13> col:18 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dcba00 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_isinf
| | |-NoThrowAttr 0x1c455dcba80 <line:1284:7> Implicit
| | `-ConstAttr 0x1c455dcbab0 <col:7> Implicit
| |-FunctionDecl 0x1c455dcf018 <line:20:3, line:1287:17> col:6 used isinf 'bool (float)'
| | |-ParmVarDecl 0x1c455dcbb18 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455dcf0c8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_isinf
| | |-NoThrowAttr 0x1c455dcf148 <line:1287:6> Implicit
| | `-ConstAttr 0x1c455dcf178 <col:6> Implicit
| |-FunctionDecl 0x1c455dcf300 <line:20:3, line:1289:19> col:7 used isinf 'bool2 (float2)'
| | |-ParmVarDecl 0x1c455dcf1d8 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dcf3b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_isinf
| | |-NoThrowAttr 0x1c455dcf430 <line:1289:7> Implicit
| | `-ConstAttr 0x1c455dcf460 <col:7> Implicit
| |-FunctionDecl 0x1c455dcf5f0 <line:20:3, line:1291:19> col:7 used isinf 'bool3 (float3)'
| | |-ParmVarDecl 0x1c455dcf4c0 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dcf6a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_isinf
| | |-NoThrowAttr 0x1c455dcf720 <line:1291:7> Implicit
| | `-ConstAttr 0x1c455dcf750 <col:7> Implicit
| |-FunctionDecl 0x1c455dcf8e0 <line:20:3, line:1293:19> col:7 used isinf 'bool4 (float4)'
| | |-ParmVarDecl 0x1c455dcf7b0 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455dcf990 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_isinf
| | |-NoThrowAttr 0x1c455dcfa10 <line:1293:7> Implicit
| | `-ConstAttr 0x1c455dcfa40 <col:7> Implicit
| |-FunctionDecl 0x1c455dcfcb0 <line:20:3, line:1311:27> col:6 lerp 'half (half, half, half)'
| | |-ParmVarDecl 0x1c455dcfaa8 <col:11> col:15 'half'
| | |-ParmVarDecl 0x1c455dcfb30 <col:17> col:21 'half'
| | |-ParmVarDecl 0x1c455dcfbb8 <col:23> col:27 'half'
| | |-BuiltinAliasAttr 0x1c455dcfd70 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_lerp
| | |-NoThrowAttr 0x1c455dcfdf0 <line:1311:6> Implicit
| | `-ConstAttr 0x1c455dcfe20 <col:6> Implicit
| |-FunctionDecl 0x1c455dcbd40 <line:20:3, line:1314:31> col:7 lerp 'half2 (half2, half2, half2)'
| | |-ParmVarDecl 0x1c455dcfe70 <col:12> col:17 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455dcfef0 <col:19> col:24 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455dcff70 <col:26> col:31 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dcbe00 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_lerp
| | |-NoThrowAttr 0x1c455dcbe80 <line:1314:7> Implicit
| | `-ConstAttr 0x1c455dcbeb0 <col:7> Implicit
| |-FunctionDecl 0x1c455dcc100 <line:20:3, line:1317:31> col:7 lerp 'half3 (half3, half3, half3)'
| | |-ParmVarDecl 0x1c455dcbf10 <col:12> col:17 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455dcbf90 <col:19> col:24 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455dcc010 <col:26> col:31 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dcc1c0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_lerp
| | |-NoThrowAttr 0x1c455dcc240 <line:1317:7> Implicit
| | `-ConstAttr 0x1c455dcc270 <col:7> Implicit
| |-FunctionDecl 0x1c455dcc4c0 <line:20:3, line:1320:31> col:7 lerp 'half4 (half4, half4, half4)'
| | |-ParmVarDecl 0x1c455dcc2d0 <col:12> col:17 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455dcc350 <col:19> col:24 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455dcc3d0 <col:26> col:31 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dcc580 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_lerp
| | |-NoThrowAttr 0x1c455dcc600 <line:1320:7> Implicit
| | `-ConstAttr 0x1c455dcc630 <col:7> Implicit
| |-FunctionDecl 0x1c455dcc8a0 <line:20:3, line:1323:31> col:7 used lerp 'float (float, float, float)'
| | |-ParmVarDecl 0x1c455dcc698 <col:12> col:17 'float'
| | |-ParmVarDecl 0x1c455dcc720 <col:19> col:24 'float'
| | |-ParmVarDecl 0x1c455dcc7a8 <col:26> col:31 'float'
| | |-BuiltinAliasAttr 0x1c455dcc960 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_lerp
| | |-NoThrowAttr 0x1c455dcc9e0 <line:1323:7> Implicit
| | `-ConstAttr 0x1c455dcca10 <col:7> Implicit
| |-FunctionDecl 0x1c455dd3430 <line:20:3, line:1325:35> col:8 used lerp 'float2 (float2, float2, float2)'
| | |-ParmVarDecl 0x1c455dcca70 <col:13> col:19 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455dccaf0 <col:21> col:27 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455dccb70 <col:29> col:35 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dd34f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_lerp
| | |-NoThrowAttr 0x1c455dd3570 <line:1325:8> Implicit
| | `-ConstAttr 0x1c455dd35a0 <col:8> Implicit
| |-FunctionDecl 0x1c455dd37f0 <line:20:3, line:1327:35> col:8 used lerp 'float3 (float3, float3, float3)'
| | |-ParmVarDecl 0x1c455dd3600 <col:13> col:19 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455dd3680 <col:21> col:27 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455dd3700 <col:29> col:35 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dd38b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_lerp
| | |-NoThrowAttr 0x1c455dd3930 <line:1327:8> Implicit
| | `-ConstAttr 0x1c455dd3960 <col:8> Implicit
| |-FunctionDecl 0x1c455dd3bb0 <line:20:3, line:1329:35> col:8 used lerp 'float4 (float4, float4, float4)'
| | |-ParmVarDecl 0x1c455dd39c0 <col:13> col:19 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455dd3a40 <col:21> col:27 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455dd3ac0 <col:29> col:35 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455dd3c70 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_lerp
| | |-NoThrowAttr 0x1c455dd3cf0 <line:1329:8> Implicit
| | `-ConstAttr 0x1c455dd3d20 <col:8> Implicit
| |-FunctionDecl 0x1c455dd3e40 <line:20:3, line:1344:14> col:6 used log 'half (half)'
| | |-ParmVarDecl 0x1c455dd3d88 <col:10> col:14 'half'
| | |-BuiltinAliasAttr 0x1c455dd3ef0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log
| | |-NoThrowAttr 0x1c455dd3f70 <line:1344:6> Implicit
| | `-ConstAttr 0x1c455dd3fa0 <col:6> Implicit
| |-FunctionDecl 0x1c455dd40a0 <line:20:3, line:1347:16> col:7 log 'half2 (half2)'
| | |-ParmVarDecl 0x1c455dd3ff0 <col:11> col:16 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dd4150 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log
| | |-NoThrowAttr 0x1c455dd41d0 <line:1347:7> Implicit
| | `-ConstAttr 0x1c455dd4200 <col:7> Implicit
| |-FunctionDecl 0x1c455dd4310 <line:20:3, line:1350:16> col:7 log 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dd4260 <col:11> col:16 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dd43c0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log
| | |-NoThrowAttr 0x1c455dd0118 <line:1350:7> Implicit
| | `-ConstAttr 0x1c455dd0148 <col:7> Implicit
| |-FunctionDecl 0x1c455dd0258 <line:20:3, line:1353:16> col:7 log 'half4 (half4)'
| | |-ParmVarDecl 0x1c455dd01a8 <col:11> col:16 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dd0308 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log
| | |-NoThrowAttr 0x1c455dd0388 <line:1353:7> Implicit
| | `-ConstAttr 0x1c455dd03b8 <col:7> Implicit
| |-FunctionDecl 0x1c455dd04d8 <line:20:3, line:1356:16> col:7 used log 'float (float)'
| | |-ParmVarDecl 0x1c455dd0420 <col:11> col:16 'float'
| | |-BuiltinAliasAttr 0x1c455dd0588 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log
| | |-NoThrowAttr 0x1c455dd0608 <line:1356:7> Implicit
| | `-ConstAttr 0x1c455dd0638 <col:7> Implicit
| |-FunctionDecl 0x1c455dd0748 <line:20:3, line:1358:18> col:8 used log 'float2 (float2)'
| | |-ParmVarDecl 0x1c455dd0698 <col:12> col:18 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dd07f8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log
| | |-NoThrowAttr 0x1c455dd0878 <line:1358:8> Implicit
| | `-ConstAttr 0x1c455dd08a8 <col:8> Implicit
| |-FunctionDecl 0x1c455dd09b8 <line:20:3, line:1360:18> col:8 used log 'float3 (float3)'
| | |-ParmVarDecl 0x1c455dd0908 <col:12> col:18 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dd0a68 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log
| | |-NoThrowAttr 0x1c455dd0ae8 <line:1360:8> Implicit
| | `-ConstAttr 0x1c455dd0b18 <col:8> Implicit
| |-FunctionDecl 0x1c455dd0c28 <line:20:3, line:1362:18> col:8 used log 'float4 (float4)'
| | |-ParmVarDecl 0x1c455dd0b78 <col:12> col:18 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455dd0cd8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log
| | |-NoThrowAttr 0x1c455dd0d58 <line:1362:8> Implicit
| | `-ConstAttr 0x1c455dd0d88 <col:8> Implicit
| |-FunctionDecl 0x1c455dd0ea8 <line:20:3, line:1377:16> col:6 log10 'half (half)'
| | |-ParmVarDecl 0x1c455dd0df0 <col:12> col:16 'half'
| | |-BuiltinAliasAttr 0x1c455dd0f58 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log10
| | |-NoThrowAttr 0x1c455dd0fd8 <line:1377:6> Implicit
| | `-ConstAttr 0x1c455dd1008 <col:6> Implicit
| |-FunctionDecl 0x1c455dd1238 <line:20:3, line:1380:18> col:7 log10 'half2 (half2)'
| | |-ParmVarDecl 0x1c455dd1058 <col:13> col:18 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dd12e8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log10
| | |-NoThrowAttr 0x1c455dd1368 <line:1380:7> Implicit
| | `-ConstAttr 0x1c455dd1398 <col:7> Implicit
| |-FunctionDecl 0x1c455dd14a8 <line:20:3, line:1383:18> col:7 log10 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dd13f8 <col:13> col:18 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dd1558 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log10
| | |-NoThrowAttr 0x1c455dd15d8 <line:1383:7> Implicit
| | `-ConstAttr 0x1c455dd1608 <col:7> Implicit
| |-FunctionDecl 0x1c455dd1718 <line:20:3, line:1386:18> col:7 log10 'half4 (half4)'
| | |-ParmVarDecl 0x1c455dd1668 <col:13> col:18 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dd17c8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log10
| | |-NoThrowAttr 0x1c455dd1848 <line:1386:7> Implicit
| | `-ConstAttr 0x1c455dd1878 <col:7> Implicit
| |-FunctionDecl 0x1c455dd1998 <line:20:3, line:1389:18> col:7 used log10 'float (float)'
| | |-ParmVarDecl 0x1c455dd18e0 <col:13> col:18 'float'
| | |-BuiltinAliasAttr 0x1c455dd1a48 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log10
| | |-NoThrowAttr 0x1c455dd1ac8 <line:1389:7> Implicit
| | `-ConstAttr 0x1c455dd1af8 <col:7> Implicit
| |-FunctionDecl 0x1c455dd1c08 <line:20:3, line:1391:20> col:8 used log10 'float2 (float2)'
| | |-ParmVarDecl 0x1c455dd1b58 <col:14> col:20 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dd1cb8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log10
| | |-NoThrowAttr 0x1c455dd1d38 <line:1391:8> Implicit
| | `-ConstAttr 0x1c455dd1d68 <col:8> Implicit
| |-FunctionDecl 0x1c455dd1e78 <line:20:3, line:1393:20> col:8 used log10 'float3 (float3)'
| | |-ParmVarDecl 0x1c455dd1dc8 <col:14> col:20 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dd1f28 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log10
| | |-NoThrowAttr 0x1c455dd1fa8 <line:1393:8> Implicit
| | `-ConstAttr 0x1c455dd1fd8 <col:8> Implicit
| |-FunctionDecl 0x1c455dd20e8 <line:20:3, line:1395:20> col:8 used log10 'float4 (float4)'
| | |-ParmVarDecl 0x1c455dd2038 <col:14> col:20 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455dd2198 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log10
| | |-NoThrowAttr 0x1c455dd5668 <line:1395:8> Implicit
| | `-ConstAttr 0x1c455dd5698 <col:8> Implicit
| |-FunctionDecl 0x1c455dd57b8 <line:20:3, line:1410:15> col:6 log2 'half (half)'
| | |-ParmVarDecl 0x1c455dd5700 <col:11> col:15 'half'
| | |-BuiltinAliasAttr 0x1c455dd5868 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log2
| | |-NoThrowAttr 0x1c455dd58e8 <line:1410:6> Implicit
| | `-ConstAttr 0x1c455dd5918 <col:6> Implicit
| |-FunctionDecl 0x1c455dd5a18 <line:20:3, line:1413:17> col:7 log2 'half2 (half2)'
| | |-ParmVarDecl 0x1c455dd5968 <col:12> col:17 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dd5ac8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log2
| | |-NoThrowAttr 0x1c455dd5b48 <line:1413:7> Implicit
| | `-ConstAttr 0x1c455dd5b78 <col:7> Implicit
| |-FunctionDecl 0x1c455dd5c88 <line:20:3, line:1416:17> col:7 log2 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dd5bd8 <col:12> col:17 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dd5d38 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log2
| | |-NoThrowAttr 0x1c455dd5db8 <line:1416:7> Implicit
| | `-ConstAttr 0x1c455dd5de8 <col:7> Implicit
| |-FunctionDecl 0x1c455dd5ef8 <line:20:3, line:1419:17> col:7 log2 'half4 (half4)'
| | |-ParmVarDecl 0x1c455dd5e48 <col:12> col:17 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dd5fa8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log2
| | |-NoThrowAttr 0x1c455dd6028 <line:1419:7> Implicit
| | `-ConstAttr 0x1c455dd6058 <col:7> Implicit
| |-FunctionDecl 0x1c455dd6178 <line:20:3, line:1422:17> col:7 used log2 'float (float)'
| | |-ParmVarDecl 0x1c455dd60c0 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455dd6228 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log2
| | |-NoThrowAttr 0x1c455dd62a8 <line:1422:7> Implicit
| | `-ConstAttr 0x1c455dd62d8 <col:7> Implicit
| |-FunctionDecl 0x1c455dd63e8 <line:20:3, line:1424:19> col:8 used log2 'float2 (float2)'
| | |-ParmVarDecl 0x1c455dd6338 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dd6498 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log2
| | |-NoThrowAttr 0x1c455dd6518 <line:1424:8> Implicit
| | `-ConstAttr 0x1c455dd6548 <col:8> Implicit
| |-FunctionDecl 0x1c455dd2348 <line:20:3, line:1426:19> col:8 used log2 'float3 (float3)'
| | |-ParmVarDecl 0x1c455dd65a8 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dd23f8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log2
| | |-NoThrowAttr 0x1c455dd2478 <line:1426:8> Implicit
| | `-ConstAttr 0x1c455dd24a8 <col:8> Implicit
| |-FunctionDecl 0x1c455dd25b8 <line:20:3, line:1428:19> col:8 used log2 'float4 (float4)'
| | |-ParmVarDecl 0x1c455dd2508 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455dd2668 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_log2
| | |-NoThrowAttr 0x1c455dd26e8 <line:1428:8> Implicit
| | `-ConstAttr 0x1c455dd2718 <col:8> Implicit
| |-FunctionDecl 0x1c455dd2988 <line:20:3, line:1442:26> col:6 mad 'half (half, half, half)'
| | |-ParmVarDecl 0x1c455dd2780 <col:10> col:14 'half'
| | |-ParmVarDecl 0x1c455dd2808 <col:16> col:20 'half'
| | |-ParmVarDecl 0x1c455dd2890 <col:22> col:26 'half'
| | |-BuiltinAliasAttr 0x1c455dd2a48 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd2ac8 <line:1442:6> Implicit
| | `-ConstAttr 0x1c455dd2af8 <col:6> Implicit
| |-FunctionDecl 0x1c455dd2d38 <line:20:3, line:1445:30> col:7 mad 'half2 (half2, half2, half2)'
| | |-ParmVarDecl 0x1c455dd2b48 <col:11> col:16 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455dd2bc8 <col:18> col:23 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455dd2c48 <col:25> col:30 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dd2df8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd2e78 <line:1445:7> Implicit
| | `-ConstAttr 0x1c455dd2ea8 <col:7> Implicit
| |-FunctionDecl 0x1c455dd30f8 <line:20:3, line:1448:30> col:7 mad 'half3 (half3, half3, half3)'
| | |-ParmVarDecl 0x1c455dd2f08 <col:11> col:16 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455dd2f88 <col:18> col:23 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455dd3008 <col:25> col:30 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dd31b8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd3238 <line:1448:7> Implicit
| | `-ConstAttr 0x1c455dd3268 <col:7> Implicit
| |-FunctionDecl 0x1c455dd6950 <line:20:3, line:1451:30> col:7 mad 'half4 (half4, half4, half4)'
| | |-ParmVarDecl 0x1c455dd6760 <col:11> col:16 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455dd67e0 <col:18> col:23 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455dd6860 <col:25> col:30 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dd6a10 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd6a90 <line:1451:7> Implicit
| | `-ConstAttr 0x1c455dd6ac0 <col:7> Implicit
| |-FunctionDecl 0x1c455dd6d30 <line:20:3, line:1482:22> col:5 mad 'int (int, int, int)'
| | |-ParmVarDecl 0x1c455dd6b28 <col:9> col:12 'int'
| | |-ParmVarDecl 0x1c455dd6bb0 <col:14> col:17 'int'
| | |-ParmVarDecl 0x1c455dd6c38 <col:19> col:22 'int'
| | |-BuiltinAliasAttr 0x1c455dd6df0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd6e70 <line:1482:5> Implicit
| | `-ConstAttr 0x1c455dd6ea0 <col:5> Implicit
| |-FunctionDecl 0x1c455dd70f0 <line:20:3, line:1484:26> col:6 mad 'int2 (int2, int2, int2)'
| | |-ParmVarDecl 0x1c455dd6f00 <col:10> col:14 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455dd6f80 <col:16> col:20 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455dd7000 <col:22> col:26 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455dd71b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd7230 <line:1484:6> Implicit
| | `-ConstAttr 0x1c455dd7260 <col:6> Implicit
| |-FunctionDecl 0x1c455dd74b0 <line:20:3, line:1486:26> col:6 mad 'int3 (int3, int3, int3)'
| | |-ParmVarDecl 0x1c455dd72c0 <col:10> col:14 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455dd7340 <col:16> col:20 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455dd73c0 <col:22> col:26 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455dd7570 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd75f0 <line:1486:6> Implicit
| | `-ConstAttr 0x1c455dd7620 <col:6> Implicit
| |-FunctionDecl 0x1c455ddad10 <line:20:3, line:1488:26> col:6 mad 'int4 (int4, int4, int4)'
| | |-ParmVarDecl 0x1c455dd7680 <col:10> col:14 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455ddaba0 <col:16> col:20 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455ddac20 <col:22> col:26 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455ddadd0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455ddae50 <line:1488:6> Implicit
| | `-ConstAttr 0x1c455ddae80 <col:6> Implicit
| |-FunctionDecl 0x1c455ddb0d0 <line:20:3, line:1491:26> col:6 mad 'uint (uint, uint, uint)'
| | |-ParmVarDecl 0x1c455ddaee0 <col:10> col:14 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455ddaf60 <col:16> col:20 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455ddafe0 <col:22> col:26 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455ddb190 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455ddb210 <line:1491:6> Implicit
| | `-ConstAttr 0x1c455ddb240 <col:6> Implicit
| |-FunctionDecl 0x1c455ddb490 <line:20:3, line:1493:30> col:7 mad 'uint2 (uint2, uint2, uint2)'
| | |-ParmVarDecl 0x1c455ddb2a0 <col:11> col:16 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455ddb320 <col:18> col:23 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455ddb3a0 <col:25> col:30 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455ddb550 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455ddb5d0 <line:1493:7> Implicit
| | `-ConstAttr 0x1c455ddb600 <col:7> Implicit
| |-FunctionDecl 0x1c455ddb850 <line:20:3, line:1495:30> col:7 mad 'uint3 (uint3, uint3, uint3)'
| | |-ParmVarDecl 0x1c455ddb660 <col:11> col:16 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455ddb6e0 <col:18> col:23 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455ddb760 <col:25> col:30 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455ddb910 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455ddb990 <line:1495:7> Implicit
| | `-ConstAttr 0x1c455ddb9c0 <col:7> Implicit
| |-FunctionDecl 0x1c455dd78f0 <line:20:3, line:1497:30> col:7 mad 'uint4 (uint4, uint4, uint4)'
| | |-ParmVarDecl 0x1c455ddba20 <col:11> col:16 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455ddbaa0 <col:18> col:23 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455ddbb20 <col:25> col:30 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455dd79b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd7a30 <line:1497:7> Implicit
| | `-ConstAttr 0x1c455dd7a60 <col:7> Implicit
| |-FunctionDecl 0x1c455dd7cb0 <line:20:3, line:1500:38> col:9 mad 'int64_t (int64_t, int64_t, int64_t)'
| | |-ParmVarDecl 0x1c455dd7ac0 <col:13> col:20 'int64_t':'long'
| | |-ParmVarDecl 0x1c455dd7b40 <col:22> col:29 'int64_t':'long'
| | |-ParmVarDecl 0x1c455dd7bc0 <col:31> col:38 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455dd7d70 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd7df0 <line:1500:9> Implicit
| | `-ConstAttr 0x1c455dd7e20 <col:9> Implicit
| |-FunctionDecl 0x1c455dd8070 <line:20:3, line:1502:42> col:10 mad 'int64_t2 (int64_t2, int64_t2, int64_t2)'
| | |-ParmVarDecl 0x1c455dd7e80 <col:14> col:22 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455dd7f00 <col:24> col:32 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455dd7f80 <col:34> col:42 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455dd8130 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd81b0 <line:1502:10> Implicit
| | `-ConstAttr 0x1c455dd81e0 <col:10> Implicit
| |-FunctionDecl 0x1c455dd8430 <line:20:3, line:1504:42> col:10 mad 'int64_t3 (int64_t3, int64_t3, int64_t3)'
| | |-ParmVarDecl 0x1c455dd8240 <col:14> col:22 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455dd82c0 <col:24> col:32 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455dd8340 <col:34> col:42 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455dd84f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd8570 <line:1504:10> Implicit
| | `-ConstAttr 0x1c455dd85a0 <col:10> Implicit
| |-FunctionDecl 0x1c455ddbcb0 <line:20:3, line:1506:42> col:10 mad 'int64_t4 (int64_t4, int64_t4, int64_t4)'
| | |-ParmVarDecl 0x1c455dd8600 <col:14> col:22 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455dd8680 <col:24> col:32 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455dd8700 <col:34> col:42 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455ddbd70 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455ddbdf0 <line:1506:10> Implicit
| | `-ConstAttr 0x1c455ddbe20 <col:10> Implicit
| |-FunctionDecl 0x1c455ddc070 <line:20:3, line:1509:42> col:10 mad 'uint64_t (uint64_t, uint64_t, uint64_t)'
| | |-ParmVarDecl 0x1c455ddbe80 <col:14> col:22 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455ddbf00 <col:24> col:32 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455ddbf80 <col:34> col:42 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455ddc130 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455ddc1b0 <line:1509:10> Implicit
| | `-ConstAttr 0x1c455ddc1e0 <col:10> Implicit
| |-FunctionDecl 0x1c455ddc430 <line:20:3, line:1511:46> col:11 mad 'uint64_t2 (uint64_t2, uint64_t2, uint64_t2)'
| | |-ParmVarDecl 0x1c455ddc240 <col:15> col:24 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455ddc2c0 <col:26> col:35 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455ddc340 <col:37> col:46 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455ddc4f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455ddc570 <line:1511:11> Implicit
| | `-ConstAttr 0x1c455ddc5a0 <col:11> Implicit
| |-FunctionDecl 0x1c455ddc7f0 <line:20:3, line:1513:46> col:11 mad 'uint64_t3 (uint64_t3, uint64_t3, uint64_t3)'
| | |-ParmVarDecl 0x1c455ddc600 <col:15> col:24 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455ddc680 <col:26> col:35 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455ddc700 <col:37> col:46 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455ddc8b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455ddc930 <line:1513:11> Implicit
| | `-ConstAttr 0x1c455ddc960 <col:11> Implicit
| |-FunctionDecl 0x1c455ddcbb0 <line:20:3, line:1515:46> col:11 mad 'uint64_t4 (uint64_t4, uint64_t4, uint64_t4)'
| | |-ParmVarDecl 0x1c455ddc9c0 <col:15> col:24 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455ddca40 <col:26> col:35 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455ddcac0 <col:37> col:46 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455ddcc70 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd89c8 <line:1515:11> Implicit
| | `-ConstAttr 0x1c455dd89f8 <col:11> Implicit
| |-FunctionDecl 0x1c455dd8c68 <line:20:3, line:1518:30> col:7 mad 'float (float, float, float)'
| | |-ParmVarDecl 0x1c455dd8a60 <col:11> col:16 'float'
| | |-ParmVarDecl 0x1c455dd8ae8 <col:18> col:23 'float'
| | |-ParmVarDecl 0x1c455dd8b70 <col:25> col:30 'float'
| | |-BuiltinAliasAttr 0x1c455dd8d28 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd8da8 <line:1518:7> Implicit
| | `-ConstAttr 0x1c455dd8dd8 <col:7> Implicit
| |-FunctionDecl 0x1c455dd9028 <line:20:3, line:1520:34> col:8 mad 'float2 (float2, float2, float2)'
| | |-ParmVarDecl 0x1c455dd8e38 <col:12> col:18 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455dd8eb8 <col:20> col:26 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455dd8f38 <col:28> col:34 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dd90e8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd9168 <line:1520:8> Implicit
| | `-ConstAttr 0x1c455dd9198 <col:8> Implicit
| |-FunctionDecl 0x1c455dd93e8 <line:20:3, line:1522:34> col:8 mad 'float3 (float3, float3, float3)'
| | |-ParmVarDecl 0x1c455dd91f8 <col:12> col:18 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455dd9278 <col:20> col:26 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455dd92f8 <col:28> col:34 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dd94a8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd9528 <line:1522:8> Implicit
| | `-ConstAttr 0x1c455dd9558 <col:8> Implicit
| |-FunctionDecl 0x1c455dd97a8 <line:20:3, line:1524:34> col:8 mad 'float4 (float4, float4, float4)'
| | |-ParmVarDecl 0x1c455dd95b8 <col:12> col:18 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455dd9638 <col:20> col:26 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455dd96b8 <col:28> col:34 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455dd9868 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd98e8 <line:1524:8> Implicit
| | `-ConstAttr 0x1c455dd9918 <col:8> Implicit
| |-FunctionDecl 0x1c455dd9c98 <line:20:3, line:1527:34> col:8 mad 'double (double, double, double)'
| | |-ParmVarDecl 0x1c455dd9a90 <col:12> col:18 'double'
| | |-ParmVarDecl 0x1c455dd9b18 <col:20> col:26 'double'
| | |-ParmVarDecl 0x1c455dd9ba0 <col:28> col:34 'double'
| | |-BuiltinAliasAttr 0x1c455dd9d58 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dd9dd8 <line:1527:8> Implicit
| | `-ConstAttr 0x1c455dd9e08 <col:8> Implicit
| |-FunctionDecl 0x1c455dda058 <line:20:3, line:1529:38> col:9 mad 'double2 (double2, double2, double2)'
| | |-ParmVarDecl 0x1c455dd9e68 <col:13> col:20 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455dd9ee8 <col:22> col:29 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455dd9f68 <col:31> col:38 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455dda118 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dda198 <line:1529:9> Implicit
| | `-ConstAttr 0x1c455dda1c8 <col:9> Implicit
| |-FunctionDecl 0x1c455dda418 <line:20:3, line:1531:38> col:9 mad 'double3 (double3, double3, double3)'
| | |-ParmVarDecl 0x1c455dda228 <col:13> col:20 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455dda2a8 <col:22> col:29 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455dda328 <col:31> col:38 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455dda4d8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dda558 <line:1531:9> Implicit
| | `-ConstAttr 0x1c455dda588 <col:9> Implicit
| |-FunctionDecl 0x1c455dda7d8 <line:20:3, line:1533:38> col:9 mad 'double4 (double4, double4, double4)'
| | |-ParmVarDecl 0x1c455dda5e8 <col:13> col:20 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455dda668 <col:22> col:29 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455dda6e8 <col:31> col:38 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455dda898 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_mad
| | |-NoThrowAttr 0x1c455dda918 <line:1533:9> Implicit
| | `-ConstAttr 0x1c455dda948 <col:9> Implicit
| |-FunctionDecl 0x1c455dddfa8 <line:20:3, line:1546:20> col:6 max 'half (half, half)'
| | |-ParmVarDecl 0x1c455dda9b0 <col:10> col:14 'half'
| | |-ParmVarDecl 0x1c455ddded0 <col:16> col:20 'half'
| | |-BuiltinAliasAttr 0x1c455dde060 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455dde0e0 <line:1546:6> Implicit
| | `-ConstAttr 0x1c455dde110 <col:6> Implicit
| |-FunctionDecl 0x1c455dde2b0 <line:20:3, line:1549:23> col:7 max 'half2 (half2, half2)'
| | |-ParmVarDecl 0x1c455dde160 <col:11> col:16 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455dde1e0 <col:18> col:23 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dde368 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455dde3e8 <line:1549:7> Implicit
| | `-ConstAttr 0x1c455dde418 <col:7> Implicit
| |-FunctionDecl 0x1c455dde5c8 <line:20:3, line:1552:23> col:7 max 'half3 (half3, half3)'
| | |-ParmVarDecl 0x1c455dde478 <col:11> col:16 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455dde4f8 <col:18> col:23 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dde680 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455dde700 <line:1552:7> Implicit
| | `-ConstAttr 0x1c455dde730 <col:7> Implicit
| |-FunctionDecl 0x1c455dde8e0 <line:20:3, line:1555:23> col:7 max 'half4 (half4, half4)'
| | |-ParmVarDecl 0x1c455dde790 <col:11> col:16 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455dde810 <col:18> col:23 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dde998 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455ddea18 <line:1555:7> Implicit
| | `-ConstAttr 0x1c455ddea48 <col:7> Implicit
| |-FunctionDecl 0x1c455ddec10 <line:20:3, line:1586:17> col:5 max 'int (int, int)'
| | |-ParmVarDecl 0x1c455ddeab0 <col:9> col:12 'int'
| | |-ParmVarDecl 0x1c455ddeb38 <col:14> col:17 'int'
| | |-BuiltinAliasAttr 0x1c455ddecc8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455dded48 <line:1586:5> Implicit
| | `-ConstAttr 0x1c455dded78 <col:5> Implicit
| |-FunctionDecl 0x1c455ddcea0 <line:20:3, line:1588:20> col:6 max 'int2 (int2, int2)'
| | |-ParmVarDecl 0x1c455ddedd8 <col:10> col:14 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455ddee58 <col:16> col:20 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455ddcf58 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455ddcfd8 <line:1588:6> Implicit
| | `-ConstAttr 0x1c455ddd008 <col:6> Implicit
| |-FunctionDecl 0x1c455ddd240 <line:20:3, line:1590:20> col:6 max 'int3 (int3, int3)'
| | |-ParmVarDecl 0x1c455ddd068 <col:10> col:14 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455ddd0e8 <col:16> col:20 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455ddd2f8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455ddd378 <line:1590:6> Implicit
| | `-ConstAttr 0x1c455ddd3a8 <col:6> Implicit
| |-FunctionDecl 0x1c455ddd5e0 <line:20:3, line:1592:20> col:6 max 'int4 (int4, int4)'
| | |-ParmVarDecl 0x1c455ddd408 <col:10> col:14 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455ddd488 <col:16> col:20 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455ddd698 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455ddd718 <line:1592:6> Implicit
| | `-ConstAttr 0x1c455ddd748 <col:6> Implicit
| |-FunctionDecl 0x1c455ddd8f8 <line:20:3, line:1595:20> col:6 max 'uint (uint, uint)'
| | |-ParmVarDecl 0x1c455ddd7a8 <col:10> col:14 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455ddd828 <col:16> col:20 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455ddd9b0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455ddda30 <line:1595:6> Implicit
| | `-ConstAttr 0x1c455ddda60 <col:6> Implicit
| |-FunctionDecl 0x1c455dddc50 <line:20:3, line:1597:23> col:7 max 'uint2 (uint2, uint2)'
| | |-ParmVarDecl 0x1c455dddac0 <col:11> col:16 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455dddb40 <col:18> col:23 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455dddd08 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455dddd88 <line:1597:7> Implicit
| | `-ConstAttr 0x1c455de2340 <col:7> Implicit
| |-FunctionDecl 0x1c455de2570 <line:20:3, line:1599:23> col:7 max 'uint3 (uint3, uint3)'
| | |-ParmVarDecl 0x1c455de23a0 <col:11> col:16 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455de2420 <col:18> col:23 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455de2628 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de26a8 <line:1599:7> Implicit
| | `-ConstAttr 0x1c455de26d8 <col:7> Implicit
| |-FunctionDecl 0x1c455de28d0 <line:20:3, line:1601:23> col:7 max 'uint4 (uint4, uint4)'
| | |-ParmVarDecl 0x1c455de2738 <col:11> col:16 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455de27b8 <col:18> col:23 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455de2988 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de2a08 <line:1601:7> Implicit
| | `-ConstAttr 0x1c455de2a38 <col:7> Implicit
| |-FunctionDecl 0x1c455de2be8 <line:20:3, line:1604:29> col:9 max 'int64_t (int64_t, int64_t)'
| | |-ParmVarDecl 0x1c455de2a98 <col:13> col:20 'int64_t':'long'
| | |-ParmVarDecl 0x1c455de2b18 <col:22> col:29 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455de2ca0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de2d20 <line:1604:9> Implicit
| | `-ConstAttr 0x1c455de2d50 <col:9> Implicit
| |-FunctionDecl 0x1c455de2f80 <line:20:3, line:1606:32> col:10 max 'int64_t2 (int64_t2, int64_t2)'
| | |-ParmVarDecl 0x1c455de2db0 <col:14> col:22 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455de2e30 <col:24> col:32 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455de3038 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de30b8 <line:1606:10> Implicit
| | `-ConstAttr 0x1c455de30e8 <col:10> Implicit
| |-FunctionDecl 0x1c455de3450 <line:20:3, line:1608:32> col:10 max 'int64_t3 (int64_t3, int64_t3)'
| | |-ParmVarDecl 0x1c455de3148 <col:14> col:22 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455de31c8 <col:24> col:32 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455de3508 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de3588 <line:1608:10> Implicit
| | `-ConstAttr 0x1c455de35b8 <col:10> Implicit
| |-FunctionDecl 0x1c455de37f0 <line:20:3, line:1610:32> col:10 max 'int64_t4 (int64_t4, int64_t4)'
| | |-ParmVarDecl 0x1c455de3618 <col:14> col:22 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455de3698 <col:24> col:32 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455de38a8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de3928 <line:1610:10> Implicit
| | `-ConstAttr 0x1c455de3958 <col:10> Implicit
| |-FunctionDecl 0x1c455de3b08 <line:20:3, line:1613:32> col:10 max 'uint64_t (uint64_t, uint64_t)'
| | |-ParmVarDecl 0x1c455de39b8 <col:14> col:22 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455de3a38 <col:24> col:32 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455de3bc0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de3c40 <line:1613:10> Implicit
| | `-ConstAttr 0x1c455de3c70 <col:10> Implicit
| |-FunctionDecl 0x1c455de3ea0 <line:20:3, line:1615:35> col:11 max 'uint64_t2 (uint64_t2, uint64_t2)'
| | |-ParmVarDecl 0x1c455de3cd0 <col:15> col:24 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455de3d50 <col:26> col:35 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455de3f58 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de3fd8 <line:1615:11> Implicit
| | `-ConstAttr 0x1c455de4008 <col:11> Implicit
| |-FunctionDecl 0x1c455de4240 <line:20:3, line:1617:35> col:11 max 'uint64_t3 (uint64_t3, uint64_t3)'
| | |-ParmVarDecl 0x1c455de4068 <col:15> col:24 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455de40e8 <col:26> col:35 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455de42f8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de4378 <line:1617:11> Implicit
| | `-ConstAttr 0x1c455de43a8 <col:11> Implicit
| |-FunctionDecl 0x1c455de02f0 <line:20:3, line:1619:35> col:11 max 'uint64_t4 (uint64_t4, uint64_t4)'
| | |-ParmVarDecl 0x1c455de0120 <col:15> col:24 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455de01a0 <col:26> col:35 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455de03a8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de0428 <line:1619:11> Implicit
| | `-ConstAttr 0x1c455de0458 <col:11> Implicit
| |-FunctionDecl 0x1c455de0620 <line:20:3, line:1622:23> col:7 max 'float (float, float)'
| | |-ParmVarDecl 0x1c455de04c0 <col:11> col:16 'float'
| | |-ParmVarDecl 0x1c455de0548 <col:18> col:23 'float'
| | |-BuiltinAliasAttr 0x1c455de06d8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de0758 <line:1622:7> Implicit
| | `-ConstAttr 0x1c455de0788 <col:7> Implicit
| |-FunctionDecl 0x1c455de0938 <line:20:3, line:1624:26> col:8 max 'float2 (float2, float2)'
| | |-ParmVarDecl 0x1c455de07e8 <col:12> col:18 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455de0868 <col:20> col:26 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455de09f0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de0a70 <line:1624:8> Implicit
| | `-ConstAttr 0x1c455de0aa0 <col:8> Implicit
| |-FunctionDecl 0x1c455de0c50 <line:20:3, line:1626:26> col:8 max 'float3 (float3, float3)'
| | |-ParmVarDecl 0x1c455de0b00 <col:12> col:18 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455de0b80 <col:20> col:26 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455de0d08 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de0d88 <line:1626:8> Implicit
| | `-ConstAttr 0x1c455de0db8 <col:8> Implicit
| |-FunctionDecl 0x1c455de0f68 <line:20:3, line:1628:26> col:8 max 'float4 (float4, float4)'
| | |-ParmVarDecl 0x1c455de0e18 <col:12> col:18 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455de0e98 <col:20> col:26 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455de1020 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de10a0 <line:1628:8> Implicit
| | `-ConstAttr 0x1c455de10d0 <col:8> Implicit
| |-FunctionDecl 0x1c455de46d8 <line:20:3, line:1631:26> col:8 max 'double (double, double)'
| | |-ParmVarDecl 0x1c455de4578 <col:12> col:18 'double'
| | |-ParmVarDecl 0x1c455de4600 <col:20> col:26 'double'
| | |-BuiltinAliasAttr 0x1c455de4790 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de4810 <line:1631:8> Implicit
| | `-ConstAttr 0x1c455de4840 <col:8> Implicit
| |-FunctionDecl 0x1c455de4a70 <line:20:3, line:1633:29> col:9 max 'double2 (double2, double2)'
| | |-ParmVarDecl 0x1c455de48a0 <col:13> col:20 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455de4920 <col:22> col:29 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455de4b28 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de4ba8 <line:1633:9> Implicit
| | `-ConstAttr 0x1c455de4bd8 <col:9> Implicit
| |-FunctionDecl 0x1c455de4e10 <line:20:3, line:1635:29> col:9 max 'double3 (double3, double3)'
| | |-ParmVarDecl 0x1c455de4c38 <col:13> col:20 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455de4cb8 <col:22> col:29 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455de4ec8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de4f48 <line:1635:9> Implicit
| | `-ConstAttr 0x1c455de4f78 <col:9> Implicit
| |-FunctionDecl 0x1c455de51b0 <line:20:3, line:1637:29> col:9 max 'double4 (double4, double4)'
| | |-ParmVarDecl 0x1c455de4fd8 <col:13> col:20 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455de5058 <col:22> col:29 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455de5268 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_max
| | |-NoThrowAttr 0x1c455de52e8 <line:1637:9> Implicit
| | `-ConstAttr 0x1c455de5318 <col:9> Implicit
| |-FunctionDecl 0x1c455de1230 <line:20:3, line:1650:20> col:6 min 'half (half, half)'
| | |-ParmVarDecl 0x1c455de5380 <col:10> col:14 'half'
| | |-ParmVarDecl 0x1c455de5408 <col:16> col:20 'half'
| | |-BuiltinAliasAttr 0x1c455de12e8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de1368 <line:1650:6> Implicit
| | `-ConstAttr 0x1c455de1398 <col:6> Implicit
| |-FunctionDecl 0x1c455de1538 <line:20:3, line:1653:23> col:7 min 'half2 (half2, half2)'
| | |-ParmVarDecl 0x1c455de13e8 <col:11> col:16 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455de1468 <col:18> col:23 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455de15f0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de1670 <line:1653:7> Implicit
| | `-ConstAttr 0x1c455de16a0 <col:7> Implicit
| |-FunctionDecl 0x1c455de1850 <line:20:3, line:1656:23> col:7 min 'half3 (half3, half3)'
| | |-ParmVarDecl 0x1c455de1700 <col:11> col:16 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455de1780 <col:18> col:23 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455de1908 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de1988 <line:1656:7> Implicit
| | `-ConstAttr 0x1c455de19b8 <col:7> Implicit
| |-FunctionDecl 0x1c455de1b68 <line:20:3, line:1659:23> col:7 min 'half4 (half4, half4)'
| | |-ParmVarDecl 0x1c455de1a18 <col:11> col:16 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455de1a98 <col:18> col:23 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455de1c20 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de1ca0 <line:1659:7> Implicit
| | `-ConstAttr 0x1c455de1cd0 <col:7> Implicit
| |-FunctionDecl 0x1c455de1e98 <line:20:3, line:1690:17> col:5 min 'int (int, int)'
| | |-ParmVarDecl 0x1c455de1d38 <col:9> col:12 'int'
| | |-ParmVarDecl 0x1c455de1dc0 <col:14> col:17 'int'
| | |-BuiltinAliasAttr 0x1c455de1f50 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de1fd0 <line:1690:5> Implicit
| | `-ConstAttr 0x1c455de2000 <col:5> Implicit
| |-FunctionDecl 0x1c455de5670 <line:20:3, line:1692:20> col:6 min 'int2 (int2, int2)'
| | |-ParmVarDecl 0x1c455de2060 <col:10> col:14 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455de20e0 <col:16> col:20 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455de5728 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de57a8 <line:1692:6> Implicit
| | `-ConstAttr 0x1c455de57d8 <col:6> Implicit
| |-FunctionDecl 0x1c455de5988 <line:20:3, line:1694:20> col:6 min 'int3 (int3, int3)'
| | |-ParmVarDecl 0x1c455de5838 <col:10> col:14 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455de58b8 <col:16> col:20 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455de5a40 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de5ac0 <line:1694:6> Implicit
| | `-ConstAttr 0x1c455de5af0 <col:6> Implicit
| |-FunctionDecl 0x1c455de5ca0 <line:20:3, line:1696:20> col:6 min 'int4 (int4, int4)'
| | |-ParmVarDecl 0x1c455de5b50 <col:10> col:14 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455de5bd0 <col:16> col:20 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455de5d58 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de5dd8 <line:1696:6> Implicit
| | `-ConstAttr 0x1c455de5e08 <col:6> Implicit
| |-FunctionDecl 0x1c455de5fb8 <line:20:3, line:1699:20> col:6 min 'uint (uint, uint)'
| | |-ParmVarDecl 0x1c455de5e68 <col:10> col:14 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455de5ee8 <col:16> col:20 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455de6070 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de60f0 <line:1699:6> Implicit
| | `-ConstAttr 0x1c455de6120 <col:6> Implicit
| |-FunctionDecl 0x1c455de62d0 <line:20:3, line:1701:23> col:7 min 'uint2 (uint2, uint2)'
| | |-ParmVarDecl 0x1c455de6180 <col:11> col:16 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455de6200 <col:18> col:23 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455de6388 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de6408 <line:1701:7> Implicit
| | `-ConstAttr 0x1c455de6438 <col:7> Implicit
| |-FunctionDecl 0x1c455de6780 <line:20:3, line:1703:23> col:7 min 'uint3 (uint3, uint3)'
| | |-ParmVarDecl 0x1c455de6498 <col:11> col:16 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455de6518 <col:18> col:23 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455de6838 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de68b8 <line:1703:7> Implicit
| | `-ConstAttr 0x1c455de68e8 <col:7> Implicit
| |-FunctionDecl 0x1c455de6a98 <line:20:3, line:1705:23> col:7 min 'uint4 (uint4, uint4)'
| | |-ParmVarDecl 0x1c455de6948 <col:11> col:16 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455de69c8 <col:18> col:23 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455de6b50 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de6bd0 <line:1705:7> Implicit
| | `-ConstAttr 0x1c455de6c00 <col:7> Implicit
| |-FunctionDecl 0x1c455de6dc8 <line:20:3, line:1708:23> col:7 min 'float (float, float)'
| | |-ParmVarDecl 0x1c455de6c68 <col:11> col:16 'float'
| | |-ParmVarDecl 0x1c455de6cf0 <col:18> col:23 'float'
| | |-BuiltinAliasAttr 0x1c455de6e80 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de6f00 <line:1708:7> Implicit
| | `-ConstAttr 0x1c455de6f30 <col:7> Implicit
| |-FunctionDecl 0x1c455de70e0 <line:20:3, line:1710:26> col:8 min 'float2 (float2, float2)'
| | |-ParmVarDecl 0x1c455de6f90 <col:12> col:18 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455de7010 <col:20> col:26 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455de7198 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de7218 <line:1710:8> Implicit
| | `-ConstAttr 0x1c455de7248 <col:8> Implicit
| |-FunctionDecl 0x1c455de73f8 <line:20:3, line:1712:26> col:8 min 'float3 (float3, float3)'
| | |-ParmVarDecl 0x1c455de72a8 <col:12> col:18 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455de7328 <col:20> col:26 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455de74b0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de7530 <line:1712:8> Implicit
| | `-ConstAttr 0x1c455de7560 <col:8> Implicit
| |-FunctionDecl 0x1c455de7890 <line:20:3, line:1714:26> col:8 min 'float4 (float4, float4)'
| | |-ParmVarDecl 0x1c455de75c0 <col:12> col:18 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455de7640 <col:20> col:26 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455de7948 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de79c8 <line:1714:8> Implicit
| | `-ConstAttr 0x1c455de79f8 <col:8> Implicit
| |-FunctionDecl 0x1c455de7ba8 <line:20:3, line:1717:29> col:9 min 'int64_t (int64_t, int64_t)'
| | |-ParmVarDecl 0x1c455de7a58 <col:13> col:20 'int64_t':'long'
| | |-ParmVarDecl 0x1c455de7ad8 <col:22> col:29 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455de7c60 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de7ce0 <line:1717:9> Implicit
| | `-ConstAttr 0x1c455de7d10 <col:9> Implicit
| |-FunctionDecl 0x1c455de7ec0 <line:20:3, line:1719:32> col:10 min 'int64_t2 (int64_t2, int64_t2)'
| | |-ParmVarDecl 0x1c455de7d70 <col:14> col:22 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455de7df0 <col:24> col:32 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455de7f78 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de7ff8 <line:1719:10> Implicit
| | `-ConstAttr 0x1c455de8028 <col:10> Implicit
| |-FunctionDecl 0x1c455de81d8 <line:20:3, line:1721:32> col:10 min 'int64_t3 (int64_t3, int64_t3)'
| | |-ParmVarDecl 0x1c455de8088 <col:14> col:22 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455de8108 <col:24> col:32 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455de8290 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de8310 <line:1721:10> Implicit
| | `-ConstAttr 0x1c455de8340 <col:10> Implicit
| |-FunctionDecl 0x1c455de84f0 <line:20:3, line:1723:32> col:10 min 'int64_t4 (int64_t4, int64_t4)'
| | |-ParmVarDecl 0x1c455de83a0 <col:14> col:22 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455de8420 <col:24> col:32 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455de85a8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455de8628 <line:1723:10> Implicit
| | `-ConstAttr 0x1c455de8658 <col:10> Implicit
| |-FunctionDecl 0x1c455deabc0 <line:20:3, line:1726:32> col:10 min 'uint64_t (uint64_t, uint64_t)'
| | |-ParmVarDecl 0x1c455de86b8 <col:14> col:22 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455de8738 <col:24> col:32 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455deac78 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455deacf8 <line:1726:10> Implicit
| | `-ConstAttr 0x1c455dead28 <col:10> Implicit
| |-FunctionDecl 0x1c455deaed8 <line:20:3, line:1728:35> col:11 min 'uint64_t2 (uint64_t2, uint64_t2)'
| | |-ParmVarDecl 0x1c455dead88 <col:15> col:24 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455deae08 <col:26> col:35 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455deaf90 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455deb010 <line:1728:11> Implicit
| | `-ConstAttr 0x1c455deb040 <col:11> Implicit
| |-FunctionDecl 0x1c455deb1f0 <line:20:3, line:1730:35> col:11 min 'uint64_t3 (uint64_t3, uint64_t3)'
| | |-ParmVarDecl 0x1c455deb0a0 <col:15> col:24 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455deb120 <col:26> col:35 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455deb2a8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455deb328 <line:1730:11> Implicit
| | `-ConstAttr 0x1c455deb358 <col:11> Implicit
| |-FunctionDecl 0x1c455deb508 <line:20:3, line:1732:35> col:11 min 'uint64_t4 (uint64_t4, uint64_t4)'
| | |-ParmVarDecl 0x1c455deb3b8 <col:15> col:24 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455deb438 <col:26> col:35 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455deb5c0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455deb640 <line:1732:11> Implicit
| | `-ConstAttr 0x1c455deb670 <col:11> Implicit
| |-FunctionDecl 0x1c455deb838 <line:20:3, line:1735:26> col:8 min 'double (double, double)'
| | |-ParmVarDecl 0x1c455deb6d8 <col:12> col:18 'double'
| | |-ParmVarDecl 0x1c455deb760 <col:20> col:26 'double'
| | |-BuiltinAliasAttr 0x1c455deb8f0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455deb970 <line:1735:8> Implicit
| | `-ConstAttr 0x1c455deb9a0 <col:8> Implicit
| |-FunctionDecl 0x1c455debcd0 <line:20:3, line:1737:29> col:9 min 'double2 (double2, double2)'
| | |-ParmVarDecl 0x1c455deba00 <col:13> col:20 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455deba80 <col:22> col:29 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455debd88 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455debe08 <line:1737:9> Implicit
| | `-ConstAttr 0x1c455debe38 <col:9> Implicit
| |-FunctionDecl 0x1c455debfe8 <line:20:3, line:1739:29> col:9 min 'double3 (double3, double3)'
| | |-ParmVarDecl 0x1c455debe98 <col:13> col:20 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455debf18 <col:22> col:29 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455dec0a0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455dec120 <line:1739:9> Implicit
| | `-ConstAttr 0x1c455dec150 <col:9> Implicit
| |-FunctionDecl 0x1c455dec300 <line:20:3, line:1741:29> col:9 min 'double4 (double4, double4)'
| | |-ParmVarDecl 0x1c455dec1b0 <col:13> col:20 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455dec230 <col:22> col:29 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455dec3b8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_min
| | |-NoThrowAttr 0x1c455dec438 <line:1741:9> Implicit
| | `-ConstAttr 0x1c455dec468 <col:9> Implicit
| |-FunctionDecl 0x1c455dec588 <line:20:3, line:1755:20> col:6 normalize 'half (half)'
| | |-ParmVarDecl 0x1c455dec4d0 <col:16> col:20 'half'
| | |-BuiltinAliasAttr 0x1c455dec638 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_normalize
| | |-NoThrowAttr 0x1c455dec6b8 <line:1755:6> Implicit
| | `-ConstAttr 0x1c455dec6e8 <col:6> Implicit
| |-FunctionDecl 0x1c455dec7e8 <line:20:3, line:1758:22> col:7 normalize 'half2 (half2)'
| | |-ParmVarDecl 0x1c455dec738 <col:17> col:22 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dec898 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_normalize
| | |-NoThrowAttr 0x1c455dec918 <line:1758:7> Implicit
| | `-ConstAttr 0x1c455dec948 <col:7> Implicit
| |-FunctionDecl 0x1c455deca58 <line:20:3, line:1761:22> col:7 normalize 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dec9a8 <col:17> col:22 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455decb08 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_normalize
| | |-NoThrowAttr 0x1c455decb88 <line:1761:7> Implicit
| | `-ConstAttr 0x1c455decbb8 <col:7> Implicit
| |-FunctionDecl 0x1c455de89a0 <line:20:3, line:1764:22> col:7 normalize 'half4 (half4)'
| | |-ParmVarDecl 0x1c455decc18 <col:17> col:22 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455de8a50 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_normalize
| | |-NoThrowAttr 0x1c455de8ad0 <line:1764:7> Implicit
| | `-ConstAttr 0x1c455de8b00 <col:7> Implicit
| |-FunctionDecl 0x1c455de8c20 <line:20:3, line:1767:22> col:7 used normalize 'float (float)'
| | |-ParmVarDecl 0x1c455de8b68 <col:17> col:22 'float'
| | |-BuiltinAliasAttr 0x1c455de8cd0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_normalize
| | |-NoThrowAttr 0x1c455de8d50 <line:1767:7> Implicit
| | `-ConstAttr 0x1c455de8d80 <col:7> Implicit
| |-FunctionDecl 0x1c455de8e90 <line:20:3, line:1769:24> col:8 used normalize 'float2 (float2)'
| | |-ParmVarDecl 0x1c455de8de0 <col:18> col:24 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455de8f40 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_normalize
| | |-NoThrowAttr 0x1c455de8fc0 <line:1769:8> Implicit
| | `-ConstAttr 0x1c455de8ff0 <col:8> Implicit
| |-FunctionDecl 0x1c455de9100 <line:20:3, line:1771:24> col:8 used normalize 'float3 (float3)'
| | |-ParmVarDecl 0x1c455de9050 <col:18> col:24 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455de91b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_normalize
| | |-NoThrowAttr 0x1c455de9230 <line:1771:8> Implicit
| | `-ConstAttr 0x1c455de9260 <col:8> Implicit
| |-FunctionDecl 0x1c455de9370 <line:20:3, line:1773:24> col:8 used normalize 'float4 (float4)'
| | |-ParmVarDecl 0x1c455de92c0 <col:18> col:24 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455de9420 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_normalize
| | |-NoThrowAttr 0x1c455de94a0 <line:1773:8> Implicit
| | `-ConstAttr 0x1c455de94d0 <col:8> Implicit
| |-FunctionDecl 0x1c455de9680 <line:20:3, line:1788:19> col:6 used or 'bool (bool, bool)'
| | |-ParmVarDecl 0x1c455de9530 <col:9> col:13 'bool'
| | |-ParmVarDecl 0x1c455de95b0 <col:15> col:19 'bool'
| | |-BuiltinAliasAttr 0x1c455de9738 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_or
| | |-NoThrowAttr 0x1c455de97b8 <line:1788:6> Implicit
| | `-ConstAttr 0x1c455de97e8 <col:6> Implicit
| |-FunctionDecl 0x1c455decde0 <line:20:3, line:1790:22> col:7 or 'bool2 (bool2, bool2)'
| | |-ParmVarDecl 0x1c455de9838 <col:10> col:15 'bool2':'vector<bool, 2>'
| | |-ParmVarDecl 0x1c455de98b8 <col:17> col:22 'bool2':'vector<bool, 2>'
| | |-BuiltinAliasAttr 0x1c455dece98 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_or
| | |-NoThrowAttr 0x1c455decf18 <line:1790:7> Implicit
| | `-ConstAttr 0x1c455decf48 <col:7> Implicit
| |-FunctionDecl 0x1c455ded0f8 <line:20:3, line:1792:22> col:7 or 'bool3 (bool3, bool3)'
| | |-ParmVarDecl 0x1c455decfa8 <col:10> col:15 'bool3':'vector<bool, 3>'
| | |-ParmVarDecl 0x1c455ded028 <col:17> col:22 'bool3':'vector<bool, 3>'
| | |-BuiltinAliasAttr 0x1c455ded1b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_or
| | |-NoThrowAttr 0x1c455ded230 <line:1792:7> Implicit
| | `-ConstAttr 0x1c455ded260 <col:7> Implicit
| |-FunctionDecl 0x1c455ded410 <line:20:3, line:1794:22> col:7 or 'bool4 (bool4, bool4)'
| | |-ParmVarDecl 0x1c455ded2c0 <col:10> col:15 'bool4':'vector<bool, 4>'
| | |-ParmVarDecl 0x1c455ded340 <col:17> col:22 'bool4':'vector<bool, 4>'
| | |-BuiltinAliasAttr 0x1c455ded4c8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_or
| | |-NoThrowAttr 0x1c455ded548 <line:1794:7> Implicit
| | `-ConstAttr 0x1c455ded578 <col:7> Implicit
| |-FunctionDecl 0x1c455ded740 <line:20:3, line:1808:20> col:6 pow 'half (half, half)'
| | |-ParmVarDecl 0x1c455ded5e0 <col:10> col:14 'half'
| | |-ParmVarDecl 0x1c455ded668 <col:16> col:20 'half'
| | |-BuiltinAliasAttr 0x1c455ded7f8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_pow
| | |-NoThrowAttr 0x1c455ded878 <line:1808:6> Implicit
| | `-ConstAttr 0x1c455ded8a8 <col:6> Implicit
| |-FunctionDecl 0x1c455deda48 <line:20:3, line:1811:23> col:7 pow 'half2 (half2, half2)'
| | |-ParmVarDecl 0x1c455ded8f8 <col:11> col:16 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455ded978 <col:18> col:23 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dedb00 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_pow
| | |-NoThrowAttr 0x1c455dedb80 <line:1811:7> Implicit
| | `-ConstAttr 0x1c455dedbb0 <col:7> Implicit
| |-FunctionDecl 0x1c455de9ab0 <line:20:3, line:1814:23> col:7 pow 'half3 (half3, half3)'
| | |-ParmVarDecl 0x1c455dedc10 <col:11> col:16 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455dedc90 <col:18> col:23 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455de9b68 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_pow
| | |-NoThrowAttr 0x1c455de9be8 <line:1814:7> Implicit
| | `-ConstAttr 0x1c455de9c18 <col:7> Implicit
| |-FunctionDecl 0x1c455de9dc8 <line:20:3, line:1817:23> col:7 pow 'half4 (half4, half4)'
| | |-ParmVarDecl 0x1c455de9c78 <col:11> col:16 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455de9cf8 <col:18> col:23 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455de9e80 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_pow
| | |-NoThrowAttr 0x1c455de9f00 <line:1817:7> Implicit
| | `-ConstAttr 0x1c455de9f30 <col:7> Implicit
| |-FunctionDecl 0x1c455dea0f8 <line:20:3, line:1820:23> col:7 used pow 'float (float, float)'
| | |-ParmVarDecl 0x1c455de9f98 <col:11> col:16 'float'
| | |-ParmVarDecl 0x1c455dea020 <col:18> col:23 'float'
| | |-BuiltinAliasAttr 0x1c455dea1b0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_pow
| | |-NoThrowAttr 0x1c455dea230 <line:1820:7> Implicit
| | `-ConstAttr 0x1c455dea260 <col:7> Implicit
| |-FunctionDecl 0x1c455dea410 <line:20:3, line:1822:26> col:8 used pow 'float2 (float2, float2)'
| | |-ParmVarDecl 0x1c455dea2c0 <col:12> col:18 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455dea340 <col:20> col:26 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dea4c8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_pow
| | |-NoThrowAttr 0x1c455dea548 <line:1822:8> Implicit
| | `-ConstAttr 0x1c455dea578 <col:8> Implicit
| |-FunctionDecl 0x1c455dea728 <line:20:3, line:1824:26> col:8 used pow 'float3 (float3, float3)'
| | |-ParmVarDecl 0x1c455dea5d8 <col:12> col:18 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455dea658 <col:20> col:26 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dea7e0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_pow
| | |-NoThrowAttr 0x1c455dea860 <line:1824:8> Implicit
| | `-ConstAttr 0x1c455dea890 <col:8> Implicit
| |-FunctionDecl 0x1c455df0110 <line:20:3, line:1826:26> col:8 used pow 'float4 (float4, float4)'
| | |-ParmVarDecl 0x1c455dea8f0 <col:12> col:18 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455dea970 <col:20> col:26 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455df01c8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_pow
| | |-NoThrowAttr 0x1c455df0248 <line:1826:8> Implicit
| | `-ConstAttr 0x1c455df0278 <col:8> Implicit
| |-FunctionDecl 0x1c455df0388 <line:20:3, line:1852:22> col:6 reversebits 'uint (uint)'
| | |-ParmVarDecl 0x1c455df02d8 <col:18> col:22 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455df0438 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_bitreverse
| | |-NoThrowAttr 0x1c455df04b8 <line:1852:6> Implicit
| | `-ConstAttr 0x1c455df04e8 <col:6> Implicit
| |-FunctionDecl 0x1c455df05e8 <line:20:3, line:1854:24> col:7 reversebits 'uint2 (uint2)'
| | |-ParmVarDecl 0x1c455df0538 <col:19> col:24 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455df0698 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_bitreverse
| | |-NoThrowAttr 0x1c455df0718 <line:1854:7> Implicit
| | `-ConstAttr 0x1c455df0748 <col:7> Implicit
| |-FunctionDecl 0x1c455df0858 <line:20:3, line:1856:24> col:7 reversebits 'uint3 (uint3)'
| | |-ParmVarDecl 0x1c455df07a8 <col:19> col:24 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455df0908 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_bitreverse
| | |-NoThrowAttr 0x1c455df0988 <line:1856:7> Implicit
| | `-ConstAttr 0x1c455df09b8 <col:7> Implicit
| |-FunctionDecl 0x1c455df0ac8 <line:20:3, line:1858:24> col:7 reversebits 'uint4 (uint4)'
| | |-ParmVarDecl 0x1c455df0a18 <col:19> col:24 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455df0b78 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_bitreverse
| | |-NoThrowAttr 0x1c455df0bf8 <line:1858:7> Implicit
| | `-ConstAttr 0x1c455df0c28 <col:7> Implicit
| |-FunctionDecl 0x1c455df0d38 <line:20:3, line:1861:30> col:10 reversebits 'uint64_t (uint64_t)'
| | |-ParmVarDecl 0x1c455df0c88 <col:22> col:30 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455df0de8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_bitreverse
| | |-NoThrowAttr 0x1c455df0e68 <line:1861:10> Implicit
| | `-ConstAttr 0x1c455df0e98 <col:10> Implicit
| |-FunctionDecl 0x1c455df0fa8 <line:20:3, line:1863:32> col:11 reversebits 'uint64_t2 (uint64_t2)'
| | |-ParmVarDecl 0x1c455df0ef8 <col:23> col:32 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455df1058 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_bitreverse
| | |-NoThrowAttr 0x1c455df10d8 <line:1863:11> Implicit
| | `-ConstAttr 0x1c455df1220 <col:11> Implicit
| |-FunctionDecl 0x1c455df1330 <line:20:3, line:1865:32> col:11 reversebits 'uint64_t3 (uint64_t3)'
| | |-ParmVarDecl 0x1c455df1280 <col:23> col:32 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455df13e0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_bitreverse
| | |-NoThrowAttr 0x1c455df1460 <line:1865:11> Implicit
| | `-ConstAttr 0x1c455df1490 <col:11> Implicit
| |-FunctionDecl 0x1c455df15a0 <line:20:3, line:1867:32> col:11 reversebits 'uint64_t4 (uint64_t4)'
| | |-ParmVarDecl 0x1c455df14f0 <col:23> col:32 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455df1650 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_bitreverse
| | |-NoThrowAttr 0x1c455df16d0 <line:1867:11> Implicit
| | `-ConstAttr 0x1c455df1700 <col:11> Implicit
| |-FunctionDecl 0x1c455df18b0 <line:20:3, line:1886:25> col:7 cross 'half3 (half3, half3)'
| | |-ParmVarDecl 0x1c455df1760 <col:13> col:18 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455df17e0 <col:20> col:25 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455df1968 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_crossf16
| | |-NoThrowAttr 0x1c455df19e8 <line:1886:7> Implicit
| | `-ConstAttr 0x1c455df1a18 <col:7> Implicit
| |-FunctionDecl 0x1c455df1bb8 <line:20:3, line:1889:28> col:8 cross 'float3 (float3, float3)'
| | |-ParmVarDecl 0x1c455df1a68 <col:14> col:20 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455df1ae8 <col:22> col:28 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455df1c70 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_crossf32
| | |-NoThrowAttr 0x1c455df1cf0 <line:1889:8> Implicit
| | `-ConstAttr 0x1c455df1d20 <col:8> Implicit
| |-FunctionDecl 0x1c455df1e40 <line:20:3, line:1903:14> col:6 rcp 'half (half)'
| | |-ParmVarDecl 0x1c455df1d88 <col:10> col:14 'half'
| | |-BuiltinAliasAttr 0x1c455df1ef0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455df1f70 <line:1903:6> Implicit
| | `-ConstAttr 0x1c455df1fa0 <col:6> Implicit
| |-FunctionDecl 0x1c455df20a0 <line:20:3, line:1906:16> col:7 rcp 'half2 (half2)'
| | |-ParmVarDecl 0x1c455df1ff0 <col:11> col:16 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455df2150 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455df21d0 <line:1906:7> Implicit
| | `-ConstAttr 0x1c455dedef0 <col:7> Implicit
| |-FunctionDecl 0x1c455dee000 <line:20:3, line:1909:16> col:7 rcp 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dedf50 <col:11> col:16 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dee0b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455dee130 <line:1909:7> Implicit
| | `-ConstAttr 0x1c455dee160 <col:7> Implicit
| |-FunctionDecl 0x1c455dee270 <line:20:3, line:1912:16> col:7 rcp 'half4 (half4)'
| | |-ParmVarDecl 0x1c455dee1c0 <col:11> col:16 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dee320 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455dee3a0 <line:1912:7> Implicit
| | `-ConstAttr 0x1c455dee3d0 <col:7> Implicit
| |-FunctionDecl 0x1c455dee4f0 <line:20:3, line:1915:16> col:7 rcp 'float (float)'
| | |-ParmVarDecl 0x1c455dee438 <col:11> col:16 'float'
| | |-BuiltinAliasAttr 0x1c455dee5a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455dee620 <line:1915:7> Implicit
| | `-ConstAttr 0x1c455dee650 <col:7> Implicit
| |-FunctionDecl 0x1c455dee760 <line:20:3, line:1917:18> col:8 rcp 'float2 (float2)'
| | |-ParmVarDecl 0x1c455dee6b0 <col:12> col:18 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dee810 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455dee890 <line:1917:8> Implicit
| | `-ConstAttr 0x1c455dee8c0 <col:8> Implicit
| |-FunctionDecl 0x1c455dee9d0 <line:20:3, line:1919:18> col:8 rcp 'float3 (float3)'
| | |-ParmVarDecl 0x1c455dee920 <col:12> col:18 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455deea80 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455deeb00 <line:1919:8> Implicit
| | `-ConstAttr 0x1c455deeb30 <col:8> Implicit
| |-FunctionDecl 0x1c455deec40 <line:20:3, line:1921:18> col:8 rcp 'float4 (float4)'
| | |-ParmVarDecl 0x1c455deeb90 <col:12> col:18 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455deecf0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455deed70 <line:1921:8> Implicit
| | `-ConstAttr 0x1c455deeda0 <col:8> Implicit
| |-FunctionDecl 0x1c455df2330 <line:20:3, line:1924:18> col:8 rcp 'double (double)'
| | |-ParmVarDecl 0x1c455deee08 <col:12> col:18 'double'
| | |-BuiltinAliasAttr 0x1c455df23e0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455df2460 <line:1924:8> Implicit
| | `-ConstAttr 0x1c455df2490 <col:8> Implicit
| |-FunctionDecl 0x1c455df25a0 <line:20:3, line:1926:20> col:9 rcp 'double2 (double2)'
| | |-ParmVarDecl 0x1c455df24f0 <col:13> col:20 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455df2650 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455df26d0 <line:1926:9> Implicit
| | `-ConstAttr 0x1c455df2700 <col:9> Implicit
| |-FunctionDecl 0x1c455df2810 <line:20:3, line:1928:20> col:9 rcp 'double3 (double3)'
| | |-ParmVarDecl 0x1c455df2760 <col:13> col:20 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455df28c0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455df2940 <line:1928:9> Implicit
| | `-ConstAttr 0x1c455df2970 <col:9> Implicit
| |-FunctionDecl 0x1c455df2a80 <line:20:3, line:1930:20> col:9 rcp 'double4 (double4)'
| | |-ParmVarDecl 0x1c455df29d0 <col:13> col:20 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455df2b30 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rcp
| | |-NoThrowAttr 0x1c455df2bb0 <line:1930:9> Implicit
| | `-ConstAttr 0x1c455df2be0 <col:9> Implicit
| |-FunctionDecl 0x1c455df2d00 <line:20:3, line:1945:16> col:6 rsqrt 'half (half)'
| | |-ParmVarDecl 0x1c455df2c48 <col:12> col:16 'half'
| | |-BuiltinAliasAttr 0x1c455df2db0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rsqrt
| | |-NoThrowAttr 0x1c455df2e30 <line:1945:6> Implicit
| | `-ConstAttr 0x1c455df2e60 <col:6> Implicit
| |-FunctionDecl 0x1c455df2f60 <line:20:3, line:1948:18> col:7 rsqrt 'half2 (half2)'
| | |-ParmVarDecl 0x1c455df2eb0 <col:13> col:18 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455df3010 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rsqrt
| | |-NoThrowAttr 0x1c455df3090 <line:1948:7> Implicit
| | `-ConstAttr 0x1c455df30c0 <col:7> Implicit
| |-FunctionDecl 0x1c455df31d0 <line:20:3, line:1951:18> col:7 rsqrt 'half3 (half3)'
| | |-ParmVarDecl 0x1c455df3120 <col:13> col:18 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455df3280 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rsqrt
| | |-NoThrowAttr 0x1c455df3300 <line:1951:7> Implicit
| | `-ConstAttr 0x1c455def000 <col:7> Implicit
| |-FunctionDecl 0x1c455def110 <line:20:3, line:1954:18> col:7 rsqrt 'half4 (half4)'
| | |-ParmVarDecl 0x1c455def060 <col:13> col:18 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455def1c0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rsqrt
| | |-NoThrowAttr 0x1c455def240 <line:1954:7> Implicit
| | `-ConstAttr 0x1c455def270 <col:7> Implicit
| |-FunctionDecl 0x1c455def390 <line:20:3, line:1957:18> col:7 used rsqrt 'float (float)'
| | |-ParmVarDecl 0x1c455def2d8 <col:13> col:18 'float'
| | |-BuiltinAliasAttr 0x1c455def440 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rsqrt
| | |-NoThrowAttr 0x1c455def4c0 <line:1957:7> Implicit
| | `-ConstAttr 0x1c455def4f0 <col:7> Implicit
| |-FunctionDecl 0x1c455def600 <line:20:3, line:1959:20> col:8 used rsqrt 'float2 (float2)'
| | |-ParmVarDecl 0x1c455def550 <col:14> col:20 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455def6b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rsqrt
| | |-NoThrowAttr 0x1c455def730 <line:1959:8> Implicit
| | `-ConstAttr 0x1c455def760 <col:8> Implicit
| |-FunctionDecl 0x1c455def870 <line:20:3, line:1961:20> col:8 used rsqrt 'float3 (float3)'
| | |-ParmVarDecl 0x1c455def7c0 <col:14> col:20 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455def920 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rsqrt
| | |-NoThrowAttr 0x1c455def9a0 <line:1961:8> Implicit
| | `-ConstAttr 0x1c455def9d0 <col:8> Implicit
| |-FunctionDecl 0x1c455defae0 <line:20:3, line:1963:20> col:8 used rsqrt 'float4 (float4)'
| | |-ParmVarDecl 0x1c455defa30 <col:14> col:20 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455defb90 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_rsqrt
| | |-NoThrowAttr 0x1c455defc10 <line:1963:8> Implicit
| | `-ConstAttr 0x1c455defc40 <col:8> Implicit
| |-FunctionDecl 0x1c455defd60 <line:20:3, line:1979:16> col:6 round 'half (half)'
| | |-ParmVarDecl 0x1c455defca8 <col:12> col:16 'half'
| | |-BuiltinAliasAttr 0x1c455defe10 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_roundeven
| | |-NoThrowAttr 0x1c455defe90 <line:1979:6> Implicit
| | `-ConstAttr 0x1c455defec0 <col:6> Implicit
| |-FunctionDecl 0x1c455df3440 <line:20:3, line:1982:18> col:7 round 'half2 (half2)'
| | |-ParmVarDecl 0x1c455deff10 <col:13> col:18 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455df34f0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_roundeven
| | |-NoThrowAttr 0x1c455df3570 <line:1982:7> Implicit
| | `-ConstAttr 0x1c455df35a0 <col:7> Implicit
| |-FunctionDecl 0x1c455df36b0 <line:20:3, line:1985:18> col:7 round 'half3 (half3)'
| | |-ParmVarDecl 0x1c455df3600 <col:13> col:18 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455df3760 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_roundeven
| | |-NoThrowAttr 0x1c455df37e0 <line:1985:7> Implicit
| | `-ConstAttr 0x1c455df3810 <col:7> Implicit
| |-FunctionDecl 0x1c455df3920 <line:20:3, line:1988:18> col:7 round 'half4 (half4)'
| | |-ParmVarDecl 0x1c455df3870 <col:13> col:18 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455df39d0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_roundeven
| | |-NoThrowAttr 0x1c455df3a50 <line:1988:7> Implicit
| | `-ConstAttr 0x1c455df3a80 <col:7> Implicit
| |-FunctionDecl 0x1c455df3ba0 <line:20:3, line:1991:18> col:7 used round 'float (float)'
| | |-ParmVarDecl 0x1c455df3ae8 <col:13> col:18 'float'
| | |-BuiltinAliasAttr 0x1c455df3c50 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_roundeven
| | |-NoThrowAttr 0x1c455df3cd0 <line:1991:7> Implicit
| | `-ConstAttr 0x1c455df3d00 <col:7> Implicit
| |-FunctionDecl 0x1c455df3e10 <line:20:3, line:1993:20> col:8 used round 'float2 (float2)'
| | |-ParmVarDecl 0x1c455df3d60 <col:14> col:20 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455df3ec0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_roundeven
| | |-NoThrowAttr 0x1c455df3f40 <line:1993:8> Implicit
| | `-ConstAttr 0x1c455df3f70 <col:8> Implicit
| |-FunctionDecl 0x1c455df4080 <line:20:3, line:1995:20> col:8 used round 'float3 (float3)'
| | |-ParmVarDecl 0x1c455df3fd0 <col:14> col:20 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455df4130 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_roundeven
| | |-NoThrowAttr 0x1c455df41b0 <line:1995:8> Implicit
| | `-ConstAttr 0x1c455df41e0 <col:8> Implicit
| |-FunctionDecl 0x1c455df42f0 <line:20:3, line:1997:20> col:8 used round 'float4 (float4)'
| | |-ParmVarDecl 0x1c455df4240 <col:14> col:20 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455df43a0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_roundeven
| | |-NoThrowAttr 0x1c455df5660 <line:1997:8> Implicit
| | `-ConstAttr 0x1c455df5690 <col:8> Implicit
| |-FunctionDecl 0x1c455df57b0 <line:20:3, line:2009:19> col:6 saturate 'half (half)'
| | |-ParmVarDecl 0x1c455df56f8 <col:15> col:19 'half'
| | |-BuiltinAliasAttr 0x1c455df5860 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df58e0 <line:2009:6> Implicit
| | `-ConstAttr 0x1c455df5910 <col:6> Implicit
| |-FunctionDecl 0x1c455df5a10 <line:20:3, line:2012:21> col:7 saturate 'half2 (half2)'
| | |-ParmVarDecl 0x1c455df5960 <col:16> col:21 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455df5ac0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df5b40 <line:2012:7> Implicit
| | `-ConstAttr 0x1c455df5b70 <col:7> Implicit
| |-FunctionDecl 0x1c455df5c80 <line:20:3, line:2015:21> col:7 saturate 'half3 (half3)'
| | |-ParmVarDecl 0x1c455df5bd0 <col:16> col:21 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455df5d30 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df5db0 <line:2015:7> Implicit
| | `-ConstAttr 0x1c455df5de0 <col:7> Implicit
| |-FunctionDecl 0x1c455df5ef0 <line:20:3, line:2018:21> col:7 saturate 'half4 (half4)'
| | |-ParmVarDecl 0x1c455df5e40 <col:16> col:21 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455df5fa0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df6020 <line:2018:7> Implicit
| | `-ConstAttr 0x1c455df6050 <col:7> Implicit
| |-FunctionDecl 0x1c455df6170 <line:20:3, line:2021:21> col:7 saturate 'float (float)'
| | |-ParmVarDecl 0x1c455df60b8 <col:16> col:21 'float'
| | |-BuiltinAliasAttr 0x1c455df6220 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df62a0 <line:2021:7> Implicit
| | `-ConstAttr 0x1c455df62d0 <col:7> Implicit
| |-FunctionDecl 0x1c455df63e0 <line:20:3, line:2023:23> col:8 saturate 'float2 (float2)'
| | |-ParmVarDecl 0x1c455df6330 <col:17> col:23 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455df6490 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df6510 <line:2023:8> Implicit
| | `-ConstAttr 0x1c455df6540 <col:8> Implicit
| |-FunctionDecl 0x1c455df6770 <line:20:3, line:2025:23> col:8 saturate 'float3 (float3)'
| | |-ParmVarDecl 0x1c455df65a0 <col:17> col:23 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455df6820 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df68a0 <line:2025:8> Implicit
| | `-ConstAttr 0x1c455df68d0 <col:8> Implicit
| |-FunctionDecl 0x1c455df69e0 <line:20:3, line:2027:23> col:8 saturate 'float4 (float4)'
| | |-ParmVarDecl 0x1c455df6930 <col:17> col:23 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455df6a90 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df6b10 <line:2027:8> Implicit
| | `-ConstAttr 0x1c455df6b40 <col:8> Implicit
| |-FunctionDecl 0x1c455df6c60 <line:20:3, line:2030:23> col:8 saturate 'double (double)'
| | |-ParmVarDecl 0x1c455df6ba8 <col:17> col:23 'double'
| | |-BuiltinAliasAttr 0x1c455df6d10 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df6d90 <line:2030:8> Implicit
| | `-ConstAttr 0x1c455df6dc0 <col:8> Implicit
| |-FunctionDecl 0x1c455df6ed0 <line:20:3, line:2032:25> col:9 saturate 'double2 (double2)'
| | |-ParmVarDecl 0x1c455df6e20 <col:18> col:25 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455df6f80 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df7000 <line:2032:9> Implicit
| | `-ConstAttr 0x1c455df7030 <col:9> Implicit
| |-FunctionDecl 0x1c455df7140 <line:20:3, line:2034:25> col:9 saturate 'double3 (double3)'
| | |-ParmVarDecl 0x1c455df7090 <col:18> col:25 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455df71f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df7270 <line:2034:9> Implicit
| | `-ConstAttr 0x1c455df72a0 <col:9> Implicit
| |-FunctionDecl 0x1c455df73b0 <line:20:3, line:2036:25> col:9 saturate 'double4 (double4)'
| | |-ParmVarDecl 0x1c455df7300 <col:18> col:25 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455df7460 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_saturate
| | |-NoThrowAttr 0x1c455df74e0 <line:2036:9> Implicit
| | `-ConstAttr 0x1c455df7510 <col:9> Implicit
| |-FunctionTemplateDecl 0x1c455df7ab8 <line:2048:1, line:2050:20> col:3 select
| | |-TemplateTypeParmDecl 0x1c455df7550 <line:2048:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-FunctionDecl 0x1c455df7a10 <line:20:3, line:2050:20> col:3 select 'T (bool, T, T)'
| | | |-ParmVarDecl 0x1c455df7610 <col:10> col:14 'bool'
| | | |-ParmVarDecl 0x1c455df7690 <col:16> col:17 'T'
| | | |-ParmVarDecl 0x1c455df7880 <col:19> col:20 'T'
| | | |-BuiltinAliasAttr 0x1c455df7b28 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_select
| | | |-NoThrowAttr 0x1c455df7c10 <line:2050:3> Implicit
| | | `-ConstAttr 0x1c455df7c40 <col:3> Implicit
| | |-FunctionDecl 0x1c455f5acf0 <line:20:3, line:2050:20> col:3 used select 'half (bool, half, half)' implicit_instantiation
| | | |-TemplateArgument type 'half'
| | | | `-BuiltinType 0x1c4559cd0d0 'half'
| | | |-ParmVarDecl 0x1c455f5aab0 <col:10> col:14 'bool'
| | | |-ParmVarDecl 0x1c455f5ab30 <col:16> col:17 'half'
| | | |-ParmVarDecl 0x1c455f5abb0 <col:19> col:20 'half'
| | | |-BuiltinAliasAttr 0x1c455f5ae00 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_select
| | | |-NoThrowAttr 0x1c455f5ae68 <line:2050:3> Implicit
| | | `-ConstAttr 0x1c455f5ae98 <col:3> Implicit
| | `-FunctionDecl 0x1c455f74d30 <line:20:3, line:2050:20> col:3 used select 'float (bool, float, float)' implicit_instantiation
| |   |-TemplateArgument type 'float'
| |   | `-BuiltinType 0x1c4559cca80 'float'
| |   |-ParmVarDecl 0x1c455f74af0 <col:10> col:14 'bool'
| |   |-ParmVarDecl 0x1c455f74b70 <col:16> col:17 'float'
| |   |-ParmVarDecl 0x1c455f74bf0 <col:19> col:20 'float'
| |   |-BuiltinAliasAttr 0x1c455f74e40 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_select
| |   |-NoThrowAttr 0x1c455f74ea8 <line:2050:3> Implicit
| |   `-ConstAttr 0x1c455f74ed8 <col:3> Implicit
| |-FunctionTemplateDecl 0x1c455df8810 <line:2060:1, line:2062:68> col:15 select
| | |-TemplateTypeParmDecl 0x1c455df7c70 <line:2060:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455df7d08 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 Sz
| | `-FunctionDecl 0x1c455df8768 <line:20:3, line:2062:68> col:15 select 'vector<T, Sz> (vector<bool, Sz>, vector<T, Sz>, vector<T, Sz>)'
| |   |-ParmVarDecl 0x1c455df8160 <col:22, col:37> col:38 'vector<bool, Sz>'
| |   |-ParmVarDecl 0x1c455df8390 <col:40, col:52> col:53 'vector<T, Sz>'
| |   |-ParmVarDecl 0x1c455df85c0 <col:55, col:67> col:68 'vector<T, Sz>'
| |   |-BuiltinAliasAttr 0x1c455df9aa0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_select
| |   |-NoThrowAttr 0x1c455df9b88 <line:2062:15> Implicit
| |   `-ConstAttr 0x1c455df9bb8 <col:15> Implicit
| |-FunctionTemplateDecl 0x1c455dfa5b0 <line:2072:1, line:2074:56> col:15 select
| | |-TemplateTypeParmDecl 0x1c455df9bf8 <line:2072:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455df9c98 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 Sz
| | `-FunctionDecl 0x1c455dfa508 <line:20:3, line:2074:56> col:15 select 'vector<T, Sz> (vector<bool, Sz>, T, vector<T, Sz>)'
| |   |-ParmVarDecl 0x1c455dfa0b0 <col:22, col:37> col:38 'vector<bool, Sz>'
| |   |-ParmVarDecl 0x1c455dfa130 <col:40> col:41 'T'
| |   |-ParmVarDecl 0x1c455dfa360 <col:43, col:55> col:56 'vector<T, Sz>'
| |   |-BuiltinAliasAttr 0x1c455dfa620 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_select
| |   |-NoThrowAttr 0x1c455dfa708 <line:2074:15> Implicit
| |   `-ConstAttr 0x1c455dfa738 <col:15> Implicit
| |-FunctionTemplateDecl 0x1c455dfb260 <line:2083:1, line:2085:56> col:15 select
| | |-TemplateTypeParmDecl 0x1c455dfa778 <line:2083:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455dfa818 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 Sz
| | `-FunctionDecl 0x1c455dfb1b8 <line:20:3, line:2085:56> col:15 select 'vector<T, Sz> (vector<bool, Sz>, vector<T, Sz>, T)'
| |   |-ParmVarDecl 0x1c455dfad60 <col:22, col:37> col:38 'vector<bool, Sz>'
| |   |-ParmVarDecl 0x1c455dfaf90 <col:40, col:52> col:53 'vector<T, Sz>'
| |   |-ParmVarDecl 0x1c455dfb010 <col:55> col:56 'T'
| |   |-BuiltinAliasAttr 0x1c455dfb2d0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_select
| |   |-NoThrowAttr 0x1c455dfb3b8 <line:2085:15> Implicit
| |   `-ConstAttr 0x1c455dfb3e8 <col:15> Implicit
| |-FunctionTemplateDecl 0x1c455dfc2c0 <line:2094:1, line:2097:27> line:2096:73 select
| | |-TemplateTypeParmDecl 0x1c455dfb428 <line:2094:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455dfb4c8 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 Sz
| | `-FunctionDecl 0x1c455dfc218 <line:20:3, line:2097:27> line:2096:73 select '__detail::enable_if_t<__detail::is_arithmetic<T>::Value, vector<T, Sz>> (vector<bool, Sz>, T, T)'
| |   |-ParmVarDecl 0x1c455dfbf60 <line:2097:5, col:20> col:21 'vector<bool, Sz>'
| |   |-ParmVarDecl 0x1c455dfbfe0 <col:23> col:24 'T'
| |   |-ParmVarDecl 0x1c455dfc060 <col:26> col:27 'T'
| |   |-BuiltinAliasAttr 0x1c455dfc330 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_select
| |   |-NoThrowAttr 0x1c455dfc418 <line:2096:73> Implicit
| |   `-ConstAttr 0x1c455dfc448 <col:73> Implicit
| |-FunctionDecl 0x1c455dfc568 <line:20:3, line:2109:14> col:6 sin 'half (half)'
| | |-ParmVarDecl 0x1c455dfc4b0 <col:10> col:14 'half'
| | |-BuiltinAliasAttr 0x1c455dfc618 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sin
| | |-NoThrowAttr 0x1c455dfc698 <line:2109:6> Implicit
| | `-ConstAttr 0x1c455dfc6c8 <col:6> Implicit
| |-FunctionDecl 0x1c455dfc7c8 <line:20:3, line:2112:16> col:7 sin 'half2 (half2)'
| | |-ParmVarDecl 0x1c455dfc718 <col:11> col:16 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dfc878 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sin
| | |-NoThrowAttr 0x1c455dfc8f8 <line:2112:7> Implicit
| | `-ConstAttr 0x1c455dfc928 <col:7> Implicit
| |-FunctionDecl 0x1c455dfca38 <line:20:3, line:2115:16> col:7 sin 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dfc988 <col:11> col:16 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dfcae8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sin
| | |-NoThrowAttr 0x1c455dfcb68 <line:2115:7> Implicit
| | `-ConstAttr 0x1c455dfcb98 <col:7> Implicit
| |-FunctionDecl 0x1c455df8990 <line:20:3, line:2118:16> col:7 sin 'half4 (half4)'
| | |-ParmVarDecl 0x1c455dfcbf8 <col:11> col:16 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455df8a40 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sin
| | |-NoThrowAttr 0x1c455df8ac0 <line:2118:7> Implicit
| | `-ConstAttr 0x1c455df8af0 <col:7> Implicit
| |-FunctionDecl 0x1c455df8c10 <line:20:3, line:2121:16> col:7 used sin 'float (float)'
| | |-ParmVarDecl 0x1c455df8b58 <col:11> col:16 'float'
| | |-BuiltinAliasAttr 0x1c455df8cc0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sin
| | |-NoThrowAttr 0x1c455df8d40 <line:2121:7> Implicit
| | `-ConstAttr 0x1c455df8d70 <col:7> Implicit
| |-FunctionDecl 0x1c455df8e80 <line:20:3, line:2123:18> col:8 used sin 'float2 (float2)'
| | |-ParmVarDecl 0x1c455df8dd0 <col:12> col:18 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455df8f30 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sin
| | |-NoThrowAttr 0x1c455df8fb0 <line:2123:8> Implicit
| | `-ConstAttr 0x1c455df8fe0 <col:8> Implicit
| |-FunctionDecl 0x1c455df90f0 <line:20:3, line:2125:18> col:8 used sin 'float3 (float3)'
| | |-ParmVarDecl 0x1c455df9040 <col:12> col:18 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455df91a0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sin
| | |-NoThrowAttr 0x1c455df9220 <line:2125:8> Implicit
| | `-ConstAttr 0x1c455df9250 <col:8> Implicit
| |-FunctionDecl 0x1c455df9360 <line:20:3, line:2127:18> col:8 used sin 'float4 (float4)'
| | |-ParmVarDecl 0x1c455df92b0 <col:12> col:18 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455df9410 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sin
| | |-NoThrowAttr 0x1c455df9490 <line:2127:8> Implicit
| | `-ConstAttr 0x1c455df94c0 <col:8> Implicit
| |-FunctionDecl 0x1c455df95e0 <line:20:3, line:2139:15> col:6 sinh 'half (half)'
| | |-ParmVarDecl 0x1c455df9528 <col:11> col:15 'half'
| | |-BuiltinAliasAttr 0x1c455df9690 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sinh
| | |-NoThrowAttr 0x1c455df9710 <line:2139:6> Implicit
| | `-ConstAttr 0x1c455df9740 <col:6> Implicit
| |-FunctionDecl 0x1c455df9840 <line:20:3, line:2142:17> col:7 sinh 'half2 (half2)'
| | |-ParmVarDecl 0x1c455df9790 <col:12> col:17 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455df98f0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sinh
| | |-NoThrowAttr 0x1c455dfcdd0 <line:2142:7> Implicit
| | `-ConstAttr 0x1c455dfce00 <col:7> Implicit
| |-FunctionDecl 0x1c455dfcf10 <line:20:3, line:2145:17> col:7 sinh 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dfce60 <col:12> col:17 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dfcfc0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sinh
| | |-NoThrowAttr 0x1c455dfd040 <line:2145:7> Implicit
| | `-ConstAttr 0x1c455dfd070 <col:7> Implicit
| |-FunctionDecl 0x1c455dfd180 <line:20:3, line:2148:17> col:7 sinh 'half4 (half4)'
| | |-ParmVarDecl 0x1c455dfd0d0 <col:12> col:17 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dfd230 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sinh
| | |-NoThrowAttr 0x1c455dfd2b0 <line:2148:7> Implicit
| | `-ConstAttr 0x1c455dfd2e0 <col:7> Implicit
| |-FunctionDecl 0x1c455dfd400 <line:20:3, line:2151:17> col:7 used sinh 'float (float)'
| | |-ParmVarDecl 0x1c455dfd348 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455dfd4b0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sinh
| | |-NoThrowAttr 0x1c455dfd530 <line:2151:7> Implicit
| | `-ConstAttr 0x1c455dfd560 <col:7> Implicit
| |-FunctionDecl 0x1c455dfd670 <line:20:3, line:2153:19> col:8 used sinh 'float2 (float2)'
| | |-ParmVarDecl 0x1c455dfd5c0 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dfd720 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sinh
| | |-NoThrowAttr 0x1c455dfd7a0 <line:2153:8> Implicit
| | `-ConstAttr 0x1c455dfd7d0 <col:8> Implicit
| |-FunctionDecl 0x1c455dfd8e0 <line:20:3, line:2155:19> col:8 used sinh 'float3 (float3)'
| | |-ParmVarDecl 0x1c455dfd830 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dfd990 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sinh
| | |-NoThrowAttr 0x1c455dfda10 <line:2155:8> Implicit
| | `-ConstAttr 0x1c455dfda40 <col:8> Implicit
| |-FunctionDecl 0x1c455dfdb50 <line:20:3, line:2157:19> col:8 used sinh 'float4 (float4)'
| | |-ParmVarDecl 0x1c455dfdaa0 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455dfdc00 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sinh
| | |-NoThrowAttr 0x1c455dfdc80 <line:2157:8> Implicit
| | `-ConstAttr 0x1c455dfdcb0 <col:8> Implicit
| |-FunctionDecl 0x1c455dfdee0 <line:20:3, line:2169:15> col:6 sqrt 'half (half)'
| | |-ParmVarDecl 0x1c455dfdd18 <col:11> col:15 'half'
| | |-BuiltinAliasAttr 0x1c455dfdf90 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sqrt
| | |-NoThrowAttr 0x1c455dfe010 <line:2169:6> Implicit
| | `-ConstAttr 0x1c455dfe040 <col:6> Implicit
| |-FunctionDecl 0x1c455dfe140 <line:20:3, line:2172:17> col:7 sqrt 'half2 (half2)'
| | |-ParmVarDecl 0x1c455dfe090 <col:12> col:17 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455dfe1f0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sqrt
| | |-NoThrowAttr 0x1c455dfe270 <line:2172:7> Implicit
| | `-ConstAttr 0x1c455dfe2a0 <col:7> Implicit
| |-FunctionDecl 0x1c455dfe3b0 <line:20:3, line:2175:17> col:7 sqrt 'half3 (half3)'
| | |-ParmVarDecl 0x1c455dfe300 <col:12> col:17 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455dfe460 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sqrt
| | |-NoThrowAttr 0x1c455dfe4e0 <line:2175:7> Implicit
| | `-ConstAttr 0x1c455dfe510 <col:7> Implicit
| |-FunctionDecl 0x1c455dfe620 <line:20:3, line:2178:17> col:7 sqrt 'half4 (half4)'
| | |-ParmVarDecl 0x1c455dfe570 <col:12> col:17 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455dfe6d0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sqrt
| | |-NoThrowAttr 0x1c455dfe750 <line:2178:7> Implicit
| | `-ConstAttr 0x1c455dfe780 <col:7> Implicit
| |-FunctionDecl 0x1c455dfe8a0 <line:20:3, line:2181:17> col:7 used sqrt 'float (float)'
| | |-ParmVarDecl 0x1c455dfe7e8 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455dfe950 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sqrt
| | |-NoThrowAttr 0x1c455dfe9d0 <line:2181:7> Implicit
| | `-ConstAttr 0x1c455dfea00 <col:7> Implicit
| |-FunctionDecl 0x1c455dfeb10 <line:20:3, line:2183:19> col:8 used sqrt 'float2 (float2)'
| | |-ParmVarDecl 0x1c455dfea60 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455dfebc0 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sqrt
| | |-NoThrowAttr 0x1c455dfec40 <line:2183:8> Implicit
| | `-ConstAttr 0x1c455dfec70 <col:8> Implicit
| |-FunctionDecl 0x1c455dfed80 <line:20:3, line:2185:19> col:8 used sqrt 'float3 (float3)'
| | |-ParmVarDecl 0x1c455dfecd0 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455dfee30 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sqrt
| | |-NoThrowAttr 0x1c455dfeeb0 <line:2185:8> Implicit
| | `-ConstAttr 0x1c455e114d0 <col:8> Implicit
| |-FunctionDecl 0x1c455e115e0 <line:20:3, line:2187:19> col:8 used sqrt 'float4 (float4)'
| | |-ParmVarDecl 0x1c455e11530 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455e11690 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_sqrt
| | |-NoThrowAttr 0x1c455e11710 <line:2187:8> Implicit
| | `-ConstAttr 0x1c455e11740 <col:8> Implicit
| |-FunctionDecl 0x1c455e11908 <line:20:3, line:2202:21> col:6 step 'half (half, half)'
| | |-ParmVarDecl 0x1c455e117a8 <col:11> col:15 'half'
| | |-ParmVarDecl 0x1c455e11830 <col:17> col:21 'half'
| | |-BuiltinAliasAttr 0x1c455e119c0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_step
| | |-NoThrowAttr 0x1c455e11a40 <line:2202:6> Implicit
| | `-ConstAttr 0x1c455e11a70 <col:6> Implicit
| |-FunctionDecl 0x1c455e11c10 <line:20:3, line:2205:24> col:7 step 'half2 (half2, half2)'
| | |-ParmVarDecl 0x1c455e11ac0 <col:12> col:17 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455e11b40 <col:19> col:24 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455e11cc8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_step
| | |-NoThrowAttr 0x1c455e11d48 <line:2205:7> Implicit
| | `-ConstAttr 0x1c455e11d78 <col:7> Implicit
| |-FunctionDecl 0x1c455e11f28 <line:20:3, line:2208:24> col:7 step 'half3 (half3, half3)'
| | |-ParmVarDecl 0x1c455e11dd8 <col:12> col:17 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455e11e58 <col:19> col:24 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455e11fe0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_step
| | |-NoThrowAttr 0x1c455e12060 <line:2208:7> Implicit
| | `-ConstAttr 0x1c455e12090 <col:7> Implicit
| |-FunctionDecl 0x1c455e12240 <line:20:3, line:2211:24> col:7 step 'half4 (half4, half4)'
| | |-ParmVarDecl 0x1c455e120f0 <col:12> col:17 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455e12170 <col:19> col:24 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455e122f8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_step
| | |-NoThrowAttr 0x1c455e12378 <line:2211:7> Implicit
| | `-ConstAttr 0x1c455e123a8 <col:7> Implicit
| |-FunctionDecl 0x1c455e0f388 <line:20:3, line:2214:24> col:7 used step 'float (float, float)'
| | |-ParmVarDecl 0x1c455e12410 <col:12> col:17 'float'
| | |-ParmVarDecl 0x1c455e0f2b0 <col:19> col:24 'float'
| | |-BuiltinAliasAttr 0x1c455e0f440 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_step
| | |-NoThrowAttr 0x1c455e0f4c0 <line:2214:7> Implicit
| | `-ConstAttr 0x1c455e0f4f0 <col:7> Implicit
| |-FunctionDecl 0x1c455e0f6a0 <line:20:3, line:2216:27> col:8 used step 'float2 (float2, float2)'
| | |-ParmVarDecl 0x1c455e0f550 <col:13> col:19 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455e0f5d0 <col:21> col:27 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455e0f758 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_step
| | |-NoThrowAttr 0x1c455e0f7d8 <line:2216:8> Implicit
| | `-ConstAttr 0x1c455e0f808 <col:8> Implicit
| |-FunctionDecl 0x1c455e0f9b8 <line:20:3, line:2218:27> col:8 used step 'float3 (float3, float3)'
| | |-ParmVarDecl 0x1c455e0f868 <col:13> col:19 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455e0f8e8 <col:21> col:27 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455e0fa70 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_step
| | |-NoThrowAttr 0x1c455e0faf0 <line:2218:8> Implicit
| | `-ConstAttr 0x1c455e0fb20 <col:8> Implicit
| |-FunctionDecl 0x1c455e0fcd0 <line:20:3, line:2220:27> col:8 used step 'float4 (float4, float4)'
| | |-ParmVarDecl 0x1c455e0fb80 <col:13> col:19 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455e0fc00 <col:21> col:27 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455e0fd88 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_step
| | |-NoThrowAttr 0x1c455e0fe08 <line:2220:8> Implicit
| | `-ConstAttr 0x1c455e0fe38 <col:8> Implicit
| |-FunctionDecl 0x1c455e0ff58 <line:20:3, line:2232:14> col:6 tan 'half (half)'
| | |-ParmVarDecl 0x1c455e0fea0 <col:10> col:14 'half'
| | |-BuiltinAliasAttr 0x1c455e10008 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tan
| | |-NoThrowAttr 0x1c455e10088 <line:2232:6> Implicit
| | `-ConstAttr 0x1c455e100b8 <col:6> Implicit
| |-FunctionDecl 0x1c455e101b8 <line:20:3, line:2235:16> col:7 tan 'half2 (half2)'
| | |-ParmVarDecl 0x1c455e10108 <col:11> col:16 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455e10268 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tan
| | |-NoThrowAttr 0x1c455e10408 <line:2235:7> Implicit
| | `-ConstAttr 0x1c455e10438 <col:7> Implicit
| |-FunctionDecl 0x1c455e10548 <line:20:3, line:2238:16> col:7 tan 'half3 (half3)'
| | |-ParmVarDecl 0x1c455e10498 <col:11> col:16 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455e105f8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tan
| | |-NoThrowAttr 0x1c455e10678 <line:2238:7> Implicit
| | `-ConstAttr 0x1c455e106a8 <col:7> Implicit
| |-FunctionDecl 0x1c455e107b8 <line:20:3, line:2241:16> col:7 tan 'half4 (half4)'
| | |-ParmVarDecl 0x1c455e10708 <col:11> col:16 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455e10868 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tan
| | |-NoThrowAttr 0x1c455e108e8 <line:2241:7> Implicit
| | `-ConstAttr 0x1c455e10918 <col:7> Implicit
| |-FunctionDecl 0x1c455e10a38 <line:20:3, line:2244:16> col:7 used tan 'float (float)'
| | |-ParmVarDecl 0x1c455e10980 <col:11> col:16 'float'
| | |-BuiltinAliasAttr 0x1c455e10ae8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tan
| | |-NoThrowAttr 0x1c455e10b68 <line:2244:7> Implicit
| | `-ConstAttr 0x1c455e10b98 <col:7> Implicit
| |-FunctionDecl 0x1c455e10ca8 <line:20:3, line:2246:18> col:8 used tan 'float2 (float2)'
| | |-ParmVarDecl 0x1c455e10bf8 <col:12> col:18 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455e10d58 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tan
| | |-NoThrowAttr 0x1c455e10dd8 <line:2246:8> Implicit
| | `-ConstAttr 0x1c455e10e08 <col:8> Implicit
| |-FunctionDecl 0x1c455e10f18 <line:20:3, line:2248:18> col:8 used tan 'float3 (float3)'
| | |-ParmVarDecl 0x1c455e10e68 <col:12> col:18 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455e10fc8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tan
| | |-NoThrowAttr 0x1c455e11048 <line:2248:8> Implicit
| | `-ConstAttr 0x1c455e11078 <col:8> Implicit
| |-FunctionDecl 0x1c455e11188 <line:20:3, line:2250:18> col:8 used tan 'float4 (float4)'
| | |-ParmVarDecl 0x1c455e110d8 <col:12> col:18 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455e11238 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tan
| | |-NoThrowAttr 0x1c455e112b8 <line:2250:8> Implicit
| | `-ConstAttr 0x1c455e112e8 <col:8> Implicit
| |-FunctionDecl 0x1c455e0e1e8 <line:20:3, line:2262:15> col:6 tanh 'half (half)'
| | |-ParmVarDecl 0x1c455e11350 <col:11> col:15 'half'
| | |-BuiltinAliasAttr 0x1c455e0e298 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tanh
| | |-NoThrowAttr 0x1c455e0e318 <line:2262:6> Implicit
| | `-ConstAttr 0x1c455e0e348 <col:6> Implicit
| |-FunctionDecl 0x1c455e0e448 <line:20:3, line:2265:17> col:7 tanh 'half2 (half2)'
| | |-ParmVarDecl 0x1c455e0e398 <col:12> col:17 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455e0e4f8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tanh
| | |-NoThrowAttr 0x1c455e0e578 <line:2265:7> Implicit
| | `-ConstAttr 0x1c455e0e5a8 <col:7> Implicit
| |-FunctionDecl 0x1c455e0e6b8 <line:20:3, line:2268:17> col:7 tanh 'half3 (half3)'
| | |-ParmVarDecl 0x1c455e0e608 <col:12> col:17 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455e0e768 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tanh
| | |-NoThrowAttr 0x1c455e0e7e8 <line:2268:7> Implicit
| | `-ConstAttr 0x1c455e0e818 <col:7> Implicit
| |-FunctionDecl 0x1c455e0e928 <line:20:3, line:2271:17> col:7 tanh 'half4 (half4)'
| | |-ParmVarDecl 0x1c455e0e878 <col:12> col:17 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455e0e9d8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tanh
| | |-NoThrowAttr 0x1c455e0ea58 <line:2271:7> Implicit
| | `-ConstAttr 0x1c455e0ea88 <col:7> Implicit
| |-FunctionDecl 0x1c455e0eba8 <line:20:3, line:2274:17> col:7 used tanh 'float (float)'
| | |-ParmVarDecl 0x1c455e0eaf0 <col:12> col:17 'float'
| | |-BuiltinAliasAttr 0x1c455e0ec58 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tanh
| | |-NoThrowAttr 0x1c455e0ecd8 <line:2274:7> Implicit
| | `-ConstAttr 0x1c455e0ed08 <col:7> Implicit
| |-FunctionDecl 0x1c455e0ee18 <line:20:3, line:2276:19> col:8 used tanh 'float2 (float2)'
| | |-ParmVarDecl 0x1c455e0ed68 <col:13> col:19 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455e0eec8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tanh
| | |-NoThrowAttr 0x1c455e0ef48 <line:2276:8> Implicit
| | `-ConstAttr 0x1c455e0ef78 <col:8> Implicit
| |-FunctionDecl 0x1c455e0f088 <line:20:3, line:2278:19> col:8 used tanh 'float3 (float3)'
| | |-ParmVarDecl 0x1c455e0efd8 <col:13> col:19 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455e0f138 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tanh
| | |-NoThrowAttr 0x1c455e14818 <line:2278:8> Implicit
| | `-ConstAttr 0x1c455e14848 <col:8> Implicit
| |-FunctionDecl 0x1c455e14958 <line:20:3, line:2280:19> col:8 used tanh 'float4 (float4)'
| | |-ParmVarDecl 0x1c455e148a8 <col:13> col:19 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455e14a08 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_tanh
| | |-NoThrowAttr 0x1c455e14a88 <line:2280:8> Implicit
| | `-ConstAttr 0x1c455e14ab8 <col:8> Implicit
| |-FunctionDecl 0x1c455e14bd8 <line:20:3, line:2292:16> col:6 trunc 'half (half)'
| | |-ParmVarDecl 0x1c455e14b20 <col:12> col:16 'half'
| | |-BuiltinAliasAttr 0x1c455e14c88 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_trunc
| | |-NoThrowAttr 0x1c455e14d08 <line:2292:6> Implicit
| | `-ConstAttr 0x1c455e14d38 <col:6> Implicit
| |-FunctionDecl 0x1c455e14e38 <line:20:3, line:2295:18> col:7 trunc 'half2 (half2)'
| | |-ParmVarDecl 0x1c455e14d88 <col:13> col:18 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455e14ee8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_trunc
| | |-NoThrowAttr 0x1c455e14f68 <line:2295:7> Implicit
| | `-ConstAttr 0x1c455e14f98 <col:7> Implicit
| |-FunctionDecl 0x1c455e150a8 <line:20:3, line:2298:18> col:7 trunc 'half3 (half3)'
| | |-ParmVarDecl 0x1c455e14ff8 <col:13> col:18 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455e15158 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_trunc
| | |-NoThrowAttr 0x1c455e151d8 <line:2298:7> Implicit
| | `-ConstAttr 0x1c455e15208 <col:7> Implicit
| |-FunctionDecl 0x1c455e15318 <line:20:3, line:2301:18> col:7 trunc 'half4 (half4)'
| | |-ParmVarDecl 0x1c455e15268 <col:13> col:18 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455e153c8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_trunc
| | |-NoThrowAttr 0x1c455e15448 <line:2301:7> Implicit
| | `-ConstAttr 0x1c455e15478 <col:7> Implicit
| |-FunctionDecl 0x1c455e15598 <line:20:3, line:2304:18> col:7 used trunc 'float (float)'
| | |-ParmVarDecl 0x1c455e154e0 <col:13> col:18 'float'
| | |-BuiltinAliasAttr 0x1c455e15648 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_trunc
| | |-NoThrowAttr 0x1c455e156c8 <line:2304:7> Implicit
| | `-ConstAttr 0x1c455e156f8 <col:7> Implicit
| |-FunctionDecl 0x1c455e13718 <line:20:3, line:2306:20> col:8 used trunc 'float2 (float2)'
| | |-ParmVarDecl 0x1c455e15758 <col:14> col:20 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455e137c8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_trunc
| | |-NoThrowAttr 0x1c455e13848 <line:2306:8> Implicit
| | `-ConstAttr 0x1c455e13878 <col:8> Implicit
| |-FunctionDecl 0x1c455e13988 <line:20:3, line:2308:20> col:8 used trunc 'float3 (float3)'
| | |-ParmVarDecl 0x1c455e138d8 <col:14> col:20 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455e13a38 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_trunc
| | |-NoThrowAttr 0x1c455e13ab8 <line:2308:8> Implicit
| | `-ConstAttr 0x1c455e13ae8 <col:8> Implicit
| |-FunctionDecl 0x1c455e13bf8 <line:20:3, line:2310:20> col:8 used trunc 'float4 (float4)'
| | |-ParmVarDecl 0x1c455e13b48 <col:14> col:20 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455e13ca8 <line:20:18, col:45> clang_builtin_alias __builtin_elementwise_trunc
| | |-NoThrowAttr 0x1c455e13d28 <line:2310:8> Implicit
| | `-ConstAttr 0x1c455e13d58 <col:8> Implicit
| |-FunctionDecl 0x1c455e13e78 <line:22:3, line:2323:60> col:34 WaveActiveAllTrue 'bool (bool)'
| | |-ParmVarDecl 0x1c455e13dc8 <col:52, col:57> col:57 Val 'bool'
| | |-AvailabilityAttr 0x1c455e13f28 <line:22:18, col:61> shadermodel 6.0 0 0 "" "" 0
| | |-BuiltinAliasAttr 0x1c455e13ff0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_all_true
| | |-ConvergentAttr 0x1c455e14028 <line:2323:16>
| | |-NoThrowAttr 0x1c455e14070 <col:34> Implicit
| | `-ConstAttr 0x1c455e140a0 <col:34> Implicit
| |-FunctionDecl 0x1c455e141b0 <line:22:3, line:2332:60> col:34 WaveActiveAnyTrue 'bool (bool)'
| | |-ParmVarDecl 0x1c455e14100 <col:52, col:57> col:57 Val 'bool'
| | |-AvailabilityAttr 0x1c455e14260 <line:22:18, col:61> shadermodel 6.0 0 0 "" "" 0
| | |-BuiltinAliasAttr 0x1c455e14328 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_any_true
| | |-ConvergentAttr 0x1c455e14360 <line:2332:16>
| | |-NoThrowAttr 0x1c455e143a8 <col:34> Implicit
| | `-ConstAttr 0x1c455e143d8 <col:34> Implicit
| |-FunctionDecl 0x1c455e14560 <line:22:3, line:2342:62> col:34 WaveActiveCountBits 'uint (bool)'
| | |-ParmVarDecl 0x1c455e14438 <col:54, col:59> col:59 Val 'bool'
| | |-AvailabilityAttr 0x1c455e14610 <line:22:18, col:61> shadermodel 6.0 0 0 "" "" 0
| | |-BuiltinAliasAttr 0x1c455e15910 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_count_bits
| | |-ConvergentAttr 0x1c455e15948 <line:2342:16>
| | |-NoThrowAttr 0x1c455e15990 <col:34> Implicit
| | `-ConstAttr 0x1c455e159c0 <col:34> Implicit
| |-FunctionDecl 0x1c455e15a90 <line:22:3, line:2347:51> col:34 WaveGetLaneIndex 'uint ()'
| | |-AvailabilityAttr 0x1c455e15b38 <line:22:18, col:61> shadermodel 6.0 0 0 "" "" 0
| | |-BuiltinAliasAttr 0x1c455e15c00 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_get_lane_index
| | |-ConvergentAttr 0x1c455e15c38 <line:2347:16>
| | |-NoThrowAttr 0x1c455e15c80 <col:34> Implicit
| | `-ConstAttr 0x1c455e15cb0 <col:34> Implicit
| |-FunctionDecl 0x1c455e15d50 <line:22:3, line:2351:50> col:34 WaveIsFirstLane 'bool ()'
| | |-AvailabilityAttr 0x1c455e15df8 <line:22:18, col:61> shadermodel 6.0 0 0 "" "" 0
| | |-BuiltinAliasAttr 0x1c455e15ec0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_is_first_lane
| | |-ConvergentAttr 0x1c455e15ef8 <line:2351:16>
| | |-NoThrowAttr 0x1c455e15f40 <col:34> Implicit
| | `-ConstAttr 0x1c455e15f70 <col:34> Implicit
| |-FunctionDecl 0x1c455e15fe0 <line:22:3, line:2355:51> col:34 WaveGetLaneCount 'uint ()'
| | |-AvailabilityAttr 0x1c455e16088 <line:22:18, col:61> shadermodel 6.0 0 0 "" "" 0
| | |-BuiltinAliasAttr 0x1c455e16150 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_get_lane_count
| | |-ConvergentAttr 0x1c455e16188 <line:2355:16>
| | |-NoThrowAttr 0x1c455e161d0 <col:34> Implicit
| | `-ConstAttr 0x1c455e16200 <col:34> Implicit
| |-FunctionDecl 0x1c455e16420 <line:20:3, line:2365:63> col:34 WaveReadLaneAt 'bool (bool, uint32_t)'
| | |-ParmVarDecl 0x1c455e16250 <col:49> col:53 'bool'
| | |-ParmVarDecl 0x1c455e162d0 <col:55> col:63 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e164d8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e16540 <line:2365:16>
| | |-NoThrowAttr 0x1c455e16588 <col:34> Implicit
| | `-ConstAttr 0x1c455e165b8 <col:34> Implicit
| |-FunctionDecl 0x1c455e167e0 <line:20:3, line:2367:65> col:35 WaveReadLaneAt 'bool2 (bool2, uint32_t)'
| | |-ParmVarDecl 0x1c455e16608 <col:50> col:55 'bool2':'vector<bool, 2>'
| | |-ParmVarDecl 0x1c455e16688 <col:57> col:65 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e16898 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e125e0 <line:2367:16>
| | |-NoThrowAttr 0x1c455e12628 <col:35> Implicit
| | `-ConstAttr 0x1c455e12658 <col:35> Implicit
| |-FunctionDecl 0x1c455e12890 <line:20:3, line:2369:65> col:35 WaveReadLaneAt 'bool3 (bool3, uint32_t)'
| | |-ParmVarDecl 0x1c455e126b8 <col:50> col:55 'bool3':'vector<bool, 3>'
| | |-ParmVarDecl 0x1c455e12738 <col:57> col:65 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e12948 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e129b0 <line:2369:16>
| | |-NoThrowAttr 0x1c455e129f8 <col:35> Implicit
| | `-ConstAttr 0x1c455e12a28 <col:35> Implicit
| |-FunctionDecl 0x1c455e12c60 <line:20:3, line:2371:65> col:35 WaveReadLaneAt 'bool4 (bool4, uint32_t)'
| | |-ParmVarDecl 0x1c455e12a88 <col:50> col:55 'bool4':'vector<bool, 4>'
| | |-ParmVarDecl 0x1c455e12b08 <col:57> col:65 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e12d18 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e12d80 <line:2371:16>
| | |-NoThrowAttr 0x1c455e12dc8 <col:35> Implicit
| | `-ConstAttr 0x1c455e12df8 <col:35> Implicit
| |-FunctionDecl 0x1c455e13038 <line:20:3, line:2403:63> col:34 WaveReadLaneAt 'half (half, uint32_t)'
| | |-ParmVarDecl 0x1c455e12e60 <col:49> col:53 'half'
| | |-ParmVarDecl 0x1c455e12ee0 <col:55> col:63 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e130f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e13158 <line:2403:16>
| | |-NoThrowAttr 0x1c455e131a0 <col:34> Implicit
| | `-ConstAttr 0x1c455e131d0 <col:34> Implicit
| |-FunctionDecl 0x1c455e13400 <line:20:3, line:2406:65> col:35 WaveReadLaneAt 'half2 (half2, uint32_t)'
| | |-ParmVarDecl 0x1c455e13230 <col:50> col:55 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455e132b0 <col:57> col:65 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e134b8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e13520 <line:2406:16>
| | |-NoThrowAttr 0x1c455e13568 <col:35> Implicit
| | `-ConstAttr 0x1c455e13598 <col:35> Implicit
| |-FunctionDecl 0x1c455e17d20 <line:20:3, line:2409:65> col:35 WaveReadLaneAt 'half3 (half3, uint32_t)'
| | |-ParmVarDecl 0x1c455e17b50 <col:50> col:55 'half3':'vector<half, 3>'
| | |-ParmVarDecl 0x1c455e17bd0 <col:57> col:65 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e17dd8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e17e40 <line:2409:16>
| | |-NoThrowAttr 0x1c455e17e88 <col:35> Implicit
| | `-ConstAttr 0x1c455e17eb8 <col:35> Implicit
| |-FunctionDecl 0x1c455e180f0 <line:20:3, line:2412:65> col:35 WaveReadLaneAt 'half4 (half4, uint32_t)'
| | |-ParmVarDecl 0x1c455e17f18 <col:50> col:55 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455e17f98 <col:57> col:65 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e181a8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e18210 <line:2412:16>
| | |-NoThrowAttr 0x1c455e18258 <col:35> Implicit
| | `-ConstAttr 0x1c455e18288 <col:35> Implicit
| |-FunctionDecl 0x1c455e184c8 <line:20:3, line:2415:61> col:33 WaveReadLaneAt 'int (int, uint32_t)'
| | |-ParmVarDecl 0x1c455e182f0 <col:48> col:51 'int'
| | |-ParmVarDecl 0x1c455e18370 <col:53> col:61 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e18580 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e185e8 <line:2415:16>
| | |-NoThrowAttr 0x1c455e18630 <col:33> Implicit
| | `-ConstAttr 0x1c455e18660 <col:33> Implicit
| |-FunctionDecl 0x1c455e18890 <line:20:3, line:2417:63> col:34 WaveReadLaneAt 'int2 (int2, uint32_t)'
| | |-ParmVarDecl 0x1c455e186c0 <col:49> col:53 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455e18740 <col:55> col:63 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e18948 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e189b0 <line:2417:16>
| | |-NoThrowAttr 0x1c455e189f8 <col:34> Implicit
| | `-ConstAttr 0x1c455e18a28 <col:34> Implicit
| |-FunctionDecl 0x1c455e18d90 <line:20:3, line:2419:63> col:34 WaveReadLaneAt 'int3 (int3, uint32_t)'
| | |-ParmVarDecl 0x1c455e18a88 <col:49> col:53 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455e18c40 <col:55> col:63 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e18e48 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e18eb0 <line:2419:16>
| | |-NoThrowAttr 0x1c455e18ef8 <col:34> Implicit
| | `-ConstAttr 0x1c455e18f28 <col:34> Implicit
| |-FunctionDecl 0x1c455e19160 <line:20:3, line:2421:63> col:34 WaveReadLaneAt 'int4 (int4, uint32_t)'
| | |-ParmVarDecl 0x1c455e18f88 <col:49> col:53 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455e19008 <col:55> col:63 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e19218 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e19280 <line:2421:16>
| | |-NoThrowAttr 0x1c455e192c8 <col:34> Implicit
| | `-ConstAttr 0x1c455e192f8 <col:34> Implicit
| |-FunctionDecl 0x1c455e194f0 <line:20:3, line:2424:63> col:34 WaveReadLaneAt 'uint (uint, uint32_t)'
| | |-ParmVarDecl 0x1c455e19358 <col:49> col:53 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455e193d8 <col:55> col:63 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e195a8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e19610 <line:2424:16>
| | |-NoThrowAttr 0x1c455e19658 <col:34> Implicit
| | `-ConstAttr 0x1c455e19688 <col:34> Implicit
| |-FunctionDecl 0x1c455e198c0 <line:20:3, line:2426:65> col:35 WaveReadLaneAt 'uint2 (uint2, uint32_t)'
| | |-ParmVarDecl 0x1c455e196e8 <col:50> col:55 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455e19768 <col:57> col:65 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e19978 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e199e0 <line:2426:16>
| | |-NoThrowAttr 0x1c455e19a28 <col:35> Implicit
| | `-ConstAttr 0x1c455e19a58 <col:35> Implicit
| |-FunctionDecl 0x1c455e32640 <line:20:3, line:2428:65> col:35 WaveReadLaneAt 'uint3 (uint3, uint32_t)'
| | |-ParmVarDecl 0x1c455e19ab8 <col:50> col:55 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455e19b38 <col:57> col:65 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e326f8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e32760 <line:2428:16>
| | |-NoThrowAttr 0x1c455e327a8 <col:35> Implicit
| | `-ConstAttr 0x1c455e327d8 <col:35> Implicit
| |-FunctionDecl 0x1c455e32a10 <line:20:3, line:2430:65> col:35 WaveReadLaneAt 'uint4 (uint4, uint32_t)'
| | |-ParmVarDecl 0x1c455e32838 <col:50> col:55 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455e328b8 <col:57> col:65 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e32ac8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e32b30 <line:2430:16>
| | |-NoThrowAttr 0x1c455e32b78 <col:35> Implicit
| | `-ConstAttr 0x1c455e32ba8 <col:35> Implicit
| |-FunctionDecl 0x1c455e32de8 <line:20:3, line:2433:65> col:35 WaveReadLaneAt 'float (float, uint32_t)'
| | |-ParmVarDecl 0x1c455e32c10 <col:50> col:55 'float'
| | |-ParmVarDecl 0x1c455e32c90 <col:57> col:65 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e32ea0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e32f08 <line:2433:16>
| | |-NoThrowAttr 0x1c455e32f50 <col:35> Implicit
| | `-ConstAttr 0x1c455e32f80 <col:35> Implicit
| |-FunctionDecl 0x1c455e331b0 <line:20:3, line:2435:67> col:36 WaveReadLaneAt 'float2 (float2, uint32_t)'
| | |-ParmVarDecl 0x1c455e32fe0 <col:51> col:57 'float2':'vector<float, 2>'
| | |-ParmVarDecl 0x1c455e33060 <col:59> col:67 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e33268 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e332d0 <line:2435:16>
| | |-NoThrowAttr 0x1c455e33318 <col:36> Implicit
| | `-ConstAttr 0x1c455e33348 <col:36> Implicit
| |-FunctionDecl 0x1c455e33580 <line:20:3, line:2437:67> col:36 WaveReadLaneAt 'float3 (float3, uint32_t)'
| | |-ParmVarDecl 0x1c455e333a8 <col:51> col:57 'float3':'vector<float, 3>'
| | |-ParmVarDecl 0x1c455e33428 <col:59> col:67 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e33638 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e336a0 <line:2437:16>
| | |-NoThrowAttr 0x1c455e336e8 <col:36> Implicit
| | `-ConstAttr 0x1c455e33718 <col:36> Implicit
| |-FunctionDecl 0x1c455e33950 <line:20:3, line:2439:67> col:36 WaveReadLaneAt 'float4 (float4, uint32_t)'
| | |-ParmVarDecl 0x1c455e33778 <col:51> col:57 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455e337f8 <col:59> col:67 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e33a08 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e33a70 <line:2439:16>
| | |-NoThrowAttr 0x1c455e33ab8 <col:36> Implicit
| | `-ConstAttr 0x1c455e33ae8 <col:36> Implicit
| |-FunctionDecl 0x1c455e33d20 <line:20:3, line:2442:69> col:37 WaveReadLaneAt 'int64_t (int64_t, uint32_t)'
| | |-ParmVarDecl 0x1c455e33b48 <col:52> col:59 'int64_t':'long'
| | |-ParmVarDecl 0x1c455e33bc8 <col:61> col:69 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e33dd8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e33e40 <line:2442:16>
| | |-NoThrowAttr 0x1c455e33e88 <col:37> Implicit
| | `-ConstAttr 0x1c455e33eb8 <col:37> Implicit
| |-FunctionDecl 0x1c455e340f0 <line:20:3, line:2444:71> col:38 WaveReadLaneAt 'int64_t2 (int64_t2, uint32_t)'
| | |-ParmVarDecl 0x1c455e33f18 <col:53> col:61 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455e33f98 <col:63> col:71 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e341a8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e34210 <line:2444:16>
| | |-NoThrowAttr 0x1c455e34258 <col:38> Implicit
| | `-ConstAttr 0x1c455e34288 <col:38> Implicit
| |-FunctionDecl 0x1c455e344c0 <line:20:3, line:2446:71> col:38 WaveReadLaneAt 'int64_t3 (int64_t3, uint32_t)'
| | |-ParmVarDecl 0x1c455e342e8 <col:53> col:61 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455e34368 <col:63> col:71 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e34578 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e303f0 <line:2446:16>
| | |-NoThrowAttr 0x1c455e30438 <col:38> Implicit
| | `-ConstAttr 0x1c455e30468 <col:38> Implicit
| |-FunctionDecl 0x1c455e306a0 <line:20:3, line:2448:71> col:38 WaveReadLaneAt 'int64_t4 (int64_t4, uint32_t)'
| | |-ParmVarDecl 0x1c455e304c8 <col:53> col:61 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455e30548 <col:63> col:71 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e30758 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e307c0 <line:2448:16>
| | |-NoThrowAttr 0x1c455e30808 <col:38> Implicit
| | `-ConstAttr 0x1c455e30838 <col:38> Implicit
| |-FunctionDecl 0x1c455e30a70 <line:20:3, line:2451:71> col:38 WaveReadLaneAt 'uint64_t (uint64_t, uint32_t)'
| | |-ParmVarDecl 0x1c455e30898 <col:53> col:61 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455e30918 <col:63> col:71 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e30b28 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e30b90 <line:2451:16>
| | |-NoThrowAttr 0x1c455e30bd8 <col:38> Implicit
| | `-ConstAttr 0x1c455e30c08 <col:38> Implicit
| |-FunctionDecl 0x1c455e30e40 <line:20:3, line:2453:73> col:39 WaveReadLaneAt 'uint64_t2 (uint64_t2, uint32_t)'
| | |-ParmVarDecl 0x1c455e30c68 <col:54> col:63 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455e30ce8 <col:65> col:73 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e30ef8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e30f60 <line:2453:16>
| | |-NoThrowAttr 0x1c455e30fa8 <col:39> Implicit
| | `-ConstAttr 0x1c455e30fd8 <col:39> Implicit
| |-FunctionDecl 0x1c455e31210 <line:20:3, line:2455:73> col:39 WaveReadLaneAt 'uint64_t3 (uint64_t3, uint32_t)'
| | |-ParmVarDecl 0x1c455e31038 <col:54> col:63 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455e310b8 <col:65> col:73 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e312c8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e31330 <line:2455:16>
| | |-NoThrowAttr 0x1c455e31378 <col:39> Implicit
| | `-ConstAttr 0x1c455e313a8 <col:39> Implicit
| |-FunctionDecl 0x1c455e315e0 <line:20:3, line:2457:73> col:39 WaveReadLaneAt 'uint64_t4 (uint64_t4, uint32_t)'
| | |-ParmVarDecl 0x1c455e31408 <col:54> col:63 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455e31488 <col:65> col:73 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e31698 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e31700 <line:2457:16>
| | |-NoThrowAttr 0x1c455e31748 <col:39> Implicit
| | `-ConstAttr 0x1c455e31778 <col:39> Implicit
| |-FunctionDecl 0x1c455e319b8 <line:20:3, line:2460:67> col:36 WaveReadLaneAt 'double (double, uint32_t)'
| | |-ParmVarDecl 0x1c455e317e0 <col:51> col:57 'double'
| | |-ParmVarDecl 0x1c455e31860 <col:59> col:67 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e31a70 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e31ad8 <line:2460:16>
| | |-NoThrowAttr 0x1c455e31b20 <col:36> Implicit
| | `-ConstAttr 0x1c455e31b50 <col:36> Implicit
| |-FunctionDecl 0x1c455e31d80 <line:20:3, line:2462:69> col:37 WaveReadLaneAt 'double2 (double2, uint32_t)'
| | |-ParmVarDecl 0x1c455e31bb0 <col:52> col:59 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455e31c30 <col:61> col:69 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e31e38 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e31ea0 <line:2462:16>
| | |-NoThrowAttr 0x1c455e31ee8 <col:37> Implicit
| | `-ConstAttr 0x1c455e31f18 <col:37> Implicit
| |-FunctionDecl 0x1c455e32150 <line:20:3, line:2464:69> col:37 WaveReadLaneAt 'double3 (double3, uint32_t)'
| | |-ParmVarDecl 0x1c455e31f78 <col:52> col:59 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455e31ff8 <col:61> col:69 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e32208 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e32270 <line:2464:16>
| | |-NoThrowAttr 0x1c455e322b8 <col:37> Implicit
| | `-ConstAttr 0x1c455e322e8 <col:37> Implicit
| |-FunctionDecl 0x1c455e34940 <line:20:3, line:2466:69> col:37 WaveReadLaneAt 'double4 (double4, uint32_t)'
| | |-ParmVarDecl 0x1c455e32348 <col:52> col:59 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455e347f0 <col:61> col:69 'uint32_t':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e349f8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_read_lane_at
| | |-ConvergentAttr 0x1c455e34a60 <line:2466:16>
| | |-NoThrowAttr 0x1c455e34aa8 <col:37> Implicit
| | `-ConstAttr 0x1c455e34ad8 <col:37> Implicit
| |-FunctionDecl 0x1c455e34bf8 <line:20:3, line:2474:52> col:34 WaveActiveMax 'half (half)'
| | |-ParmVarDecl 0x1c455e34b40 <col:48> col:52 'half'
| | |-BuiltinAliasAttr 0x1c455e34ca8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e34d10 <line:2474:16>
| | |-NoThrowAttr 0x1c455e34d58 <col:34> Implicit
| | `-ConstAttr 0x1c455e34d88 <col:34> Implicit
| |-FunctionDecl 0x1c455e34e88 <line:20:3, line:2477:54> col:35 WaveActiveMax 'half2 (half2)'
| | |-ParmVarDecl 0x1c455e34dd8 <col:49> col:54 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455e34f38 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e34fa0 <line:2477:16>
| | |-NoThrowAttr 0x1c455e34fe8 <col:35> Implicit
| | `-ConstAttr 0x1c455e35018 <col:35> Implicit
| |-FunctionDecl 0x1c455e35128 <line:20:3, line:2480:54> col:35 WaveActiveMax 'half3 (half3)'
| | |-ParmVarDecl 0x1c455e35078 <col:49> col:54 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455e351d8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e35240 <line:2480:16>
| | |-NoThrowAttr 0x1c455e35288 <col:35> Implicit
| | `-ConstAttr 0x1c455e352b8 <col:35> Implicit
| |-FunctionDecl 0x1c455e353c8 <line:20:3, line:2483:54> col:35 WaveActiveMax 'half4 (half4)'
| | |-ParmVarDecl 0x1c455e35318 <col:49> col:54 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455e35478 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e354e0 <line:2483:16>
| | |-NoThrowAttr 0x1c455e35528 <col:35> Implicit
| | `-ConstAttr 0x1c455e35558 <col:35> Implicit
| |-FunctionDecl 0x1c455e35678 <line:20:3, line:2514:50> col:33 WaveActiveMax 'int (int)'
| | |-ParmVarDecl 0x1c455e355c0 <col:47> col:50 'int'
| | |-BuiltinAliasAttr 0x1c455e35728 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e35790 <line:2514:16>
| | |-NoThrowAttr 0x1c455e357d8 <col:33> Implicit
| | `-ConstAttr 0x1c455e35808 <col:33> Implicit
| |-FunctionDecl 0x1c455e35918 <line:20:3, line:2516:52> col:34 WaveActiveMax 'int2 (int2)'
| | |-ParmVarDecl 0x1c455e35868 <col:48> col:52 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455e359c8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e35a30 <line:2516:16>
| | |-NoThrowAttr 0x1c455e35a78 <col:34> Implicit
| | `-ConstAttr 0x1c455e35aa8 <col:34> Implicit
| |-FunctionDecl 0x1c455e35bb8 <line:20:3, line:2518:52> col:34 WaveActiveMax 'int3 (int3)'
| | |-ParmVarDecl 0x1c455e35b08 <col:48> col:52 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455e35c68 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e35cd0 <line:2518:16>
| | |-NoThrowAttr 0x1c455e35d18 <col:34> Implicit
| | `-ConstAttr 0x1c455e35d48 <col:34> Implicit
| |-FunctionDecl 0x1c455e35e58 <line:20:3, line:2520:52> col:34 WaveActiveMax 'int4 (int4)'
| | |-ParmVarDecl 0x1c455e35da8 <col:48> col:52 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455e35f08 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e35f70 <line:2520:16>
| | |-NoThrowAttr 0x1c455e35fb8 <col:34> Implicit
| | `-ConstAttr 0x1c455e35fe8 <col:34> Implicit
| |-FunctionDecl 0x1c455e360f8 <line:20:3, line:2523:52> col:34 WaveActiveMax 'uint (uint)'
| | |-ParmVarDecl 0x1c455e36048 <col:48> col:52 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e361a8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e36210 <line:2523:16>
| | |-NoThrowAttr 0x1c455e36258 <col:34> Implicit
| | `-ConstAttr 0x1c455e36288 <col:34> Implicit
| |-FunctionDecl 0x1c455e36398 <line:20:3, line:2525:54> col:35 WaveActiveMax 'uint2 (uint2)'
| | |-ParmVarDecl 0x1c455e362e8 <col:49> col:54 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455e36448 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e364b0 <line:2525:16>
| | |-NoThrowAttr 0x1c455e364f8 <col:35> Implicit
| | `-ConstAttr 0x1c455e36528 <col:35> Implicit
| |-FunctionDecl 0x1c455e36638 <line:20:3, line:2527:54> col:35 WaveActiveMax 'uint3 (uint3)'
| | |-ParmVarDecl 0x1c455e36588 <col:49> col:54 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455e366e8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e36750 <line:2527:16>
| | |-NoThrowAttr 0x1c455e36798 <col:35> Implicit
| | `-ConstAttr 0x1c455e2e1b0 <col:35> Implicit
| |-FunctionDecl 0x1c455e2e2c0 <line:20:3, line:2529:54> col:35 WaveActiveMax 'uint4 (uint4)'
| | |-ParmVarDecl 0x1c455e2e210 <col:49> col:54 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455e2e370 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e2e3d8 <line:2529:16>
| | |-NoThrowAttr 0x1c455e2e420 <col:35> Implicit
| | `-ConstAttr 0x1c455e2e450 <col:35> Implicit
| |-FunctionDecl 0x1c455e2e560 <line:20:3, line:2532:58> col:37 WaveActiveMax 'int64_t (int64_t)'
| | |-ParmVarDecl 0x1c455e2e4b0 <col:51> col:58 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455e2e610 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e2e678 <line:2532:16>
| | |-NoThrowAttr 0x1c455e2e6c0 <col:37> Implicit
| | `-ConstAttr 0x1c455e2e6f0 <col:37> Implicit
| |-FunctionDecl 0x1c455e2e800 <line:20:3, line:2534:60> col:38 WaveActiveMax 'int64_t2 (int64_t2)'
| | |-ParmVarDecl 0x1c455e2e750 <col:52> col:60 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455e2e8b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e2e918 <line:2534:16>
| | |-NoThrowAttr 0x1c455e2e960 <col:38> Implicit
| | `-ConstAttr 0x1c455e2e990 <col:38> Implicit
| |-FunctionDecl 0x1c455e2eaa0 <line:20:3, line:2536:60> col:38 WaveActiveMax 'int64_t3 (int64_t3)'
| | |-ParmVarDecl 0x1c455e2e9f0 <col:52> col:60 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455e2eb50 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e2ebb8 <line:2536:16>
| | |-NoThrowAttr 0x1c455e2ec00 <col:38> Implicit
| | `-ConstAttr 0x1c455e2ec30 <col:38> Implicit
| |-FunctionDecl 0x1c455e2ed40 <line:20:3, line:2538:60> col:38 WaveActiveMax 'int64_t4 (int64_t4)'
| | |-ParmVarDecl 0x1c455e2ec90 <col:52> col:60 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455e2edf0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e2ee58 <line:2538:16>
| | |-NoThrowAttr 0x1c455e2eea0 <col:38> Implicit
| | `-ConstAttr 0x1c455e2eed0 <col:38> Implicit
| |-FunctionDecl 0x1c455e2efe0 <line:20:3, line:2541:60> col:38 WaveActiveMax 'uint64_t (uint64_t)'
| | |-ParmVarDecl 0x1c455e2ef30 <col:52> col:60 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455e2f090 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e2f0f8 <line:2541:16>
| | |-NoThrowAttr 0x1c455e2f140 <col:38> Implicit
| | `-ConstAttr 0x1c455e2f170 <col:38> Implicit
| |-FunctionDecl 0x1c455e2f280 <line:20:3, line:2543:62> col:39 WaveActiveMax 'uint64_t2 (uint64_t2)'
| | |-ParmVarDecl 0x1c455e2f1d0 <col:53> col:62 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455e2f330 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e2f398 <line:2543:16>
| | |-NoThrowAttr 0x1c455e2f3e0 <col:39> Implicit
| | `-ConstAttr 0x1c455e2f410 <col:39> Implicit
| |-FunctionDecl 0x1c455e2f520 <line:20:3, line:2545:62> col:39 WaveActiveMax 'uint64_t3 (uint64_t3)'
| | |-ParmVarDecl 0x1c455e2f470 <col:53> col:62 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455e2f5d0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e2f638 <line:2545:16>
| | |-NoThrowAttr 0x1c455e2f680 <col:39> Implicit
| | `-ConstAttr 0x1c455e2f6b0 <col:39> Implicit
| |-FunctionDecl 0x1c455e2f7c0 <line:20:3, line:2547:62> col:39 WaveActiveMax 'uint64_t4 (uint64_t4)'
| | |-ParmVarDecl 0x1c455e2f710 <col:53> col:62 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455e2f870 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e2f8d8 <line:2547:16>
| | |-NoThrowAttr 0x1c455e2f920 <col:39> Implicit
| | `-ConstAttr 0x1c455e2f950 <col:39> Implicit
| |-FunctionDecl 0x1c455e2fa70 <line:20:3, line:2550:54> col:35 WaveActiveMax 'float (float)'
| | |-ParmVarDecl 0x1c455e2f9b8 <col:49> col:54 'float'
| | |-BuiltinAliasAttr 0x1c455e2fb20 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e2fb88 <line:2550:16>
| | |-NoThrowAttr 0x1c455e2fbd0 <col:35> Implicit
| | `-ConstAttr 0x1c455e2fc00 <col:35> Implicit
| |-FunctionDecl 0x1c455e2fd10 <line:20:3, line:2552:56> col:36 WaveActiveMax 'float2 (float2)'
| | |-ParmVarDecl 0x1c455e2fc60 <col:50> col:56 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455e2fdc0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e2fe28 <line:2552:16>
| | |-NoThrowAttr 0x1c455e2fe70 <col:36> Implicit
| | `-ConstAttr 0x1c455e2fea0 <col:36> Implicit
| |-FunctionDecl 0x1c455e2ffb0 <line:20:3, line:2554:56> col:36 WaveActiveMax 'float3 (float3)'
| | |-ParmVarDecl 0x1c455e2ff00 <col:50> col:56 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455e30060 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e300c8 <line:2554:16>
| | |-NoThrowAttr 0x1c455e30110 <col:36> Implicit
| | `-ConstAttr 0x1c455e30140 <col:36> Implicit
| |-FunctionDecl 0x1c455e36aa0 <line:20:3, line:2556:56> col:36 WaveActiveMax 'float4 (float4)'
| | |-ParmVarDecl 0x1c455e369f0 <col:50> col:56 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455e36b50 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e36bb8 <line:2556:16>
| | |-NoThrowAttr 0x1c455e36c00 <col:36> Implicit
| | `-ConstAttr 0x1c455e36c30 <col:36> Implicit
| |-FunctionDecl 0x1c455e36d50 <line:20:3, line:2559:56> col:36 WaveActiveMax 'double (double)'
| | |-ParmVarDecl 0x1c455e36c98 <col:50> col:56 'double'
| | |-BuiltinAliasAttr 0x1c455e36e00 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e36e68 <line:2559:16>
| | |-NoThrowAttr 0x1c455e36eb0 <col:36> Implicit
| | `-ConstAttr 0x1c455e36ee0 <col:36> Implicit
| |-FunctionDecl 0x1c455e36ff0 <line:20:3, line:2561:58> col:37 WaveActiveMax 'double2 (double2)'
| | |-ParmVarDecl 0x1c455e36f40 <col:51> col:58 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455e370a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e37108 <line:2561:16>
| | |-NoThrowAttr 0x1c455e37150 <col:37> Implicit
| | `-ConstAttr 0x1c455e37180 <col:37> Implicit
| |-FunctionDecl 0x1c455e37290 <line:20:3, line:2563:58> col:37 WaveActiveMax 'double3 (double3)'
| | |-ParmVarDecl 0x1c455e371e0 <col:51> col:58 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455e37340 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e373a8 <line:2563:16>
| | |-NoThrowAttr 0x1c455e373f0 <col:37> Implicit
| | `-ConstAttr 0x1c455e37420 <col:37> Implicit
| |-FunctionDecl 0x1c455e37530 <line:20:3, line:2565:58> col:37 WaveActiveMax 'double4 (double4)'
| | |-ParmVarDecl 0x1c455e37480 <col:51> col:58 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455e375e0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_max
| | |-ConvergentAttr 0x1c455e37648 <line:2565:16>
| | |-NoThrowAttr 0x1c455e37690 <col:37> Implicit
| | `-ConstAttr 0x1c455e376c0 <col:37> Implicit
| |-FunctionDecl 0x1c455e377e0 <line:20:3, line:2573:52> col:34 WaveActiveSum 'half (half)'
| | |-ParmVarDecl 0x1c455e37728 <col:48> col:52 'half'
| | |-BuiltinAliasAttr 0x1c455e37890 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e378f8 <line:2573:16>
| | |-NoThrowAttr 0x1c455e37940 <col:34> Implicit
| | `-ConstAttr 0x1c455e37970 <col:34> Implicit
| |-FunctionDecl 0x1c455e37a70 <line:20:3, line:2576:54> col:35 WaveActiveSum 'half2 (half2)'
| | |-ParmVarDecl 0x1c455e379c0 <col:49> col:54 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455e37b20 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e37b88 <line:2576:16>
| | |-NoThrowAttr 0x1c455e37bd0 <col:35> Implicit
| | `-ConstAttr 0x1c455e37c00 <col:35> Implicit
| |-FunctionDecl 0x1c455e37d10 <line:20:3, line:2579:54> col:35 WaveActiveSum 'half3 (half3)'
| | |-ParmVarDecl 0x1c455e37c60 <col:49> col:54 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455e37dc0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e37e28 <line:2579:16>
| | |-NoThrowAttr 0x1c455e37e70 <col:35> Implicit
| | `-ConstAttr 0x1c455e37ea0 <col:35> Implicit
| |-FunctionDecl 0x1c455e37fb0 <line:20:3, line:2582:54> col:35 WaveActiveSum 'half4 (half4)'
| | |-ParmVarDecl 0x1c455e37f00 <col:49> col:54 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455e38060 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e380c8 <line:2582:16>
| | |-NoThrowAttr 0x1c455e38110 <col:35> Implicit
| | `-ConstAttr 0x1c455e38140 <col:35> Implicit
| |-FunctionDecl 0x1c455e38260 <line:20:3, line:2613:50> col:33 WaveActiveSum 'int (int)'
| | |-ParmVarDecl 0x1c455e381a8 <col:47> col:50 'int'
| | |-BuiltinAliasAttr 0x1c455e38310 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e38378 <line:2613:16>
| | |-NoThrowAttr 0x1c455e383c0 <col:33> Implicit
| | `-ConstAttr 0x1c455e383f0 <col:33> Implicit
| |-FunctionDecl 0x1c455e38500 <line:20:3, line:2615:52> col:34 WaveActiveSum 'int2 (int2)'
| | |-ParmVarDecl 0x1c455e38450 <col:48> col:52 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455e385b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e38618 <line:2615:16>
| | |-NoThrowAttr 0x1c455e38660 <col:34> Implicit
| | `-ConstAttr 0x1c455e38690 <col:34> Implicit
| |-FunctionDecl 0x1c455e387a0 <line:20:3, line:2617:52> col:34 WaveActiveSum 'int3 (int3)'
| | |-ParmVarDecl 0x1c455e386f0 <col:48> col:52 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455e38850 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e388b8 <line:2617:16>
| | |-NoThrowAttr 0x1c455e38900 <col:34> Implicit
| | `-ConstAttr 0x1c455e38930 <col:34> Implicit
| |-FunctionDecl 0x1c455e38cb0 <line:20:3, line:2619:52> col:34 WaveActiveSum 'int4 (int4)'
| | |-ParmVarDecl 0x1c455e38c00 <col:48> col:52 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455e38d60 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e38dc8 <line:2619:16>
| | |-NoThrowAttr 0x1c455e38e10 <col:34> Implicit
| | `-ConstAttr 0x1c455e38e40 <col:34> Implicit
| |-FunctionDecl 0x1c455e38f50 <line:20:3, line:2622:52> col:34 WaveActiveSum 'uint (uint)'
| | |-ParmVarDecl 0x1c455e38ea0 <col:48> col:52 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e39000 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e39068 <line:2622:16>
| | |-NoThrowAttr 0x1c455e390b0 <col:34> Implicit
| | `-ConstAttr 0x1c455e390e0 <col:34> Implicit
| |-FunctionDecl 0x1c455e391f0 <line:20:3, line:2624:54> col:35 WaveActiveSum 'uint2 (uint2)'
| | |-ParmVarDecl 0x1c455e39140 <col:49> col:54 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455e392a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e39308 <line:2624:16>
| | |-NoThrowAttr 0x1c455e39350 <col:35> Implicit
| | `-ConstAttr 0x1c455e39380 <col:35> Implicit
| |-FunctionDecl 0x1c455e39490 <line:20:3, line:2626:54> col:35 WaveActiveSum 'uint3 (uint3)'
| | |-ParmVarDecl 0x1c455e393e0 <col:49> col:54 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455e39540 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e395a8 <line:2626:16>
| | |-NoThrowAttr 0x1c455e395f0 <col:35> Implicit
| | `-ConstAttr 0x1c455e39620 <col:35> Implicit
| |-FunctionDecl 0x1c455e39730 <line:20:3, line:2628:54> col:35 WaveActiveSum 'uint4 (uint4)'
| | |-ParmVarDecl 0x1c455e39680 <col:49> col:54 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455e397e0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e39848 <line:2628:16>
| | |-NoThrowAttr 0x1c455e39890 <col:35> Implicit
| | `-ConstAttr 0x1c455e398c0 <col:35> Implicit
| |-FunctionDecl 0x1c455e399d0 <line:20:3, line:2631:58> col:37 WaveActiveSum 'int64_t (int64_t)'
| | |-ParmVarDecl 0x1c455e39920 <col:51> col:58 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455e39a80 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e39ae8 <line:2631:16>
| | |-NoThrowAttr 0x1c455e39b30 <col:37> Implicit
| | `-ConstAttr 0x1c455e39b60 <col:37> Implicit
| |-FunctionDecl 0x1c455e39c70 <line:20:3, line:2633:60> col:38 WaveActiveSum 'int64_t2 (int64_t2)'
| | |-ParmVarDecl 0x1c455e39bc0 <col:52> col:60 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455e39d20 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e39d88 <line:2633:16>
| | |-NoThrowAttr 0x1c455e39dd0 <col:38> Implicit
| | `-ConstAttr 0x1c455e39e00 <col:38> Implicit
| |-FunctionDecl 0x1c455e39f10 <line:20:3, line:2635:60> col:38 WaveActiveSum 'int64_t3 (int64_t3)'
| | |-ParmVarDecl 0x1c455e39e60 <col:52> col:60 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455e39fc0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3a028 <line:2635:16>
| | |-NoThrowAttr 0x1c455e3a070 <col:38> Implicit
| | `-ConstAttr 0x1c455e3a0a0 <col:38> Implicit
| |-FunctionDecl 0x1c455e3a1b0 <line:20:3, line:2637:60> col:38 WaveActiveSum 'int64_t4 (int64_t4)'
| | |-ParmVarDecl 0x1c455e3a100 <col:52> col:60 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455e3a260 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3a2c8 <line:2637:16>
| | |-NoThrowAttr 0x1c455e3a310 <col:38> Implicit
| | `-ConstAttr 0x1c455e3a340 <col:38> Implicit
| |-FunctionDecl 0x1c455e3a450 <line:20:3, line:2640:60> col:38 WaveActiveSum 'uint64_t (uint64_t)'
| | |-ParmVarDecl 0x1c455e3a3a0 <col:52> col:60 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455e3a500 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3a568 <line:2640:16>
| | |-NoThrowAttr 0x1c455e3a5b0 <col:38> Implicit
| | `-ConstAttr 0x1c455e3a5e0 <col:38> Implicit
| |-FunctionDecl 0x1c455e3a6f0 <line:20:3, line:2642:62> col:39 WaveActiveSum 'uint64_t2 (uint64_t2)'
| | |-ParmVarDecl 0x1c455e3a640 <col:53> col:62 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455e3a7a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3a808 <line:2642:16>
| | |-NoThrowAttr 0x1c455e3a850 <col:39> Implicit
| | `-ConstAttr 0x1c455e3a880 <col:39> Implicit
| |-FunctionDecl 0x1c455e3a990 <line:20:3, line:2644:62> col:39 WaveActiveSum 'uint64_t3 (uint64_t3)'
| | |-ParmVarDecl 0x1c455e3a8e0 <col:53> col:62 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455e3aa40 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3aaa8 <line:2644:16>
| | |-NoThrowAttr 0x1c455e3aaf0 <col:39> Implicit
| | `-ConstAttr 0x1c455e3ab20 <col:39> Implicit
| |-FunctionDecl 0x1c455e3d060 <line:20:3, line:2646:62> col:39 WaveActiveSum 'uint64_t4 (uint64_t4)'
| | |-ParmVarDecl 0x1c455e3ab80 <col:53> col:62 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455e3d110 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3d178 <line:2646:16>
| | |-NoThrowAttr 0x1c455e3d1c0 <col:39> Implicit
| | `-ConstAttr 0x1c455e3d1f0 <col:39> Implicit
| |-FunctionDecl 0x1c455e3d310 <line:20:3, line:2649:54> col:35 WaveActiveSum 'float (float)'
| | |-ParmVarDecl 0x1c455e3d258 <col:49> col:54 'float'
| | |-BuiltinAliasAttr 0x1c455e3d3c0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3d428 <line:2649:16>
| | |-NoThrowAttr 0x1c455e3d470 <col:35> Implicit
| | `-ConstAttr 0x1c455e3d4a0 <col:35> Implicit
| |-FunctionDecl 0x1c455e3d5b0 <line:20:3, line:2651:56> col:36 WaveActiveSum 'float2 (float2)'
| | |-ParmVarDecl 0x1c455e3d500 <col:50> col:56 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455e3d660 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3d6c8 <line:2651:16>
| | |-NoThrowAttr 0x1c455e3d710 <col:36> Implicit
| | `-ConstAttr 0x1c455e3d740 <col:36> Implicit
| |-FunctionDecl 0x1c455e3d850 <line:20:3, line:2653:56> col:36 WaveActiveSum 'float3 (float3)'
| | |-ParmVarDecl 0x1c455e3d7a0 <col:50> col:56 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455e3d900 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3d968 <line:2653:16>
| | |-NoThrowAttr 0x1c455e3d9b0 <col:36> Implicit
| | `-ConstAttr 0x1c455e3d9e0 <col:36> Implicit
| |-FunctionDecl 0x1c455e3daf0 <line:20:3, line:2655:56> col:36 WaveActiveSum 'float4 (float4)'
| | |-ParmVarDecl 0x1c455e3da40 <col:50> col:56 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455e3dba0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3dc08 <line:2655:16>
| | |-NoThrowAttr 0x1c455e3dc50 <col:36> Implicit
| | `-ConstAttr 0x1c455e3dc80 <col:36> Implicit
| |-FunctionDecl 0x1c455e3dda0 <line:20:3, line:2658:56> col:36 WaveActiveSum 'double (double)'
| | |-ParmVarDecl 0x1c455e3dce8 <col:50> col:56 'double'
| | |-BuiltinAliasAttr 0x1c455e3de50 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3deb8 <line:2658:16>
| | |-NoThrowAttr 0x1c455e3df00 <col:36> Implicit
| | `-ConstAttr 0x1c455e3df30 <col:36> Implicit
| |-FunctionDecl 0x1c455e3e040 <line:20:3, line:2660:58> col:37 WaveActiveSum 'double2 (double2)'
| | |-ParmVarDecl 0x1c455e3df90 <col:51> col:58 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455e3e0f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3e158 <line:2660:16>
| | |-NoThrowAttr 0x1c455e3e1a0 <col:37> Implicit
| | `-ConstAttr 0x1c455e3e1d0 <col:37> Implicit
| |-FunctionDecl 0x1c455e3e2e0 <line:20:3, line:2662:58> col:37 WaveActiveSum 'double3 (double3)'
| | |-ParmVarDecl 0x1c455e3e230 <col:51> col:58 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455e3e390 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3e3f8 <line:2662:16>
| | |-NoThrowAttr 0x1c455e3e440 <col:37> Implicit
| | `-ConstAttr 0x1c455e3e470 <col:37> Implicit
| |-FunctionDecl 0x1c455e3e580 <line:20:3, line:2664:58> col:37 WaveActiveSum 'double4 (double4)'
| | |-ParmVarDecl 0x1c455e3e4d0 <col:51> col:58 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455e3e630 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_wave_active_sum
| | |-ConvergentAttr 0x1c455e3e698 <line:2664:16>
| | |-NoThrowAttr 0x1c455e3e6e0 <col:37> Implicit
| | `-ConstAttr 0x1c455e3e710 <col:37> Implicit
| |-FunctionDecl 0x1c455e3e868 <line:20:3, line:2704:14> col:5 sign 'int (half)'
| | |-ParmVarDecl 0x1c455e3e778 <col:10> col:14 'half'
| | |-BuiltinAliasAttr 0x1c455e3e918 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e3e998 <line:2704:5> Implicit
| | `-ConstAttr 0x1c455e3e9c8 <col:5> Implicit
| |-FunctionDecl 0x1c455e3eb40 <line:20:3, line:2707:16> col:6 sign 'int2 (half2)'
| | |-ParmVarDecl 0x1c455e3ea18 <col:11> col:16 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455e3ebf0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e3ec70 <line:2707:6> Implicit
| | `-ConstAttr 0x1c455e3eca0 <col:6> Implicit
| |-FunctionDecl 0x1c455e3ee30 <line:20:3, line:2710:16> col:6 sign 'int3 (half3)'
| | |-ParmVarDecl 0x1c455e3ed00 <col:11> col:16 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455e3eee0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e3ef60 <line:2710:6> Implicit
| | `-ConstAttr 0x1c455e3ef90 <col:6> Implicit
| |-FunctionDecl 0x1c455e3f360 <line:20:3, line:2713:16> col:6 sign 'int4 (half4)'
| | |-ParmVarDecl 0x1c455e3f230 <col:11> col:16 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455e3f410 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e3f490 <line:2713:6> Implicit
| | `-ConstAttr 0x1c455e3f4c0 <col:6> Implicit
| |-FunctionDecl 0x1c455e3f5e0 <line:20:3, line:2716:13> col:5 sign 'int (int)'
| | |-ParmVarDecl 0x1c455e3f528 <col:10> col:13 'int'
| | |-BuiltinAliasAttr 0x1c455e3f690 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e3f710 <line:2716:5> Implicit
| | `-ConstAttr 0x1c455e3f740 <col:5> Implicit
| |-FunctionDecl 0x1c455e3f850 <line:20:3, line:2718:15> col:6 sign 'int2 (int2)'
| | |-ParmVarDecl 0x1c455e3f7a0 <col:11> col:15 'int2':'vector<int, 2>'
| | |-BuiltinAliasAttr 0x1c455e3f900 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e3f980 <line:2718:6> Implicit
| | `-ConstAttr 0x1c455e3f9b0 <col:6> Implicit
| |-FunctionDecl 0x1c455e3fac0 <line:20:3, line:2720:15> col:6 sign 'int3 (int3)'
| | |-ParmVarDecl 0x1c455e3fa10 <col:11> col:15 'int3':'vector<int, 3>'
| | |-BuiltinAliasAttr 0x1c455e3fb70 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e3fbf0 <line:2720:6> Implicit
| | `-ConstAttr 0x1c455e3fc20 <col:6> Implicit
| |-FunctionDecl 0x1c455e3fd30 <line:20:3, line:2722:15> col:6 sign 'int4 (int4)'
| | |-ParmVarDecl 0x1c455e3fc80 <col:11> col:15 'int4':'vector<int, 4>'
| | |-BuiltinAliasAttr 0x1c455e3fde0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e3fe60 <line:2722:6> Implicit
| | `-ConstAttr 0x1c455e3fe90 <col:6> Implicit
| |-FunctionDecl 0x1c455e40028 <line:20:3, line:2725:14> col:5 sign 'int (uint)'
| | |-ParmVarDecl 0x1c455e3fef0 <col:10> col:14 'uint':'unsigned int'
| | |-BuiltinAliasAttr 0x1c455e400d8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e40158 <line:2725:5> Implicit
| | `-ConstAttr 0x1c455e40188 <col:5> Implicit
| |-FunctionDecl 0x1c455e40310 <line:20:3, line:2727:16> col:6 sign 'int2 (uint2)'
| | |-ParmVarDecl 0x1c455e401e8 <col:11> col:16 'uint2':'vector<uint, 2>'
| | |-BuiltinAliasAttr 0x1c455e403c0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e40440 <line:2727:6> Implicit
| | `-ConstAttr 0x1c455e40470 <col:6> Implicit
| |-FunctionDecl 0x1c455e40600 <line:20:3, line:2729:16> col:6 sign 'int3 (uint3)'
| | |-ParmVarDecl 0x1c455e404d0 <col:11> col:16 'uint3':'vector<uint, 3>'
| | |-BuiltinAliasAttr 0x1c455e406b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e40730 <line:2729:6> Implicit
| | `-ConstAttr 0x1c455e40760 <col:6> Implicit
| |-FunctionDecl 0x1c455e408f0 <line:20:3, line:2731:16> col:6 sign 'int4 (uint4)'
| | |-ParmVarDecl 0x1c455e407c0 <col:11> col:16 'uint4':'vector<uint, 4>'
| | |-BuiltinAliasAttr 0x1c455e409a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e40a20 <line:2731:6> Implicit
| | `-ConstAttr 0x1c455e40a50 <col:6> Implicit
| |-FunctionDecl 0x1c455e40ba8 <line:20:3, line:2734:15> col:5 sign 'int (float)'
| | |-ParmVarDecl 0x1c455e40ab8 <col:10> col:15 'float'
| | |-BuiltinAliasAttr 0x1c455e40c58 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e40cd8 <line:2734:5> Implicit
| | `-ConstAttr 0x1c455e40d08 <col:5> Implicit
| |-FunctionDecl 0x1c455e40e90 <line:20:3, line:2736:17> col:6 sign 'int2 (float2)'
| | |-ParmVarDecl 0x1c455e40d68 <col:11> col:17 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455e40f40 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e40fc0 <line:2736:6> Implicit
| | `-ConstAttr 0x1c455e40ff0 <col:6> Implicit
| |-FunctionDecl 0x1c455e41180 <line:20:3, line:2738:17> col:6 sign 'int3 (float3)'
| | |-ParmVarDecl 0x1c455e41050 <col:11> col:17 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455e41440 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e414c0 <line:2738:6> Implicit
| | `-ConstAttr 0x1c455e414f0 <col:6> Implicit
| |-FunctionDecl 0x1c455e41680 <line:20:3, line:2740:17> col:6 sign 'int4 (float4)'
| | |-ParmVarDecl 0x1c455e41550 <col:11> col:17 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455e41730 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e417b0 <line:2740:6> Implicit
| | `-ConstAttr 0x1c455e417e0 <col:6> Implicit
| |-FunctionDecl 0x1c455e41978 <line:20:3, line:2743:17> col:5 sign 'int (int64_t)'
| | |-ParmVarDecl 0x1c455e41840 <col:10> col:17 'int64_t':'long'
| | |-BuiltinAliasAttr 0x1c455e41a28 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e41aa8 <line:2743:5> Implicit
| | `-ConstAttr 0x1c455e41ad8 <col:5> Implicit
| |-FunctionDecl 0x1c455e41c60 <line:20:3, line:2745:19> col:6 sign 'int2 (int64_t2)'
| | |-ParmVarDecl 0x1c455e41b38 <col:11> col:19 'int64_t2':'vector<int64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455e41d10 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e41d90 <line:2745:6> Implicit
| | `-ConstAttr 0x1c455e41dc0 <col:6> Implicit
| |-FunctionDecl 0x1c455e41f50 <line:20:3, line:2747:19> col:6 sign 'int3 (int64_t3)'
| | |-ParmVarDecl 0x1c455e41e20 <col:11> col:19 'int64_t3':'vector<int64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455e42000 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e42080 <line:2747:6> Implicit
| | `-ConstAttr 0x1c455e420b0 <col:6> Implicit
| |-FunctionDecl 0x1c455e42240 <line:20:3, line:2749:19> col:6 sign 'int4 (int64_t4)'
| | |-ParmVarDecl 0x1c455e42110 <col:11> col:19 'int64_t4':'vector<int64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455e422f0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e42370 <line:2749:6> Implicit
| | `-ConstAttr 0x1c455e423a0 <col:6> Implicit
| |-FunctionDecl 0x1c455e42538 <line:20:3, line:2752:18> col:5 sign 'int (uint64_t)'
| | |-ParmVarDecl 0x1c455e42400 <col:10> col:18 'uint64_t':'unsigned long'
| | |-BuiltinAliasAttr 0x1c455e425e8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e42668 <line:2752:5> Implicit
| | `-ConstAttr 0x1c455e42698 <col:5> Implicit
| |-FunctionDecl 0x1c455e42820 <line:20:3, line:2754:20> col:6 sign 'int2 (uint64_t2)'
| | |-ParmVarDecl 0x1c455e426f8 <col:11> col:20 'uint64_t2':'vector<uint64_t, 2>'
| | |-BuiltinAliasAttr 0x1c455e428d0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e42950 <line:2754:6> Implicit
| | `-ConstAttr 0x1c455e42980 <col:6> Implicit
| |-FunctionDecl 0x1c455e42b10 <line:20:3, line:2756:20> col:6 sign 'int3 (uint64_t3)'
| | |-ParmVarDecl 0x1c455e429e0 <col:11> col:20 'uint64_t3':'vector<uint64_t, 3>'
| | |-BuiltinAliasAttr 0x1c455e42bc0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e42c40 <line:2756:6> Implicit
| | `-ConstAttr 0x1c455e42c70 <col:6> Implicit
| |-FunctionDecl 0x1c455e42e00 <line:20:3, line:2758:20> col:6 sign 'int4 (uint64_t4)'
| | |-ParmVarDecl 0x1c455e42cd0 <col:11> col:20 'uint64_t4':'vector<uint64_t, 4>'
| | |-BuiltinAliasAttr 0x1c455e42eb0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e42f30 <line:2758:6> Implicit
| | `-ConstAttr 0x1c455e42f60 <col:6> Implicit
| |-FunctionDecl 0x1c455e430b8 <line:20:3, line:2761:16> col:5 sign 'int (double)'
| | |-ParmVarDecl 0x1c455e42fc8 <col:10> col:16 'double'
| | |-BuiltinAliasAttr 0x1c455e43168 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e431e8 <line:2761:5> Implicit
| | `-ConstAttr 0x1c455e43218 <col:5> Implicit
| |-FunctionDecl 0x1c455e3ae10 <line:20:3, line:2763:18> col:6 sign 'int2 (double2)'
| | |-ParmVarDecl 0x1c455e43278 <col:11> col:18 'double2':'vector<double, 2>'
| | |-BuiltinAliasAttr 0x1c455e3aec0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e3af40 <line:2763:6> Implicit
| | `-ConstAttr 0x1c455e3af70 <col:6> Implicit
| |-FunctionDecl 0x1c455e3b100 <line:20:3, line:2765:18> col:6 sign 'int3 (double3)'
| | |-ParmVarDecl 0x1c455e3afd0 <col:11> col:18 'double3':'vector<double, 3>'
| | |-BuiltinAliasAttr 0x1c455e3b1b0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e3b230 <line:2765:6> Implicit
| | `-ConstAttr 0x1c455e3b260 <col:6> Implicit
| |-FunctionDecl 0x1c455e3b3f0 <line:20:3, line:2767:18> col:6 sign 'int4 (double4)'
| | |-ParmVarDecl 0x1c455e3b2c0 <col:11> col:18 'double4':'vector<double, 4>'
| | |-BuiltinAliasAttr 0x1c455e3b4a0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_sign
| | |-NoThrowAttr 0x1c455e3b520 <line:2767:6> Implicit
| | `-ConstAttr 0x1c455e3b550 <col:6> Implicit
| |-FunctionDecl 0x1c455e3b670 <line:20:3, line:2778:18> col:6 radians 'half (half)'
| | |-ParmVarDecl 0x1c455e3b5b8 <col:14> col:18 'half'
| | |-BuiltinAliasAttr 0x1c455e3b720 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_radians
| | |-NoThrowAttr 0x1c455e3b7a0 <line:2778:6> Implicit
| | `-ConstAttr 0x1c455e3b7d0 <col:6> Implicit
| |-FunctionDecl 0x1c455e3b8d0 <line:20:3, line:2781:20> col:7 radians 'half2 (half2)'
| | |-ParmVarDecl 0x1c455e3b820 <col:15> col:20 'half2':'vector<half, 2>'
| | |-BuiltinAliasAttr 0x1c455e3b980 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_radians
| | |-NoThrowAttr 0x1c455e3ba00 <line:2781:7> Implicit
| | `-ConstAttr 0x1c455e3ba30 <col:7> Implicit
| |-FunctionDecl 0x1c455e3bb40 <line:20:3, line:2784:20> col:7 radians 'half3 (half3)'
| | |-ParmVarDecl 0x1c455e3ba90 <col:15> col:20 'half3':'vector<half, 3>'
| | |-BuiltinAliasAttr 0x1c455e3bbf0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_radians
| | |-NoThrowAttr 0x1c455e3bc70 <line:2784:7> Implicit
| | `-ConstAttr 0x1c455e3bca0 <col:7> Implicit
| |-FunctionDecl 0x1c455e3bdb0 <line:20:3, line:2787:20> col:7 radians 'half4 (half4)'
| | |-ParmVarDecl 0x1c455e3bd00 <col:15> col:20 'half4':'vector<half, 4>'
| | |-BuiltinAliasAttr 0x1c455e3be60 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_radians
| | |-NoThrowAttr 0x1c455e3bee0 <line:2787:7> Implicit
| | `-ConstAttr 0x1c455e3bf10 <col:7> Implicit
| |-FunctionDecl 0x1c455e3c030 <line:20:3, line:2790:20> col:7 used radians 'float (float)'
| | |-ParmVarDecl 0x1c455e3bf78 <col:15> col:20 'float'
| | |-BuiltinAliasAttr 0x1c455e3c0e0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_radians
| | |-NoThrowAttr 0x1c455e3c160 <line:2790:7> Implicit
| | `-ConstAttr 0x1c455e3c190 <col:7> Implicit
| |-FunctionDecl 0x1c455e3c2a0 <line:20:3, line:2792:22> col:8 used radians 'float2 (float2)'
| | |-ParmVarDecl 0x1c455e3c1f0 <col:16> col:22 'float2':'vector<float, 2>'
| | |-BuiltinAliasAttr 0x1c455e3c350 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_radians
| | |-NoThrowAttr 0x1c455e3c3d0 <line:2792:8> Implicit
| | `-ConstAttr 0x1c455e3c400 <col:8> Implicit
| |-FunctionDecl 0x1c455e3c510 <line:20:3, line:2794:22> col:8 used radians 'float3 (float3)'
| | |-ParmVarDecl 0x1c455e3c460 <col:16> col:22 'float3':'vector<float, 3>'
| | |-BuiltinAliasAttr 0x1c455e3c5c0 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_radians
| | |-NoThrowAttr 0x1c455e3c640 <line:2794:8> Implicit
| | `-ConstAttr 0x1c455e3c670 <col:8> Implicit
| |-FunctionDecl 0x1c455e3c780 <line:20:3, line:2796:22> col:8 used radians 'float4 (float4)'
| | |-ParmVarDecl 0x1c455e3c6d0 <col:16> col:22 'float4':'vector<float, 4>'
| | |-BuiltinAliasAttr 0x1c455e3c830 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_radians
| | |-NoThrowAttr 0x1c455e3c8b0 <line:2796:8> Implicit
| | `-ConstAttr 0x1c455e3c8e0 <col:8> Implicit
| `-FunctionDecl 0x1c455e3ca20 <line:20:3, line:2808:42> col:6 GroupMemoryBarrierWithGroupSync 'void ()'
|   |-BuiltinAliasAttr 0x1c455e3cac8 <line:20:18, col:45> clang_builtin_alias __builtin_hlsl_group_memory_barrier_with_group_sync
|   |-NoThrowAttr 0x1c455e3cb48 <line:2808:6> Implicit
|   `-ConstAttr 0x1c455e3cb78 <col:6> Implicit
|-LinkageSpecDecl 0x1c455d69c78 <line:797:45> col:45 implicit C
| `-FunctionDecl 0x1c455d69cc8 <col:45> col:45 implicit used __builtin_elementwise_popcount 'void (...) noexcept' extern
|   |-BuiltinAttr 0x1c455d69d70 <<invalid sloc>> Implicit 489
|   |-NoThrowAttr 0x1c455d69dd8 <col:45> Implicit
|   `-ConstAttr 0x1c455d69e08 <col:45> Implicit
|-NamespaceDecl 0x1c455e3cc20 prev 0x1c455d350b0 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_compat_overloads.h:12:1, line:426:1> line:12:11 hlsl
| |-original Namespace 0x1c4559cd198 'hlsl'
| |-FunctionDecl 0x1c455e49c80 <line:20:3, col:55> line:165:36 constexpr acos 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e3cca8 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e49f18 <col:32, col:55>
| |   `-ReturnStmt 0x1c455e49f08 <col:34, col:52>
| |     `-CallExpr 0x1c455e49ed8 <line:165:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455e49ec0 <line:165:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e49e70 <col:36> '<builtin fn type>' Function 0x1c455d3ecd0 'acos' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e49e48 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e49e30 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e49e18 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e49de0 <col:51> 'double' lvalue ParmVar 0x1c455e3cca8 'V' 'double'
| |-FunctionDecl 0x1c455e4a070 <line:21:3, col:58> line:165:36 constexpr acos 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e49f40 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e4a338 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e4a328 <col:36, col:55>
| |     `-CallExpr 0x1c455e4a2f8 <line:165:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e4a2e0 <line:165:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4a260 <col:36> '<builtin fn type>' Function 0x1c455d3ef40 'acos' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e4a238 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4a220 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4a208 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4a1d8 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e49f40 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e4a490 <line:22:3, col:58> line:165:36 constexpr acos 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e4a360 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e4a768 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e4a758 <col:36, col:55>
| |     `-CallExpr 0x1c455e4a728 <line:165:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e4a710 <line:165:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4a688 <col:36> '<builtin fn type>' Function 0x1c455d3f1b0 'acos' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e4a660 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4a648 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4a630 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4a600 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e4a360 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e4a8c0 <line:23:3, col:58> line:165:36 constexpr acos 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e4a790 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e4ab98 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e4ab88 <col:36, col:55>
| |     `-CallExpr 0x1c455e4ab58 <line:165:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e4ab40 <line:165:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4aac0 <col:36> '<builtin fn type>' Function 0x1c455d3f420 'acos' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e4aa98 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4aa80 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4aa68 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4aa38 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e4a790 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e4acb8 <line:54:3, col:52> line:166:37 constexpr acos 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455e4abc8 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455e4af40 <col:29, col:52>
| |   `-ReturnStmt 0x1c455e4af30 <col:31, col:49>
| |     `-CallExpr 0x1c455e4af00 <line:166:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455e4aee8 <line:166:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4aec8 <col:37> '<builtin fn type>' Function 0x1c455d3ecd0 'acos' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e4aea0 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4ae88 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4ae70 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4ae38 <col:48> 'int' lvalue ParmVar 0x1c455e4abc8 'V' 'int'
| |-FunctionDecl 0x1c455e4b090 <line:55:3, col:55> line:166:37 constexpr acos 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e4af68 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e4b318 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e4b308 <col:33, col:52>
| |     `-CallExpr 0x1c455e4b2d8 <line:166:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e4b2c0 <line:166:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4b2a0 <col:37> '<builtin fn type>' Function 0x1c455d3ef40 'acos' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e4b278 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4b260 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4b248 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4b218 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e4af68 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e4b470 <line:56:3, col:55> line:166:37 constexpr acos 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e4b340 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e4b700 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e4b6f0 <col:33, col:52>
| |     `-CallExpr 0x1c455e4b6c0 <line:166:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e4b6a8 <line:166:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4b688 <col:37> '<builtin fn type>' Function 0x1c455d3f1b0 'acos' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e4b660 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4b648 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4b630 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4b600 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e4b340 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e4b850 <line:57:3, col:55> line:166:37 constexpr acos 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e4b728 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e4bae8 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e4bad8 <col:33, col:52>
| |     `-CallExpr 0x1c455e4baa8 <line:166:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e4ba90 <line:166:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4ba70 <col:37> '<builtin fn type>' Function 0x1c455d3f420 'acos' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e4ba48 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4ba30 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4ba18 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4b9e8 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e4b728 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e45860 <line:58:3, col:53> line:166:37 constexpr acos 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e4bb10 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e45b08 <col:30, col:53>
| |   `-ReturnStmt 0x1c455e45af8 <col:32, col:50>
| |     `-CallExpr 0x1c455e45ac8 <line:166:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455e45ab0 <line:166:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e45a90 <col:37> '<builtin fn type>' Function 0x1c455d3ecd0 'acos' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e45a68 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e45a50 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e45a38 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e45a00 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455e4bb10 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e45c60 <line:59:3, col:56> line:166:37 constexpr acos 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e45b30 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e45f08 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e45ef8 <col:34, col:53>
| |     `-CallExpr 0x1c455e45ec8 <line:166:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e45eb0 <line:166:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e45e90 <col:37> '<builtin fn type>' Function 0x1c455d3ef40 'acos' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e45e68 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e45e50 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e45e38 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e45e08 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e45b30 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e46060 <line:60:3, col:56> line:166:37 constexpr acos 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e45f30 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e46310 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e46300 <col:34, col:53>
| |     `-CallExpr 0x1c455e462d0 <line:166:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e462b8 <line:166:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e46298 <col:37> '<builtin fn type>' Function 0x1c455d3f1b0 'acos' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e46270 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e46258 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e46240 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e46210 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e45f30 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e46460 <line:61:3, col:56> line:166:37 constexpr acos 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e46338 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e46718 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e46708 <col:34, col:53>
| |     `-CallExpr 0x1c455e466d8 <line:166:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e466c0 <line:166:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e466a0 <col:37> '<builtin fn type>' Function 0x1c455d3f420 'acos' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e46678 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e46660 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e46648 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e46618 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e46338 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e46878 <line:62:3, col:56> line:166:37 constexpr acos 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e46740 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455e46b40 <col:33, col:56>
| |   `-ReturnStmt 0x1c455e46b30 <col:35, col:53>
| |     `-CallExpr 0x1c455e46b00 <line:166:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455e46ae8 <line:166:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e46ac8 <col:37> '<builtin fn type>' Function 0x1c455d3ecd0 'acos' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e46aa0 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e46a88 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e46a70 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e46a38 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455e46740 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455e46c90 <line:63:3, col:59> line:166:37 constexpr acos 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e46b68 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e46f58 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e46f48 <col:37, col:56>
| |     `-CallExpr 0x1c455e46f18 <line:166:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e46f00 <line:166:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e46ee0 <col:37> '<builtin fn type>' Function 0x1c455d3ef40 'acos' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e46eb8 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e46ea0 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e46e88 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e46e58 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e46b68 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e470b0 <line:64:3, col:59> line:166:37 constexpr acos 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e46f80 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e47380 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e47370 <col:37, col:56>
| |     `-CallExpr 0x1c455e47340 <line:166:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e47328 <line:166:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e47308 <col:37> '<builtin fn type>' Function 0x1c455d3f1b0 'acos' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e472e0 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e472c8 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e472b0 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e47280 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e46f80 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e474d0 <line:65:3, col:59> line:166:37 constexpr acos 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e473a8 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e477a8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e47798 <col:37, col:56>
| |     `-CallExpr 0x1c455e47768 <line:166:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e47750 <line:166:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e47730 <col:37> '<builtin fn type>' Function 0x1c455d3f420 'acos' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e47708 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e476f0 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e476d8 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e476a8 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e473a8 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e47b18 <line:66:3, col:57> line:166:37 constexpr acos 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e477d0 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e47e00 <col:34, col:57>
| |   `-ReturnStmt 0x1c455e47df0 <col:36, col:54>
| |     `-CallExpr 0x1c455e47dc0 <line:166:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455e47da8 <line:166:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e47d88 <col:37> '<builtin fn type>' Function 0x1c455d3ecd0 'acos' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e47d60 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e47d48 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e47d30 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e47cf8 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e477d0 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e47f50 <line:67:3, col:60> line:166:37 constexpr acos 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e47e28 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e48238 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e48228 <col:38, col:57>
| |     `-CallExpr 0x1c455e481f8 <line:166:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e481e0 <line:166:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e481c0 <col:37> '<builtin fn type>' Function 0x1c455d3ef40 'acos' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e48198 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e48180 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e48168 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e48138 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e47e28 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e48390 <line:68:3, col:60> line:166:37 constexpr acos 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e48260 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e48680 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e48670 <col:38, col:57>
| |     `-CallExpr 0x1c455e48640 <line:166:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e48628 <line:166:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e48608 <col:37> '<builtin fn type>' Function 0x1c455d3f1b0 'acos' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e485e0 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e485c8 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e485b0 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e48580 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e48260 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e487d0 <line:69:3, col:60> line:166:37 constexpr acos 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e486a8 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e48ac8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e48ab8 <col:38, col:57>
| |     `-CallExpr 0x1c455e48a88 <line:166:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e48a70 <line:166:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e48a50 <col:37> '<builtin fn type>' Function 0x1c455d3f420 'acos' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e48a28 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e48a10 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e489f8 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e489c8 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e486a8 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455e48bb0 <line:20:3, col:55> line:172:36 constexpr asin 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e48af8 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e48e18 <col:32, col:55>
| |   `-ReturnStmt 0x1c455e48e08 <col:34, col:52>
| |     `-CallExpr 0x1c455e48dd8 <line:172:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455e48dc0 <line:172:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e48da0 <col:36> '<builtin fn type>' Function 0x1c455d67d98 'asin' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e48d78 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e48d60 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e48d48 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e48d10 <col:51> 'double' lvalue ParmVar 0x1c455e48af8 'V' 'double'
| |-FunctionDecl 0x1c455e48ef0 <line:21:3, col:58> line:172:36 constexpr asin 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e48e40 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e49158 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e49148 <col:36, col:55>
| |     `-CallExpr 0x1c455e49118 <line:172:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e49100 <line:172:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e490e0 <col:36> '<builtin fn type>' Function 0x1c455d68008 'asin' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e490b8 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e490a0 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e49088 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e49058 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e48e40 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e49230 <line:22:3, col:58> line:172:36 constexpr asin 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e49180 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e494a0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e49490 <col:36, col:55>
| |     `-CallExpr 0x1c455e49460 <line:172:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e49448 <line:172:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e49428 <col:36> '<builtin fn type>' Function 0x1c455d6d8f0 'asin' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e49400 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e493e8 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e493d0 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e493a0 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e49180 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e49578 <line:23:3, col:58> line:172:36 constexpr asin 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e494c8 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e497f0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e497e0 <col:36, col:55>
| |     `-CallExpr 0x1c455e497b0 <line:172:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e49798 <line:172:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e49778 <col:36> '<builtin fn type>' Function 0x1c455d6db60 'asin' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e49750 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e49738 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e49720 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e496f0 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e494c8 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e498d8 <line:54:3, col:52> line:173:37 constexpr asin 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455e49820 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455e43758 <col:29, col:52>
| |   `-ReturnStmt 0x1c455e43748 <col:31, col:49>
| |     `-CallExpr 0x1c455e43718 <line:173:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455e43700 <line:173:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e436e0 <col:37> '<builtin fn type>' Function 0x1c455d67d98 'asin' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e436b8 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e436a0 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e43688 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e43650 <col:48> 'int' lvalue ParmVar 0x1c455e49820 'V' 'int'
| |-FunctionDecl 0x1c455e43830 <line:55:3, col:55> line:173:37 constexpr asin 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e43780 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e43ab8 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e43aa8 <col:33, col:52>
| |     `-CallExpr 0x1c455e43a78 <line:173:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e43a60 <line:173:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e43a40 <col:37> '<builtin fn type>' Function 0x1c455d68008 'asin' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e43a18 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e43a00 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e439e8 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e439b8 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e43780 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e43b90 <line:56:3, col:55> line:173:37 constexpr asin 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e43ae0 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e43e20 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e43e10 <col:33, col:52>
| |     `-CallExpr 0x1c455e43de0 <line:173:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e43dc8 <line:173:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e43da8 <col:37> '<builtin fn type>' Function 0x1c455d6d8f0 'asin' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e43d80 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e43d68 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e43d50 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e43d20 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e43ae0 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e43ef8 <line:57:3, col:55> line:173:37 constexpr asin 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e43e48 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e44190 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e44180 <col:33, col:52>
| |     `-CallExpr 0x1c455e44150 <line:173:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e44138 <line:173:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e44118 <col:37> '<builtin fn type>' Function 0x1c455d6db60 'asin' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e440f0 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e440d8 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e440c0 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e44090 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e43e48 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e44270 <line:58:3, col:53> line:173:37 constexpr asin 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e441b8 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e44518 <col:30, col:53>
| |   `-ReturnStmt 0x1c455e44508 <col:32, col:50>
| |     `-CallExpr 0x1c455e444d8 <line:173:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455e444c0 <line:173:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e444a0 <col:37> '<builtin fn type>' Function 0x1c455d67d98 'asin' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e44478 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e44460 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e44448 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e44410 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455e441b8 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e445f0 <line:59:3, col:56> line:173:37 constexpr asin 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e44540 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e44898 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e44888 <col:34, col:53>
| |     `-CallExpr 0x1c455e44858 <line:173:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e44840 <line:173:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e44820 <col:37> '<builtin fn type>' Function 0x1c455d68008 'asin' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e447f8 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e447e0 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e447c8 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e44798 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e44540 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e44970 <line:60:3, col:56> line:173:37 constexpr asin 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e448c0 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e44c20 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e44c10 <col:34, col:53>
| |     `-CallExpr 0x1c455e44be0 <line:173:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e44bc8 <line:173:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e44ba8 <col:37> '<builtin fn type>' Function 0x1c455d6d8f0 'asin' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e44b80 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e44b68 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e44b50 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e44b20 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e448c0 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e44cf8 <line:61:3, col:56> line:173:37 constexpr asin 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e44c48 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e44fb0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e44fa0 <col:34, col:53>
| |     `-CallExpr 0x1c455e44f70 <line:173:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e44f58 <line:173:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e44f38 <col:37> '<builtin fn type>' Function 0x1c455d6db60 'asin' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e44f10 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e44ef8 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e44ee0 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e44eb0 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e44c48 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e45090 <line:62:3, col:56> line:173:37 constexpr asin 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e44fd8 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455e45358 <col:33, col:56>
| |   `-ReturnStmt 0x1c455e45348 <col:35, col:53>
| |     `-CallExpr 0x1c455e45318 <line:173:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455e45300 <line:173:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e452e0 <col:37> '<builtin fn type>' Function 0x1c455d67d98 'asin' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e452b8 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e452a0 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e45288 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e45250 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455e44fd8 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455e45430 <line:63:3, col:59> line:173:37 constexpr asin 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e45380 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e4bf48 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e4bf38 <col:37, col:56>
| |     `-CallExpr 0x1c455e4bf08 <line:173:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e4bef0 <line:173:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4bed0 <col:37> '<builtin fn type>' Function 0x1c455d68008 'asin' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e4bea8 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4be90 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e45628 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e455f8 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e45380 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e4c020 <line:64:3, col:59> line:173:37 constexpr asin 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e4bf70 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e4c2f0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e4c2e0 <col:37, col:56>
| |     `-CallExpr 0x1c455e4c2b0 <line:173:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e4c298 <line:173:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4c278 <col:37> '<builtin fn type>' Function 0x1c455d6d8f0 'asin' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e4c250 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4c238 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4c220 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4c1f0 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e4bf70 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e4c3c8 <line:65:3, col:59> line:173:37 constexpr asin 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e4c318 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e4c6a0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e4c690 <col:37, col:56>
| |     `-CallExpr 0x1c455e4c660 <line:173:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e4c648 <line:173:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4c628 <col:37> '<builtin fn type>' Function 0x1c455d6db60 'asin' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e4c600 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4c5e8 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4c5d0 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4c5a0 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e4c318 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e4c780 <line:66:3, col:57> line:173:37 constexpr asin 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e4c6c8 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e4ca68 <col:34, col:57>
| |   `-ReturnStmt 0x1c455e4ca58 <col:36, col:54>
| |     `-CallExpr 0x1c455e4ca28 <line:173:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455e4ca10 <line:173:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4c9f0 <col:37> '<builtin fn type>' Function 0x1c455d67d98 'asin' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e4c9c8 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4c9b0 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4c998 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4c960 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e4c6c8 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e4cb40 <line:67:3, col:60> line:173:37 constexpr asin 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e4ca90 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e4ce28 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e4ce18 <col:38, col:57>
| |     `-CallExpr 0x1c455e4cde8 <line:173:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e4cdd0 <line:173:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4cdb0 <col:37> '<builtin fn type>' Function 0x1c455d68008 'asin' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e4cd88 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4cd70 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4cd58 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4cd28 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e4ca90 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e4cf00 <line:68:3, col:60> line:173:37 constexpr asin 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e4ce50 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e4d1f0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e4d1e0 <col:38, col:57>
| |     `-CallExpr 0x1c455e4d1b0 <line:173:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e4d198 <line:173:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4d178 <col:37> '<builtin fn type>' Function 0x1c455d6d8f0 'asin' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e4d150 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4d138 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4d120 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4d0f0 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e4ce50 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e4d2c8 <line:69:3, col:60> line:173:37 constexpr asin 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e4d218 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e4d5c0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e4d5b0 <col:38, col:57>
| |     `-CallExpr 0x1c455e4d580 <line:173:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e4d568 <line:173:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4d548 <col:37> '<builtin fn type>' Function 0x1c455d6db60 'asin' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e4d520 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4d508 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4d4f0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4d4c0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e4d218 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455e4d6a8 <line:20:3, col:55> line:179:36 constexpr atan 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e4d5f0 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e4d910 <col:32, col:55>
| |   `-ReturnStmt 0x1c455e4d900 <col:34, col:52>
| |     `-CallExpr 0x1c455e4d8d0 <line:179:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455e4d8b8 <line:179:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4d898 <col:36> '<builtin fn type>' Function 0x1c455d6e8c0 'atan' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e4d870 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4d858 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4d840 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4d808 <col:51> 'double' lvalue ParmVar 0x1c455e4d5f0 'V' 'double'
| |-FunctionDecl 0x1c455e4d9e8 <line:21:3, col:58> line:179:36 constexpr atan 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e4d938 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e4dc50 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e4dc40 <col:36, col:55>
| |     `-CallExpr 0x1c455e4dc10 <line:179:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e4dbf8 <line:179:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e4dbd8 <col:36> '<builtin fn type>' Function 0x1c455d6eb30 'atan' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e4dbb0 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e4db98 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e4db80 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e4db50 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e4d938 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e4dd28 <line:22:3, col:58> line:179:36 constexpr atan 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e4dc78 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e519f8 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e519e8 <col:36, col:55>
| |     `-CallExpr 0x1c455e519b8 <line:179:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e519a0 <line:179:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e51980 <col:36> '<builtin fn type>' Function 0x1c455d6eda0 'atan' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e51958 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e51940 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e51928 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e518f8 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e4dc78 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e51ad0 <line:23:3, col:58> line:179:36 constexpr atan 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e51a20 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e51d48 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e51d38 <col:36, col:55>
| |     `-CallExpr 0x1c455e51d08 <line:179:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e51cf0 <line:179:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e51cd0 <col:36> '<builtin fn type>' Function 0x1c455d6f010 'atan' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e51ca8 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e51c90 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e51c78 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e51c48 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e51a20 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e51e30 <line:54:3, col:52> line:180:37 constexpr atan 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455e51d78 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455e520b8 <col:29, col:52>
| |   `-ReturnStmt 0x1c455e520a8 <col:31, col:49>
| |     `-CallExpr 0x1c455e52078 <line:180:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455e52060 <line:180:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e52040 <col:37> '<builtin fn type>' Function 0x1c455d6e8c0 'atan' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e52018 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e52000 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e51fe8 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e51fb0 <col:48> 'int' lvalue ParmVar 0x1c455e51d78 'V' 'int'
| |-FunctionDecl 0x1c455e52190 <line:55:3, col:55> line:180:37 constexpr atan 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e520e0 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e52418 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e52408 <col:33, col:52>
| |     `-CallExpr 0x1c455e523d8 <line:180:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e523c0 <line:180:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e523a0 <col:37> '<builtin fn type>' Function 0x1c455d6eb30 'atan' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e52378 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e52360 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e52348 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e52318 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e520e0 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e524f0 <line:56:3, col:55> line:180:37 constexpr atan 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e52440 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e52780 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e52770 <col:33, col:52>
| |     `-CallExpr 0x1c455e52740 <line:180:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e52728 <line:180:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e52708 <col:37> '<builtin fn type>' Function 0x1c455d6eda0 'atan' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e526e0 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e526c8 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e526b0 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e52680 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e52440 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e52858 <line:57:3, col:55> line:180:37 constexpr atan 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e527a8 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e52af0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e52ae0 <col:33, col:52>
| |     `-CallExpr 0x1c455e52ab0 <line:180:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e52a98 <line:180:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e52a78 <col:37> '<builtin fn type>' Function 0x1c455d6f010 'atan' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e52a50 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e52a38 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e52a20 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e529f0 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e527a8 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e52bd0 <line:58:3, col:53> line:180:37 constexpr atan 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e52b18 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e52e78 <col:30, col:53>
| |   `-ReturnStmt 0x1c455e52e68 <col:32, col:50>
| |     `-CallExpr 0x1c455e52e38 <line:180:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455e52e20 <line:180:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e52e00 <col:37> '<builtin fn type>' Function 0x1c455d6e8c0 'atan' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e52dd8 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e52dc0 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e52da8 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e52d70 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455e52b18 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e52f50 <line:59:3, col:56> line:180:37 constexpr atan 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e52ea0 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e531f8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e531e8 <col:34, col:53>
| |     `-CallExpr 0x1c455e531b8 <line:180:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e531a0 <line:180:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e53180 <col:37> '<builtin fn type>' Function 0x1c455d6eb30 'atan' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e53158 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e53140 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e53128 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e530f8 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e52ea0 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e532d0 <line:60:3, col:56> line:180:37 constexpr atan 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e53220 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e53580 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e53570 <col:34, col:53>
| |     `-CallExpr 0x1c455e53540 <line:180:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e53528 <line:180:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e53508 <col:37> '<builtin fn type>' Function 0x1c455d6eda0 'atan' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e534e0 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e534c8 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e534b0 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e53480 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e53220 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e53658 <line:61:3, col:56> line:180:37 constexpr atan 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e535a8 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e5a158 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e5a148 <col:34, col:53>
| |     `-CallExpr 0x1c455e5a118 <line:180:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e5a100 <line:180:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5a0e0 <col:37> '<builtin fn type>' Function 0x1c455d6f010 'atan' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e5a0b8 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5a0a0 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e53840 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e53810 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e535a8 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e5a238 <line:62:3, col:56> line:180:37 constexpr atan 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e5a180 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455e5a500 <col:33, col:56>
| |   `-ReturnStmt 0x1c455e5a4f0 <col:35, col:53>
| |     `-CallExpr 0x1c455e5a4c0 <line:180:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455e5a4a8 <line:180:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5a488 <col:37> '<builtin fn type>' Function 0x1c455d6e8c0 'atan' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e5a460 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5a448 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5a430 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5a3f8 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455e5a180 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455e5a5d8 <line:63:3, col:59> line:180:37 constexpr atan 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e5a528 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e5a8a0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e5a890 <col:37, col:56>
| |     `-CallExpr 0x1c455e5a860 <line:180:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e5a848 <line:180:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5a828 <col:37> '<builtin fn type>' Function 0x1c455d6eb30 'atan' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e5a800 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5a7e8 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5a7d0 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5a7a0 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e5a528 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e5a978 <line:64:3, col:59> line:180:37 constexpr atan 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e5a8c8 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e5ac48 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e5ac38 <col:37, col:56>
| |     `-CallExpr 0x1c455e5ac08 <line:180:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e5abf0 <line:180:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5abd0 <col:37> '<builtin fn type>' Function 0x1c455d6eda0 'atan' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e5aba8 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5ab90 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5ab78 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5ab48 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e5a8c8 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e5ad20 <line:65:3, col:59> line:180:37 constexpr atan 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e5ac70 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e5aff8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e5afe8 <col:37, col:56>
| |     `-CallExpr 0x1c455e5afb8 <line:180:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e5afa0 <line:180:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5af80 <col:37> '<builtin fn type>' Function 0x1c455d6f010 'atan' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e5af58 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5af40 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5af28 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5aef8 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e5ac70 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e5b0d8 <line:66:3, col:57> line:180:37 constexpr atan 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e5b020 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e5b3c0 <col:34, col:57>
| |   `-ReturnStmt 0x1c455e5b3b0 <col:36, col:54>
| |     `-CallExpr 0x1c455e5b380 <line:180:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455e5b368 <line:180:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5b348 <col:37> '<builtin fn type>' Function 0x1c455d6e8c0 'atan' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e5b320 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5b308 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5b2f0 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5b2b8 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e5b020 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e5b498 <line:67:3, col:60> line:180:37 constexpr atan 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e5b3e8 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e5b780 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e5b770 <col:38, col:57>
| |     `-CallExpr 0x1c455e5b740 <line:180:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e5b728 <line:180:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5b708 <col:37> '<builtin fn type>' Function 0x1c455d6eb30 'atan' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e5b6e0 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5b6c8 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5b6b0 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5b680 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e5b3e8 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e5b858 <line:68:3, col:60> line:180:37 constexpr atan 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e5b7a8 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e5bb48 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e5bb38 <col:38, col:57>
| |     `-CallExpr 0x1c455e5bb08 <line:180:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e5baf0 <line:180:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5bad0 <col:37> '<builtin fn type>' Function 0x1c455d6eda0 'atan' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e5baa8 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5ba90 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5ba78 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5ba48 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e5b7a8 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e5bc20 <line:69:3, col:60> line:180:37 constexpr atan 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e5bb70 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e5bf18 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e5bf08 <col:38, col:57>
| |     `-CallExpr 0x1c455e5bed8 <line:180:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e5bec0 <line:180:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5bea0 <col:37> '<builtin fn type>' Function 0x1c455d6f010 'atan' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e5be78 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5be60 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5be48 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5be18 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e5bb70 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455e57f08 <line:26:3, line:28:3> line:186:37 constexpr atan2 'float (double, double)' implicit-inline
| | |-ParmVarDecl 0x1c455e5bf48 <line:26:22, col:29> col:29 used V1 'double'
| | |-ParmVarDecl 0x1c455e5bfd0 <col:33, col:40> col:40 used V2 'double'
| | `-CompoundStmt 0x1c455e58240 <col:44, line:28:3>
| |   `-ReturnStmt 0x1c455e58230 <line:27:5, col:35>
| |     `-CallExpr 0x1c455e581f8 <line:186:37, line:27:35> 'float'
| |       |-ImplicitCastExpr 0x1c455e581e0 <line:186:37> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e58190 <col:37> '<builtin fn type>' Function 0x1c455d6be88 'atan2' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455e580d8 <line:27:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e580c0 <col:22> 'float' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e580a8 <col:22> 'double' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e58070 <col:22> 'double' lvalue ParmVar 0x1c455e5bf48 'V1' 'double'
| |       `-CStyleCastExpr 0x1c455e58168 <col:26, col:33> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e58150 <col:33> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e58138 <col:33> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e58100 <col:33> 'double' lvalue ParmVar 0x1c455e5bfd0 'V2' 'double'
| |-FunctionDecl 0x1c455e58440 <line:29:3, line:31:3> line:186:37 constexpr atan2 'float2 (double2, double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e58268 <line:29:23, col:31> col:31 used V1 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455e582e8 <col:35, col:43> col:43 used V2 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e587a0 <col:47, line:31:3>
| |   `-ReturnStmt 0x1c455e58790 <line:30:5, col:37>
| |     `-CallExpr 0x1c455e58758 <line:186:37, line:30:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e58740 <line:186:37> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e586c0 <col:37> '<builtin fn type>' Function 0x1c455d6c220 'atan2' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455e58610 <line:30:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e585f8 <col:23> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e585e0 <col:23> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e585b0 <col:23> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e58268 'V1' 'double2':'vector<double, 2>'
| |       `-CStyleCastExpr 0x1c455e58698 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e58680 <col:35> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e58668 <col:35> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e58638 <col:35> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e582e8 'V2' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e589a0 <line:32:3, line:34:3> line:186:37 constexpr atan2 'float3 (double3, double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e587c8 <line:32:23, col:31> col:31 used V1 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455e58848 <col:35, col:43> col:43 used V2 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e58d10 <col:47, line:34:3>
| |   `-ReturnStmt 0x1c455e58d00 <line:33:5, col:37>
| |     `-CallExpr 0x1c455e58cc8 <line:186:37, line:33:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e58cb0 <line:186:37> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e58c28 <col:37> '<builtin fn type>' Function 0x1c455d6fa00 'atan2' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455e58b78 <line:33:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e58b60 <col:23> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e58b48 <col:23> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e58b18 <col:23> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e587c8 'V1' 'double3':'vector<double, 3>'
| |       `-CStyleCastExpr 0x1c455e58c00 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e58be8 <col:35> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e58bd0 <col:35> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e58ba0 <col:35> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e58848 'V2' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e58f10 <line:35:3, line:37:3> line:186:37 constexpr atan2 'float4 (double4, double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e58d38 <line:35:23, col:31> col:31 used V1 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455e58db8 <col:35, col:43> col:43 used V2 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e59280 <col:47, line:37:3>
| |   `-ReturnStmt 0x1c455e59270 <line:36:5, col:37>
| |     `-CallExpr 0x1c455e59238 <line:186:37, line:36:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e59220 <line:186:37> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e591a0 <col:37> '<builtin fn type>' Function 0x1c455d6fda0 'atan2' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455e590f0 <line:36:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e590d8 <col:23> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e590c0 <col:23> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e59090 <col:23> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e58d38 'V1' 'double4':'vector<double, 4>'
| |       `-CStyleCastExpr 0x1c455e59178 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e59160 <col:35> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e59148 <col:35> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e59118 <col:35> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e58db8 'V2' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e59458 <line:72:3, col:73> line:187:38 constexpr atan2 'float (int, int)' implicit-inline
| | |-ParmVarDecl 0x1c455e592b0 <line:72:22, col:26> col:26 used V1 'int'
| | |-ParmVarDecl 0x1c455e59338 <col:30, col:34> col:34 used V2 'int'
| | `-CompoundStmt 0x1c455e59780 <col:38, col:73>
| |   `-ReturnStmt 0x1c455e59770 <col:40, col:70>
| |     `-CallExpr 0x1c455e59738 <line:187:38, line:72:70> 'float'
| |       |-ImplicitCastExpr 0x1c455e59720 <line:187:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e59700 <col:38> '<builtin fn type>' Function 0x1c455d6be88 'atan2' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455e59648 <line:72:50, col:57> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e59630 <col:57> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e59618 <col:57> 'int' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e595e0 <col:57> 'int' lvalue ParmVar 0x1c455e592b0 'V1' 'int'
| |       `-CStyleCastExpr 0x1c455e596d8 <col:61, col:68> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e596c0 <col:68> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e596a8 <col:68> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e59670 <col:68> 'int' lvalue ParmVar 0x1c455e59338 'V2' 'int'
| |-FunctionDecl 0x1c455e59980 <line:73:3, col:78> line:187:38 constexpr atan2 'float2 (int2, int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e597a8 <line:73:23, col:28> col:28 used V1 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455e59828 <col:32, col:37> col:37 used V2 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e59ca0 <col:41, col:78>
| |   `-ReturnStmt 0x1c455e59c90 <col:43, col:75>
| |     `-CallExpr 0x1c455e59c58 <line:187:38, line:73:75> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e59c40 <line:187:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e59c20 <col:38> '<builtin fn type>' Function 0x1c455d6c220 'atan2' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455e59b70 <line:73:53, col:61> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e59b58 <col:61> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e59b40 <col:61> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e59b10 <col:61> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e597a8 'V1' 'int2':'vector<int, 2>'
| |       `-CStyleCastExpr 0x1c455e59bf8 <col:65, col:73> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e59be0 <col:73> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e59bc8 <col:73> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e59b98 <col:73> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e59828 'V2' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e53aa0 <line:74:3, col:78> line:187:38 constexpr atan2 'float3 (int3, int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e59cc8 <line:74:23, col:28> col:28 used V1 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455e59d48 <col:32, col:37> col:37 used V2 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e53dc8 <col:41, col:78>
| |   `-ReturnStmt 0x1c455e53db8 <col:43, col:75>
| |     `-CallExpr 0x1c455e53d80 <line:187:38, line:74:75> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e53d68 <line:187:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e53d48 <col:38> '<builtin fn type>' Function 0x1c455d6fa00 'atan2' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455e53c98 <line:74:53, col:61> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e53c80 <col:61> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e53c68 <col:61> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e53c38 <col:61> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e59cc8 'V1' 'int3':'vector<int, 3>'
| |       `-CStyleCastExpr 0x1c455e53d20 <col:65, col:73> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e53d08 <col:73> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e53cf0 <col:73> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e53cc0 <col:73> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e59d48 'V2' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e53fc0 <line:75:3, col:78> line:187:38 constexpr atan2 'float4 (int4, int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e53df0 <line:75:23, col:28> col:28 used V1 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455e53e70 <col:32, col:37> col:37 used V2 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e542f0 <col:41, col:78>
| |   `-ReturnStmt 0x1c455e542e0 <col:43, col:75>
| |     `-CallExpr 0x1c455e542a8 <line:187:38, line:75:75> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e54290 <line:187:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e54270 <col:38> '<builtin fn type>' Function 0x1c455d6fda0 'atan2' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455e541c0 <line:75:53, col:61> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e541a8 <col:61> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e54190 <col:61> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e54160 <col:61> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e53df0 'V1' 'int4':'vector<int, 4>'
| |       `-CStyleCastExpr 0x1c455e54248 <col:65, col:73> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e54230 <col:73> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e54218 <col:73> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e541e8 <col:73> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e53e70 'V2' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e544f8 <line:76:3, col:75> line:187:38 constexpr atan2 'float (uint, uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e54318 <line:76:22, col:27> col:27 used V1 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455e54398 <col:31, col:36> col:36 used V2 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e54840 <col:40, col:75>
| |   `-ReturnStmt 0x1c455e54830 <col:42, col:72>
| |     `-CallExpr 0x1c455e547f8 <line:187:38, line:76:72> 'float'
| |       |-ImplicitCastExpr 0x1c455e547e0 <line:187:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e547c0 <col:38> '<builtin fn type>' Function 0x1c455d6be88 'atan2' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455e54708 <line:76:52, col:59> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e546f0 <col:59> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e546d8 <col:59> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e546a0 <col:59> 'uint':'unsigned int' lvalue ParmVar 0x1c455e54318 'V1' 'uint':'unsigned int'
| |       `-CStyleCastExpr 0x1c455e54798 <col:63, col:70> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e54780 <col:70> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e54768 <col:70> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e54730 <col:70> 'uint':'unsigned int' lvalue ParmVar 0x1c455e54398 'V2' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e54a40 <line:77:3, line:79:3> line:187:38 constexpr atan2 'float2 (uint2, uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e54868 <line:77:23, col:29> col:29 used V1 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455e548e8 <col:33, col:39> col:39 used V2 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e54d80 <col:43, line:79:3>
| |   `-ReturnStmt 0x1c455e54d70 <line:78:5, col:37>
| |     `-CallExpr 0x1c455e54d38 <line:187:38, line:78:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e54d20 <line:187:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e54d00 <col:38> '<builtin fn type>' Function 0x1c455d6c220 'atan2' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455e54c50 <line:78:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e54c38 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e54c20 <col:23> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e54bf0 <col:23> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e54868 'V1' 'uint2':'vector<uint, 2>'
| |       `-CStyleCastExpr 0x1c455e54cd8 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e54cc0 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e54ca8 <col:35> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e54c78 <col:35> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e548e8 'V2' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e54f80 <line:80:3, line:82:3> line:187:38 constexpr atan2 'float3 (uint3, uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e54da8 <line:80:23, col:29> col:29 used V1 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455e54e28 <col:33, col:39> col:39 used V2 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e552c8 <col:43, line:82:3>
| |   `-ReturnStmt 0x1c455e552b8 <line:81:5, col:37>
| |     `-CallExpr 0x1c455e55280 <line:187:38, line:81:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e55268 <line:187:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e55248 <col:38> '<builtin fn type>' Function 0x1c455d6fa00 'atan2' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455e55198 <line:81:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e55180 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e55168 <col:23> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e55138 <col:23> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e54da8 'V1' 'uint3':'vector<uint, 3>'
| |       `-CStyleCastExpr 0x1c455e55220 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e55208 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e551f0 <col:35> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e551c0 <col:35> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e54e28 'V2' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e554c0 <line:83:3, line:85:3> line:187:38 constexpr atan2 'float4 (uint4, uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e552f0 <line:83:23, col:29> col:29 used V1 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455e55370 <col:33, col:39> col:39 used V2 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e55810 <col:43, line:85:3>
| |   `-ReturnStmt 0x1c455e55800 <line:84:5, col:37>
| |     `-CallExpr 0x1c455e557c8 <line:187:38, line:84:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e557b0 <line:187:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e55790 <col:38> '<builtin fn type>' Function 0x1c455d6fda0 'atan2' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455e556e0 <line:84:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e556c8 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e556b0 <col:23> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e55680 <col:23> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e552f0 'V1' 'uint4':'vector<uint, 4>'
| |       `-CStyleCastExpr 0x1c455e55768 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e55750 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e55738 <col:35> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e55708 <col:35> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e55370 'V2' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e55c80 <line:86:3, line:88:3> line:187:38 constexpr atan2 'float (int64_t, int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e55838 <line:86:22, col:30> col:30 used V1 'int64_t':'long'
| | |-ParmVarDecl 0x1c455e558b8 <col:34, col:42> col:42 used V2 'int64_t':'long'
| | `-CompoundStmt 0x1c455e55fe8 <col:46, line:88:3>
| |   `-ReturnStmt 0x1c455e55fd8 <line:87:5, col:35>
| |     `-CallExpr 0x1c455e55fa0 <line:187:38, line:87:35> 'float'
| |       |-ImplicitCastExpr 0x1c455e55f88 <line:187:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e55f68 <col:38> '<builtin fn type>' Function 0x1c455d6be88 'atan2' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455e55eb0 <line:87:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e55e98 <col:22> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e55e80 <col:22> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e55e48 <col:22> 'int64_t':'long' lvalue ParmVar 0x1c455e55838 'V1' 'int64_t':'long'
| |       `-CStyleCastExpr 0x1c455e55f40 <col:26, col:33> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e55f28 <col:33> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e55f10 <col:33> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e55ed8 <col:33> 'int64_t':'long' lvalue ParmVar 0x1c455e558b8 'V2' 'int64_t':'long'
| |-FunctionDecl 0x1c455e561e0 <line:89:3, line:91:3> line:187:38 constexpr atan2 'float2 (int64_t2, int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e56010 <line:89:23, col:32> col:32 used V1 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455e56090 <col:36, col:45> col:45 used V2 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e56540 <col:49, line:91:3>
| |   `-ReturnStmt 0x1c455e56530 <line:90:5, col:37>
| |     `-CallExpr 0x1c455e564f8 <line:187:38, line:90:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e564e0 <line:187:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e564c0 <col:38> '<builtin fn type>' Function 0x1c455d6c220 'atan2' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455e56410 <line:90:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e563f8 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e563e0 <col:23> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e563b0 <col:23> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e56010 'V1' 'int64_t2':'vector<int64_t, 2>'
| |       `-CStyleCastExpr 0x1c455e56498 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e56480 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e56468 <col:35> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e56438 <col:35> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e56090 'V2' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e56740 <line:92:3, line:94:3> line:187:38 constexpr atan2 'float3 (int64_t3, int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e56568 <line:92:23, col:32> col:32 used V1 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455e565e8 <col:36, col:45> col:45 used V2 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e56aa8 <col:49, line:94:3>
| |   `-ReturnStmt 0x1c455e56a98 <line:93:5, col:37>
| |     `-CallExpr 0x1c455e56a60 <line:187:38, line:93:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e56a48 <line:187:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e56a28 <col:38> '<builtin fn type>' Function 0x1c455d6fa00 'atan2' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455e56978 <line:93:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e56960 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e56948 <col:23> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e56918 <col:23> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e56568 'V1' 'int64_t3':'vector<int64_t, 3>'
| |       `-CStyleCastExpr 0x1c455e56a00 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e569e8 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e569d0 <col:35> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e569a0 <col:35> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e565e8 'V2' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e56ca0 <line:95:3, line:97:3> line:187:38 constexpr atan2 'float4 (int64_t4, int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e56ad0 <line:95:23, col:32> col:32 used V1 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455e56b50 <col:36, col:45> col:45 used V2 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e57010 <col:49, line:97:3>
| |   `-ReturnStmt 0x1c455e57000 <line:96:5, col:37>
| |     `-CallExpr 0x1c455e56fc8 <line:187:38, line:96:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e56fb0 <line:187:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e56f90 <col:38> '<builtin fn type>' Function 0x1c455d6fda0 'atan2' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455e56ee0 <line:96:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e56ec8 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e56eb0 <col:23> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e56e80 <col:23> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e56ad0 'V1' 'int64_t4':'vector<int64_t, 4>'
| |       `-CStyleCastExpr 0x1c455e56f68 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e56f50 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e56f38 <col:35> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e56f08 <col:35> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e56b50 'V2' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e57218 <line:98:3, line:100:3> line:187:38 constexpr atan2 'float (uint64_t, uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e57038 <line:98:22, col:31> col:31 used V1 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455e570b8 <col:35, col:44> col:44 used V2 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e575a0 <col:48, line:100:3>
| |   `-ReturnStmt 0x1c455e57590 <line:99:5, col:35>
| |     `-CallExpr 0x1c455e57558 <line:187:38, line:99:35> 'float'
| |       |-ImplicitCastExpr 0x1c455e57540 <line:187:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e57520 <col:38> '<builtin fn type>' Function 0x1c455d6be88 'atan2' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455e57468 <line:99:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e57450 <col:22> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e57438 <col:22> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e57400 <col:22> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e57038 'V1' 'uint64_t':'unsigned long'
| |       `-CStyleCastExpr 0x1c455e574f8 <col:26, col:33> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e574e0 <col:33> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e574c8 <col:33> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e57490 <col:33> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e570b8 'V2' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e577a0 <line:101:3, line:103:3> line:187:38 constexpr atan2 'float2 (uint64_t2, uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e575c8 <line:101:23, col:33> col:33 used V1 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455e57648 <col:37, col:47> col:47 used V2 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e57b20 <col:51, line:103:3>
| |   `-ReturnStmt 0x1c455e57b10 <line:102:5, col:37>
| |     `-CallExpr 0x1c455e57ad8 <line:187:38, line:102:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e57ac0 <line:187:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e57aa0 <col:38> '<builtin fn type>' Function 0x1c455d6c220 'atan2' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455e579f0 <line:102:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e579d8 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e579c0 <col:23> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e57990 <col:23> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e575c8 'V1' 'uint64_t2':'vector<uint64_t, 2>'
| |       `-CStyleCastExpr 0x1c455e57a78 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e57a60 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e57a48 <col:35> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e57a18 <col:35> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e57648 'V2' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e5c360 <line:104:3, line:106:3> line:187:38 constexpr atan2 'float3 (uint64_t3, uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e57b48 <line:104:23, col:33> col:33 used V1 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455e57bc8 <col:37, col:47> col:47 used V2 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e5c6e8 <col:51, line:106:3>
| |   `-ReturnStmt 0x1c455e5c6d8 <line:105:5, col:37>
| |     `-CallExpr 0x1c455e5c6a0 <line:187:38, line:105:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e5c688 <line:187:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5c668 <col:38> '<builtin fn type>' Function 0x1c455d6fa00 'atan2' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455e5c5b8 <line:105:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e5c5a0 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e5c588 <col:23> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e5c558 <col:23> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e57b48 'V1' 'uint64_t3':'vector<uint64_t, 3>'
| |       `-CStyleCastExpr 0x1c455e5c640 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5c628 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5c610 <col:35> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5c5e0 <col:35> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e57bc8 'V2' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e5c8e0 <line:107:3, line:109:3> line:187:38 constexpr atan2 'float4 (uint64_t4, uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e5c710 <line:107:23, col:33> col:33 used V1 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455e5c790 <col:37, col:47> col:47 used V2 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e5cc70 <col:51, line:109:3>
| |   `-ReturnStmt 0x1c455e5cc60 <line:108:5, col:37>
| |     `-CallExpr 0x1c455e5cc28 <line:187:38, line:108:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e5cc10 <line:187:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5cbf0 <col:38> '<builtin fn type>' Function 0x1c455d6fda0 'atan2' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455e5cb40 <line:108:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e5cb28 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e5cb10 <col:23> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e5cae0 <col:23> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e5c710 'V1' 'uint64_t4':'vector<uint64_t, 4>'
| |       `-CStyleCastExpr 0x1c455e5cbc8 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5cbb0 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5cb98 <col:35> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5cb68 <col:35> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e5c790 'V2' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455e5cd58 <line:20:3, col:55> line:193:36 constexpr ceil 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e5cca0 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e5cfc0 <col:32, col:55>
| |   `-ReturnStmt 0x1c455e5cfb0 <col:34, col:52>
| |     `-CallExpr 0x1c455e5cf80 <line:193:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455e5cf68 <line:193:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5cf48 <col:36> '<builtin fn type>' Function 0x1c455d6c6d0 'ceil' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e5cf20 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5cf08 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5cef0 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5ceb8 <col:51> 'double' lvalue ParmVar 0x1c455e5cca0 'V' 'double'
| |-FunctionDecl 0x1c455e5d098 <line:21:3, col:58> line:193:36 constexpr ceil 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e5cfe8 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e5d300 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e5d2f0 <col:36, col:55>
| |     `-CallExpr 0x1c455e5d2c0 <line:193:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e5d2a8 <line:193:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5d288 <col:36> '<builtin fn type>' Function 0x1c455d6c940 'ceil' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e5d260 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5d248 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5d230 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5d200 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e5cfe8 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e5d3d8 <line:22:3, col:58> line:193:36 constexpr ceil 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e5d328 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e5d648 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e5d638 <col:36, col:55>
| |     `-CallExpr 0x1c455e5d608 <line:193:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e5d5f0 <line:193:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5d5d0 <col:36> '<builtin fn type>' Function 0x1c455d6cbb0 'ceil' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e5d5a8 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5d590 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5d578 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5d548 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e5d328 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e5d720 <line:23:3, col:58> line:193:36 constexpr ceil 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e5d670 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e5d998 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e5d988 <col:36, col:55>
| |     `-CallExpr 0x1c455e5d958 <line:193:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e5d940 <line:193:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5d920 <col:36> '<builtin fn type>' Function 0x1c455d6ce20 'ceil' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e5d8f8 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5d8e0 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5d8c8 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5d898 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e5d670 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e5da80 <line:54:3, col:52> line:194:37 constexpr ceil 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455e5d9c8 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455e5dd08 <col:29, col:52>
| |   `-ReturnStmt 0x1c455e5dcf8 <col:31, col:49>
| |     `-CallExpr 0x1c455e5dcc8 <line:194:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455e5dcb0 <line:194:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5dc90 <col:37> '<builtin fn type>' Function 0x1c455d6c6d0 'ceil' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e5dc68 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5dc50 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5dc38 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5dc00 <col:48> 'int' lvalue ParmVar 0x1c455e5d9c8 'V' 'int'
| |-FunctionDecl 0x1c455e5dde0 <line:55:3, col:55> line:194:37 constexpr ceil 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e5dd30 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e5e068 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e5e058 <col:33, col:52>
| |     `-CallExpr 0x1c455e5e028 <line:194:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e5e010 <line:194:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e5dff0 <col:37> '<builtin fn type>' Function 0x1c455d6c940 'ceil' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e5dfc8 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e5dfb0 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e5df98 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e5df68 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e5dd30 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e5e140 <line:56:3, col:55> line:194:37 constexpr ceil 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e5e090 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e62a98 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e62a88 <col:33, col:52>
| |     `-CallExpr 0x1c455e62a58 <line:194:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e62a40 <line:194:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e62a20 <col:37> '<builtin fn type>' Function 0x1c455d6cbb0 'ceil' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e629f8 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e629e0 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e629c8 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e62998 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e5e090 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e62b70 <line:57:3, col:55> line:194:37 constexpr ceil 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e62ac0 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e62e08 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e62df8 <col:33, col:52>
| |     `-CallExpr 0x1c455e62dc8 <line:194:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e62db0 <line:194:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e62d90 <col:37> '<builtin fn type>' Function 0x1c455d6ce20 'ceil' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e62d68 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e62d50 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e62d38 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e62d08 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e62ac0 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e62ee8 <line:58:3, col:53> line:194:37 constexpr ceil 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e62e30 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e63190 <col:30, col:53>
| |   `-ReturnStmt 0x1c455e63180 <col:32, col:50>
| |     `-CallExpr 0x1c455e63150 <line:194:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455e63138 <line:194:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e63118 <col:37> '<builtin fn type>' Function 0x1c455d6c6d0 'ceil' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e630f0 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e630d8 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e630c0 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e63088 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455e62e30 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e63268 <line:59:3, col:56> line:194:37 constexpr ceil 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e631b8 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e63510 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e63500 <col:34, col:53>
| |     `-CallExpr 0x1c455e634d0 <line:194:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e634b8 <line:194:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e63498 <col:37> '<builtin fn type>' Function 0x1c455d6c940 'ceil' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e63470 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e63458 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e63440 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e63410 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e631b8 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e635e8 <line:60:3, col:56> line:194:37 constexpr ceil 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e63538 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e63898 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e63888 <col:34, col:53>
| |     `-CallExpr 0x1c455e63858 <line:194:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e63840 <line:194:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e63820 <col:37> '<builtin fn type>' Function 0x1c455d6cbb0 'ceil' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e637f8 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e637e0 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e637c8 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e63798 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e63538 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e63970 <line:61:3, col:56> line:194:37 constexpr ceil 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e638c0 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e63c28 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e63c18 <col:34, col:53>
| |     `-CallExpr 0x1c455e63be8 <line:194:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e63bd0 <line:194:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e63bb0 <col:37> '<builtin fn type>' Function 0x1c455d6ce20 'ceil' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e63b88 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e63b70 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e63b58 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e63b28 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e638c0 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e63d08 <line:62:3, col:56> line:194:37 constexpr ceil 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e63c50 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455e63fd0 <col:33, col:56>
| |   `-ReturnStmt 0x1c455e63fc0 <col:35, col:53>
| |     `-CallExpr 0x1c455e63f90 <line:194:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455e63f78 <line:194:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e63f58 <col:37> '<builtin fn type>' Function 0x1c455d6c6d0 'ceil' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e63f30 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e63f18 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e63f00 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e63ec8 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455e63c50 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455e640a8 <line:63:3, col:59> line:194:37 constexpr ceil 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e63ff8 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e64370 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e64360 <col:37, col:56>
| |     `-CallExpr 0x1c455e64330 <line:194:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e64318 <line:194:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e642f8 <col:37> '<builtin fn type>' Function 0x1c455d6c940 'ceil' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e642d0 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e642b8 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e642a0 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e64270 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e63ff8 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e64448 <line:64:3, col:59> line:194:37 constexpr ceil 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e64398 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e64718 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e64708 <col:37, col:56>
| |     `-CallExpr 0x1c455e646d8 <line:194:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e646c0 <line:194:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e646a0 <col:37> '<builtin fn type>' Function 0x1c455d6cbb0 'ceil' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e64678 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e64660 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e64648 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e64618 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e64398 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e647f0 <line:65:3, col:59> line:194:37 constexpr ceil 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e64740 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e64cf0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e64ce0 <col:37, col:56>
| |     `-CallExpr 0x1c455e64cb0 <line:194:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e64c98 <line:194:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e64c78 <col:37> '<builtin fn type>' Function 0x1c455d6ce20 'ceil' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e64c50 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e64c38 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e64c20 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e64bf0 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e64740 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e64dd0 <line:66:3, col:57> line:194:37 constexpr ceil 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e64d18 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e650b8 <col:34, col:57>
| |   `-ReturnStmt 0x1c455e650a8 <col:36, col:54>
| |     `-CallExpr 0x1c455e65078 <line:194:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455e65060 <line:194:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e65040 <col:37> '<builtin fn type>' Function 0x1c455d6c6d0 'ceil' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e65018 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e65000 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e64fe8 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e64fb0 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e64d18 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e65190 <line:67:3, col:60> line:194:37 constexpr ceil 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e650e0 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e65478 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e65468 <col:38, col:57>
| |     `-CallExpr 0x1c455e65438 <line:194:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e65420 <line:194:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e65400 <col:37> '<builtin fn type>' Function 0x1c455d6c940 'ceil' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e653d8 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e653c0 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e653a8 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e65378 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e650e0 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e65550 <line:68:3, col:60> line:194:37 constexpr ceil 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e654a0 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e65840 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e65830 <col:38, col:57>
| |     `-CallExpr 0x1c455e65800 <line:194:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e657e8 <line:194:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e657c8 <col:37> '<builtin fn type>' Function 0x1c455d6cbb0 'ceil' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e657a0 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e65788 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e65770 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e65740 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e654a0 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e65918 <line:69:3, col:60> line:194:37 constexpr ceil 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e65868 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e65c10 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e65c00 <col:38, col:57>
| |     `-CallExpr 0x1c455e65bd0 <line:194:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e65bb8 <line:194:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e65b98 <col:37> '<builtin fn type>' Function 0x1c455d6ce20 'ceil' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e65b70 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e65b58 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e65b40 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e65b10 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e65868 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionTemplateDecl 0x1c455e5e568 <line:200:1, line:204:1> line:202:1 clamp
| | |-TemplateTypeParmDecl 0x1c455e65c28 <line:200:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455e65cc0 <col:23, col:28> col:28 referenced 'uint':'unsigned int' depth 0 index 1 N
| | `-FunctionDecl 0x1c455e5e4c0 <line:201:1, line:204:1> line:202:1 constexpr clamp '__detail::enable_if_t<(N > 1 && N <= 4), vector<T, N>> (vector<T, N>, vector<T, N>, T)' implicit-inline
| |   |-ParmVarDecl 0x1c455e66650 <col:7, col:20> col:20 referenced p0 'vector<T, N>'
| |   |-ParmVarDecl 0x1c455e66890 <col:24, col:37> col:37 referenced p1 'vector<T, N>'
| |   |-ParmVarDecl 0x1c455e66910 <col:41, col:43> col:43 referenced p2 'T'
| |   `-CompoundStmt 0x1c455e5ea38 <col:47, line:204:1>
| |     `-ReturnStmt 0x1c455e5ea28 <line:203:3, col:40>
| |       `-CallExpr 0x1c455e5e9e8 <col:10, col:40> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455e5e668 <col:10> '<overloaded function type>' lvalue (ADL) = 'clamp' 0x1c455e5e568 0x1c455d6d238 0x1c455d71bf0 0x1c455d72050 0x1c455d724b0 0x1c455d728d8 0x1c455d70c70 0x1c455d710d0 0x1c455d71530 0x1c455d71990 0x1c455d75240 0x1c455d756a0 0x1c455d75b00 0x1c455d760b0 0x1c455d76510 0x1c455d76970 0x1c455d76dd0 0x1c455d72f10 0x1c455d73370 0x1c455d737d0 0x1c455d73c30 0x1c455d774a8 0x1c455d77900 0x1c455d77d60 0x1c455d73e90 0x1c455d742b8 0x1c455d74710 0x1c455d74b70 0x1c455d7a680
| |         |-DeclRefExpr 0x1c455e5e790 <col:16> 'vector<T, N>' lvalue ParmVar 0x1c455e66650 'p0' 'vector<T, N>'
| |         |-DeclRefExpr 0x1c455e5e7b0 <col:20> 'vector<T, N>' lvalue ParmVar 0x1c455e66890 'p1' 'vector<T, N>'
| |         `-CStyleCastExpr 0x1c455e5e9c0 <col:24, col:38> 'vector<T, N>' <Dependent>
| |           `-DeclRefExpr 0x1c455e5e978 <col:38> 'T' lvalue ParmVar 0x1c455e66910 'p2' 'T'
| |-FunctionTemplateDecl 0x1c455e5f890 <line:206:1, line:210:1> line:208:1 clamp
| | |-TemplateTypeParmDecl 0x1c455e5ea50 <line:206:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455e5eae0 <col:23, col:28> col:28 referenced 'uint':'unsigned int' depth 0 index 1 N
| | `-FunctionDecl 0x1c455e5f7e8 <line:207:1, line:210:1> line:208:1 constexpr clamp '__detail::enable_if_t<(N > 1 && N <= 4), vector<T, N>> (vector<T, N>, T, vector<T, N>)' implicit-inline
| |   |-ParmVarDecl 0x1c455e5f370 <col:7, col:20> col:20 referenced p0 'vector<T, N>'
| |   |-ParmVarDecl 0x1c455e5f3f0 <col:24, col:26> col:26 referenced p1 'T'
| |   |-ParmVarDecl 0x1c455e5f630 <col:30, col:43> col:43 referenced p2 'vector<T, N>'
| |   `-CompoundStmt 0x1c455e5fd68 <col:47, line:210:1>
| |     `-ReturnStmt 0x1c455e5fd58 <line:209:3, col:40>
| |       `-CallExpr 0x1c455e5fd18 <col:10, col:40> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455e5f990 <col:10> '<overloaded function type>' lvalue (ADL) = 'clamp' 0x1c455e5f890 0x1c455e5e568 0x1c455d6d238 0x1c455d71bf0 0x1c455d72050 0x1c455d724b0 0x1c455d728d8 0x1c455d70c70 0x1c455d710d0 0x1c455d71530 0x1c455d71990 0x1c455d75240 0x1c455d756a0 0x1c455d75b00 0x1c455d760b0 0x1c455d76510 0x1c455d76970 0x1c455d76dd0 0x1c455d72f10 0x1c455d73370 0x1c455d737d0 0x1c455d73c30 0x1c455d774a8 0x1c455d77900 0x1c455d77d60 0x1c455d73e90 0x1c455d742b8 0x1c455d74710 0x1c455d74b70 0x1c455d7a680
| |         |-DeclRefExpr 0x1c455e5fac0 <col:16> 'vector<T, N>' lvalue ParmVar 0x1c455e5f370 'p0' 'vector<T, N>'
| |         |-CStyleCastExpr 0x1c455e5fcd0 <col:20, col:34> 'vector<T, N>' <Dependent>
| |         | `-DeclRefExpr 0x1c455e5fc88 <col:34> 'T' lvalue ParmVar 0x1c455e5f3f0 'p1' 'T'
| |         `-DeclRefExpr 0x1c455e5fcf8 <col:38> 'vector<T, N>' lvalue ParmVar 0x1c455e5f630 'p2' 'vector<T, N>'
| |-FunctionTemplateDecl 0x1c455e67270 <line:212:1, line:216:1> line:214:1 clamp
| | |-TemplateTypeParmDecl 0x1c455e5fd80 <line:212:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455e5fe10 <col:23, col:28> col:28 referenced 'uint':'unsigned int' depth 0 index 1 N
| | `-FunctionDecl 0x1c455e671c8 <line:213:1, line:216:1> line:214:1 constexpr clamp '__detail::enable_if_t<(N > 1 && N <= 4), vector<T, N>> (vector<T, N>, T, T)' implicit-inline
| |   |-ParmVarDecl 0x1c455e66f10 <col:7, col:20> col:20 referenced p0 'vector<T, N>'
| |   |-ParmVarDecl 0x1c455e66f90 <col:24, col:26> col:26 referenced p1 'T'
| |   |-ParmVarDecl 0x1c455e67010 <col:30, col:32> col:32 referenced p2 'T'
| |   `-CompoundStmt 0x1c455e67958 <col:36, line:216:1>
| |     `-ReturnStmt 0x1c455e67948 <line:215:3, col:54>
| |       `-CallExpr 0x1c455e67908 <col:10, col:54> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455e67370 <col:10> '<overloaded function type>' lvalue (ADL) = 'clamp' 0x1c455e67270 0x1c455e5f890 0x1c455e5e568 0x1c455d6d238 0x1c455d71bf0 0x1c455d72050 0x1c455d724b0 0x1c455d728d8 0x1c455d70c70 0x1c455d710d0 0x1c455d71530 0x1c455d71990 0x1c455d75240 0x1c455d756a0 0x1c455d75b00 0x1c455d760b0 0x1c455d76510 0x1c455d76970 0x1c455d76dd0 0x1c455d72f10 0x1c455d73370 0x1c455d737d0 0x1c455d73c30 0x1c455d774a8 0x1c455d77900 0x1c455d77d60 0x1c455d73e90 0x1c455d742b8 0x1c455d74710 0x1c455d74b70 0x1c455d7a680
| |         |-DeclRefExpr 0x1c455e674a8 <col:16> 'vector<T, N>' lvalue ParmVar 0x1c455e66f10 'p0' 'vector<T, N>'
| |         |-CStyleCastExpr 0x1c455e676c0 <col:20, col:34> 'vector<T, N>' <Dependent>
| |         | `-DeclRefExpr 0x1c455e67678 <col:34> 'T' lvalue ParmVar 0x1c455e66f90 'p1' 'T'
| |         `-CStyleCastExpr 0x1c455e678e0 <col:38, col:52> 'vector<T, N>' <Dependent>
| |           `-DeclRefExpr 0x1c455e67898 <col:52> 'T' lvalue ParmVar 0x1c455e67010 'p2' 'T'
| |-FunctionDecl 0x1c455e67a40 <line:20:3, col:55> line:222:36 constexpr cos 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e67988 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e67ca8 <col:32, col:55>
| |   `-ReturnStmt 0x1c455e67c98 <col:34, col:52>
| |     `-CallExpr 0x1c455e67c68 <line:222:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455e67c50 <line:222:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e67c30 <col:36> '<builtin fn type>' Function 0x1c455d79d50 'cos' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e67c08 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e67bf0 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e67bd8 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e67ba0 <col:51> 'double' lvalue ParmVar 0x1c455e67988 'V' 'double'
| |-FunctionDecl 0x1c455e67d80 <line:21:3, col:58> line:222:36 constexpr cos 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e67cd0 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e67fe8 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e67fd8 <col:36, col:55>
| |     `-CallExpr 0x1c455e67fa8 <line:222:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e67f90 <line:222:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e67f70 <col:36> '<builtin fn type>' Function 0x1c455d79fc0 'cos' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e67f48 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e67f30 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e67f18 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e67ee8 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e67cd0 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e680c0 <line:22:3, col:58> line:222:36 constexpr cos 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e68010 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e68330 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e68320 <col:36, col:55>
| |     `-CallExpr 0x1c455e682f0 <line:222:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e682d8 <line:222:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e682b8 <col:36> '<builtin fn type>' Function 0x1c455d7a230 'cos' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e68290 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e68278 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e68260 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e68230 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e68010 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e68408 <line:23:3, col:58> line:222:36 constexpr cos 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e68358 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e68680 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e68670 <col:36, col:55>
| |     `-CallExpr 0x1c455e68640 <line:222:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e68628 <line:222:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e68608 <col:36> '<builtin fn type>' Function 0x1c455d7b6c0 'cos' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e685e0 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e685c8 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e685b0 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e68580 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e68358 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e68768 <line:54:3, col:52> line:223:37 constexpr cos 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455e686b0 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455e689f0 <col:29, col:52>
| |   `-ReturnStmt 0x1c455e689e0 <col:31, col:49>
| |     `-CallExpr 0x1c455e689b0 <line:223:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455e68998 <line:223:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e68978 <col:37> '<builtin fn type>' Function 0x1c455d79d50 'cos' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e68950 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e68938 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e68920 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e688e8 <col:48> 'int' lvalue ParmVar 0x1c455e686b0 'V' 'int'
| |-FunctionDecl 0x1c455e68ac8 <line:55:3, col:55> line:223:37 constexpr cos 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e68a18 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e60728 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e60718 <col:33, col:52>
| |     `-CallExpr 0x1c455e606e8 <line:223:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e606d0 <line:223:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e68cd8 <col:37> '<builtin fn type>' Function 0x1c455d79fc0 'cos' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e68cb0 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e68c98 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e68c80 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e68c50 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e68a18 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e60800 <line:56:3, col:55> line:223:37 constexpr cos 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e60750 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e60a90 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e60a80 <col:33, col:52>
| |     `-CallExpr 0x1c455e60a50 <line:223:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e60a38 <line:223:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e60a18 <col:37> '<builtin fn type>' Function 0x1c455d7a230 'cos' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e609f0 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e609d8 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e609c0 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e60990 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e60750 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e60b68 <line:57:3, col:55> line:223:37 constexpr cos 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e60ab8 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e60e00 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e60df0 <col:33, col:52>
| |     `-CallExpr 0x1c455e60dc0 <line:223:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e60da8 <line:223:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e60d88 <col:37> '<builtin fn type>' Function 0x1c455d7b6c0 'cos' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e60d60 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e60d48 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e60d30 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e60d00 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e60ab8 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e60ee0 <line:58:3, col:53> line:223:37 constexpr cos 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e60e28 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e61188 <col:30, col:53>
| |   `-ReturnStmt 0x1c455e61178 <col:32, col:50>
| |     `-CallExpr 0x1c455e61148 <line:223:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455e61130 <line:223:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e61110 <col:37> '<builtin fn type>' Function 0x1c455d79d50 'cos' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e610e8 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e610d0 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e610b8 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e61080 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455e60e28 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e61260 <line:59:3, col:56> line:223:37 constexpr cos 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e611b0 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e61508 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e614f8 <col:34, col:53>
| |     `-CallExpr 0x1c455e614c8 <line:223:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e614b0 <line:223:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e61490 <col:37> '<builtin fn type>' Function 0x1c455d79fc0 'cos' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e61468 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e61450 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e61438 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e61408 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e611b0 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e615e0 <line:60:3, col:56> line:223:37 constexpr cos 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e61530 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e61890 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e61880 <col:34, col:53>
| |     `-CallExpr 0x1c455e61850 <line:223:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e61838 <line:223:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e61818 <col:37> '<builtin fn type>' Function 0x1c455d7a230 'cos' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e617f0 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e617d8 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e617c0 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e61790 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e61530 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e61968 <line:61:3, col:56> line:223:37 constexpr cos 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e618b8 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e61c20 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e61c10 <col:34, col:53>
| |     `-CallExpr 0x1c455e61be0 <line:223:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e61bc8 <line:223:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e61ba8 <col:37> '<builtin fn type>' Function 0x1c455d7b6c0 'cos' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e61b80 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e61b68 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e61b50 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e61b20 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e618b8 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e61d00 <line:62:3, col:56> line:223:37 constexpr cos 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e61c48 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455e61fc8 <col:33, col:56>
| |   `-ReturnStmt 0x1c455e61fb8 <col:35, col:53>
| |     `-CallExpr 0x1c455e61f88 <line:223:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455e61f70 <line:223:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e61f50 <col:37> '<builtin fn type>' Function 0x1c455d79d50 'cos' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e61f28 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e61f10 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e61ef8 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e61ec0 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455e61c48 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455e620a0 <line:63:3, col:59> line:223:37 constexpr cos 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e61ff0 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e62368 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e62358 <col:37, col:56>
| |     `-CallExpr 0x1c455e62328 <line:223:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e62310 <line:223:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e622f0 <col:37> '<builtin fn type>' Function 0x1c455d79fc0 'cos' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e622c8 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e622b0 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e62298 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e62268 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e61ff0 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e62440 <line:64:3, col:59> line:223:37 constexpr cos 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e62390 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e6d370 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e6d360 <col:37, col:56>
| |     `-CallExpr 0x1c455e6d330 <line:223:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e626b8 <line:223:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e62698 <col:37> '<builtin fn type>' Function 0x1c455d7a230 'cos' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e62670 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e62658 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e62640 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e62610 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e62390 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e6d448 <line:65:3, col:59> line:223:37 constexpr cos 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e6d398 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e6d720 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e6d710 <col:37, col:56>
| |     `-CallExpr 0x1c455e6d6e0 <line:223:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e6d6c8 <line:223:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6d6a8 <col:37> '<builtin fn type>' Function 0x1c455d7b6c0 'cos' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e6d680 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6d668 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6d650 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6d620 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e6d398 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e6d800 <line:66:3, col:57> line:223:37 constexpr cos 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e6d748 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e6dae8 <col:34, col:57>
| |   `-ReturnStmt 0x1c455e6dad8 <col:36, col:54>
| |     `-CallExpr 0x1c455e6daa8 <line:223:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455e6da90 <line:223:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6da70 <col:37> '<builtin fn type>' Function 0x1c455d79d50 'cos' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e6da48 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6da30 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6da18 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6d9e0 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e6d748 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e6dbc0 <line:67:3, col:60> line:223:37 constexpr cos 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e6db10 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e6dea8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e6de98 <col:38, col:57>
| |     `-CallExpr 0x1c455e6de68 <line:223:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e6de50 <line:223:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6de30 <col:37> '<builtin fn type>' Function 0x1c455d79fc0 'cos' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e6de08 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6ddf0 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6ddd8 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6dda8 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e6db10 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e6df80 <line:68:3, col:60> line:223:37 constexpr cos 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e6ded0 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e6e270 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e6e260 <col:38, col:57>
| |     `-CallExpr 0x1c455e6e230 <line:223:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e6e218 <line:223:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6e1f8 <col:37> '<builtin fn type>' Function 0x1c455d7a230 'cos' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e6e1d0 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6e1b8 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6e1a0 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6e170 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e6ded0 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e6e348 <line:69:3, col:60> line:223:37 constexpr cos 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e6e298 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e6e640 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e6e630 <col:38, col:57>
| |     `-CallExpr 0x1c455e6e600 <line:223:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e6e5e8 <line:223:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6e5c8 <col:37> '<builtin fn type>' Function 0x1c455d7b6c0 'cos' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e6e5a0 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6e588 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6e570 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6e540 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e6e298 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455e6e728 <line:20:3, col:55> line:229:36 constexpr cosh 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e6e670 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e6e990 <col:32, col:55>
| |   `-ReturnStmt 0x1c455e6e980 <col:34, col:52>
| |     `-CallExpr 0x1c455e6e950 <line:229:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455e6e938 <line:229:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6e918 <col:36> '<builtin fn type>' Function 0x1c455d7c300 'cosh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e6e8f0 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6e8d8 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6e8c0 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6e888 <col:51> 'double' lvalue ParmVar 0x1c455e6e670 'V' 'double'
| |-FunctionDecl 0x1c455e6ea68 <line:21:3, col:58> line:229:36 constexpr cosh 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e6e9b8 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e6ecd0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e6ecc0 <col:36, col:55>
| |     `-CallExpr 0x1c455e6ec90 <line:229:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e6ec78 <line:229:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6ec58 <col:36> '<builtin fn type>' Function 0x1c455d69370 'cosh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e6ec30 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6ec18 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6ec00 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6ebd0 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e6e9b8 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e6eda8 <line:22:3, col:58> line:229:36 constexpr cosh 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e6ecf8 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e6f018 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e6f008 <col:36, col:55>
| |     `-CallExpr 0x1c455e6efd8 <line:229:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e6efc0 <line:229:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6efa0 <col:36> '<builtin fn type>' Function 0x1c455d695e0 'cosh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e6ef78 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6ef60 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6ef48 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6ef18 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e6ecf8 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e6f0f0 <line:23:3, col:58> line:229:36 constexpr cosh 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e6f040 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e6b160 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e6b150 <col:36, col:55>
| |     `-CallExpr 0x1c455e6b120 <line:229:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e6f310 <line:229:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6f2f0 <col:36> '<builtin fn type>' Function 0x1c455d69850 'cosh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e6f2c8 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6f2b0 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6f298 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6f268 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e6f040 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e6b248 <line:54:3, col:52> line:230:37 constexpr cosh 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455e6b190 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455e6b4d0 <col:29, col:52>
| |   `-ReturnStmt 0x1c455e6b4c0 <col:31, col:49>
| |     `-CallExpr 0x1c455e6b490 <line:230:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455e6b478 <line:230:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6b458 <col:37> '<builtin fn type>' Function 0x1c455d7c300 'cosh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e6b430 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6b418 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6b400 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6b3c8 <col:48> 'int' lvalue ParmVar 0x1c455e6b190 'V' 'int'
| |-FunctionDecl 0x1c455e6b5a8 <line:55:3, col:55> line:230:37 constexpr cosh 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e6b4f8 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e6b830 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e6b820 <col:33, col:52>
| |     `-CallExpr 0x1c455e6b7f0 <line:230:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e6b7d8 <line:230:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6b7b8 <col:37> '<builtin fn type>' Function 0x1c455d69370 'cosh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e6b790 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6b778 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6b760 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6b730 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e6b4f8 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e6b908 <line:56:3, col:55> line:230:37 constexpr cosh 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e6b858 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e6bb98 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e6bb88 <col:33, col:52>
| |     `-CallExpr 0x1c455e6bb58 <line:230:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e6bb40 <line:230:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6bb20 <col:37> '<builtin fn type>' Function 0x1c455d695e0 'cosh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e6baf8 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6bae0 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6bac8 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6ba98 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e6b858 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e6bc70 <line:57:3, col:55> line:230:37 constexpr cosh 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e6bbc0 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e6bf08 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e6bef8 <col:33, col:52>
| |     `-CallExpr 0x1c455e6bec8 <line:230:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e6beb0 <line:230:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6be90 <col:37> '<builtin fn type>' Function 0x1c455d69850 'cosh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e6be68 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6be50 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6be38 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6be08 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e6bbc0 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e6bfe8 <line:58:3, col:53> line:230:37 constexpr cosh 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e6bf30 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e6c290 <col:30, col:53>
| |   `-ReturnStmt 0x1c455e6c280 <col:32, col:50>
| |     `-CallExpr 0x1c455e6c250 <line:230:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455e6c238 <line:230:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6c218 <col:37> '<builtin fn type>' Function 0x1c455d7c300 'cosh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e6c1f0 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6c1d8 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6c1c0 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6c188 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455e6bf30 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e6c368 <line:59:3, col:56> line:230:37 constexpr cosh 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e6c2b8 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e6c610 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e6c600 <col:34, col:53>
| |     `-CallExpr 0x1c455e6c5d0 <line:230:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e6c5b8 <line:230:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6c598 <col:37> '<builtin fn type>' Function 0x1c455d69370 'cosh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e6c570 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6c558 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6c540 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6c510 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e6c2b8 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e6c6e8 <line:60:3, col:56> line:230:37 constexpr cosh 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e6c638 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e6c998 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e6c988 <col:34, col:53>
| |     `-CallExpr 0x1c455e6c958 <line:230:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e6c940 <line:230:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6c920 <col:37> '<builtin fn type>' Function 0x1c455d695e0 'cosh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e6c8f8 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6c8e0 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6c8c8 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6c898 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e6c638 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e6ca70 <line:61:3, col:56> line:230:37 constexpr cosh 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e6c9c0 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e6cd28 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e6cd18 <col:34, col:53>
| |     `-CallExpr 0x1c455e6cce8 <line:230:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e6ccd0 <line:230:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6ccb0 <col:37> '<builtin fn type>' Function 0x1c455d69850 'cosh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e6cc88 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6cc70 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6cc58 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6cc28 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e6c9c0 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e6ce08 <line:62:3, col:56> line:230:37 constexpr cosh 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e6cd50 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455e6d0d0 <col:33, col:56>
| |   `-ReturnStmt 0x1c455e6d0c0 <col:35, col:53>
| |     `-CallExpr 0x1c455e6d090 <line:230:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455e6d078 <line:230:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6d058 <col:37> '<builtin fn type>' Function 0x1c455d7c300 'cosh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e6d030 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6d018 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6d000 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6cfc8 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455e6cd50 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455e6f5f0 <line:63:3, col:59> line:230:37 constexpr cosh 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e6f540 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e6f8b8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e6f8a8 <col:37, col:56>
| |     `-CallExpr 0x1c455e6f878 <line:230:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e6f860 <line:230:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6f840 <col:37> '<builtin fn type>' Function 0x1c455d69370 'cosh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e6f818 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6f800 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6f7e8 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6f7b8 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e6f540 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e6f990 <line:64:3, col:59> line:230:37 constexpr cosh 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e6f8e0 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e6fc60 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e6fc50 <col:37, col:56>
| |     `-CallExpr 0x1c455e6fc20 <line:230:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e6fc08 <line:230:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6fbe8 <col:37> '<builtin fn type>' Function 0x1c455d695e0 'cosh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e6fbc0 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6fba8 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6fb90 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6fb60 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e6f8e0 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e6fd38 <line:65:3, col:59> line:230:37 constexpr cosh 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e6fc88 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e70010 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e70000 <col:37, col:56>
| |     `-CallExpr 0x1c455e6ffd0 <line:230:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e6ffb8 <line:230:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6ff98 <col:37> '<builtin fn type>' Function 0x1c455d69850 'cosh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e6ff70 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6ff58 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6ff40 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6ff10 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e6fc88 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e700f0 <line:66:3, col:57> line:230:37 constexpr cosh 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e70038 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e703d8 <col:34, col:57>
| |   `-ReturnStmt 0x1c455e703c8 <col:36, col:54>
| |     `-CallExpr 0x1c455e70398 <line:230:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455e70380 <line:230:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e70360 <col:37> '<builtin fn type>' Function 0x1c455d7c300 'cosh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e70338 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e70320 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e70308 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e702d0 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e70038 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e704b0 <line:67:3, col:60> line:230:37 constexpr cosh 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e70400 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e70798 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e70788 <col:38, col:57>
| |     `-CallExpr 0x1c455e70758 <line:230:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e70740 <line:230:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e70720 <col:37> '<builtin fn type>' Function 0x1c455d69370 'cosh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e706f8 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e706e0 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e706c8 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e70698 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e70400 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e70870 <line:68:3, col:60> line:230:37 constexpr cosh 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e707c0 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e70b60 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e70b50 <col:38, col:57>
| |     `-CallExpr 0x1c455e70b20 <line:230:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e70b08 <line:230:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e70ae8 <col:37> '<builtin fn type>' Function 0x1c455d695e0 'cosh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e70ac0 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e70aa8 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e70a90 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e70a60 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e707c0 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e70c38 <line:69:3, col:60> line:230:37 constexpr cosh 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e70b88 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e70f30 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e70f20 <col:38, col:57>
| |     `-CallExpr 0x1c455e70ef0 <line:230:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e70ed8 <line:230:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e70eb8 <col:37> '<builtin fn type>' Function 0x1c455d69850 'cosh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e70e90 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e70e78 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e70e60 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e70e30 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e70b88 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455e71018 <line:20:3, col:55> line:236:36 constexpr degrees 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e70f60 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e71280 <col:32, col:55>
| |   `-ReturnStmt 0x1c455e71270 <col:34, col:52>
| |     `-CallExpr 0x1c455e71240 <line:236:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455e71228 <line:236:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e71208 <col:36> '<builtin fn type>' Function 0x1c455d7fcf0 'degrees' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e711e0 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e711c8 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e711b0 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e71178 <col:51> 'double' lvalue ParmVar 0x1c455e70f60 'V' 'double'
| |-FunctionDecl 0x1c455e71358 <line:21:3, col:58> line:236:36 constexpr degrees 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e712a8 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e68fb0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e68fa0 <col:36, col:55>
| |     `-CallExpr 0x1c455e68f70 <line:236:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e68f58 <line:236:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e68f38 <col:36> '<builtin fn type>' Function 0x1c455d7ff60 'degrees' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e68f10 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e71508 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e714f0 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e714c0 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e712a8 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e69088 <line:22:3, col:58> line:236:36 constexpr degrees 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e68fd8 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e692f8 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e692e8 <col:36, col:55>
| |     `-CallExpr 0x1c455e692b8 <line:236:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e692a0 <line:236:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e69280 <col:36> '<builtin fn type>' Function 0x1c455d801d0 'degrees' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e69258 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e69240 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e69228 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e691f8 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e68fd8 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e693d0 <line:23:3, col:58> line:236:36 constexpr degrees 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e69320 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e69648 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e69638 <col:36, col:55>
| |     `-CallExpr 0x1c455e69608 <line:236:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e695f0 <line:236:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e695d0 <col:36> '<builtin fn type>' Function 0x1c455d80440 'degrees' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e695a8 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e69590 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e69578 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e69548 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e69320 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e69730 <line:54:3, col:52> line:237:37 constexpr degrees 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455e69678 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455e699b8 <col:29, col:52>
| |   `-ReturnStmt 0x1c455e699a8 <col:31, col:49>
| |     `-CallExpr 0x1c455e69978 <line:237:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455e69960 <line:237:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e69940 <col:37> '<builtin fn type>' Function 0x1c455d7fcf0 'degrees' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e69918 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e69900 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e698e8 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e698b0 <col:48> 'int' lvalue ParmVar 0x1c455e69678 'V' 'int'
| |-FunctionDecl 0x1c455e69a90 <line:55:3, col:55> line:237:37 constexpr degrees 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e699e0 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e69d18 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e69d08 <col:33, col:52>
| |     `-CallExpr 0x1c455e69cd8 <line:237:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e69cc0 <line:237:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e69ca0 <col:37> '<builtin fn type>' Function 0x1c455d7ff60 'degrees' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e69c78 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e69c60 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e69c48 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e69c18 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e699e0 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e69df0 <line:56:3, col:55> line:237:37 constexpr degrees 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e69d40 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e6a080 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e6a070 <col:33, col:52>
| |     `-CallExpr 0x1c455e6a040 <line:237:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e6a028 <line:237:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6a008 <col:37> '<builtin fn type>' Function 0x1c455d801d0 'degrees' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e69fe0 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e69fc8 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e69fb0 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e69f80 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e69d40 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e6a158 <line:57:3, col:55> line:237:37 constexpr degrees 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e6a0a8 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e6a3f0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e6a3e0 <col:33, col:52>
| |     `-CallExpr 0x1c455e6a3b0 <line:237:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e6a398 <line:237:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6a378 <col:37> '<builtin fn type>' Function 0x1c455d80440 'degrees' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e6a350 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6a338 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6a320 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6a2f0 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e6a0a8 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e6a4d0 <line:58:3, col:53> line:237:37 constexpr degrees 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e6a418 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e6a778 <col:30, col:53>
| |   `-ReturnStmt 0x1c455e6a768 <col:32, col:50>
| |     `-CallExpr 0x1c455e6a738 <line:237:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455e6a720 <line:237:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6a700 <col:37> '<builtin fn type>' Function 0x1c455d7fcf0 'degrees' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e6a6d8 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6a6c0 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6a6a8 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6a670 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455e6a418 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e6a850 <line:59:3, col:56> line:237:37 constexpr degrees 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e6a7a0 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e6aaf8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e6aae8 <col:34, col:53>
| |     `-CallExpr 0x1c455e6aab8 <line:237:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e6aaa0 <line:237:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6aa80 <col:37> '<builtin fn type>' Function 0x1c455d7ff60 'degrees' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e6aa58 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6aa40 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6aa28 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6a9f8 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e6a7a0 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e6abd0 <line:60:3, col:56> line:237:37 constexpr degrees 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e6ab20 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e6ae80 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e6ae70 <col:34, col:53>
| |     `-CallExpr 0x1c455e6ae40 <line:237:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e6ae28 <line:237:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e6ae08 <col:37> '<builtin fn type>' Function 0x1c455d801d0 'degrees' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e6ade0 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e6adc8 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e6adb0 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e6ad80 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e6ab20 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e73a10 <line:61:3, col:56> line:237:37 constexpr degrees 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e73960 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e73cc8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e73cb8 <col:34, col:53>
| |     `-CallExpr 0x1c455e73c88 <line:237:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e73c70 <line:237:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e73c50 <col:37> '<builtin fn type>' Function 0x1c455d80440 'degrees' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e73c28 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e73c10 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e73bf8 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e73bc8 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e73960 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e73da8 <line:62:3, col:56> line:237:37 constexpr degrees 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e73cf0 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455e74070 <col:33, col:56>
| |   `-ReturnStmt 0x1c455e74060 <col:35, col:53>
| |     `-CallExpr 0x1c455e74030 <line:237:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455e74018 <line:237:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e73ff8 <col:37> '<builtin fn type>' Function 0x1c455d7fcf0 'degrees' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e73fd0 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e73fb8 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e73fa0 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e73f68 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455e73cf0 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455e74148 <line:63:3, col:59> line:237:37 constexpr degrees 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e74098 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e74410 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e74400 <col:37, col:56>
| |     `-CallExpr 0x1c455e743d0 <line:237:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e743b8 <line:237:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e74398 <col:37> '<builtin fn type>' Function 0x1c455d7ff60 'degrees' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e74370 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e74358 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e74340 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e74310 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e74098 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e744e8 <line:64:3, col:59> line:237:37 constexpr degrees 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e74438 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e747b8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e747a8 <col:37, col:56>
| |     `-CallExpr 0x1c455e74778 <line:237:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e74760 <line:237:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e74740 <col:37> '<builtin fn type>' Function 0x1c455d801d0 'degrees' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e74718 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e74700 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e746e8 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e746b8 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e74438 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e74890 <line:65:3, col:59> line:237:37 constexpr degrees 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e747e0 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e74b68 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e74b58 <col:37, col:56>
| |     `-CallExpr 0x1c455e74b28 <line:237:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e74b10 <line:237:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e74af0 <col:37> '<builtin fn type>' Function 0x1c455d80440 'degrees' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e74ac8 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e74ab0 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e74a98 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e74a68 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e747e0 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e74c48 <line:66:3, col:57> line:237:37 constexpr degrees 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e74b90 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e74f30 <col:34, col:57>
| |   `-ReturnStmt 0x1c455e74f20 <col:36, col:54>
| |     `-CallExpr 0x1c455e74ef0 <line:237:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455e74ed8 <line:237:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e74eb8 <col:37> '<builtin fn type>' Function 0x1c455d7fcf0 'degrees' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e74e90 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e74e78 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e74e60 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e74e28 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e74b90 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e75008 <line:67:3, col:60> line:237:37 constexpr degrees 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e74f58 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e752f0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e752e0 <col:38, col:57>
| |     `-CallExpr 0x1c455e752b0 <line:237:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e75298 <line:237:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e75278 <col:37> '<builtin fn type>' Function 0x1c455d7ff60 'degrees' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e75250 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e75238 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e75220 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e751f0 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e74f58 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e753c8 <line:68:3, col:60> line:237:37 constexpr degrees 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e75318 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e756b8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e756a8 <col:38, col:57>
| |     `-CallExpr 0x1c455e75678 <line:237:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e75660 <line:237:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e75640 <col:37> '<builtin fn type>' Function 0x1c455d801d0 'degrees' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e75618 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e75600 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e755e8 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e755b8 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e75318 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e75790 <line:69:3, col:60> line:237:37 constexpr degrees 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e756e0 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e71970 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e71960 <col:38, col:57>
| |     `-CallExpr 0x1c455e71930 <line:237:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e71918 <line:237:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e718f8 <col:37> '<builtin fn type>' Function 0x1c455d80440 'degrees' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e718d0 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e718b8 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e718a0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e71870 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e756e0 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455e71a58 <line:20:3, col:55> line:243:36 constexpr exp 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e719a0 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e71cc0 <col:32, col:55>
| |   `-ReturnStmt 0x1c455e71cb0 <col:34, col:52>
| |     `-CallExpr 0x1c455e71c80 <line:243:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455e71c68 <line:243:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e71c48 <col:36> '<builtin fn type>' Function 0x1c455dc3ee0 'exp' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e71c20 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e71c08 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e71bf0 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e71bb8 <col:51> 'double' lvalue ParmVar 0x1c455e719a0 'V' 'double'
| |-FunctionDecl 0x1c455e71d98 <line:21:3, col:58> line:243:36 constexpr exp 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e71ce8 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e72000 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e71ff0 <col:36, col:55>
| |     `-CallExpr 0x1c455e71fc0 <line:243:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e71fa8 <line:243:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e71f88 <col:36> '<builtin fn type>' Function 0x1c455dc4150 'exp' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e71f60 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e71f48 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e71f30 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e71f00 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e71ce8 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e720d8 <line:22:3, col:58> line:243:36 constexpr exp 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e72028 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e72348 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e72338 <col:36, col:55>
| |     `-CallExpr 0x1c455e72308 <line:243:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e722f0 <line:243:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e722d0 <col:36> '<builtin fn type>' Function 0x1c455dc4550 'exp' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e722a8 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e72290 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e72278 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e72248 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e72028 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e72420 <line:23:3, col:58> line:243:36 constexpr exp 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e72370 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e72698 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e72688 <col:36, col:55>
| |     `-CallExpr 0x1c455e72658 <line:243:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e72640 <line:243:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e72620 <col:36> '<builtin fn type>' Function 0x1c455dc47c0 'exp' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e725f8 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e725e0 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e725c8 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e72598 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e72370 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e72780 <line:54:3, col:52> line:244:37 constexpr exp 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455e726c8 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455e72a08 <col:29, col:52>
| |   `-ReturnStmt 0x1c455e729f8 <col:31, col:49>
| |     `-CallExpr 0x1c455e729c8 <line:244:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455e729b0 <line:244:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e72990 <col:37> '<builtin fn type>' Function 0x1c455dc3ee0 'exp' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e72968 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e72950 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e72938 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e72900 <col:48> 'int' lvalue ParmVar 0x1c455e726c8 'V' 'int'
| |-FunctionDecl 0x1c455e72ae0 <line:55:3, col:55> line:244:37 constexpr exp 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e72a30 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e72d68 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e72d58 <col:33, col:52>
| |     `-CallExpr 0x1c455e72d28 <line:244:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e72d10 <line:244:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e72cf0 <col:37> '<builtin fn type>' Function 0x1c455dc4150 'exp' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e72cc8 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e72cb0 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e72c98 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e72c68 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e72a30 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e72e40 <line:56:3, col:55> line:244:37 constexpr exp 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e72d90 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e730d0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e730c0 <col:33, col:52>
| |     `-CallExpr 0x1c455e73090 <line:244:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e73078 <line:244:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e73058 <col:37> '<builtin fn type>' Function 0x1c455dc4550 'exp' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e73030 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e73018 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e73000 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e72fd0 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e72d90 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e731a8 <line:57:3, col:55> line:244:37 constexpr exp 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e730f8 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e73440 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e73430 <col:33, col:52>
| |     `-CallExpr 0x1c455e73400 <line:244:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e733e8 <line:244:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e733c8 <col:37> '<builtin fn type>' Function 0x1c455dc47c0 'exp' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e733a0 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e73388 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e73370 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e73340 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e730f8 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e73520 <line:58:3, col:53> line:244:37 constexpr exp 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e73468 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e7c218 <col:30, col:53>
| |   `-ReturnStmt 0x1c455e7c208 <col:32, col:50>
| |     `-CallExpr 0x1c455e7c1d8 <line:244:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455e7c1c0 <line:244:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7c1a0 <col:37> '<builtin fn type>' Function 0x1c455dc3ee0 'exp' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e73728 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e73710 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e736f8 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e736c0 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455e73468 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e7c2f0 <line:59:3, col:56> line:244:37 constexpr exp 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e7c240 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e7c598 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e7c588 <col:34, col:53>
| |     `-CallExpr 0x1c455e7c558 <line:244:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e7c540 <line:244:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7c520 <col:37> '<builtin fn type>' Function 0x1c455dc4150 'exp' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e7c4f8 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7c4e0 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7c4c8 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7c498 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e7c240 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e7c670 <line:60:3, col:56> line:244:37 constexpr exp 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e7c5c0 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e7c920 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e7c910 <col:34, col:53>
| |     `-CallExpr 0x1c455e7c8e0 <line:244:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e7c8c8 <line:244:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7c8a8 <col:37> '<builtin fn type>' Function 0x1c455dc4550 'exp' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e7c880 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7c868 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7c850 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7c820 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e7c5c0 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e7c9f8 <line:61:3, col:56> line:244:37 constexpr exp 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e7c948 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e7ccb0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e7cca0 <col:34, col:53>
| |     `-CallExpr 0x1c455e7cc70 <line:244:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e7cc58 <line:244:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7cc38 <col:37> '<builtin fn type>' Function 0x1c455dc47c0 'exp' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e7cc10 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7cbf8 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7cbe0 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7cbb0 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e7c948 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e7cd90 <line:62:3, col:56> line:244:37 constexpr exp 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e7ccd8 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455e7d058 <col:33, col:56>
| |   `-ReturnStmt 0x1c455e7d048 <col:35, col:53>
| |     `-CallExpr 0x1c455e7d018 <line:244:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455e7d000 <line:244:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7cfe0 <col:37> '<builtin fn type>' Function 0x1c455dc3ee0 'exp' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e7cfb8 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7cfa0 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7cf88 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7cf50 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455e7ccd8 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455e7d130 <line:63:3, col:59> line:244:37 constexpr exp 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e7d080 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e7d3f8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e7d3e8 <col:37, col:56>
| |     `-CallExpr 0x1c455e7d3b8 <line:244:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e7d3a0 <line:244:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7d380 <col:37> '<builtin fn type>' Function 0x1c455dc4150 'exp' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e7d358 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7d340 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7d328 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7d2f8 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e7d080 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e7d4d0 <line:64:3, col:59> line:244:37 constexpr exp 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e7d420 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e7d7a0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e7d790 <col:37, col:56>
| |     `-CallExpr 0x1c455e7d760 <line:244:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e7d748 <line:244:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7d728 <col:37> '<builtin fn type>' Function 0x1c455dc4550 'exp' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e7d700 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7d6e8 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7d6d0 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7d6a0 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e7d420 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e7d878 <line:65:3, col:59> line:244:37 constexpr exp 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e7d7c8 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e7db50 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e7db40 <col:37, col:56>
| |     `-CallExpr 0x1c455e7db10 <line:244:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e7daf8 <line:244:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7dad8 <col:37> '<builtin fn type>' Function 0x1c455dc47c0 'exp' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e7dab0 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7da98 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7da80 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7da50 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e7d7c8 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e7dc30 <line:66:3, col:57> line:244:37 constexpr exp 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e7db78 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e7df18 <col:34, col:57>
| |   `-ReturnStmt 0x1c455e7df08 <col:36, col:54>
| |     `-CallExpr 0x1c455e7ded8 <line:244:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455e7dec0 <line:244:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7dea0 <col:37> '<builtin fn type>' Function 0x1c455dc3ee0 'exp' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e7de78 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7de60 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7de48 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7de10 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e7db78 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e7dff0 <line:67:3, col:60> line:244:37 constexpr exp 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e7df40 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e75d80 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e75d70 <col:38, col:57>
| |     `-CallExpr 0x1c455e75d40 <line:244:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e75d28 <line:244:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e75d08 <col:37> '<builtin fn type>' Function 0x1c455dc4150 'exp' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e75ce0 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e75cc8 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e75cb0 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e75c80 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e7df40 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e75e58 <line:68:3, col:60> line:244:37 constexpr exp 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e75da8 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e76148 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e76138 <col:38, col:57>
| |     `-CallExpr 0x1c455e76108 <line:244:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e760f0 <line:244:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e760d0 <col:37> '<builtin fn type>' Function 0x1c455dc4550 'exp' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e760a8 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e76090 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e76078 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e76048 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e75da8 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e76220 <line:69:3, col:60> line:244:37 constexpr exp 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e76170 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e76518 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e76508 <col:38, col:57>
| |     `-CallExpr 0x1c455e764d8 <line:244:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e764c0 <line:244:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e764a0 <col:37> '<builtin fn type>' Function 0x1c455dc47c0 'exp' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e76478 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e76460 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e76448 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e76418 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e76170 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455e76600 <line:20:3, col:55> line:250:36 constexpr exp2 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e76548 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e76868 <col:32, col:55>
| |   `-ReturnStmt 0x1c455e76858 <col:34, col:52>
| |     `-CallExpr 0x1c455e76828 <line:250:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455e76810 <line:250:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e767f0 <col:36> '<builtin fn type>' Function 0x1c455dc5400 'exp2' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e767c8 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e767b0 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e76798 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e76760 <col:51> 'double' lvalue ParmVar 0x1c455e76548 'V' 'double'
| |-FunctionDecl 0x1c455e76940 <line:21:3, col:58> line:250:36 constexpr exp2 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e76890 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e76ba8 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e76b98 <col:36, col:55>
| |     `-CallExpr 0x1c455e76b68 <line:250:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e76b50 <line:250:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e76b30 <col:36> '<builtin fn type>' Function 0x1c455dc1360 'exp2' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e76b08 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e76af0 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e76ad8 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e76aa8 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e76890 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e76c80 <line:22:3, col:58> line:250:36 constexpr exp2 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e76bd0 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e76ef0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e76ee0 <col:36, col:55>
| |     `-CallExpr 0x1c455e76eb0 <line:250:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e76e98 <line:250:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e76e78 <col:36> '<builtin fn type>' Function 0x1c455dc15d0 'exp2' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e76e50 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e76e38 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e76e20 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e76df0 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e76bd0 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e76fc8 <line:23:3, col:58> line:250:36 constexpr exp2 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e76f18 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e77240 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e77230 <col:36, col:55>
| |     `-CallExpr 0x1c455e77200 <line:250:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e771e8 <line:250:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e771c8 <col:36> '<builtin fn type>' Function 0x1c455dc1840 'exp2' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e771a0 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e77188 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e77170 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e77140 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e76f18 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e77328 <line:54:3, col:52> line:251:37 constexpr exp2 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455e77270 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455e775b0 <col:29, col:52>
| |   `-ReturnStmt 0x1c455e775a0 <col:31, col:49>
| |     `-CallExpr 0x1c455e77570 <line:251:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455e77558 <line:251:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e77538 <col:37> '<builtin fn type>' Function 0x1c455dc5400 'exp2' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e77510 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e774f8 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e774e0 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e774a8 <col:48> 'int' lvalue ParmVar 0x1c455e77270 'V' 'int'
| |-FunctionDecl 0x1c455e77688 <line:55:3, col:55> line:251:37 constexpr exp2 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e775d8 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e77910 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e77900 <col:33, col:52>
| |     `-CallExpr 0x1c455e778d0 <line:251:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e778b8 <line:251:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e77898 <col:37> '<builtin fn type>' Function 0x1c455dc1360 'exp2' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e77870 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e77858 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e77840 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e77810 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e775d8 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e779e8 <line:56:3, col:55> line:251:37 constexpr exp2 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e77938 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e7e568 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e7e558 <col:33, col:52>
| |     `-CallExpr 0x1c455e7e528 <line:251:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e7e510 <line:251:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7e4f0 <col:37> '<builtin fn type>' Function 0x1c455dc15d0 'exp2' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e7e4c8 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7e4b0 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7e498 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7e468 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e77938 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e7e640 <line:57:3, col:55> line:251:37 constexpr exp2 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e7e590 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e7e8d8 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e7e8c8 <col:33, col:52>
| |     `-CallExpr 0x1c455e7e898 <line:251:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e7e880 <line:251:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7e860 <col:37> '<builtin fn type>' Function 0x1c455dc1840 'exp2' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e7e838 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7e820 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7e808 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7e7d8 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e7e590 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e7e9b8 <line:58:3, col:53> line:251:37 constexpr exp2 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e7e900 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e7ec60 <col:30, col:53>
| |   `-ReturnStmt 0x1c455e7ec50 <col:32, col:50>
| |     `-CallExpr 0x1c455e7ec20 <line:251:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455e7ec08 <line:251:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7ebe8 <col:37> '<builtin fn type>' Function 0x1c455dc5400 'exp2' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e7ebc0 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7eba8 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7eb90 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7eb58 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455e7e900 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e7ed38 <line:59:3, col:56> line:251:37 constexpr exp2 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e7ec88 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e7efe0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e7efd0 <col:34, col:53>
| |     `-CallExpr 0x1c455e7efa0 <line:251:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e7ef88 <line:251:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7ef68 <col:37> '<builtin fn type>' Function 0x1c455dc1360 'exp2' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e7ef40 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7ef28 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7ef10 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7eee0 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e7ec88 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e7f0b8 <line:60:3, col:56> line:251:37 constexpr exp2 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e7f008 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e7f368 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e7f358 <col:34, col:53>
| |     `-CallExpr 0x1c455e7f328 <line:251:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e7f310 <line:251:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7f2f0 <col:37> '<builtin fn type>' Function 0x1c455dc15d0 'exp2' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e7f2c8 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7f2b0 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7f298 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7f268 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e7f008 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e7f440 <line:61:3, col:56> line:251:37 constexpr exp2 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e7f390 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e7f6f8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e7f6e8 <col:34, col:53>
| |     `-CallExpr 0x1c455e7f6b8 <line:251:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e7f6a0 <line:251:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7f680 <col:37> '<builtin fn type>' Function 0x1c455dc1840 'exp2' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e7f658 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7f640 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7f628 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7f5f8 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e7f390 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e7f7d8 <line:62:3, col:56> line:251:37 constexpr exp2 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e7f720 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455e7faa0 <col:33, col:56>
| |   `-ReturnStmt 0x1c455e7fa90 <col:35, col:53>
| |     `-CallExpr 0x1c455e7fa60 <line:251:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455e7fa48 <line:251:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7fa28 <col:37> '<builtin fn type>' Function 0x1c455dc5400 'exp2' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e7fa00 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7f9e8 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7f9d0 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7f998 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455e7f720 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455e7fb78 <line:63:3, col:59> line:251:37 constexpr exp2 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e7fac8 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e7fe40 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e7fe30 <col:37, col:56>
| |     `-CallExpr 0x1c455e7fe00 <line:251:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e7fde8 <line:251:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7fdc8 <col:37> '<builtin fn type>' Function 0x1c455dc1360 'exp2' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e7fda0 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7fd88 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7fd70 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7fd40 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e7fac8 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e7ff18 <line:64:3, col:59> line:251:37 constexpr exp2 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e7fe68 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e801e8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e801d8 <col:37, col:56>
| |     `-CallExpr 0x1c455e801a8 <line:251:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e80190 <line:251:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e80170 <col:37> '<builtin fn type>' Function 0x1c455dc15d0 'exp2' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e80148 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e80130 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e80118 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e800e8 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e7fe68 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e802c0 <line:65:3, col:59> line:251:37 constexpr exp2 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e80210 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e77f80 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e77f70 <col:37, col:56>
| |     `-CallExpr 0x1c455e77f40 <line:251:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e77f28 <line:251:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e77f08 <col:37> '<builtin fn type>' Function 0x1c455dc1840 'exp2' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e77ee0 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e77ec8 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e77eb0 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e77e80 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e80210 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e78060 <line:66:3, col:57> line:251:37 constexpr exp2 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e77fa8 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e78348 <col:34, col:57>
| |   `-ReturnStmt 0x1c455e78338 <col:36, col:54>
| |     `-CallExpr 0x1c455e78308 <line:251:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455e782f0 <line:251:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e782d0 <col:37> '<builtin fn type>' Function 0x1c455dc5400 'exp2' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e782a8 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e78290 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e78278 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e78240 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e77fa8 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e78420 <line:67:3, col:60> line:251:37 constexpr exp2 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e78370 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e78708 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e786f8 <col:38, col:57>
| |     `-CallExpr 0x1c455e786c8 <line:251:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e786b0 <line:251:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e78690 <col:37> '<builtin fn type>' Function 0x1c455dc1360 'exp2' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e78668 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e78650 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e78638 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e78608 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e78370 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e787e0 <line:68:3, col:60> line:251:37 constexpr exp2 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e78730 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e78ad0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e78ac0 <col:38, col:57>
| |     `-CallExpr 0x1c455e78a90 <line:251:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e78a78 <line:251:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e78a58 <col:37> '<builtin fn type>' Function 0x1c455dc15d0 'exp2' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e78a30 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e78a18 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e78a00 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e789d0 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e78730 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e78ba8 <line:69:3, col:60> line:251:37 constexpr exp2 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e78af8 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e78ea0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e78e90 <col:38, col:57>
| |     `-CallExpr 0x1c455e78e60 <line:251:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e78e48 <line:251:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e78e28 <col:37> '<builtin fn type>' Function 0x1c455dc1840 'exp2' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e78e00 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e78de8 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e78dd0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e78da0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e78af8 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455e78f88 <line:20:3, col:55> line:257:36 constexpr floor 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e78ed0 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e791f0 <col:32, col:55>
| |   `-ReturnStmt 0x1c455e791e0 <col:34, col:52>
| |     `-CallExpr 0x1c455e791b0 <line:257:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455e79198 <line:257:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e79178 <col:36> '<builtin fn type>' Function 0x1c455dc6ed0 'floor' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e79150 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e79138 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e79120 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e790e8 <col:51> 'double' lvalue ParmVar 0x1c455e78ed0 'V' 'double'
| |-FunctionDecl 0x1c455e792c8 <line:21:3, col:58> line:257:36 constexpr floor 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e79218 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e79530 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e79520 <col:36, col:55>
| |     `-CallExpr 0x1c455e794f0 <line:257:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e794d8 <line:257:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e794b8 <col:36> '<builtin fn type>' Function 0x1c455dc7140 'floor' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e79490 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e79478 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e79460 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e79430 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e79218 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e79608 <line:22:3, col:58> line:257:36 constexpr floor 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e79558 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e79878 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e79868 <col:36, col:55>
| |     `-CallExpr 0x1c455e79838 <line:257:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e79820 <line:257:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e79800 <col:36> '<builtin fn type>' Function 0x1c455dc73b0 'floor' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e797d8 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e797c0 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e797a8 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e79778 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e79558 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e79950 <line:23:3, col:58> line:257:36 constexpr floor 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e798a0 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e79bc8 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e79bb8 <col:36, col:55>
| |     `-CallExpr 0x1c455e79b88 <line:257:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e79b70 <line:257:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e79b50 <col:36> '<builtin fn type>' Function 0x1c455dc7620 'floor' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e79b28 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e79b10 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e79af8 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e79ac8 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e798a0 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e79cb0 <line:54:3, col:52> line:258:37 constexpr floor 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455e79bf8 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455e80780 <col:29, col:52>
| |   `-ReturnStmt 0x1c455e80770 <col:31, col:49>
| |     `-CallExpr 0x1c455e80740 <line:258:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455e80728 <line:258:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e80708 <col:37> '<builtin fn type>' Function 0x1c455dc6ed0 'floor' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e806e0 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e806c8 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e806b0 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e80678 <col:48> 'int' lvalue ParmVar 0x1c455e79bf8 'V' 'int'
| |-FunctionDecl 0x1c455e80858 <line:55:3, col:55> line:258:37 constexpr floor 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e807a8 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e80ae0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e80ad0 <col:33, col:52>
| |     `-CallExpr 0x1c455e80aa0 <line:258:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e80a88 <line:258:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e80a68 <col:37> '<builtin fn type>' Function 0x1c455dc7140 'floor' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e80a40 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e80a28 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e80a10 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e809e0 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e807a8 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e80bb8 <line:56:3, col:55> line:258:37 constexpr floor 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e80b08 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e80e48 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e80e38 <col:33, col:52>
| |     `-CallExpr 0x1c455e80e08 <line:258:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e80df0 <line:258:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e80dd0 <col:37> '<builtin fn type>' Function 0x1c455dc73b0 'floor' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e80da8 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e80d90 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e80d78 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e80d48 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e80b08 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e80f20 <line:57:3, col:55> line:258:37 constexpr floor 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e80e70 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e811b8 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e811a8 <col:33, col:52>
| |     `-CallExpr 0x1c455e81178 <line:258:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e81160 <line:258:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e81140 <col:37> '<builtin fn type>' Function 0x1c455dc7620 'floor' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e81118 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e81100 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e810e8 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e810b8 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e80e70 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e81298 <line:58:3, col:53> line:258:37 constexpr floor 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e811e0 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e81540 <col:30, col:53>
| |   `-ReturnStmt 0x1c455e81530 <col:32, col:50>
| |     `-CallExpr 0x1c455e81500 <line:258:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455e814e8 <line:258:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e814c8 <col:37> '<builtin fn type>' Function 0x1c455dc6ed0 'floor' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e814a0 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e81488 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e81470 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e81438 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455e811e0 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e81618 <line:59:3, col:56> line:258:37 constexpr floor 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e81568 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e818c0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e818b0 <col:34, col:53>
| |     `-CallExpr 0x1c455e81880 <line:258:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e81868 <line:258:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e81848 <col:37> '<builtin fn type>' Function 0x1c455dc7140 'floor' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e81820 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e81808 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e817f0 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e817c0 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e81568 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e81998 <line:60:3, col:56> line:258:37 constexpr floor 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e818e8 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e81c48 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e81c38 <col:34, col:53>
| |     `-CallExpr 0x1c455e81c08 <line:258:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e81bf0 <line:258:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e81bd0 <col:37> '<builtin fn type>' Function 0x1c455dc73b0 'floor' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e81ba8 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e81b90 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e81b78 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e81b48 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e818e8 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e81d20 <line:61:3, col:56> line:258:37 constexpr floor 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e81c70 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e81fd8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e81fc8 <col:34, col:53>
| |     `-CallExpr 0x1c455e81f98 <line:258:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e81f80 <line:258:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e81f60 <col:37> '<builtin fn type>' Function 0x1c455dc7620 'floor' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e81f38 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e81f20 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e81f08 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e81ed8 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e81c70 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e820b8 <line:62:3, col:56> line:258:37 constexpr floor 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e82000 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455e82380 <col:33, col:56>
| |   `-ReturnStmt 0x1c455e82370 <col:35, col:53>
| |     `-CallExpr 0x1c455e82340 <line:258:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455e82328 <line:258:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e82308 <col:37> '<builtin fn type>' Function 0x1c455dc6ed0 'floor' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e822e0 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e822c8 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e822b0 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e82278 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455e82000 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455e82458 <line:63:3, col:59> line:258:37 constexpr floor 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e823a8 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e7a180 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e7a170 <col:37, col:56>
| |     `-CallExpr 0x1c455e7a140 <line:258:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e7a128 <line:258:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7a108 <col:37> '<builtin fn type>' Function 0x1c455dc7140 'floor' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e7a0e0 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7a0c8 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7a0b0 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7a080 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e823a8 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e7a258 <line:64:3, col:59> line:258:37 constexpr floor 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e7a1a8 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e7a528 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e7a518 <col:37, col:56>
| |     `-CallExpr 0x1c455e7a4e8 <line:258:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e7a4d0 <line:258:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7a4b0 <col:37> '<builtin fn type>' Function 0x1c455dc73b0 'floor' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e7a488 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7a470 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7a458 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7a428 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e7a1a8 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e7a600 <line:65:3, col:59> line:258:37 constexpr floor 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e7a550 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e7a8d8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e7a8c8 <col:37, col:56>
| |     `-CallExpr 0x1c455e7a898 <line:258:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e7a880 <line:258:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7a860 <col:37> '<builtin fn type>' Function 0x1c455dc7620 'floor' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e7a838 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7a820 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7a808 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7a7d8 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e7a550 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e7a9b8 <line:66:3, col:57> line:258:37 constexpr floor 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e7a900 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e7aca0 <col:34, col:57>
| |   `-ReturnStmt 0x1c455e7ac90 <col:36, col:54>
| |     `-CallExpr 0x1c455e7ac60 <line:258:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455e7ac48 <line:258:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7ac28 <col:37> '<builtin fn type>' Function 0x1c455dc6ed0 'floor' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e7ac00 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7abe8 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7abd0 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7ab98 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e7a900 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e7ad78 <line:67:3, col:60> line:258:37 constexpr floor 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e7acc8 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e7b060 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e7b050 <col:38, col:57>
| |     `-CallExpr 0x1c455e7b020 <line:258:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e7b008 <line:258:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7afe8 <col:37> '<builtin fn type>' Function 0x1c455dc7140 'floor' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e7afc0 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7afa8 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7af90 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7af60 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e7acc8 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e7b138 <line:68:3, col:60> line:258:37 constexpr floor 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e7b088 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e7b428 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e7b418 <col:38, col:57>
| |     `-CallExpr 0x1c455e7b3e8 <line:258:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e7b3d0 <line:258:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7b3b0 <col:37> '<builtin fn type>' Function 0x1c455dc73b0 'floor' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e7b388 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7b370 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7b358 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7b328 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e7b088 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e7b500 <line:69:3, col:60> line:258:37 constexpr floor 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e7b450 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e7b7f8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e7b7e8 <col:38, col:57>
| |     `-CallExpr 0x1c455e7b7b8 <line:258:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e7b7a0 <line:258:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7b780 <col:37> '<builtin fn type>' Function 0x1c455dc7620 'floor' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e7b758 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7b740 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7b728 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7b6f8 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e7b450 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455e7b8e0 <line:20:3, col:55> line:264:36 constexpr frac 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e7b828 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e7bb48 <col:32, col:55>
| |   `-ReturnStmt 0x1c455e7bb38 <col:34, col:52>
| |     `-CallExpr 0x1c455e7bb08 <line:264:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455e7baf0 <line:264:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7bad0 <col:36> '<builtin fn type>' Function 0x1c455dcd8e0 'frac' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e7baa8 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7ba90 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7ba78 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7ba40 <col:51> 'double' lvalue ParmVar 0x1c455e7b828 'V' 'double'
| |-FunctionDecl 0x1c455e7bc20 <line:21:3, col:58> line:264:36 constexpr frac 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e7bb70 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e7be88 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e7be78 <col:36, col:55>
| |     `-CallExpr 0x1c455e7be48 <line:264:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e7be30 <line:264:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e7be10 <col:36> '<builtin fn type>' Function 0x1c455dcdb50 'frac' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e7bde8 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e7bdd0 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e7bdb8 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e7bd88 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e7bb70 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e827d0 <line:22:3, col:58> line:264:36 constexpr frac 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e7beb0 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e82a40 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e82a30 <col:36, col:55>
| |     `-CallExpr 0x1c455e82a00 <line:264:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e829e8 <line:264:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e829c8 <col:36> '<builtin fn type>' Function 0x1c455dcabb0 'frac' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e829a0 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e82988 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e82970 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e82940 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e7beb0 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e82b18 <line:23:3, col:58> line:264:36 constexpr frac 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e82a68 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e82d90 <col:34, col:58>
| |   `-ReturnStmt 0x1c455e82d80 <col:36, col:55>
| |     `-CallExpr 0x1c455e82d50 <line:264:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e82d38 <line:264:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e82d18 <col:36> '<builtin fn type>' Function 0x1c455dcae20 'frac' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e82cf0 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e82cd8 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e82cc0 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e82c90 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e82a68 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e82e78 <line:54:3, col:52> line:265:37 constexpr frac 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455e82dc0 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455e83100 <col:29, col:52>
| |   `-ReturnStmt 0x1c455e830f0 <col:31, col:49>
| |     `-CallExpr 0x1c455e830c0 <line:265:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455e830a8 <line:265:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e83088 <col:37> '<builtin fn type>' Function 0x1c455dcd8e0 'frac' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e83060 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e83048 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e83030 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e82ff8 <col:48> 'int' lvalue ParmVar 0x1c455e82dc0 'V' 'int'
| |-FunctionDecl 0x1c455e831d8 <line:55:3, col:55> line:265:37 constexpr frac 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e83128 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e83460 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e83450 <col:33, col:52>
| |     `-CallExpr 0x1c455e83420 <line:265:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e83408 <line:265:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e833e8 <col:37> '<builtin fn type>' Function 0x1c455dcdb50 'frac' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e833c0 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e833a8 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e83390 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e83360 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e83128 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e83538 <line:56:3, col:55> line:265:37 constexpr frac 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e83488 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e837c8 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e837b8 <col:33, col:52>
| |     `-CallExpr 0x1c455e83788 <line:265:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e83770 <line:265:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e83750 <col:37> '<builtin fn type>' Function 0x1c455dcabb0 'frac' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e83728 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e83710 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e836f8 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e836c8 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e83488 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e838a0 <line:57:3, col:55> line:265:37 constexpr frac 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e837f0 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e83b38 <col:31, col:55>
| |   `-ReturnStmt 0x1c455e83b28 <col:33, col:52>
| |     `-CallExpr 0x1c455e83af8 <line:265:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e83ae0 <line:265:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e83ac0 <col:37> '<builtin fn type>' Function 0x1c455dcae20 'frac' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e83a98 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e83a80 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e83a68 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e83a38 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e837f0 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e83c18 <line:58:3, col:53> line:265:37 constexpr frac 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e83b60 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e83ec0 <col:30, col:53>
| |   `-ReturnStmt 0x1c455e83eb0 <col:32, col:50>
| |     `-CallExpr 0x1c455e83e80 <line:265:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455e83e68 <line:265:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e83e48 <col:37> '<builtin fn type>' Function 0x1c455dcd8e0 'frac' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e83e20 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e83e08 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e83df0 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e83db8 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455e83b60 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e83f98 <line:59:3, col:56> line:265:37 constexpr frac 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e83ee8 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e84240 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e84230 <col:34, col:53>
| |     `-CallExpr 0x1c455e84200 <line:265:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e841e8 <line:265:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e841c8 <col:37> '<builtin fn type>' Function 0x1c455dcdb50 'frac' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e841a0 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e84188 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e84170 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e84140 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e83ee8 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e84318 <line:60:3, col:56> line:265:37 constexpr frac 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e84268 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e845c8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e845b8 <col:34, col:53>
| |     `-CallExpr 0x1c455e84588 <line:265:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e84570 <line:265:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e84550 <col:37> '<builtin fn type>' Function 0x1c455dcabb0 'frac' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e84528 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e84510 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e844f8 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e844c8 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e84268 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e846a0 <line:61:3, col:56> line:265:37 constexpr frac 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e845f0 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e88fe0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455e88fd0 <col:34, col:53>
| |     `-CallExpr 0x1c455e88fa0 <line:265:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e88f88 <line:265:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e88f68 <col:37> '<builtin fn type>' Function 0x1c455dcae20 'frac' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e88f40 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e88f28 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e88f10 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e88ee0 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e845f0 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e890c0 <line:62:3, col:56> line:265:37 constexpr frac 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e89008 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455e89388 <col:33, col:56>
| |   `-ReturnStmt 0x1c455e89378 <col:35, col:53>
| |     `-CallExpr 0x1c455e89348 <line:265:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455e89330 <line:265:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e89310 <col:37> '<builtin fn type>' Function 0x1c455dcd8e0 'frac' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e892e8 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e892d0 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e892b8 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e89280 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455e89008 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455e89460 <line:63:3, col:59> line:265:37 constexpr frac 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e893b0 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e89728 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e89718 <col:37, col:56>
| |     `-CallExpr 0x1c455e896e8 <line:265:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e896d0 <line:265:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e896b0 <col:37> '<builtin fn type>' Function 0x1c455dcdb50 'frac' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e89688 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e89670 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e89658 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e89628 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e893b0 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e89800 <line:64:3, col:59> line:265:37 constexpr frac 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e89750 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e89ad0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e89ac0 <col:37, col:56>
| |     `-CallExpr 0x1c455e89a90 <line:265:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e89a78 <line:265:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e89a58 <col:37> '<builtin fn type>' Function 0x1c455dcabb0 'frac' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e89a30 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e89a18 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e89a00 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e899d0 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e89750 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e89ba8 <line:65:3, col:59> line:265:37 constexpr frac 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e89af8 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e89e80 <col:35, col:59>
| |   `-ReturnStmt 0x1c455e89e70 <col:37, col:56>
| |     `-CallExpr 0x1c455e89e40 <line:265:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e89e28 <line:265:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e89e08 <col:37> '<builtin fn type>' Function 0x1c455dcae20 'frac' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e89de0 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e89dc8 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e89db0 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e89d80 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e89af8 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e89f60 <line:66:3, col:57> line:265:37 constexpr frac 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e89ea8 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e8a248 <col:34, col:57>
| |   `-ReturnStmt 0x1c455e8a238 <col:36, col:54>
| |     `-CallExpr 0x1c455e8a208 <line:265:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455e8a1f0 <line:265:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8a1d0 <col:37> '<builtin fn type>' Function 0x1c455dcd8e0 'frac' 'float (float)'
| |       `-CStyleCastExpr 0x1c455e8a1a8 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8a190 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8a178 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8a140 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e89ea8 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e8a320 <line:67:3, col:60> line:265:37 constexpr frac 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e8a270 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e8a608 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e8a5f8 <col:38, col:57>
| |     `-CallExpr 0x1c455e8a5c8 <line:265:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e8a5b0 <line:265:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8a590 <col:37> '<builtin fn type>' Function 0x1c455dcdb50 'frac' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455e8a568 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8a550 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8a538 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8a508 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e8a270 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e8a6e0 <line:68:3, col:60> line:265:37 constexpr frac 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e8a630 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455e8a9d0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e8a9c0 <col:38, col:57>
| |     `-CallExpr 0x1c455e8a990 <line:265:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e8a978 <line:265:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8a958 <col:37> '<builtin fn type>' Function 0x1c455dcabb0 'frac' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455e8a930 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8a918 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8a900 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8a8d0 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e8a630 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455e8aaa8 <line:69:3, col:60> line:265:37 constexpr frac 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e8a9f8 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455e8ada0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455e8ad90 <col:38, col:57>
| |     `-CallExpr 0x1c455e8ad60 <line:265:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e8ad48 <line:265:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8ad28 <col:37> '<builtin fn type>' Function 0x1c455dcae20 'frac' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455e8ad00 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8ace8 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8acd0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8aca0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455e8a9f8 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455e84a90 <line:271:1, col:58> col:16 constexpr isinf 'bool (double)' implicit-inline
| | |-ParmVarDecl 0x1c455e849e0 <col:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455e84d28 <col:32, col:58>
| |   `-ReturnStmt 0x1c455e84d18 <col:34, col:55>
| |     `-CallExpr 0x1c455e84ce8 <col:41, col:55> 'bool'
| |       |-ImplicitCastExpr 0x1c455e84cd0 <col:41> 'bool (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e84c80 <col:41> '<builtin fn type>' Function 0x1c455dcf018 'isinf' 'bool (float)'
| |       `-CStyleCastExpr 0x1c455e84c58 <col:47, col:54> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e84c40 <col:54> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e84c28 <col:54> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e84bf0 <col:54> 'double' lvalue ParmVar 0x1c455e849e0 'V' 'double'
| |-FunctionDecl 0x1c455e84e80 <line:272:1, col:61> col:17 constexpr isinf 'bool2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e84d50 <col:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e85148 <col:34, col:61>
| |   `-ReturnStmt 0x1c455e85138 <col:36, col:58>
| |     `-CallExpr 0x1c455e85108 <col:43, col:58> 'vector<bool, 2>'
| |       |-ImplicitCastExpr 0x1c455e850f0 <col:43> 'bool2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e85070 <col:43> '<builtin fn type>' Function 0x1c455dcf300 'isinf' 'bool2 (float2)'
| |       `-CStyleCastExpr 0x1c455e85048 <col:49, col:57> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e85030 <col:57> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e85018 <col:57> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e84fe8 <col:57> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e84d50 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e852a0 <line:273:1, col:61> col:17 constexpr isinf 'bool3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e85170 <col:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e85578 <col:34, col:61>
| |   `-ReturnStmt 0x1c455e85568 <col:36, col:58>
| |     `-CallExpr 0x1c455e85538 <col:43, col:58> 'vector<bool, 3>'
| |       |-ImplicitCastExpr 0x1c455e85520 <col:43> 'bool3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e85498 <col:43> '<builtin fn type>' Function 0x1c455dcf5f0 'isinf' 'bool3 (float3)'
| |       `-CStyleCastExpr 0x1c455e85470 <col:49, col:57> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e85458 <col:57> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e85440 <col:57> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e85410 <col:57> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e85170 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e856d0 <line:274:1, col:61> col:17 constexpr isinf 'bool4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e855a0 <col:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e859a8 <col:34, col:61>
| |   `-ReturnStmt 0x1c455e85998 <col:36, col:58>
| |     `-CallExpr 0x1c455e85968 <col:43, col:58> 'vector<bool, 4>'
| |       |-ImplicitCastExpr 0x1c455e85950 <col:43> 'bool4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e858d0 <col:43> '<builtin fn type>' Function 0x1c455dcf8e0 'isinf' 'bool4 (float4)'
| |       `-CStyleCastExpr 0x1c455e858a8 <col:49, col:57> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e85890 <col:57> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e85878 <col:57> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e85848 <col:57> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e855a0 'V' 'double4':'vector<double, 4>'
| |-FunctionTemplateDecl 0x1c455e867b0 <line:280:1, line:284:1> line:282:1 lerp
| | |-TemplateTypeParmDecl 0x1c455e859c0 <line:280:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455e85a50 <col:23, col:28> col:28 referenced 'uint':'unsigned int' depth 0 index 1 N
| | `-FunctionDecl 0x1c455e86708 <line:281:1, line:284:1> line:282:1 constexpr lerp '__detail::enable_if_t<(N > 1 && N <= 4), vector<T, N>> (vector<T, N>, vector<T, N>, T)' implicit-inline
| |   |-ParmVarDecl 0x1c455e862e0 <col:6, col:19> col:19 referenced x 'vector<T, N>'
| |   |-ParmVarDecl 0x1c455e86520 <col:22, col:35> col:35 referenced y 'vector<T, N>'
| |   |-ParmVarDecl 0x1c455e865a0 <col:38, col:40> col:40 referenced s 'T'
| |   `-CompoundStmt 0x1c455e8b228 <col:43, line:284:1>
| |     `-ReturnStmt 0x1c455e8b218 <line:283:3, col:36>
| |       `-CallExpr 0x1c455e8b1d8 <col:10, col:36> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455e868b0 <col:10> '<overloaded function type>' lvalue (ADL) = 'lerp' 0x1c455e867b0 0x1c455dcfcb0 0x1c455dcbd40 0x1c455dcc100 0x1c455dcc4c0 0x1c455dcc8a0 0x1c455dd3430 0x1c455dd37f0 0x1c455dd3bb0
| |         |-DeclRefExpr 0x1c455e86938 <col:15> 'vector<T, N>' lvalue ParmVar 0x1c455e862e0 'x' 'vector<T, N>'
| |         |-DeclRefExpr 0x1c455e86958 <col:18> 'vector<T, N>' lvalue ParmVar 0x1c455e86520 'y' 'vector<T, N>'
| |         `-CStyleCastExpr 0x1c455e8b1b0 <col:21, col:35> 'vector<T, N>' <Dependent>
| |           `-DeclRefExpr 0x1c455e8b168 <col:35> 'T' lvalue ParmVar 0x1c455e865a0 's' 'T'
| |-FunctionDecl 0x1c455e8b4a8 <line:40:3, line:42:3> line:286:38 constexpr lerp 'float (double, double, double)' implicit-inline
| | |-ParmVarDecl 0x1c455e8b258 <line:40:22, col:29> col:29 used V1 'double'
| | |-ParmVarDecl 0x1c455e8b2e0 <col:33, col:40> col:40 used V2 'double'
| | |-ParmVarDecl 0x1c455e8b368 <col:44, col:51> col:51 used V3 'double'
| | `-CompoundStmt 0x1c455e8b888 <col:55, line:42:3>
| |   `-ReturnStmt 0x1c455e8b878 <line:41:5, col:46>
| |     `-CallExpr 0x1c455e8b838 <line:286:38, line:41:46> 'float'
| |       |-ImplicitCastExpr 0x1c455e8b820 <line:286:38> 'float (*)(float, float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8b7d0 <col:38> '<builtin fn type>' Function 0x1c455dcc8a0 'lerp' 'float (float, float, float)'
| |       |-CStyleCastExpr 0x1c455e8b688 <line:41:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8b670 <col:22> 'float' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8b658 <col:22> 'double' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8b620 <col:22> 'double' lvalue ParmVar 0x1c455e8b258 'V1' 'double'
| |       |-CStyleCastExpr 0x1c455e8b718 <col:26, col:33> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8b700 <col:33> 'float' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8b6e8 <col:33> 'double' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8b6b0 <col:33> 'double' lvalue ParmVar 0x1c455e8b2e0 'V2' 'double'
| |       `-CStyleCastExpr 0x1c455e8b7a8 <col:37, col:44> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8b790 <col:44> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8b778 <col:44> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8b740 <col:44> 'double' lvalue ParmVar 0x1c455e8b368 'V3' 'double'
| |-FunctionDecl 0x1c455e8bb40 <line:43:3, line:45:3> line:286:38 constexpr lerp 'float2 (double2, double2, double2)' implicit-inline
| | |-ParmVarDecl 0x1c455e8b8b0 <line:43:23, col:31> col:31 used V1 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455e8b930 <col:35, col:43> col:43 used V2 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455e8b9b0 <col:47, col:55> col:55 used V3 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455e8bf48 <col:59, line:45:3>
| |   `-ReturnStmt 0x1c455e8bf38 <line:44:5, col:49>
| |     `-CallExpr 0x1c455e8bef8 <line:286:38, line:44:49> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e8bee0 <line:286:38> 'float2 (*)(float2, float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8be58 <col:38> '<builtin fn type>' Function 0x1c455dd3430 'lerp' 'float2 (float2, float2, float2)'
| |       |-CStyleCastExpr 0x1c455e8bd20 <line:44:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8bd08 <col:23> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8bcf0 <col:23> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8bcc0 <col:23> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e8b8b0 'V1' 'double2':'vector<double, 2>'
| |       |-CStyleCastExpr 0x1c455e8bda8 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8bd90 <col:35> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8bd78 <col:35> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8bd48 <col:35> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e8b930 'V2' 'double2':'vector<double, 2>'
| |       `-CStyleCastExpr 0x1c455e8be30 <col:39, col:47> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8be18 <col:47> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8be00 <col:47> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8bdd0 <col:47> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455e8b9b0 'V3' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455e8c200 <line:46:3, line:48:3> line:286:38 constexpr lerp 'float3 (double3, double3, double3)' implicit-inline
| | |-ParmVarDecl 0x1c455e8bf70 <line:46:23, col:31> col:31 used V1 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455e8bff0 <col:35, col:43> col:43 used V2 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455e8c070 <col:47, col:55> col:55 used V3 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455e8c608 <col:59, line:48:3>
| |   `-ReturnStmt 0x1c455e8c5f8 <line:47:5, col:49>
| |     `-CallExpr 0x1c455e8c5b8 <line:286:38, line:47:49> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e8c5a0 <line:286:38> 'float3 (*)(float3, float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8c520 <col:38> '<builtin fn type>' Function 0x1c455dd37f0 'lerp' 'float3 (float3, float3, float3)'
| |       |-CStyleCastExpr 0x1c455e8c3e8 <line:47:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8c3d0 <col:23> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8c3b8 <col:23> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8c388 <col:23> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e8bf70 'V1' 'double3':'vector<double, 3>'
| |       |-CStyleCastExpr 0x1c455e8c470 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8c458 <col:35> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8c440 <col:35> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8c410 <col:35> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e8bff0 'V2' 'double3':'vector<double, 3>'
| |       `-CStyleCastExpr 0x1c455e8c4f8 <col:39, col:47> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8c4e0 <col:47> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8c4c8 <col:47> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8c498 <col:47> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455e8c070 'V3' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455e8c8c0 <line:49:3, line:51:3> line:286:38 constexpr lerp 'float4 (double4, double4, double4)' implicit-inline
| | |-ParmVarDecl 0x1c455e8c630 <line:49:23, col:31> col:31 used V1 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455e8c6b0 <col:35, col:43> col:43 used V2 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455e8c730 <col:47, col:55> col:55 used V3 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455e8ccd8 <col:59, line:51:3>
| |   `-ReturnStmt 0x1c455e8ccc8 <line:50:5, col:49>
| |     `-CallExpr 0x1c455e8cc88 <line:286:38, line:50:49> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e8cc70 <line:286:38> 'float4 (*)(float4, float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8cbe8 <col:38> '<builtin fn type>' Function 0x1c455dd3bb0 'lerp' 'float4 (float4, float4, float4)'
| |       |-CStyleCastExpr 0x1c455e8cab0 <line:50:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8ca98 <col:23> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8ca80 <col:23> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8ca50 <col:23> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e8c630 'V1' 'double4':'vector<double, 4>'
| |       |-CStyleCastExpr 0x1c455e8cb38 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8cb20 <col:35> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8cb08 <col:35> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8cad8 <col:35> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e8c6b0 'V2' 'double4':'vector<double, 4>'
| |       `-CStyleCastExpr 0x1c455e8cbc0 <col:39, col:47> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8cba8 <col:47> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8cb90 <col:47> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8cb60 <col:47> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455e8c730 'V3' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455e8cf58 <line:112:3, line:114:3> line:287:39 constexpr lerp 'float (int, int, int)' implicit-inline
| | |-ParmVarDecl 0x1c455e8cd08 <line:112:22, col:26> col:26 used V1 'int'
| | |-ParmVarDecl 0x1c455e8cd90 <col:30, col:34> col:34 used V2 'int'
| | |-ParmVarDecl 0x1c455e8ce18 <col:38, col:42> col:42 used V3 'int'
| | `-CompoundStmt 0x1c455e8d548 <col:46, line:114:3>
| |   `-ReturnStmt 0x1c455e8d538 <line:113:5, col:46>
| |     `-CallExpr 0x1c455e8d4f8 <line:287:39, line:113:46> 'float'
| |       |-ImplicitCastExpr 0x1c455e8d4e0 <line:287:39> 'float (*)(float, float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8d4c0 <col:39> '<builtin fn type>' Function 0x1c455dcc8a0 'lerp' 'float (float, float, float)'
| |       |-CStyleCastExpr 0x1c455e8d378 <line:113:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8d360 <col:22> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8d348 <col:22> 'int' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8d310 <col:22> 'int' lvalue ParmVar 0x1c455e8cd08 'V1' 'int'
| |       |-CStyleCastExpr 0x1c455e8d408 <col:26, col:33> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8d3f0 <col:33> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8d3d8 <col:33> 'int' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8d3a0 <col:33> 'int' lvalue ParmVar 0x1c455e8cd90 'V2' 'int'
| |       `-CStyleCastExpr 0x1c455e8d498 <col:37, col:44> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8d480 <col:44> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8d468 <col:44> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8d430 <col:44> 'int' lvalue ParmVar 0x1c455e8ce18 'V3' 'int'
| |-FunctionDecl 0x1c455e8d800 <line:115:3, line:117:3> line:287:39 constexpr lerp 'float2 (int2, int2, int2)' implicit-inline
| | |-ParmVarDecl 0x1c455e8d570 <line:115:23, col:28> col:28 used V1 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455e8d5f0 <col:32, col:37> col:37 used V2 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455e8d670 <col:41, col:46> col:46 used V3 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455e8dbc0 <col:50, line:117:3>
| |   `-ReturnStmt 0x1c455e8dbb0 <line:116:5, col:49>
| |     `-CallExpr 0x1c455e8db70 <line:287:39, line:116:49> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e8db58 <line:287:39> 'float2 (*)(float2, float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8db38 <col:39> '<builtin fn type>' Function 0x1c455dd3430 'lerp' 'float2 (float2, float2, float2)'
| |       |-CStyleCastExpr 0x1c455e8da00 <line:116:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8d9e8 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8d9d0 <col:23> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8d9a0 <col:23> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e8d570 'V1' 'int2':'vector<int, 2>'
| |       |-CStyleCastExpr 0x1c455e8da88 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8da70 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8da58 <col:35> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8da28 <col:35> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e8d5f0 'V2' 'int2':'vector<int, 2>'
| |       `-CStyleCastExpr 0x1c455e8db10 <col:39, col:47> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8daf8 <col:47> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8dae0 <col:47> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8dab0 <col:47> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455e8d670 'V3' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455e8de70 <line:118:3, line:120:3> line:287:39 constexpr lerp 'float3 (int3, int3, int3)' implicit-inline
| | |-ParmVarDecl 0x1c455e8dbe8 <line:118:23, col:28> col:28 used V1 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455e8dc68 <col:32, col:37> col:37 used V2 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455e8dce8 <col:41, col:46> col:46 used V3 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455e8e238 <col:50, line:120:3>
| |   `-ReturnStmt 0x1c455e8e228 <line:119:5, col:49>
| |     `-CallExpr 0x1c455e8e1e8 <line:287:39, line:119:49> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e8e1d0 <line:287:39> 'float3 (*)(float3, float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8e1b0 <col:39> '<builtin fn type>' Function 0x1c455dd37f0 'lerp' 'float3 (float3, float3, float3)'
| |       |-CStyleCastExpr 0x1c455e8e078 <line:119:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8e060 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8e048 <col:23> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8e018 <col:23> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e8dbe8 'V1' 'int3':'vector<int, 3>'
| |       |-CStyleCastExpr 0x1c455e8e100 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8e0e8 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8e0d0 <col:35> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8e0a0 <col:35> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e8dc68 'V2' 'int3':'vector<int, 3>'
| |       `-CStyleCastExpr 0x1c455e8e188 <col:39, col:47> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8e170 <col:47> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8e158 <col:47> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8e128 <col:47> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455e8dce8 'V3' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455e8e4f0 <line:121:3, line:123:3> line:287:39 constexpr lerp 'float4 (int4, int4, int4)' implicit-inline
| | |-ParmVarDecl 0x1c455e8e260 <line:121:23, col:28> col:28 used V1 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455e8e2e0 <col:32, col:37> col:37 used V2 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455e8e360 <col:41, col:46> col:46 used V3 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455e8e8c0 <col:50, line:123:3>
| |   `-ReturnStmt 0x1c455e8e8b0 <line:122:5, col:49>
| |     `-CallExpr 0x1c455e8e870 <line:287:39, line:122:49> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e8e858 <line:287:39> 'float4 (*)(float4, float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8e838 <col:39> '<builtin fn type>' Function 0x1c455dd3bb0 'lerp' 'float4 (float4, float4, float4)'
| |       |-CStyleCastExpr 0x1c455e8e700 <line:122:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8e6e8 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8e6d0 <col:23> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8e6a0 <col:23> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e8e260 'V1' 'int4':'vector<int, 4>'
| |       |-CStyleCastExpr 0x1c455e8e788 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8e770 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8e758 <col:35> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8e728 <col:35> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e8e2e0 'V2' 'int4':'vector<int, 4>'
| |       `-CStyleCastExpr 0x1c455e8e810 <col:39, col:47> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8e7f8 <col:47> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8e7e0 <col:47> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8e7b0 <col:47> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455e8e360 'V3' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455e8eb78 <line:124:3, line:126:3> line:287:39 constexpr lerp 'float (uint, uint, uint)' implicit-inline
| | |-ParmVarDecl 0x1c455e8e8e8 <line:124:22, col:27> col:27 used V1 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455e8e968 <col:31, col:36> col:36 used V2 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455e8e9e8 <col:40, col:45> col:45 used V3 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455e8ef68 <col:49, line:126:3>
| |   `-ReturnStmt 0x1c455e8ef58 <line:125:5, col:46>
| |     `-CallExpr 0x1c455e8ef18 <line:287:39, line:125:46> 'float'
| |       |-ImplicitCastExpr 0x1c455e8ef00 <line:287:39> 'float (*)(float, float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8eee0 <col:39> '<builtin fn type>' Function 0x1c455dcc8a0 'lerp' 'float (float, float, float)'
| |       |-CStyleCastExpr 0x1c455e8ed98 <line:125:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8ed80 <col:22> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8ed68 <col:22> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8ed30 <col:22> 'uint':'unsigned int' lvalue ParmVar 0x1c455e8e8e8 'V1' 'uint':'unsigned int'
| |       |-CStyleCastExpr 0x1c455e8ee28 <col:26, col:33> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8ee10 <col:33> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8edf8 <col:33> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8edc0 <col:33> 'uint':'unsigned int' lvalue ParmVar 0x1c455e8e968 'V2' 'uint':'unsigned int'
| |       `-CStyleCastExpr 0x1c455e8eeb8 <col:37, col:44> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8eea0 <col:44> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8ee88 <col:44> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8ee50 <col:44> 'uint':'unsigned int' lvalue ParmVar 0x1c455e8e9e8 'V3' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455e86bf0 <line:127:3, line:129:3> line:287:39 constexpr lerp 'float2 (uint2, uint2, uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455e8ef90 <line:127:23, col:29> col:29 used V1 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455e8f010 <col:33, col:39> col:39 used V2 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455e8f090 <col:43, col:49> col:49 used V3 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455e86fd0 <col:53, line:129:3>
| |   `-ReturnStmt 0x1c455e86fc0 <line:128:5, col:49>
| |     `-CallExpr 0x1c455e86f80 <line:287:39, line:128:49> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e86f68 <line:287:39> 'float2 (*)(float2, float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e86f48 <col:39> '<builtin fn type>' Function 0x1c455dd3430 'lerp' 'float2 (float2, float2, float2)'
| |       |-CStyleCastExpr 0x1c455e86e10 <line:128:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e86df8 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e86de0 <col:23> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e86db0 <col:23> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e8ef90 'V1' 'uint2':'vector<uint, 2>'
| |       |-CStyleCastExpr 0x1c455e86e98 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e86e80 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e86e68 <col:35> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e86e38 <col:35> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e8f010 'V2' 'uint2':'vector<uint, 2>'
| |       `-CStyleCastExpr 0x1c455e86f20 <col:39, col:47> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e86f08 <col:47> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e86ef0 <col:47> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e86ec0 <col:47> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455e8f090 'V3' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455e87280 <line:130:3, line:132:3> line:287:39 constexpr lerp 'float3 (uint3, uint3, uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455e86ff8 <line:130:23, col:29> col:29 used V1 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455e87078 <col:33, col:39> col:39 used V2 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455e870f8 <col:43, col:49> col:49 used V3 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455e87668 <col:53, line:132:3>
| |   `-ReturnStmt 0x1c455e87658 <line:131:5, col:49>
| |     `-CallExpr 0x1c455e87618 <line:287:39, line:131:49> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e87600 <line:287:39> 'float3 (*)(float3, float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e875e0 <col:39> '<builtin fn type>' Function 0x1c455dd37f0 'lerp' 'float3 (float3, float3, float3)'
| |       |-CStyleCastExpr 0x1c455e874a8 <line:131:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e87490 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e87478 <col:23> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e87448 <col:23> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e86ff8 'V1' 'uint3':'vector<uint, 3>'
| |       |-CStyleCastExpr 0x1c455e87530 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e87518 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e87500 <col:35> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e874d0 <col:35> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e87078 'V2' 'uint3':'vector<uint, 3>'
| |       `-CStyleCastExpr 0x1c455e875b8 <col:39, col:47> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e875a0 <col:47> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e87588 <col:47> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e87558 <col:47> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455e870f8 'V3' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455e87920 <line:133:3, line:135:3> line:287:39 constexpr lerp 'float4 (uint4, uint4, uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455e87690 <line:133:23, col:29> col:29 used V1 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455e87710 <col:33, col:39> col:39 used V2 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455e87790 <col:43, col:49> col:49 used V3 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455e87d10 <col:53, line:135:3>
| |   `-ReturnStmt 0x1c455e87d00 <line:134:5, col:49>
| |     `-CallExpr 0x1c455e87cc0 <line:287:39, line:134:49> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e87ca8 <line:287:39> 'float4 (*)(float4, float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e87c88 <col:39> '<builtin fn type>' Function 0x1c455dd3bb0 'lerp' 'float4 (float4, float4, float4)'
| |       |-CStyleCastExpr 0x1c455e87b50 <line:134:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e87b38 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e87b20 <col:23> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e87af0 <col:23> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e87690 'V1' 'uint4':'vector<uint, 4>'
| |       |-CStyleCastExpr 0x1c455e87bd8 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e87bc0 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e87ba8 <col:35> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e87b78 <col:35> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e87710 'V2' 'uint4':'vector<uint, 4>'
| |       `-CStyleCastExpr 0x1c455e87c60 <col:39, col:47> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e87c48 <col:47> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e87c30 <col:47> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e87c00 <col:47> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455e87790 'V3' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455e87fc8 <line:136:3, line:138:3> line:287:39 constexpr lerp 'float (int64_t, int64_t, int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e87d38 <line:136:22, col:30> col:30 used V1 'int64_t':'long'
| | |-ParmVarDecl 0x1c455e87db8 <col:34, col:42> col:42 used V2 'int64_t':'long'
| | |-ParmVarDecl 0x1c455e87e38 <col:46, col:54> col:54 used V3 'int64_t':'long'
| | `-CompoundStmt 0x1c455e883d8 <col:58, line:138:3>
| |   `-ReturnStmt 0x1c455e883c8 <line:137:5, col:46>
| |     `-CallExpr 0x1c455e88388 <line:287:39, line:137:46> 'float'
| |       |-ImplicitCastExpr 0x1c455e88370 <line:287:39> 'float (*)(float, float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e88350 <col:39> '<builtin fn type>' Function 0x1c455dcc8a0 'lerp' 'float (float, float, float)'
| |       |-CStyleCastExpr 0x1c455e88208 <line:137:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e881f0 <col:22> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e881d8 <col:22> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e881a0 <col:22> 'int64_t':'long' lvalue ParmVar 0x1c455e87d38 'V1' 'int64_t':'long'
| |       |-CStyleCastExpr 0x1c455e88298 <col:26, col:33> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e88280 <col:33> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e88268 <col:33> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e88230 <col:33> 'int64_t':'long' lvalue ParmVar 0x1c455e87db8 'V2' 'int64_t':'long'
| |       `-CStyleCastExpr 0x1c455e88328 <col:37, col:44> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e88310 <col:44> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e882f8 <col:44> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e882c0 <col:44> 'int64_t':'long' lvalue ParmVar 0x1c455e87e38 'V3' 'int64_t':'long'
| |-FunctionDecl 0x1c455e88690 <line:139:3, line:141:3> line:287:39 constexpr lerp 'float2 (int64_t2, int64_t2, int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e88400 <line:139:23, col:32> col:32 used V1 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455e88480 <col:36, col:45> col:45 used V2 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455e88500 <col:49, col:58> col:58 used V3 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455e88a90 <col:62, line:141:3>
| |   `-ReturnStmt 0x1c455e88a80 <line:140:5, col:49>
| |     `-CallExpr 0x1c455e88a40 <line:287:39, line:140:49> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e88a28 <line:287:39> 'float2 (*)(float2, float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e88a08 <col:39> '<builtin fn type>' Function 0x1c455dd3430 'lerp' 'float2 (float2, float2, float2)'
| |       |-CStyleCastExpr 0x1c455e888d0 <line:140:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e888b8 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e888a0 <col:23> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e88870 <col:23> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e88400 'V1' 'int64_t2':'vector<int64_t, 2>'
| |       |-CStyleCastExpr 0x1c455e88958 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e88940 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e88928 <col:35> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e888f8 <col:35> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e88480 'V2' 'int64_t2':'vector<int64_t, 2>'
| |       `-CStyleCastExpr 0x1c455e889e0 <col:39, col:47> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e889c8 <col:47> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e889b0 <col:47> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e88980 <col:47> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455e88500 'V3' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455e8f5c0 <line:142:3, line:144:3> line:287:39 constexpr lerp 'float3 (int64_t3, int64_t3, int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e88ab8 <line:142:23, col:32> col:32 used V1 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455e88b38 <col:36, col:45> col:45 used V2 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455e8f430 <col:49, col:58> col:58 used V3 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455e8f9c8 <col:62, line:144:3>
| |   `-ReturnStmt 0x1c455e8f9b8 <line:143:5, col:49>
| |     `-CallExpr 0x1c455e8f978 <line:287:39, line:143:49> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455e8f960 <line:287:39> 'float3 (*)(float3, float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e8f940 <col:39> '<builtin fn type>' Function 0x1c455dd37f0 'lerp' 'float3 (float3, float3, float3)'
| |       |-CStyleCastExpr 0x1c455e8f808 <line:143:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8f7f0 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8f7d8 <col:23> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8f7a8 <col:23> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e88ab8 'V1' 'int64_t3':'vector<int64_t, 3>'
| |       |-CStyleCastExpr 0x1c455e8f890 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8f878 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8f860 <col:35> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8f830 <col:35> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e88b38 'V2' 'int64_t3':'vector<int64_t, 3>'
| |       `-CStyleCastExpr 0x1c455e8f918 <col:39, col:47> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8f900 <col:47> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8f8e8 <col:47> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8f8b8 <col:47> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455e8f430 'V3' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455e8fc80 <line:145:3, line:147:3> line:287:39 constexpr lerp 'float4 (int64_t4, int64_t4, int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455e8f9f0 <line:145:23, col:32> col:32 used V1 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455e8fa70 <col:36, col:45> col:45 used V2 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455e8faf0 <col:49, col:58> col:58 used V3 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455e90090 <col:62, line:147:3>
| |   `-ReturnStmt 0x1c455e90080 <line:146:5, col:49>
| |     `-CallExpr 0x1c455e90040 <line:287:39, line:146:49> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455e90028 <line:287:39> 'float4 (*)(float4, float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e90008 <col:39> '<builtin fn type>' Function 0x1c455dd3bb0 'lerp' 'float4 (float4, float4, float4)'
| |       |-CStyleCastExpr 0x1c455e8fed0 <line:146:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8feb8 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8fea0 <col:23> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8fe70 <col:23> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e8f9f0 'V1' 'int64_t4':'vector<int64_t, 4>'
| |       |-CStyleCastExpr 0x1c455e8ff58 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e8ff40 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e8ff28 <col:35> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e8fef8 <col:35> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e8fa70 'V2' 'int64_t4':'vector<int64_t, 4>'
| |       `-CStyleCastExpr 0x1c455e8ffe0 <col:39, col:47> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e8ffc8 <col:47> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e8ffb0 <col:47> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e8ff80 <col:47> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455e8faf0 'V3' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455e90348 <line:148:3, line:150:3> line:287:39 constexpr lerp 'float (uint64_t, uint64_t, uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455e900b8 <line:148:22, col:31> col:31 used V1 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455e90138 <col:35, col:44> col:44 used V2 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455e901b8 <col:48, col:57> col:57 used V3 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455e90778 <col:61, line:150:3>
| |   `-ReturnStmt 0x1c455e90768 <line:149:5, col:46>
| |     `-CallExpr 0x1c455e90728 <line:287:39, line:149:46> 'float'
| |       |-ImplicitCastExpr 0x1c455e90710 <line:287:39> 'float (*)(float, float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e906f0 <col:39> '<builtin fn type>' Function 0x1c455dcc8a0 'lerp' 'float (float, float, float)'
| |       |-CStyleCastExpr 0x1c455e905a8 <line:149:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e90590 <col:22> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e90578 <col:22> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e90540 <col:22> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e900b8 'V1' 'uint64_t':'unsigned long'
| |       |-CStyleCastExpr 0x1c455e90638 <col:26, col:33> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e90620 <col:33> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e90608 <col:33> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e905d0 <col:33> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e90138 'V2' 'uint64_t':'unsigned long'
| |       `-CStyleCastExpr 0x1c455e906c8 <col:37, col:44> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e906b0 <col:44> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e90698 <col:44> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e90660 <col:44> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455e901b8 'V3' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455e90a30 <line:151:3, line:153:3> line:287:39 constexpr lerp 'float2 (uint64_t2, uint64_t2, uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455e907a0 <line:151:23, col:33> col:33 used V1 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455e90820 <col:37, col:47> col:47 used V2 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455e908a0 <col:51, col:61> col:61 used V3 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455e90e50 <col:65, line:153:3>
| |   `-ReturnStmt 0x1c455e90e40 <line:152:5, col:49>
| |     `-CallExpr 0x1c455e90e00 <line:287:39, line:152:49> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455e90de8 <line:287:39> 'float2 (*)(float2, float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455e90dc8 <col:39> '<builtin fn type>' Function 0x1c455dd3430 'lerp' 'float2 (float2, float2, float2)'
| |       |-CStyleCastExpr 0x1c455e90c90 <line:152:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e90c78 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e90c60 <col:23> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e90c30 <col:23> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e907a0 'V1' 'uint64_t2':'vector<uint64_t, 2>'
| |       |-CStyleCastExpr 0x1c455e90d18 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e90d00 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e90ce8 <col:35> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e90cb8 <col:35> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e90820 'V2' 'uint64_t2':'vector<uint64_t, 2>'
| |       `-CStyleCastExpr 0x1c455e90da0 <col:39, col:47> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455e90d88 <col:47> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455e90d70 <col:47> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455e90d40 <col:47> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455e908a0 'V3' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455e91100 <line:154:3, line:156:3> line:287:39 constexpr lerp 'float3 (uint64_t3, uint64_t3, uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455e90e78 <line:154:23, col:33> col:33 used V1 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455e90ef8 <col:37, col:47> col:47 used V2 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455e90f78 <col:51, col:61> col:61 used V3 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455eba940 <col:65, line:156:3>
| |   `-ReturnStmt 0x1c455eba930 <line:155:5, col:49>
| |     `-CallExpr 0x1c455eba8f0 <line:287:39, line:155:49> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455eba8d8 <line:287:39> 'float3 (*)(float3, float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eba8b8 <col:39> '<builtin fn type>' Function 0x1c455dd37f0 'lerp' 'float3 (float3, float3, float3)'
| |       |-CStyleCastExpr 0x1c455e91368 <line:155:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e91350 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e91338 <col:23> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e91308 <col:23> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e90e78 'V1' 'uint64_t3':'vector<uint64_t, 3>'
| |       |-CStyleCastExpr 0x1c455e913f0 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455e913d8 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455e913c0 <col:35> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455e91390 <col:35> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e90ef8 'V2' 'uint64_t3':'vector<uint64_t, 3>'
| |       `-CStyleCastExpr 0x1c455eba890 <col:39, col:47> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eba878 <col:47> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eba860 <col:47> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eba830 <col:47> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455e90f78 'V3' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455ebabf0 <line:157:3, line:159:3> line:287:39 constexpr lerp 'float4 (uint64_t4, uint64_t4, uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455eba968 <line:157:23, col:33> col:33 used V1 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455eba9e8 <col:37, col:47> col:47 used V2 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455ebaa68 <col:51, col:61> col:61 used V3 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455ebb020 <col:65, line:159:3>
| |   `-ReturnStmt 0x1c455ebb010 <line:158:5, col:49>
| |     `-CallExpr 0x1c455ebafd0 <line:287:39, line:158:49> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ebafb8 <line:287:39> 'float4 (*)(float4, float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebaf98 <col:39> '<builtin fn type>' Function 0x1c455dd3bb0 'lerp' 'float4 (float4, float4, float4)'
| |       |-CStyleCastExpr 0x1c455ebae60 <line:158:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ebae48 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ebae30 <col:23> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ebae00 <col:23> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455eba968 'V1' 'uint64_t4':'vector<uint64_t, 4>'
| |       |-CStyleCastExpr 0x1c455ebaee8 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ebaed0 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ebaeb8 <col:35> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ebae88 <col:35> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455eba9e8 'V2' 'uint64_t4':'vector<uint64_t, 4>'
| |       `-CStyleCastExpr 0x1c455ebaf70 <col:39, col:47> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebaf58 <col:47> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebaf40 <col:47> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebaf10 <col:47> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455ebaa68 'V3' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455ebb108 <line:20:3, col:55> line:293:36 constexpr log 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455ebb050 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455ebb370 <col:32, col:55>
| |   `-ReturnStmt 0x1c455ebb360 <col:34, col:52>
| |     `-CallExpr 0x1c455ebb330 <line:293:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455ebb318 <line:293:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebb2f8 <col:36> '<builtin fn type>' Function 0x1c455dd04d8 'log' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ebb2d0 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebb2b8 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebb2a0 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebb268 <col:51> 'double' lvalue ParmVar 0x1c455ebb050 'V' 'double'
| |-FunctionDecl 0x1c455ebb448 <line:21:3, col:58> line:293:36 constexpr log 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455ebb398 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455ebb6b0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ebb6a0 <col:36, col:55>
| |     `-CallExpr 0x1c455ebb670 <line:293:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ebb658 <line:293:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebb638 <col:36> '<builtin fn type>' Function 0x1c455dd0748 'log' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ebb610 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebb5f8 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebb5e0 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebb5b0 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455ebb398 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455ebb788 <line:22:3, col:58> line:293:36 constexpr log 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455ebb6d8 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455ebb9f8 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ebb9e8 <col:36, col:55>
| |     `-CallExpr 0x1c455ebb9b8 <line:293:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ebb9a0 <line:293:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebb980 <col:36> '<builtin fn type>' Function 0x1c455dd09b8 'log' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ebb958 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebb940 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebb928 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebb8f8 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455ebb6d8 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455ebbad0 <line:23:3, col:58> line:293:36 constexpr log 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455ebba20 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455ebbd48 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ebbd38 <col:36, col:55>
| |     `-CallExpr 0x1c455ebbd08 <line:293:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ebbcf0 <line:293:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebbcd0 <col:36> '<builtin fn type>' Function 0x1c455dd0c28 'log' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ebbca8 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebbc90 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebbc78 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebbc48 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455ebba20 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455ebbe30 <line:54:3, col:52> line:294:37 constexpr log 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455ebbd78 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455ebc0b8 <col:29, col:52>
| |   `-ReturnStmt 0x1c455ebc0a8 <col:31, col:49>
| |     `-CallExpr 0x1c455ebc078 <line:294:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455ebc060 <line:294:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebc040 <col:37> '<builtin fn type>' Function 0x1c455dd04d8 'log' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ebc018 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebc000 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebbfe8 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebbfb0 <col:48> 'int' lvalue ParmVar 0x1c455ebbd78 'V' 'int'
| |-FunctionDecl 0x1c455ebc190 <line:55:3, col:55> line:294:37 constexpr log 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455ebc0e0 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455ebc418 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ebc408 <col:33, col:52>
| |     `-CallExpr 0x1c455ebc3d8 <line:294:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ebc3c0 <line:294:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebc3a0 <col:37> '<builtin fn type>' Function 0x1c455dd0748 'log' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ebc378 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebc360 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebc348 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebc318 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ebc0e0 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455ebc4f0 <line:56:3, col:55> line:294:37 constexpr log 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455ebc440 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455ebc780 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ebc770 <col:33, col:52>
| |     `-CallExpr 0x1c455ebc740 <line:294:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ebc728 <line:294:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebc708 <col:37> '<builtin fn type>' Function 0x1c455dd09b8 'log' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ebc6e0 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebc6c8 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebc6b0 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebc680 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ebc440 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455eb8648 <line:57:3, col:55> line:294:37 constexpr log 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455ebc7a8 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455eb88e0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455eb88d0 <col:33, col:52>
| |     `-CallExpr 0x1c455eb88a0 <line:294:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eb8888 <line:294:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eb8868 <col:37> '<builtin fn type>' Function 0x1c455dd0c28 'log' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455eb8840 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eb8828 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eb8810 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eb87e0 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ebc7a8 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455eb89c0 <line:58:3, col:53> line:294:37 constexpr log 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455eb8908 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455eb8c68 <col:30, col:53>
| |   `-ReturnStmt 0x1c455eb8c58 <col:32, col:50>
| |     `-CallExpr 0x1c455eb8c28 <line:294:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455eb8c10 <line:294:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eb8bf0 <col:37> '<builtin fn type>' Function 0x1c455dd04d8 'log' 'float (float)'
| |       `-CStyleCastExpr 0x1c455eb8bc8 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eb8bb0 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eb8b98 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eb8b60 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455eb8908 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455eb8d40 <line:59:3, col:56> line:294:37 constexpr log 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455eb8c90 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455eb8fe8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455eb8fd8 <col:34, col:53>
| |     `-CallExpr 0x1c455eb8fa8 <line:294:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455eb8f90 <line:294:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eb8f70 <col:37> '<builtin fn type>' Function 0x1c455dd0748 'log' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455eb8f48 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eb8f30 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eb8f18 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eb8ee8 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455eb8c90 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455eb90c0 <line:60:3, col:56> line:294:37 constexpr log 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455eb9010 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455eb9370 <col:32, col:56>
| |   `-ReturnStmt 0x1c455eb9360 <col:34, col:53>
| |     `-CallExpr 0x1c455eb9330 <line:294:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455eb9318 <line:294:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eb92f8 <col:37> '<builtin fn type>' Function 0x1c455dd09b8 'log' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455eb92d0 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eb92b8 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eb92a0 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eb9270 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455eb9010 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455eb9448 <line:61:3, col:56> line:294:37 constexpr log 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455eb9398 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455eb9700 <col:32, col:56>
| |   `-ReturnStmt 0x1c455eb96f0 <col:34, col:53>
| |     `-CallExpr 0x1c455eb96c0 <line:294:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eb96a8 <line:294:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eb9688 <col:37> '<builtin fn type>' Function 0x1c455dd0c28 'log' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455eb9660 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eb9648 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eb9630 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eb9600 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455eb9398 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455eb97e0 <line:62:3, col:56> line:294:37 constexpr log 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455eb9728 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455eb9aa8 <col:33, col:56>
| |   `-ReturnStmt 0x1c455eb9a98 <col:35, col:53>
| |     `-CallExpr 0x1c455eb9a68 <line:294:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455eb9a50 <line:294:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eb9a30 <col:37> '<builtin fn type>' Function 0x1c455dd04d8 'log' 'float (float)'
| |       `-CStyleCastExpr 0x1c455eb9a08 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eb99f0 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eb99d8 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eb99a0 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455eb9728 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455eb9b80 <line:63:3, col:59> line:294:37 constexpr log 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455eb9ad0 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455eb9e48 <col:35, col:59>
| |   `-ReturnStmt 0x1c455eb9e38 <col:37, col:56>
| |     `-CallExpr 0x1c455eb9e08 <line:294:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455eb9df0 <line:294:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eb9dd0 <col:37> '<builtin fn type>' Function 0x1c455dd0748 'log' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455eb9da8 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eb9d90 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eb9d78 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eb9d48 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455eb9ad0 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455eb9f20 <line:64:3, col:59> line:294:37 constexpr log 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455eb9e70 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455eba1f0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455eba1e0 <col:37, col:56>
| |     `-CallExpr 0x1c455eba1b0 <line:294:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455eba198 <line:294:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eba178 <col:37> '<builtin fn type>' Function 0x1c455dd09b8 'log' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455eba150 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eba138 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eba120 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eba0f0 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455eb9e70 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455eba2c8 <line:65:3, col:59> line:294:37 constexpr log 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455eba218 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455eba5a0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455eba590 <col:37, col:56>
| |     `-CallExpr 0x1c455eba560 <line:294:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eba548 <line:294:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eba528 <col:37> '<builtin fn type>' Function 0x1c455dd0c28 'log' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455eba500 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eba4e8 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eba4d0 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eba4a0 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455eba218 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455ec0f18 <line:66:3, col:57> line:294:37 constexpr log 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ec0e60 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455ec1200 <col:34, col:57>
| |   `-ReturnStmt 0x1c455ec11f0 <col:36, col:54>
| |     `-CallExpr 0x1c455ec11c0 <line:294:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455ec11a8 <line:294:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec1188 <col:37> '<builtin fn type>' Function 0x1c455dd04d8 'log' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ec1160 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec1148 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec1130 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec10f8 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455ec0e60 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455ec12d8 <line:67:3, col:60> line:294:37 constexpr log 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ec1228 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455ec15c0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ec15b0 <col:38, col:57>
| |     `-CallExpr 0x1c455ec1580 <line:294:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ec1568 <line:294:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec1548 <col:37> '<builtin fn type>' Function 0x1c455dd0748 'log' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ec1520 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec1508 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec14f0 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec14c0 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ec1228 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455ec1698 <line:68:3, col:60> line:294:37 constexpr log 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ec15e8 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455ec1988 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ec1978 <col:38, col:57>
| |     `-CallExpr 0x1c455ec1948 <line:294:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ec1930 <line:294:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec1910 <col:37> '<builtin fn type>' Function 0x1c455dd09b8 'log' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ec18e8 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec18d0 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec18b8 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec1888 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ec15e8 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455ec1a60 <line:69:3, col:60> line:294:37 constexpr log 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ec19b0 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455ec1d58 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ec1d48 <col:38, col:57>
| |     `-CallExpr 0x1c455ec1d18 <line:294:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ec1d00 <line:294:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec1ce0 <col:37> '<builtin fn type>' Function 0x1c455dd0c28 'log' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ec1cb8 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec1ca0 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec1c88 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec1c58 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455ec19b0 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455ec1e40 <line:20:3, col:55> line:300:36 constexpr log10 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455ec1d88 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455ec20a8 <col:32, col:55>
| |   `-ReturnStmt 0x1c455ec2098 <col:34, col:52>
| |     `-CallExpr 0x1c455ec2068 <line:300:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455ec2050 <line:300:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec2030 <col:36> '<builtin fn type>' Function 0x1c455dd1998 'log10' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ec2008 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec1ff0 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec1fd8 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec1fa0 <col:51> 'double' lvalue ParmVar 0x1c455ec1d88 'V' 'double'
| |-FunctionDecl 0x1c455ec2180 <line:21:3, col:58> line:300:36 constexpr log10 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455ec20d0 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455ec23e8 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ec23d8 <col:36, col:55>
| |     `-CallExpr 0x1c455ec23a8 <line:300:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ec2390 <line:300:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec2370 <col:36> '<builtin fn type>' Function 0x1c455dd1c08 'log10' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ec2348 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec2330 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec2318 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec22e8 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455ec20d0 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455ec24c0 <line:22:3, col:58> line:300:36 constexpr log10 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455ec2410 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455ec2730 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ec2720 <col:36, col:55>
| |     `-CallExpr 0x1c455ec26f0 <line:300:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ec26d8 <line:300:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec26b8 <col:36> '<builtin fn type>' Function 0x1c455dd1e78 'log10' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ec2690 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec2678 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec2660 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec2630 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455ec2410 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455ec2808 <line:23:3, col:58> line:300:36 constexpr log10 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455ec2758 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455ec2a80 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ec2a70 <col:36, col:55>
| |     `-CallExpr 0x1c455ec2a40 <line:300:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ec2a28 <line:300:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec2a08 <col:36> '<builtin fn type>' Function 0x1c455dd20e8 'log10' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ec29e0 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec29c8 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec29b0 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec2980 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455ec2758 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455ec2b68 <line:54:3, col:52> line:301:37 constexpr log10 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455ec2ab0 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455ec2df0 <col:29, col:52>
| |   `-ReturnStmt 0x1c455ec2de0 <col:31, col:49>
| |     `-CallExpr 0x1c455ec2db0 <line:301:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455ec2d98 <line:301:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec2d78 <col:37> '<builtin fn type>' Function 0x1c455dd1998 'log10' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ec2d50 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec2d38 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec2d20 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec2ce8 <col:48> 'int' lvalue ParmVar 0x1c455ec2ab0 'V' 'int'
| |-FunctionDecl 0x1c455ebcaf0 <line:55:3, col:55> line:301:37 constexpr log10 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455ebca40 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455ebcd78 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ebcd68 <col:33, col:52>
| |     `-CallExpr 0x1c455ebcd38 <line:301:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ebcd20 <line:301:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebcd00 <col:37> '<builtin fn type>' Function 0x1c455dd1c08 'log10' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ebccd8 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebccc0 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebcca8 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebcc78 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ebca40 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455ebce50 <line:56:3, col:55> line:301:37 constexpr log10 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455ebcda0 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455ebd0e0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ebd0d0 <col:33, col:52>
| |     `-CallExpr 0x1c455ebd0a0 <line:301:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ebd088 <line:301:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebd068 <col:37> '<builtin fn type>' Function 0x1c455dd1e78 'log10' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ebd040 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebd028 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebd010 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebcfe0 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ebcda0 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455ebd1b8 <line:57:3, col:55> line:301:37 constexpr log10 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455ebd108 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455ebd450 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ebd440 <col:33, col:52>
| |     `-CallExpr 0x1c455ebd410 <line:301:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ebd3f8 <line:301:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebd3d8 <col:37> '<builtin fn type>' Function 0x1c455dd20e8 'log10' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ebd3b0 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebd398 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebd380 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebd350 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ebd108 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455ebd530 <line:58:3, col:53> line:301:37 constexpr log10 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455ebd478 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455ebd7d8 <col:30, col:53>
| |   `-ReturnStmt 0x1c455ebd7c8 <col:32, col:50>
| |     `-CallExpr 0x1c455ebd798 <line:301:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455ebd780 <line:301:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebd760 <col:37> '<builtin fn type>' Function 0x1c455dd1998 'log10' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ebd738 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebd720 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebd708 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebd6d0 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455ebd478 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455ebd8b0 <line:59:3, col:56> line:301:37 constexpr log10 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455ebd800 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455ebdb58 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ebdb48 <col:34, col:53>
| |     `-CallExpr 0x1c455ebdb18 <line:301:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ebdb00 <line:301:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebdae0 <col:37> '<builtin fn type>' Function 0x1c455dd1c08 'log10' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ebdab8 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebdaa0 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebda88 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebda58 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455ebd800 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455ebdc30 <line:60:3, col:56> line:301:37 constexpr log10 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455ebdb80 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455ebdee0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ebded0 <col:34, col:53>
| |     `-CallExpr 0x1c455ebdea0 <line:301:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ebde88 <line:301:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebde68 <col:37> '<builtin fn type>' Function 0x1c455dd1e78 'log10' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ebde40 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebde28 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebde10 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebdde0 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455ebdb80 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455ebdfb8 <line:61:3, col:56> line:301:37 constexpr log10 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455ebdf08 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455ebe270 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ebe260 <col:34, col:53>
| |     `-CallExpr 0x1c455ebe230 <line:301:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ebe218 <line:301:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebe1f8 <col:37> '<builtin fn type>' Function 0x1c455dd20e8 'log10' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ebe1d0 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebe1b8 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebe1a0 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebe170 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455ebdf08 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455ebe350 <line:62:3, col:56> line:301:37 constexpr log10 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ebe298 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455ebe618 <col:33, col:56>
| |   `-ReturnStmt 0x1c455ebe608 <col:35, col:53>
| |     `-CallExpr 0x1c455ebe5d8 <line:301:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455ebe5c0 <line:301:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebe5a0 <col:37> '<builtin fn type>' Function 0x1c455dd1998 'log10' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ebe578 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebe560 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebe548 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebe510 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455ebe298 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455ebe6f0 <line:63:3, col:59> line:301:37 constexpr log10 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ebe640 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455ebe9b8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ebe9a8 <col:37, col:56>
| |     `-CallExpr 0x1c455ebe978 <line:301:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ebe960 <line:301:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebe940 <col:37> '<builtin fn type>' Function 0x1c455dd1c08 'log10' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ebe918 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebe900 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebe8e8 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebe8b8 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ebe640 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455ebed00 <line:64:3, col:59> line:301:37 constexpr log10 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ebec50 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455ebefd0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ebefc0 <col:37, col:56>
| |     `-CallExpr 0x1c455ebef90 <line:301:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ebef78 <line:301:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebef58 <col:37> '<builtin fn type>' Function 0x1c455dd1e78 'log10' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ebef30 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebef18 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebef00 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebeed0 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ebec50 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455ebf0a8 <line:65:3, col:59> line:301:37 constexpr log10 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ebeff8 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455ebf380 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ebf370 <col:37, col:56>
| |     `-CallExpr 0x1c455ebf340 <line:301:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ebf328 <line:301:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebf308 <col:37> '<builtin fn type>' Function 0x1c455dd20e8 'log10' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ebf2e0 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebf2c8 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebf2b0 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebf280 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455ebeff8 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455ebf460 <line:66:3, col:57> line:301:37 constexpr log10 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ebf3a8 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455ebf748 <col:34, col:57>
| |   `-ReturnStmt 0x1c455ebf738 <col:36, col:54>
| |     `-CallExpr 0x1c455ebf708 <line:301:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455ebf6f0 <line:301:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebf6d0 <col:37> '<builtin fn type>' Function 0x1c455dd1998 'log10' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ebf6a8 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebf690 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebf678 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebf640 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455ebf3a8 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455ebf820 <line:67:3, col:60> line:301:37 constexpr log10 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ebf770 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455ebfb08 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ebfaf8 <col:38, col:57>
| |     `-CallExpr 0x1c455ebfac8 <line:301:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ebfab0 <line:301:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebfa90 <col:37> '<builtin fn type>' Function 0x1c455dd1c08 'log10' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ebfa68 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebfa50 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebfa38 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebfa08 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ebf770 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455ebfbe0 <line:68:3, col:60> line:301:37 constexpr log10 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ebfb30 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455ebfed0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ebfec0 <col:38, col:57>
| |     `-CallExpr 0x1c455ebfe90 <line:301:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ebfe78 <line:301:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ebfe58 <col:37> '<builtin fn type>' Function 0x1c455dd1e78 'log10' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ebfe30 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ebfe18 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ebfe00 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ebfdd0 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ebfb30 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455ebffa8 <line:69:3, col:60> line:301:37 constexpr log10 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ebfef8 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455ec02a0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ec0290 <col:38, col:57>
| |     `-CallExpr 0x1c455ec0260 <line:301:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ec0248 <line:301:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec0228 <col:37> '<builtin fn type>' Function 0x1c455dd20e8 'log10' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ec0200 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec01e8 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec01d0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec01a0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455ebfef8 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455ec0388 <line:20:3, col:55> line:307:36 constexpr log2 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455ec02d0 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455ec05f0 <col:32, col:55>
| |   `-ReturnStmt 0x1c455ec05e0 <col:34, col:52>
| |     `-CallExpr 0x1c455ec05b0 <line:307:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455ec0598 <line:307:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec0578 <col:36> '<builtin fn type>' Function 0x1c455dd6178 'log2' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ec0550 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec0538 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec0520 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec04e8 <col:51> 'double' lvalue ParmVar 0x1c455ec02d0 'V' 'double'
| |-FunctionDecl 0x1c455ec06c8 <line:21:3, col:58> line:307:36 constexpr log2 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455ec0618 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455ec0930 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ec0920 <col:36, col:55>
| |     `-CallExpr 0x1c455ec08f0 <line:307:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ec08d8 <line:307:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec08b8 <col:36> '<builtin fn type>' Function 0x1c455dd63e8 'log2' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ec0890 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec0878 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec0860 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec0830 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455ec0618 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455ec0a08 <line:22:3, col:58> line:307:36 constexpr log2 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455ec0958 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455ec30b0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ec30a0 <col:36, col:55>
| |     `-CallExpr 0x1c455ec3070 <line:307:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ec0c20 <line:307:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec0c00 <col:36> '<builtin fn type>' Function 0x1c455dd2348 'log2' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ec0bd8 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec0bc0 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec0ba8 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec0b78 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455ec0958 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455ec3188 <line:23:3, col:58> line:307:36 constexpr log2 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455ec30d8 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455ec3400 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ec33f0 <col:36, col:55>
| |     `-CallExpr 0x1c455ec33c0 <line:307:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ec33a8 <line:307:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec3388 <col:36> '<builtin fn type>' Function 0x1c455dd25b8 'log2' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ec3360 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec3348 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec3330 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec3300 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455ec30d8 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455ec34e8 <line:54:3, col:52> line:308:37 constexpr log2 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455ec3430 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455ec3770 <col:29, col:52>
| |   `-ReturnStmt 0x1c455ec3760 <col:31, col:49>
| |     `-CallExpr 0x1c455ec3730 <line:308:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455ec3718 <line:308:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec36f8 <col:37> '<builtin fn type>' Function 0x1c455dd6178 'log2' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ec36d0 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec36b8 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec36a0 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec3668 <col:48> 'int' lvalue ParmVar 0x1c455ec3430 'V' 'int'
| |-FunctionDecl 0x1c455ec3848 <line:55:3, col:55> line:308:37 constexpr log2 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455ec3798 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455ec3ad0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ec3ac0 <col:33, col:52>
| |     `-CallExpr 0x1c455ec3a90 <line:308:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ec3a78 <line:308:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec3a58 <col:37> '<builtin fn type>' Function 0x1c455dd63e8 'log2' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ec3a30 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec3a18 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec3a00 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec39d0 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ec3798 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455ec3ba8 <line:56:3, col:55> line:308:37 constexpr log2 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455ec3af8 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455ec3e38 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ec3e28 <col:33, col:52>
| |     `-CallExpr 0x1c455ec3df8 <line:308:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ec3de0 <line:308:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec3dc0 <col:37> '<builtin fn type>' Function 0x1c455dd2348 'log2' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ec3d98 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec3d80 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec3d68 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec3d38 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ec3af8 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455ec3f10 <line:57:3, col:55> line:308:37 constexpr log2 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455ec3e60 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455ec41a8 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ec4198 <col:33, col:52>
| |     `-CallExpr 0x1c455ec4168 <line:308:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ec4150 <line:308:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec4130 <col:37> '<builtin fn type>' Function 0x1c455dd25b8 'log2' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ec4108 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec40f0 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec40d8 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec40a8 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ec3e60 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455ec4288 <line:58:3, col:53> line:308:37 constexpr log2 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455ec41d0 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455ec4530 <col:30, col:53>
| |   `-ReturnStmt 0x1c455ec4520 <col:32, col:50>
| |     `-CallExpr 0x1c455ec44f0 <line:308:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455ec44d8 <line:308:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec44b8 <col:37> '<builtin fn type>' Function 0x1c455dd6178 'log2' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ec4490 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec4478 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec4460 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec4428 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455ec41d0 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455ec4608 <line:59:3, col:56> line:308:37 constexpr log2 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455ec4558 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455ec48b0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ec48a0 <col:34, col:53>
| |     `-CallExpr 0x1c455ec4870 <line:308:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ec4858 <line:308:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec4838 <col:37> '<builtin fn type>' Function 0x1c455dd63e8 'log2' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ec4810 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec47f8 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec47e0 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec47b0 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455ec4558 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455ec4988 <line:60:3, col:56> line:308:37 constexpr log2 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455ec48d8 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455ec4c38 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ec4c28 <col:34, col:53>
| |     `-CallExpr 0x1c455ec4bf8 <line:308:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ec4be0 <line:308:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec4bc0 <col:37> '<builtin fn type>' Function 0x1c455dd2348 'log2' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ec4b98 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec4b80 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec4b68 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec4b38 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455ec48d8 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455ec4d10 <line:61:3, col:56> line:308:37 constexpr log2 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455ec4c60 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455ec4fc8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ec4fb8 <col:34, col:53>
| |     `-CallExpr 0x1c455ec4f88 <line:308:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ec4f70 <line:308:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec4f50 <col:37> '<builtin fn type>' Function 0x1c455dd25b8 'log2' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ec4f28 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec4f10 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec4ef8 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec4ec8 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455ec4c60 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455ec96e8 <line:62:3, col:56> line:308:37 constexpr log2 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ec4ff0 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455ec99b0 <col:33, col:56>
| |   `-ReturnStmt 0x1c455ec99a0 <col:35, col:53>
| |     `-CallExpr 0x1c455ec9970 <line:308:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455ec9958 <line:308:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec9938 <col:37> '<builtin fn type>' Function 0x1c455dd6178 'log2' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ec9910 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec98f8 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec98e0 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec98a8 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455ec4ff0 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455ec9a88 <line:63:3, col:59> line:308:37 constexpr log2 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ec99d8 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455ec9d50 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ec9d40 <col:37, col:56>
| |     `-CallExpr 0x1c455ec9d10 <line:308:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ec9cf8 <line:308:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec9cd8 <col:37> '<builtin fn type>' Function 0x1c455dd63e8 'log2' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ec9cb0 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec9c98 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec9c80 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec9c50 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ec99d8 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455ec9e28 <line:64:3, col:59> line:308:37 constexpr log2 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ec9d78 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455eca0f8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455eca0e8 <col:37, col:56>
| |     `-CallExpr 0x1c455eca0b8 <line:308:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455eca0a0 <line:308:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eca080 <col:37> '<builtin fn type>' Function 0x1c455dd2348 'log2' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455eca058 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eca040 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eca028 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec9ff8 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ec9d78 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455eca1d0 <line:65:3, col:59> line:308:37 constexpr log2 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455eca120 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455eca4a8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455eca498 <col:37, col:56>
| |     `-CallExpr 0x1c455eca468 <line:308:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eca450 <line:308:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eca430 <col:37> '<builtin fn type>' Function 0x1c455dd25b8 'log2' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455eca408 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eca3f0 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eca3d8 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eca3a8 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455eca120 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455eca588 <line:66:3, col:57> line:308:37 constexpr log2 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455eca4d0 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455eca870 <col:34, col:57>
| |   `-ReturnStmt 0x1c455eca860 <col:36, col:54>
| |     `-CallExpr 0x1c455eca830 <line:308:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455eca818 <line:308:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eca7f8 <col:37> '<builtin fn type>' Function 0x1c455dd6178 'log2' 'float (float)'
| |       `-CStyleCastExpr 0x1c455eca7d0 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eca7b8 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eca7a0 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eca768 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455eca4d0 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455eca948 <line:67:3, col:60> line:308:37 constexpr log2 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455eca898 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455ecac30 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ecac20 <col:38, col:57>
| |     `-CallExpr 0x1c455ecabf0 <line:308:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ecabd8 <line:308:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ecabb8 <col:37> '<builtin fn type>' Function 0x1c455dd63e8 'log2' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ecab90 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ecab78 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ecab60 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ecab30 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455eca898 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455ecad08 <line:68:3, col:60> line:308:37 constexpr log2 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ecac58 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455ecaff8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ecafe8 <col:38, col:57>
| |     `-CallExpr 0x1c455ecafb8 <line:308:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ecafa0 <line:308:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ecaf80 <col:37> '<builtin fn type>' Function 0x1c455dd2348 'log2' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ecaf58 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ecaf40 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ecaf28 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ecaef8 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ecac58 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455ecb0d0 <line:69:3, col:60> line:308:37 constexpr log2 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ecb020 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455ecb3c8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ecb3b8 <col:38, col:57>
| |     `-CallExpr 0x1c455ecb388 <line:308:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ecb370 <line:308:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ecb350 <col:37> '<builtin fn type>' Function 0x1c455dd25b8 'log2' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ecb328 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ecb310 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ecb2f8 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ecb2c8 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455ecb020 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionTemplateDecl 0x1c455ec5b90 <line:314:1, line:318:1> line:316:1 max
| | |-TemplateTypeParmDecl 0x1c455ecb3e0 <line:314:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455ecb470 <col:23, col:28> col:28 referenced 'uint':'unsigned int' depth 0 index 1 N
| | `-FunctionDecl 0x1c455ec5ae8 <line:315:1, line:318:1> line:316:1 constexpr max '__detail::enable_if_t<(N > 1 && N <= 4), vector<T, N>> (vector<T, N>, T)' implicit-inline
| |   |-ParmVarDecl 0x1c455ec58f0 <col:5, col:18> col:18 referenced p0 'vector<T, N>'
| |   |-ParmVarDecl 0x1c455ec5970 <col:22, col:24> col:24 referenced p1 'T'
| |   `-CompoundStmt 0x1c455ec6030 <col:28, line:318:1>
| |     `-ReturnStmt 0x1c455ec6020 <line:317:3, col:34>
| |       `-CallExpr 0x1c455ec5fe8 <col:10, col:34> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455ec5c88 <col:10> '<overloaded function type>' lvalue (ADL) = 'max' 0x1c455ec5b90 0x1c455dddfa8 0x1c455dde2b0 0x1c455dde5c8 0x1c455dde8e0 0x1c455ddec10 0x1c455ddcea0 0x1c455ddd240 0x1c455ddd5e0 0x1c455ddd8f8 0x1c455dddc50 0x1c455de2570 0x1c455de28d0 0x1c455de2be8 0x1c455de2f80 0x1c455de3450 0x1c455de37f0 0x1c455de3b08 0x1c455de3ea0 0x1c455de4240 0x1c455de02f0 0x1c455de0620 0x1c455de0938 0x1c455de0c50 0x1c455de0f68 0x1c455de46d8 0x1c455de4a70 0x1c455de4e10 0x1c455de51b0
| |         |-DeclRefExpr 0x1c455ec5db0 <col:14> 'vector<T, N>' lvalue ParmVar 0x1c455ec58f0 'p0' 'vector<T, N>'
| |         `-CStyleCastExpr 0x1c455ec5fc0 <col:18, col:32> 'vector<T, N>' <Dependent>
| |           `-DeclRefExpr 0x1c455ec5f78 <col:32> 'T' lvalue ParmVar 0x1c455ec5970 'p1' 'T'
| |-FunctionTemplateDecl 0x1c455ec6c10 <line:320:1, line:324:1> line:322:1 max
| | |-TemplateTypeParmDecl 0x1c455ec6048 <line:320:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455ec60e0 <col:23, col:28> col:28 referenced 'uint':'unsigned int' depth 0 index 1 N
| | `-FunctionDecl 0x1c455ec6b68 <line:321:1, line:324:1> line:322:1 constexpr max '__detail::enable_if_t<(N > 1 && N <= 4), vector<T, N>> (T, vector<T, N>)' implicit-inline
| |   |-ParmVarDecl 0x1c455ec67a8 <col:5, col:7> col:7 referenced p0 'T'
| |   |-ParmVarDecl 0x1c455ec69f0 <col:11, col:24> col:24 referenced p1 'vector<T, N>'
| |   `-CompoundStmt 0x1c455ec70c0 <col:28, line:324:1>
| |     `-ReturnStmt 0x1c455ec70b0 <line:323:3, col:34>
| |       `-CallExpr 0x1c455ec7078 <col:10, col:34> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455ec6d08 <col:10> '<overloaded function type>' lvalue (ADL) = 'max' 0x1c455ec6c10 0x1c455ec5b90 0x1c455dddfa8 0x1c455dde2b0 0x1c455dde5c8 0x1c455dde8e0 0x1c455ddec10 0x1c455ddcea0 0x1c455ddd240 0x1c455ddd5e0 0x1c455ddd8f8 0x1c455dddc50 0x1c455de2570 0x1c455de28d0 0x1c455de2be8 0x1c455de2f80 0x1c455de3450 0x1c455de37f0 0x1c455de3b08 0x1c455de3ea0 0x1c455de4240 0x1c455de02f0 0x1c455de0620 0x1c455de0938 0x1c455de0c50 0x1c455de0f68 0x1c455de46d8 0x1c455de4a70 0x1c455de4e10 0x1c455de51b0
| |         |-CStyleCastExpr 0x1c455ec7030 <col:14, col:28> 'vector<T, N>' <Dependent>
| |         | `-DeclRefExpr 0x1c455ec6fe8 <col:28> 'T' lvalue ParmVar 0x1c455ec67a8 'p0' 'T'
| |         `-DeclRefExpr 0x1c455ec7058 <col:32> 'vector<T, N>' lvalue ParmVar 0x1c455ec69f0 'p1' 'vector<T, N>'
| |-FunctionTemplateDecl 0x1c455ecc2a0 <line:330:1, line:334:1> line:332:1 min
| | |-TemplateTypeParmDecl 0x1c455ec70d8 <line:330:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455ec7170 <col:23, col:28> col:28 referenced 'uint':'unsigned int' depth 0 index 1 N
| | `-FunctionDecl 0x1c455ecc1f8 <line:331:1, line:334:1> line:332:1 constexpr min '__detail::enable_if_t<(N > 1 && N <= 4), vector<T, N>> (vector<T, N>, T)' implicit-inline
| |   |-ParmVarDecl 0x1c455ecc040 <col:5, col:18> col:18 referenced p0 'vector<T, N>'
| |   |-ParmVarDecl 0x1c455ecc0c0 <col:22, col:24> col:24 referenced p1 'T'
| |   `-CompoundStmt 0x1c455ecc740 <col:28, line:334:1>
| |     `-ReturnStmt 0x1c455ecc730 <line:333:3, col:34>
| |       `-CallExpr 0x1c455ecc6f8 <col:10, col:34> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455ecc398 <col:10> '<overloaded function type>' lvalue (ADL) = 'min' 0x1c455ecc2a0 0x1c455de1230 0x1c455de1538 0x1c455de1850 0x1c455de1b68 0x1c455de1e98 0x1c455de5670 0x1c455de5988 0x1c455de5ca0 0x1c455de5fb8 0x1c455de62d0 0x1c455de6780 0x1c455de6a98 0x1c455de6dc8 0x1c455de70e0 0x1c455de73f8 0x1c455de7890 0x1c455de7ba8 0x1c455de7ec0 0x1c455de81d8 0x1c455de84f0 0x1c455deabc0 0x1c455deaed8 0x1c455deb1f0 0x1c455deb508 0x1c455deb838 0x1c455debcd0 0x1c455debfe8 0x1c455dec300
| |         |-DeclRefExpr 0x1c455ecc4c0 <col:14> 'vector<T, N>' lvalue ParmVar 0x1c455ecc040 'p0' 'vector<T, N>'
| |         `-CStyleCastExpr 0x1c455ecc6d0 <col:18, col:32> 'vector<T, N>' <Dependent>
| |           `-DeclRefExpr 0x1c455ecc688 <col:32> 'T' lvalue ParmVar 0x1c455ecc0c0 'p1' 'T'
| |-FunctionTemplateDecl 0x1c455ecd2e0 <line:336:1, line:340:1> line:338:1 min
| | |-TemplateTypeParmDecl 0x1c455ecc758 <line:336:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455ecc7f0 <col:23, col:28> col:28 referenced 'uint':'unsigned int' depth 0 index 1 N
| | `-FunctionDecl 0x1c455ecd238 <line:337:1, line:340:1> line:338:1 constexpr min '__detail::enable_if_t<(N > 1 && N <= 4), vector<T, N>> (T, vector<T, N>)' implicit-inline
| |   |-ParmVarDecl 0x1c455ecceb8 <col:5, col:7> col:7 referenced p0 'T'
| |   |-ParmVarDecl 0x1c455ecd100 <col:11, col:24> col:24 referenced p1 'vector<T, N>'
| |   `-CompoundStmt 0x1c455ecd790 <col:28, line:340:1>
| |     `-ReturnStmt 0x1c455ecd780 <line:339:3, col:34>
| |       `-CallExpr 0x1c455ecd748 <col:10, col:34> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455ecd3d8 <col:10> '<overloaded function type>' lvalue (ADL) = 'min' 0x1c455ecd2e0 0x1c455ecc2a0 0x1c455de1230 0x1c455de1538 0x1c455de1850 0x1c455de1b68 0x1c455de1e98 0x1c455de5670 0x1c455de5988 0x1c455de5ca0 0x1c455de5fb8 0x1c455de62d0 0x1c455de6780 0x1c455de6a98 0x1c455de6dc8 0x1c455de70e0 0x1c455de73f8 0x1c455de7890 0x1c455de7ba8 0x1c455de7ec0 0x1c455de81d8 0x1c455de84f0 0x1c455deabc0 0x1c455deaed8 0x1c455deb1f0 0x1c455deb508 0x1c455deb838 0x1c455debcd0 0x1c455debfe8 0x1c455dec300
| |         |-CStyleCastExpr 0x1c455ecd700 <col:14, col:28> 'vector<T, N>' <Dependent>
| |         | `-DeclRefExpr 0x1c455ecd6b8 <col:28> 'T' lvalue ParmVar 0x1c455ecceb8 'p0' 'T'
| |         `-DeclRefExpr 0x1c455ecd728 <col:32> 'vector<T, N>' lvalue ParmVar 0x1c455ecd100 'p1' 'vector<T, N>'
| |-FunctionDecl 0x1c455ec7490 <line:20:3, col:55> line:346:36 constexpr normalize 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455ecd7c0 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455ec76f8 <col:32, col:55>
| |   `-ReturnStmt 0x1c455ec76e8 <col:34, col:52>
| |     `-CallExpr 0x1c455ec76b8 <line:346:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455ec76a0 <line:346:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec7680 <col:36> '<builtin fn type>' Function 0x1c455de8c20 'normalize' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ec7658 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec7640 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec7628 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec75f0 <col:51> 'double' lvalue ParmVar 0x1c455ecd7c0 'V' 'double'
| |-FunctionDecl 0x1c455ec77d0 <line:21:3, col:58> line:346:36 constexpr normalize 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455ec7720 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455ec7a38 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ec7a28 <col:36, col:55>
| |     `-CallExpr 0x1c455ec79f8 <line:346:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ec79e0 <line:346:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec79c0 <col:36> '<builtin fn type>' Function 0x1c455de8e90 'normalize' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ec7998 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec7980 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec7968 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec7938 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455ec7720 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455ec7b10 <line:22:3, col:58> line:346:36 constexpr normalize 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455ec7a60 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455ec7d80 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ec7d70 <col:36, col:55>
| |     `-CallExpr 0x1c455ec7d40 <line:346:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ec7d28 <line:346:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec7d08 <col:36> '<builtin fn type>' Function 0x1c455de9100 'normalize' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ec7ce0 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec7cc8 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec7cb0 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec7c80 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455ec7a60 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455ec7e58 <line:23:3, col:58> line:346:36 constexpr normalize 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455ec7da8 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455ec80d0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ec80c0 <col:36, col:55>
| |     `-CallExpr 0x1c455ec8090 <line:346:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ec8078 <line:346:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec8058 <col:36> '<builtin fn type>' Function 0x1c455de9370 'normalize' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ec8030 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec8018 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec8000 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec7fd0 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455ec7da8 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455ec81b8 <line:54:3, col:52> line:347:37 constexpr normalize 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455ec8100 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455ec8440 <col:29, col:52>
| |   `-ReturnStmt 0x1c455ec8430 <col:31, col:49>
| |     `-CallExpr 0x1c455ec8400 <line:347:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455ec83e8 <line:347:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec83c8 <col:37> '<builtin fn type>' Function 0x1c455de8c20 'normalize' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ec83a0 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec8388 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec8370 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec8338 <col:48> 'int' lvalue ParmVar 0x1c455ec8100 'V' 'int'
| |-FunctionDecl 0x1c455ec8518 <line:55:3, col:55> line:347:37 constexpr normalize 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455ec8468 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455ec87a0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ec8790 <col:33, col:52>
| |     `-CallExpr 0x1c455ec8760 <line:347:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ec8748 <line:347:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec8728 <col:37> '<builtin fn type>' Function 0x1c455de8e90 'normalize' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ec8700 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec86e8 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec86d0 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec86a0 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ec8468 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455ec8878 <line:56:3, col:55> line:347:37 constexpr normalize 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455ec87c8 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455ec8b08 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ec8af8 <col:33, col:52>
| |     `-CallExpr 0x1c455ec8ac8 <line:347:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ec8ab0 <line:347:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec8a90 <col:37> '<builtin fn type>' Function 0x1c455de9100 'normalize' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ec8a68 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec8a50 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec8a38 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec8a08 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ec87c8 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455ec8be0 <line:57:3, col:55> line:347:37 constexpr normalize 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455ec8b30 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455ec8e78 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ec8e68 <col:33, col:52>
| |     `-CallExpr 0x1c455ec8e38 <line:347:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ec8e20 <line:347:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec8e00 <col:37> '<builtin fn type>' Function 0x1c455de9370 'normalize' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ec8dd8 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec8dc0 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec8da8 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec8d78 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ec8b30 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455ec8f58 <line:58:3, col:53> line:347:37 constexpr normalize 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455ec8ea0 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455ec9200 <col:30, col:53>
| |   `-ReturnStmt 0x1c455ec91f0 <col:32, col:50>
| |     `-CallExpr 0x1c455ec91c0 <line:347:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455ec91a8 <line:347:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ec9188 <col:37> '<builtin fn type>' Function 0x1c455de8c20 'normalize' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ec9160 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ec9148 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ec9130 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ec90f8 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455ec8ea0 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455ec92d8 <line:59:3, col:56> line:347:37 constexpr normalize 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455ec9228 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455ed1fe0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ed1fd0 <col:34, col:53>
| |     `-CallExpr 0x1c455ed1fa0 <line:347:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ed1f88 <line:347:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed1f68 <col:37> '<builtin fn type>' Function 0x1c455de8e90 'normalize' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ed1f40 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed1f28 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed1f10 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed1ee0 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455ec9228 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455ed20b8 <line:60:3, col:56> line:347:37 constexpr normalize 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455ed2008 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455ed2368 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ed2358 <col:34, col:53>
| |     `-CallExpr 0x1c455ed2328 <line:347:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ed2310 <line:347:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed22f0 <col:37> '<builtin fn type>' Function 0x1c455de9100 'normalize' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ed22c8 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed22b0 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed2298 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed2268 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455ed2008 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455ed2440 <line:61:3, col:56> line:347:37 constexpr normalize 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455ed2390 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455ed26f8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ed26e8 <col:34, col:53>
| |     `-CallExpr 0x1c455ed26b8 <line:347:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ed26a0 <line:347:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed2680 <col:37> '<builtin fn type>' Function 0x1c455de9370 'normalize' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ed2658 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed2640 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed2628 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed25f8 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455ed2390 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455ed27d8 <line:62:3, col:56> line:347:37 constexpr normalize 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ed2720 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455ed2aa0 <col:33, col:56>
| |   `-ReturnStmt 0x1c455ed2a90 <col:35, col:53>
| |     `-CallExpr 0x1c455ed2a60 <line:347:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455ed2a48 <line:347:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed2a28 <col:37> '<builtin fn type>' Function 0x1c455de8c20 'normalize' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ed2a00 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed29e8 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed29d0 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed2998 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455ed2720 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455ed2b78 <line:63:3, col:59> line:347:37 constexpr normalize 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ed2ac8 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455ed2e40 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ed2e30 <col:37, col:56>
| |     `-CallExpr 0x1c455ed2e00 <line:347:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ed2de8 <line:347:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed2dc8 <col:37> '<builtin fn type>' Function 0x1c455de8e90 'normalize' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ed2da0 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed2d88 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed2d70 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed2d40 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ed2ac8 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455ed2f18 <line:64:3, col:59> line:347:37 constexpr normalize 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ed2e68 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455ed31e8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ed31d8 <col:37, col:56>
| |     `-CallExpr 0x1c455ed31a8 <line:347:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ed3190 <line:347:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed3170 <col:37> '<builtin fn type>' Function 0x1c455de9100 'normalize' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ed3148 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed3130 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed3118 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed30e8 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ed2e68 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455ed32c0 <line:65:3, col:59> line:347:37 constexpr normalize 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ed3210 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455ed3598 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ed3588 <col:37, col:56>
| |     `-CallExpr 0x1c455ed3558 <line:347:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ed3540 <line:347:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed3520 <col:37> '<builtin fn type>' Function 0x1c455de9370 'normalize' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ed34f8 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed34e0 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed34c8 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed3498 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455ed3210 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455ed3678 <line:66:3, col:57> line:347:37 constexpr normalize 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ed35c0 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455ed3960 <col:34, col:57>
| |   `-ReturnStmt 0x1c455ed3950 <col:36, col:54>
| |     `-CallExpr 0x1c455ed3920 <line:347:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455ed3908 <line:347:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed38e8 <col:37> '<builtin fn type>' Function 0x1c455de8c20 'normalize' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ed38c0 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed38a8 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed3890 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed3858 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455ed35c0 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455ed3a38 <line:67:3, col:60> line:347:37 constexpr normalize 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ed3988 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455ed3d20 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ed3d10 <col:38, col:57>
| |     `-CallExpr 0x1c455ed3ce0 <line:347:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ed3cc8 <line:347:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed3ca8 <col:37> '<builtin fn type>' Function 0x1c455de8e90 'normalize' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ed3c80 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed3c68 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed3c50 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed3c20 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ed3988 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455ed3df8 <line:68:3, col:60> line:347:37 constexpr normalize 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ed3d48 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455ecfee8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ecfed8 <col:38, col:57>
| |     `-CallExpr 0x1c455ecfea8 <line:347:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ecfe90 <line:347:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ecfe70 <col:37> '<builtin fn type>' Function 0x1c455de9100 'normalize' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ecfe48 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ecfe30 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ecfe18 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ecfde8 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ed3d48 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455ecffc0 <line:69:3, col:60> line:347:37 constexpr normalize 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ecff10 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455ed02b8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ed02a8 <col:38, col:57>
| |     `-CallExpr 0x1c455ed0278 <line:347:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ed0260 <line:347:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed0240 <col:37> '<builtin fn type>' Function 0x1c455de9370 'normalize' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ed0218 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed0200 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed01e8 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed01b8 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455ecff10 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455ed0448 <line:26:3, line:28:3> line:353:37 constexpr pow 'float (double, double)' implicit-inline
| | |-ParmVarDecl 0x1c455ed02e8 <line:26:22, col:29> col:29 used V1 'double'
| | |-ParmVarDecl 0x1c455ed0370 <col:33, col:40> col:40 used V2 'double'
| | `-CompoundStmt 0x1c455ed0750 <col:44, line:28:3>
| |   `-ReturnStmt 0x1c455ed0740 <line:27:5, col:35>
| |     `-CallExpr 0x1c455ed0708 <line:353:37, line:27:35> 'float'
| |       |-ImplicitCastExpr 0x1c455ed06f0 <line:353:37> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed06d0 <col:37> '<builtin fn type>' Function 0x1c455dea0f8 'pow' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455ed0618 <line:27:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed0600 <col:22> 'float' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed05e8 <col:22> 'double' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed05b0 <col:22> 'double' lvalue ParmVar 0x1c455ed02e8 'V1' 'double'
| |       `-CStyleCastExpr 0x1c455ed06a8 <col:26, col:33> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed0690 <col:33> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed0678 <col:33> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed0640 <col:33> 'double' lvalue ParmVar 0x1c455ed0370 'V2' 'double'
| |-FunctionDecl 0x1c455ed08c8 <line:29:3, line:31:3> line:353:37 constexpr pow 'float2 (double2, double2)' implicit-inline
| | |-ParmVarDecl 0x1c455ed0778 <line:29:23, col:31> col:31 used V1 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455ed07f8 <col:35, col:43> col:43 used V2 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455ed0bc8 <col:47, line:31:3>
| |   `-ReturnStmt 0x1c455ed0bb8 <line:30:5, col:37>
| |     `-CallExpr 0x1c455ed0b80 <line:353:37, line:30:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ed0b68 <line:353:37> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed0b48 <col:37> '<builtin fn type>' Function 0x1c455dea410 'pow' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455ed0a98 <line:30:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed0a80 <col:23> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed0a68 <col:23> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed0a38 <col:23> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455ed0778 'V1' 'double2':'vector<double, 2>'
| |       `-CStyleCastExpr 0x1c455ed0b20 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed0b08 <col:35> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed0af0 <col:35> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed0ac0 <col:35> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455ed07f8 'V2' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455ed0d40 <line:32:3, line:34:3> line:353:37 constexpr pow 'float3 (double3, double3)' implicit-inline
| | |-ParmVarDecl 0x1c455ed0bf0 <line:32:23, col:31> col:31 used V1 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455ed0c70 <col:35, col:43> col:43 used V2 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455ed1048 <col:47, line:34:3>
| |   `-ReturnStmt 0x1c455ed1038 <line:33:5, col:37>
| |     `-CallExpr 0x1c455ed1000 <line:353:37, line:33:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ed0fe8 <line:353:37> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed0fc8 <col:37> '<builtin fn type>' Function 0x1c455dea728 'pow' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455ed0f18 <line:33:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed0f00 <col:23> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed0ee8 <col:23> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed0eb8 <col:23> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455ed0bf0 'V1' 'double3':'vector<double, 3>'
| |       `-CStyleCastExpr 0x1c455ed0fa0 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed0f88 <col:35> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed0f70 <col:35> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed0f40 <col:35> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455ed0c70 'V2' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455ed11c0 <line:35:3, line:37:3> line:353:37 constexpr pow 'float4 (double4, double4)' implicit-inline
| | |-ParmVarDecl 0x1c455ed1070 <line:35:23, col:31> col:31 used V1 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455ed10f0 <col:35, col:43> col:43 used V2 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455ed14d0 <col:47, line:37:3>
| |   `-ReturnStmt 0x1c455ed14c0 <line:36:5, col:37>
| |     `-CallExpr 0x1c455ed1488 <line:353:37, line:36:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ed1470 <line:353:37> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed1450 <col:37> '<builtin fn type>' Function 0x1c455df0110 'pow' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455ed13a0 <line:36:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed1388 <col:23> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed1370 <col:23> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed1340 <col:23> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455ed1070 'V1' 'double4':'vector<double, 4>'
| |       `-CStyleCastExpr 0x1c455ed1428 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed1410 <col:35> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed13f8 <col:35> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed13c8 <col:35> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455ed10f0 'V2' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455ed1660 <line:72:3, col:73> line:354:38 constexpr pow 'float (int, int)' implicit-inline
| | |-ParmVarDecl 0x1c455ed1500 <line:72:22, col:26> col:26 used V1 'int'
| | |-ParmVarDecl 0x1c455ed1588 <col:30, col:34> col:34 used V2 'int'
| | `-CompoundStmt 0x1c455ed1988 <col:38, col:73>
| |   `-ReturnStmt 0x1c455ed1978 <col:40, col:70>
| |     `-CallExpr 0x1c455ed1940 <line:354:38, line:72:70> 'float'
| |       |-ImplicitCastExpr 0x1c455ed1928 <line:354:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed1908 <col:38> '<builtin fn type>' Function 0x1c455dea0f8 'pow' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455ed1850 <line:72:50, col:57> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed1838 <col:57> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed1820 <col:57> 'int' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed17e8 <col:57> 'int' lvalue ParmVar 0x1c455ed1500 'V1' 'int'
| |       `-CStyleCastExpr 0x1c455ed18e0 <col:61, col:68> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed18c8 <col:68> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed18b0 <col:68> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed1878 <col:68> 'int' lvalue ParmVar 0x1c455ed1588 'V2' 'int'
| |-FunctionDecl 0x1c455ed1b00 <line:73:3, col:78> line:354:38 constexpr pow 'float2 (int2, int2)' implicit-inline
| | |-ParmVarDecl 0x1c455ed19b0 <line:73:23, col:28> col:28 used V1 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455ed1a30 <col:32, col:37> col:37 used V2 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455ed4250 <col:41, col:78>
| |   `-ReturnStmt 0x1c455ed4240 <col:43, col:75>
| |     `-CallExpr 0x1c455ed4208 <line:354:38, line:73:75> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ed41f0 <line:354:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed41d0 <col:38> '<builtin fn type>' Function 0x1c455dea410 'pow' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455ed4120 <line:73:53, col:61> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed4108 <col:61> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed40f0 <col:61> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed1c90 <col:61> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ed19b0 'V1' 'int2':'vector<int, 2>'
| |       `-CStyleCastExpr 0x1c455ed41a8 <col:65, col:73> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed4190 <col:73> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed4178 <col:73> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed4148 <col:73> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ed1a30 'V2' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455ed43c8 <line:74:3, col:78> line:354:38 constexpr pow 'float3 (int3, int3)' implicit-inline
| | |-ParmVarDecl 0x1c455ed4278 <line:74:23, col:28> col:28 used V1 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455ed42f8 <col:32, col:37> col:37 used V2 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455ed46f0 <col:41, col:78>
| |   `-ReturnStmt 0x1c455ed46e0 <col:43, col:75>
| |     `-CallExpr 0x1c455ed46a8 <line:354:38, line:74:75> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ed4690 <line:354:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed4670 <col:38> '<builtin fn type>' Function 0x1c455dea728 'pow' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455ed45c0 <line:74:53, col:61> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed45a8 <col:61> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed4590 <col:61> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed4560 <col:61> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ed4278 'V1' 'int3':'vector<int, 3>'
| |       `-CStyleCastExpr 0x1c455ed4648 <col:65, col:73> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed4630 <col:73> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed4618 <col:73> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed45e8 <col:73> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ed42f8 'V2' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455ed4868 <line:75:3, col:78> line:354:38 constexpr pow 'float4 (int4, int4)' implicit-inline
| | |-ParmVarDecl 0x1c455ed4718 <line:75:23, col:28> col:28 used V1 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455ed4798 <col:32, col:37> col:37 used V2 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455ed4b98 <col:41, col:78>
| |   `-ReturnStmt 0x1c455ed4b88 <col:43, col:75>
| |     `-CallExpr 0x1c455ed4b50 <line:354:38, line:75:75> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ed4b38 <line:354:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed4b18 <col:38> '<builtin fn type>' Function 0x1c455df0110 'pow' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455ed4a68 <line:75:53, col:61> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed4a50 <col:61> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed4a38 <col:61> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed4a08 <col:61> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ed4718 'V1' 'int4':'vector<int, 4>'
| |       `-CStyleCastExpr 0x1c455ed4af0 <col:65, col:73> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed4ad8 <col:73> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed4ac0 <col:73> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed4a90 <col:73> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ed4798 'V2' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455ed4d18 <line:76:3, col:75> line:354:38 constexpr pow 'float (uint, uint)' implicit-inline
| | |-ParmVarDecl 0x1c455ed4bc0 <line:76:22, col:27> col:27 used V1 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455ed4c40 <col:31, col:36> col:36 used V2 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455ed5060 <col:40, col:75>
| |   `-ReturnStmt 0x1c455ed5050 <col:42, col:72>
| |     `-CallExpr 0x1c455ed5018 <line:354:38, line:76:72> 'float'
| |       |-ImplicitCastExpr 0x1c455ed5000 <line:354:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed4fe0 <col:38> '<builtin fn type>' Function 0x1c455dea0f8 'pow' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455ed4f28 <line:76:52, col:59> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed4f10 <col:59> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed4ef8 <col:59> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed4ec0 <col:59> 'uint':'unsigned int' lvalue ParmVar 0x1c455ed4bc0 'V1' 'uint':'unsigned int'
| |       `-CStyleCastExpr 0x1c455ed4fb8 <col:63, col:70> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed4fa0 <col:70> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed4f88 <col:70> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed4f50 <col:70> 'uint':'unsigned int' lvalue ParmVar 0x1c455ed4c40 'V2' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455ed51d8 <line:77:3, line:79:3> line:354:38 constexpr pow 'float2 (uint2, uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455ed5088 <line:77:23, col:29> col:29 used V1 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455ed5108 <col:33, col:39> col:39 used V2 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455ed5518 <col:43, line:79:3>
| |   `-ReturnStmt 0x1c455ed5508 <line:78:5, col:37>
| |     `-CallExpr 0x1c455ed54d0 <line:354:38, line:78:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ed54b8 <line:354:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed5498 <col:38> '<builtin fn type>' Function 0x1c455dea410 'pow' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455ed53e8 <line:78:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed53d0 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed53b8 <col:23> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed5388 <col:23> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455ed5088 'V1' 'uint2':'vector<uint, 2>'
| |       `-CStyleCastExpr 0x1c455ed5470 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed5458 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed5440 <col:35> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed5410 <col:35> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455ed5108 'V2' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455ed5690 <line:80:3, line:82:3> line:354:38 constexpr pow 'float3 (uint3, uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455ed5540 <line:80:23, col:29> col:29 used V1 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455ed55c0 <col:33, col:39> col:39 used V2 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455ed59d8 <col:43, line:82:3>
| |   `-ReturnStmt 0x1c455ed59c8 <line:81:5, col:37>
| |     `-CallExpr 0x1c455ed5990 <line:354:38, line:81:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ed5978 <line:354:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed5958 <col:38> '<builtin fn type>' Function 0x1c455dea728 'pow' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455ed58a8 <line:81:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed5890 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed5878 <col:23> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed5848 <col:23> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455ed5540 'V1' 'uint3':'vector<uint, 3>'
| |       `-CStyleCastExpr 0x1c455ed5930 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed5918 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed5900 <col:35> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed58d0 <col:35> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455ed55c0 'V2' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455ed5b50 <line:83:3, line:85:3> line:354:38 constexpr pow 'float4 (uint4, uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455ed5a00 <line:83:23, col:29> col:29 used V1 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455ed5a80 <col:33, col:39> col:39 used V2 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455ed5ea0 <col:43, line:85:3>
| |   `-ReturnStmt 0x1c455ed5e90 <line:84:5, col:37>
| |     `-CallExpr 0x1c455ed5e58 <line:354:38, line:84:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ed5e40 <line:354:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed5e20 <col:38> '<builtin fn type>' Function 0x1c455df0110 'pow' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455ed5d70 <line:84:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ed5d58 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ed5d40 <col:23> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ed5d10 <col:23> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455ed5a00 'V1' 'uint4':'vector<uint, 4>'
| |       `-CStyleCastExpr 0x1c455ed5df8 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed5de0 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed5dc8 <col:35> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed5d98 <col:35> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455ed5a80 'V2' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455ed6020 <line:86:3, line:88:3> line:354:38 constexpr pow 'float (int64_t, int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ed5ec8 <line:86:22, col:30> col:30 used V1 'int64_t':'long'
| | |-ParmVarDecl 0x1c455ed5f48 <col:34, col:42> col:42 used V2 'int64_t':'long'
| | `-CompoundStmt 0x1c455ecdd58 <col:46, line:88:3>
| |   `-ReturnStmt 0x1c455ecdd48 <line:87:5, col:35>
| |     `-CallExpr 0x1c455ecdd10 <line:354:38, line:87:35> 'float'
| |       |-ImplicitCastExpr 0x1c455ecdcf8 <line:354:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ecdcd8 <col:38> '<builtin fn type>' Function 0x1c455dea0f8 'pow' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455ecdc20 <line:87:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ecdc08 <col:22> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ecdbf0 <col:22> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ecdbb8 <col:22> 'int64_t':'long' lvalue ParmVar 0x1c455ed5ec8 'V1' 'int64_t':'long'
| |       `-CStyleCastExpr 0x1c455ecdcb0 <col:26, col:33> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ecdc98 <col:33> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ecdc80 <col:33> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ecdc48 <col:33> 'int64_t':'long' lvalue ParmVar 0x1c455ed5f48 'V2' 'int64_t':'long'
| |-FunctionDecl 0x1c455ecded0 <line:89:3, line:91:3> line:354:38 constexpr pow 'float2 (int64_t2, int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ecdd80 <line:89:23, col:32> col:32 used V1 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455ecde00 <col:36, col:45> col:45 used V2 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455ece230 <col:49, line:91:3>
| |   `-ReturnStmt 0x1c455ece220 <line:90:5, col:37>
| |     `-CallExpr 0x1c455ece1e8 <line:354:38, line:90:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ece1d0 <line:354:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ece1b0 <col:38> '<builtin fn type>' Function 0x1c455dea410 'pow' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455ece100 <line:90:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ece0e8 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ece0d0 <col:23> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ece0a0 <col:23> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ecdd80 'V1' 'int64_t2':'vector<int64_t, 2>'
| |       `-CStyleCastExpr 0x1c455ece188 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ece170 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ece158 <col:35> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ece128 <col:35> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ecde00 'V2' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455ece3a8 <line:92:3, line:94:3> line:354:38 constexpr pow 'float3 (int64_t3, int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ece258 <line:92:23, col:32> col:32 used V1 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455ece2d8 <col:36, col:45> col:45 used V2 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455ece710 <col:49, line:94:3>
| |   `-ReturnStmt 0x1c455ece700 <line:93:5, col:37>
| |     `-CallExpr 0x1c455ece6c8 <line:354:38, line:93:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ece6b0 <line:354:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ece690 <col:38> '<builtin fn type>' Function 0x1c455dea728 'pow' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455ece5e0 <line:93:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ece5c8 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ece5b0 <col:23> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ece580 <col:23> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ece258 'V1' 'int64_t3':'vector<int64_t, 3>'
| |       `-CStyleCastExpr 0x1c455ece668 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ece650 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ece638 <col:35> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ece608 <col:35> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ece2d8 'V2' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455ece888 <line:95:3, line:97:3> line:354:38 constexpr pow 'float4 (int64_t4, int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ece738 <line:95:23, col:32> col:32 used V1 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455ece7b8 <col:36, col:45> col:45 used V2 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455ecebf8 <col:49, line:97:3>
| |   `-ReturnStmt 0x1c455ecebe8 <line:96:5, col:37>
| |     `-CallExpr 0x1c455ecebb0 <line:354:38, line:96:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eceb98 <line:354:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eceb78 <col:38> '<builtin fn type>' Function 0x1c455df0110 'pow' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455eceac8 <line:96:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455eceab0 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ecea98 <col:23> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ecea68 <col:23> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455ece738 'V1' 'int64_t4':'vector<int64_t, 4>'
| |       `-CStyleCastExpr 0x1c455eceb50 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eceb38 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eceb20 <col:35> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eceaf0 <col:35> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455ece7b8 'V2' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455eced78 <line:98:3, line:100:3> line:354:38 constexpr pow 'float (uint64_t, uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ecec20 <line:98:22, col:31> col:31 used V1 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455ececa0 <col:35, col:44> col:44 used V2 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455ecf100 <col:48, line:100:3>
| |   `-ReturnStmt 0x1c455ecf0f0 <line:99:5, col:35>
| |     `-CallExpr 0x1c455ecf0b8 <line:354:38, line:99:35> 'float'
| |       |-ImplicitCastExpr 0x1c455ecf0a0 <line:354:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ecf080 <col:38> '<builtin fn type>' Function 0x1c455dea0f8 'pow' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455ecefc8 <line:99:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ecefb0 <col:22> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ecef98 <col:22> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ecef60 <col:22> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455ecec20 'V1' 'uint64_t':'unsigned long'
| |       `-CStyleCastExpr 0x1c455ecf058 <col:26, col:33> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ecf040 <col:33> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ecf028 <col:33> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eceff0 <col:33> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455ececa0 'V2' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455ecf278 <line:101:3, line:103:3> line:354:38 constexpr pow 'float2 (uint64_t2, uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ecf128 <line:101:23, col:33> col:33 used V1 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455ecf1a8 <col:37, col:47> col:47 used V2 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455ecf5f8 <col:51, line:103:3>
| |   `-ReturnStmt 0x1c455ecf5e8 <line:102:5, col:37>
| |     `-CallExpr 0x1c455ecf5b0 <line:354:38, line:102:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ecf598 <line:354:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ecf578 <col:38> '<builtin fn type>' Function 0x1c455dea410 'pow' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455ecf4c8 <line:102:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ecf4b0 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ecf498 <col:23> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ecf468 <col:23> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ecf128 'V1' 'uint64_t2':'vector<uint64_t, 2>'
| |       `-CStyleCastExpr 0x1c455ecf550 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ecf538 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ecf520 <col:35> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ecf4f0 <col:35> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ecf1a8 'V2' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455ecf770 <line:104:3, line:106:3> line:354:38 constexpr pow 'float3 (uint64_t3, uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ecf620 <line:104:23, col:33> col:33 used V1 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455ecf6a0 <col:37, col:47> col:47 used V2 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455edc978 <col:51, line:106:3>
| |   `-ReturnStmt 0x1c455edc968 <line:105:5, col:37>
| |     `-CallExpr 0x1c455edc930 <line:354:38, line:105:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ecfa98 <line:354:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ecfa78 <col:38> '<builtin fn type>' Function 0x1c455dea728 'pow' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455ecf9c8 <line:105:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ecf9b0 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ecf998 <col:23> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ecf968 <col:23> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ecf620 'V1' 'uint64_t3':'vector<uint64_t, 3>'
| |       `-CStyleCastExpr 0x1c455ecfa50 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ecfa38 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ecfa20 <col:35> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ecf9f0 <col:35> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ecf6a0 'V2' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455edcaf0 <line:107:3, line:109:3> line:354:38 constexpr pow 'float4 (uint64_t4, uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455edc9a0 <line:107:23, col:33> col:33 used V1 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455edca20 <col:37, col:47> col:47 used V2 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455edce80 <col:51, line:109:3>
| |   `-ReturnStmt 0x1c455edce70 <line:108:5, col:37>
| |     `-CallExpr 0x1c455edce38 <line:354:38, line:108:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455edce20 <line:354:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edce00 <col:38> '<builtin fn type>' Function 0x1c455df0110 'pow' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455edcd50 <line:108:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455edcd38 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455edcd20 <col:23> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455edccf0 <col:23> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455edc9a0 'V1' 'uint64_t4':'vector<uint64_t, 4>'
| |       `-CStyleCastExpr 0x1c455edcdd8 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edcdc0 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edcda8 <col:35> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edcd78 <col:35> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455edca20 'V2' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455edcf68 <line:20:3, col:55> line:360:36 constexpr rsqrt 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455edceb0 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455edd1d0 <col:32, col:55>
| |   `-ReturnStmt 0x1c455edd1c0 <col:34, col:52>
| |     `-CallExpr 0x1c455edd190 <line:360:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455edd178 <line:360:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edd158 <col:36> '<builtin fn type>' Function 0x1c455def390 'rsqrt' 'float (float)'
| |       `-CStyleCastExpr 0x1c455edd130 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edd118 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edd100 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edd0c8 <col:51> 'double' lvalue ParmVar 0x1c455edceb0 'V' 'double'
| |-FunctionDecl 0x1c455edd2a8 <line:21:3, col:58> line:360:36 constexpr rsqrt 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455edd1f8 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455edd510 <col:34, col:58>
| |   `-ReturnStmt 0x1c455edd500 <col:36, col:55>
| |     `-CallExpr 0x1c455edd4d0 <line:360:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455edd4b8 <line:360:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edd498 <col:36> '<builtin fn type>' Function 0x1c455def600 'rsqrt' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455edd470 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edd458 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edd440 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edd410 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455edd1f8 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455edd5e8 <line:22:3, col:58> line:360:36 constexpr rsqrt 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455edd538 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455edd858 <col:34, col:58>
| |   `-ReturnStmt 0x1c455edd848 <col:36, col:55>
| |     `-CallExpr 0x1c455edd818 <line:360:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455edd800 <line:360:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edd7e0 <col:36> '<builtin fn type>' Function 0x1c455def870 'rsqrt' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455edd7b8 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edd7a0 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edd788 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edd758 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455edd538 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455edd930 <line:23:3, col:58> line:360:36 constexpr rsqrt 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455edd880 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455eddba8 <col:34, col:58>
| |   `-ReturnStmt 0x1c455eddb98 <col:36, col:55>
| |     `-CallExpr 0x1c455eddb68 <line:360:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eddb50 <line:360:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eddb30 <col:36> '<builtin fn type>' Function 0x1c455defae0 'rsqrt' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455eddb08 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eddaf0 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eddad8 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eddaa8 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455edd880 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455eddc90 <line:54:3, col:52> line:361:37 constexpr rsqrt 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455eddbd8 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455eddf18 <col:29, col:52>
| |   `-ReturnStmt 0x1c455eddf08 <col:31, col:49>
| |     `-CallExpr 0x1c455edded8 <line:361:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455eddec0 <line:361:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eddea0 <col:37> '<builtin fn type>' Function 0x1c455def390 'rsqrt' 'float (float)'
| |       `-CStyleCastExpr 0x1c455edde78 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edde60 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edde48 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edde10 <col:48> 'int' lvalue ParmVar 0x1c455eddbd8 'V' 'int'
| |-FunctionDecl 0x1c455eddff0 <line:55:3, col:55> line:361:37 constexpr rsqrt 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455eddf40 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455ede278 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ede268 <col:33, col:52>
| |     `-CallExpr 0x1c455ede238 <line:361:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ede220 <line:361:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ede200 <col:37> '<builtin fn type>' Function 0x1c455def600 'rsqrt' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ede1d8 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ede1c0 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ede1a8 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ede178 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455eddf40 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455ede350 <line:56:3, col:55> line:361:37 constexpr rsqrt 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455ede2a0 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455ede5e0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ede5d0 <col:33, col:52>
| |     `-CallExpr 0x1c455ede5a0 <line:361:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ede588 <line:361:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ede568 <col:37> '<builtin fn type>' Function 0x1c455def870 'rsqrt' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ede540 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ede528 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ede510 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ede4e0 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ede2a0 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455ede6b8 <line:57:3, col:55> line:361:37 constexpr rsqrt 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455ede608 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455eda760 <col:31, col:55>
| |   `-ReturnStmt 0x1c455eda750 <col:33, col:52>
| |     `-CallExpr 0x1c455eda720 <line:361:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ede8f8 <line:361:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ede8d8 <col:37> '<builtin fn type>' Function 0x1c455defae0 'rsqrt' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ede8b0 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ede898 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ede880 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ede850 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ede608 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455eda840 <line:58:3, col:53> line:361:37 constexpr rsqrt 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455eda788 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455edaae8 <col:30, col:53>
| |   `-ReturnStmt 0x1c455edaad8 <col:32, col:50>
| |     `-CallExpr 0x1c455edaaa8 <line:361:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455edaa90 <line:361:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edaa70 <col:37> '<builtin fn type>' Function 0x1c455def390 'rsqrt' 'float (float)'
| |       `-CStyleCastExpr 0x1c455edaa48 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edaa30 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edaa18 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eda9e0 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455eda788 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455edabc0 <line:59:3, col:56> line:361:37 constexpr rsqrt 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455edab10 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455edae68 <col:32, col:56>
| |   `-ReturnStmt 0x1c455edae58 <col:34, col:53>
| |     `-CallExpr 0x1c455edae28 <line:361:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455edae10 <line:361:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edadf0 <col:37> '<builtin fn type>' Function 0x1c455def600 'rsqrt' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455edadc8 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edadb0 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edad98 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edad68 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455edab10 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455edaf40 <line:60:3, col:56> line:361:37 constexpr rsqrt 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455edae90 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455edb1f0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455edb1e0 <col:34, col:53>
| |     `-CallExpr 0x1c455edb1b0 <line:361:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455edb198 <line:361:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edb178 <col:37> '<builtin fn type>' Function 0x1c455def870 'rsqrt' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455edb150 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edb138 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edb120 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edb0f0 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455edae90 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455edb2c8 <line:61:3, col:56> line:361:37 constexpr rsqrt 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455edb218 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455edb580 <col:32, col:56>
| |   `-ReturnStmt 0x1c455edb570 <col:34, col:53>
| |     `-CallExpr 0x1c455edb540 <line:361:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455edb528 <line:361:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edb508 <col:37> '<builtin fn type>' Function 0x1c455defae0 'rsqrt' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455edb4e0 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edb4c8 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edb4b0 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edb480 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455edb218 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455edb660 <line:62:3, col:56> line:361:37 constexpr rsqrt 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455edb5a8 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455edb928 <col:33, col:56>
| |   `-ReturnStmt 0x1c455edb918 <col:35, col:53>
| |     `-CallExpr 0x1c455edb8e8 <line:361:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455edb8d0 <line:361:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edb8b0 <col:37> '<builtin fn type>' Function 0x1c455def390 'rsqrt' 'float (float)'
| |       `-CStyleCastExpr 0x1c455edb888 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edb870 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edb858 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edb820 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455edb5a8 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455edba00 <line:63:3, col:59> line:361:37 constexpr rsqrt 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455edb950 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455edbcc8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455edbcb8 <col:37, col:56>
| |     `-CallExpr 0x1c455edbc88 <line:361:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455edbc70 <line:361:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edbc50 <col:37> '<builtin fn type>' Function 0x1c455def600 'rsqrt' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455edbc28 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edbc10 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edbbf8 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edbbc8 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455edb950 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455edbda0 <line:64:3, col:59> line:361:37 constexpr rsqrt 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455edbcf0 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455edc070 <col:35, col:59>
| |   `-ReturnStmt 0x1c455edc060 <col:37, col:56>
| |     `-CallExpr 0x1c455edc030 <line:361:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455edc018 <line:361:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edbff8 <col:37> '<builtin fn type>' Function 0x1c455def870 'rsqrt' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455edbfd0 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edbfb8 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edbfa0 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edbf70 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455edbcf0 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455edc148 <line:65:3, col:59> line:361:37 constexpr rsqrt 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455edc098 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455edc420 <col:35, col:59>
| |   `-ReturnStmt 0x1c455edc410 <col:37, col:56>
| |     `-CallExpr 0x1c455edc3e0 <line:361:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455edc3c8 <line:361:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edc3a8 <col:37> '<builtin fn type>' Function 0x1c455defae0 'rsqrt' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455edc380 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edc368 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edc350 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edc320 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455edc098 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455edc500 <line:66:3, col:57> line:361:37 constexpr rsqrt 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455edc448 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455ed63d0 <col:34, col:57>
| |   `-ReturnStmt 0x1c455ed63c0 <col:36, col:54>
| |     `-CallExpr 0x1c455ed6390 <line:361:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455ed6378 <line:361:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed6358 <col:37> '<builtin fn type>' Function 0x1c455def390 'rsqrt' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ed6330 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed6318 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed6300 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edc6e0 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455edc448 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455ed64a8 <line:67:3, col:60> line:361:37 constexpr rsqrt 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ed63f8 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455ed6790 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ed6780 <col:38, col:57>
| |     `-CallExpr 0x1c455ed6750 <line:361:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ed6738 <line:361:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed6718 <col:37> '<builtin fn type>' Function 0x1c455def600 'rsqrt' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ed66f0 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed66d8 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed66c0 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed6690 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ed63f8 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455ed6868 <line:68:3, col:60> line:361:37 constexpr rsqrt 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ed67b8 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455ed6b58 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ed6b48 <col:38, col:57>
| |     `-CallExpr 0x1c455ed6b18 <line:361:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ed6b00 <line:361:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed6ae0 <col:37> '<builtin fn type>' Function 0x1c455def870 'rsqrt' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ed6ab8 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed6aa0 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed6a88 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed6a58 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ed67b8 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455ed6c30 <line:69:3, col:60> line:361:37 constexpr rsqrt 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ed6b80 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455ed6f28 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ed6f18 <col:38, col:57>
| |     `-CallExpr 0x1c455ed6ee8 <line:361:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ed6ed0 <line:361:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed6eb0 <col:37> '<builtin fn type>' Function 0x1c455defae0 'rsqrt' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ed6e88 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed6e70 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed6e58 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed6e28 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455ed6b80 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455ed7010 <line:20:3, col:55> line:367:36 constexpr round 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455ed6f58 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455ed7278 <col:32, col:55>
| |   `-ReturnStmt 0x1c455ed7268 <col:34, col:52>
| |     `-CallExpr 0x1c455ed7238 <line:367:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455ed7220 <line:367:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed7200 <col:36> '<builtin fn type>' Function 0x1c455df3ba0 'round' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ed71d8 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed71c0 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed71a8 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed7170 <col:51> 'double' lvalue ParmVar 0x1c455ed6f58 'V' 'double'
| |-FunctionDecl 0x1c455ed7350 <line:21:3, col:58> line:367:36 constexpr round 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455ed72a0 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455ed75b8 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ed75a8 <col:36, col:55>
| |     `-CallExpr 0x1c455ed7578 <line:367:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ed7560 <line:367:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed7540 <col:36> '<builtin fn type>' Function 0x1c455df3e10 'round' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ed7518 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed7500 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed74e8 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed74b8 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455ed72a0 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455ed7690 <line:22:3, col:58> line:367:36 constexpr round 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455ed75e0 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455ed7900 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ed78f0 <col:36, col:55>
| |     `-CallExpr 0x1c455ed78c0 <line:367:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ed78a8 <line:367:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed7888 <col:36> '<builtin fn type>' Function 0x1c455df4080 'round' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ed7860 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed7848 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed7830 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed7800 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455ed75e0 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455ed79d8 <line:23:3, col:58> line:367:36 constexpr round 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455ed7928 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455ed7c50 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ed7c40 <col:36, col:55>
| |     `-CallExpr 0x1c455ed7c10 <line:367:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ed7bf8 <line:367:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed7bd8 <col:36> '<builtin fn type>' Function 0x1c455df42f0 'round' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ed7bb0 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed7b98 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed7b80 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed7b50 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455ed7928 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455ed7d38 <line:54:3, col:52> line:368:37 constexpr round 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455ed7c80 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455ed7fc0 <col:29, col:52>
| |   `-ReturnStmt 0x1c455ed7fb0 <col:31, col:49>
| |     `-CallExpr 0x1c455ed7f80 <line:368:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455ed7f68 <line:368:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed7f48 <col:37> '<builtin fn type>' Function 0x1c455df3ba0 'round' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ed7f20 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed7f08 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed7ef0 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed7eb8 <col:48> 'int' lvalue ParmVar 0x1c455ed7c80 'V' 'int'
| |-FunctionDecl 0x1c455ed8098 <line:55:3, col:55> line:368:37 constexpr round 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455ed7fe8 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455edeb80 <col:31, col:55>
| |   `-ReturnStmt 0x1c455edeb70 <col:33, col:52>
| |     `-CallExpr 0x1c455edeb40 <line:368:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ed82c8 <line:368:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed82a8 <col:37> '<builtin fn type>' Function 0x1c455df3e10 'round' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ed8280 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed8268 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed8250 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed8220 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ed7fe8 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455edec58 <line:56:3, col:55> line:368:37 constexpr round 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455edeba8 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455edeee8 <col:31, col:55>
| |   `-ReturnStmt 0x1c455edeed8 <col:33, col:52>
| |     `-CallExpr 0x1c455edeea8 <line:368:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455edee90 <line:368:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edee70 <col:37> '<builtin fn type>' Function 0x1c455df4080 'round' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455edee48 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edee30 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edee18 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edede8 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455edeba8 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455edefc0 <line:57:3, col:55> line:368:37 constexpr round 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455edef10 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455edf258 <col:31, col:55>
| |   `-ReturnStmt 0x1c455edf248 <col:33, col:52>
| |     `-CallExpr 0x1c455edf218 <line:368:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455edf200 <line:368:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edf1e0 <col:37> '<builtin fn type>' Function 0x1c455df42f0 'round' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455edf1b8 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edf1a0 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edf188 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edf158 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455edef10 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455edf338 <line:58:3, col:53> line:368:37 constexpr round 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455edf280 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455edf5e0 <col:30, col:53>
| |   `-ReturnStmt 0x1c455edf5d0 <col:32, col:50>
| |     `-CallExpr 0x1c455edf5a0 <line:368:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455edf588 <line:368:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edf568 <col:37> '<builtin fn type>' Function 0x1c455df3ba0 'round' 'float (float)'
| |       `-CStyleCastExpr 0x1c455edf540 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edf528 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edf510 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edf4d8 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455edf280 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455edf6b8 <line:59:3, col:56> line:368:37 constexpr round 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455edf608 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455edf960 <col:32, col:56>
| |   `-ReturnStmt 0x1c455edf950 <col:34, col:53>
| |     `-CallExpr 0x1c455edf920 <line:368:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455edf908 <line:368:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edf8e8 <col:37> '<builtin fn type>' Function 0x1c455df3e10 'round' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455edf8c0 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edf8a8 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edf890 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edf860 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455edf608 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455edfa38 <line:60:3, col:56> line:368:37 constexpr round 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455edf988 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455edfce8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455edfcd8 <col:34, col:53>
| |     `-CallExpr 0x1c455edfca8 <line:368:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455edfc90 <line:368:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455edfc70 <col:37> '<builtin fn type>' Function 0x1c455df4080 'round' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455edfc48 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edfc30 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edfc18 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edfbe8 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455edf988 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455edfdc0 <line:61:3, col:56> line:368:37 constexpr round 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455edfd10 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455ee0078 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ee0068 <col:34, col:53>
| |     `-CallExpr 0x1c455ee0038 <line:368:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ee0020 <line:368:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee0000 <col:37> '<builtin fn type>' Function 0x1c455df42f0 'round' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455edffd8 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455edffc0 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455edffa8 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455edff78 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455edfd10 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455ee0158 <line:62:3, col:56> line:368:37 constexpr round 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ee00a0 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455ee0420 <col:33, col:56>
| |   `-ReturnStmt 0x1c455ee0410 <col:35, col:53>
| |     `-CallExpr 0x1c455ee03e0 <line:368:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455ee03c8 <line:368:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee03a8 <col:37> '<builtin fn type>' Function 0x1c455df3ba0 'round' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ee0380 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee0368 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee0350 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee0318 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455ee00a0 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455ee04f8 <line:63:3, col:59> line:368:37 constexpr round 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ee0448 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455ee07c0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ee07b0 <col:37, col:56>
| |     `-CallExpr 0x1c455ee0780 <line:368:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ee0768 <line:368:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee0748 <col:37> '<builtin fn type>' Function 0x1c455df3e10 'round' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ee0720 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee0708 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee06f0 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee06c0 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ee0448 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455ee0898 <line:64:3, col:59> line:368:37 constexpr round 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ee07e8 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455ed8550 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ed8540 <col:37, col:56>
| |     `-CallExpr 0x1c455ed8510 <line:368:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ee0b10 <line:368:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee0af0 <col:37> '<builtin fn type>' Function 0x1c455df4080 'round' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ee0ac8 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee0ab0 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee0a98 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee0a68 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ee07e8 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455ed8628 <line:65:3, col:59> line:368:37 constexpr round 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ed8578 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455ed8900 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ed88f0 <col:37, col:56>
| |     `-CallExpr 0x1c455ed88c0 <line:368:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ed88a8 <line:368:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed8888 <col:37> '<builtin fn type>' Function 0x1c455df42f0 'round' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ed8860 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed8848 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed8830 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed8800 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455ed8578 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455ed89e0 <line:66:3, col:57> line:368:37 constexpr round 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ed8928 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455ed8cc8 <col:34, col:57>
| |   `-ReturnStmt 0x1c455ed8cb8 <col:36, col:54>
| |     `-CallExpr 0x1c455ed8c88 <line:368:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455ed8c70 <line:368:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed8c50 <col:37> '<builtin fn type>' Function 0x1c455df3ba0 'round' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ed8c28 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed8c10 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed8bf8 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed8bc0 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455ed8928 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455ed8da0 <line:67:3, col:60> line:368:37 constexpr round 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ed8cf0 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455ed9088 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ed9078 <col:38, col:57>
| |     `-CallExpr 0x1c455ed9048 <line:368:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ed9030 <line:368:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed9010 <col:37> '<builtin fn type>' Function 0x1c455df3e10 'round' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ed8fe8 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed8fd0 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed8fb8 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed8f88 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ed8cf0 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455ed9160 <line:68:3, col:60> line:368:37 constexpr round 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ed90b0 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455ed9450 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ed9440 <col:38, col:57>
| |     `-CallExpr 0x1c455ed9410 <line:368:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ed93f8 <line:368:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed93d8 <col:37> '<builtin fn type>' Function 0x1c455df4080 'round' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ed93b0 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed9398 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed9380 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed9350 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ed90b0 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455ed9528 <line:69:3, col:60> line:368:37 constexpr round 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ed9478 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455ed9820 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ed9810 <col:38, col:57>
| |     `-CallExpr 0x1c455ed97e0 <line:368:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ed97c8 <line:368:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed97a8 <col:37> '<builtin fn type>' Function 0x1c455df42f0 'round' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ed9780 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed9768 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed9750 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed9720 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455ed9478 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455ed9908 <line:20:3, col:55> line:374:36 constexpr sin 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455ed9850 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455ed9b70 <col:32, col:55>
| |   `-ReturnStmt 0x1c455ed9b60 <col:34, col:52>
| |     `-CallExpr 0x1c455ed9b30 <line:374:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455ed9b18 <line:374:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed9af8 <col:36> '<builtin fn type>' Function 0x1c455df8c10 'sin' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ed9ad0 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed9ab8 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed9aa0 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed9a68 <col:51> 'double' lvalue ParmVar 0x1c455ed9850 'V' 'double'
| |-FunctionDecl 0x1c455ed9c48 <line:21:3, col:58> line:374:36 constexpr sin 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455ed9b98 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455ed9eb0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ed9ea0 <col:36, col:55>
| |     `-CallExpr 0x1c455ed9e70 <line:374:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ed9e58 <line:374:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ed9e38 <col:36> '<builtin fn type>' Function 0x1c455df8e80 'sin' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ed9e10 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ed9df8 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ed9de0 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ed9db0 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455ed9b98 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455ed9f88 <line:22:3, col:58> line:374:36 constexpr sin 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455ed9ed8 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455eda1f8 <col:34, col:58>
| |   `-ReturnStmt 0x1c455eda1e8 <col:36, col:55>
| |     `-CallExpr 0x1c455eda1b8 <line:374:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455eda1a0 <line:374:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eda180 <col:36> '<builtin fn type>' Function 0x1c455df90f0 'sin' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455eda158 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eda140 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eda128 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eda0f8 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455ed9ed8 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455eda2d0 <line:23:3, col:58> line:374:36 constexpr sin 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455eda220 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455ee0d90 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ee0d80 <col:36, col:55>
| |     `-CallExpr 0x1c455ee0d50 <line:374:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eda4f0 <line:374:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eda4d0 <col:36> '<builtin fn type>' Function 0x1c455df9360 'sin' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455eda4a8 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eda490 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eda478 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eda448 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455eda220 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455ee0e78 <line:54:3, col:52> line:375:37 constexpr sin 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455ee0dc0 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455ee1100 <col:29, col:52>
| |   `-ReturnStmt 0x1c455ee10f0 <col:31, col:49>
| |     `-CallExpr 0x1c455ee10c0 <line:375:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455ee10a8 <line:375:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee1088 <col:37> '<builtin fn type>' Function 0x1c455df8c10 'sin' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ee1060 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee1048 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee1030 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee0ff8 <col:48> 'int' lvalue ParmVar 0x1c455ee0dc0 'V' 'int'
| |-FunctionDecl 0x1c455ee11d8 <line:55:3, col:55> line:375:37 constexpr sin 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455ee1128 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455ee1460 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ee1450 <col:33, col:52>
| |     `-CallExpr 0x1c455ee1420 <line:375:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ee1408 <line:375:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee13e8 <col:37> '<builtin fn type>' Function 0x1c455df8e80 'sin' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ee13c0 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee13a8 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee1390 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee1360 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ee1128 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455ee1538 <line:56:3, col:55> line:375:37 constexpr sin 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455ee1488 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455ee17c8 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ee17b8 <col:33, col:52>
| |     `-CallExpr 0x1c455ee1788 <line:375:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ee1770 <line:375:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee1750 <col:37> '<builtin fn type>' Function 0x1c455df90f0 'sin' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ee1728 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee1710 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee16f8 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee16c8 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ee1488 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455ee18a0 <line:57:3, col:55> line:375:37 constexpr sin 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455ee17f0 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455ee1b38 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ee1b28 <col:33, col:52>
| |     `-CallExpr 0x1c455ee1af8 <line:375:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ee1ae0 <line:375:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee1ac0 <col:37> '<builtin fn type>' Function 0x1c455df9360 'sin' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ee1a98 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee1a80 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee1a68 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee1a38 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ee17f0 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455ee1c18 <line:58:3, col:53> line:375:37 constexpr sin 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455ee1b60 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455ee1ec0 <col:30, col:53>
| |   `-ReturnStmt 0x1c455ee1eb0 <col:32, col:50>
| |     `-CallExpr 0x1c455ee1e80 <line:375:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455ee1e68 <line:375:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee1e48 <col:37> '<builtin fn type>' Function 0x1c455df8c10 'sin' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ee1e20 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee1e08 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee1df0 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee1db8 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455ee1b60 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455ee1f98 <line:59:3, col:56> line:375:37 constexpr sin 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455ee1ee8 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455ee2240 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ee2230 <col:34, col:53>
| |     `-CallExpr 0x1c455ee2200 <line:375:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ee21e8 <line:375:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee21c8 <col:37> '<builtin fn type>' Function 0x1c455df8e80 'sin' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ee21a0 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee2188 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee2170 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee2140 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455ee1ee8 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455ee2318 <line:60:3, col:56> line:375:37 constexpr sin 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455ee2268 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455ee25c8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ee25b8 <col:34, col:53>
| |     `-CallExpr 0x1c455ee2588 <line:375:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ee2570 <line:375:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee2550 <col:37> '<builtin fn type>' Function 0x1c455df90f0 'sin' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ee2528 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee2510 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee24f8 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee24c8 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455ee2268 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455ee26a0 <line:61:3, col:56> line:375:37 constexpr sin 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455ee25f0 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455ee2958 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ee2948 <col:34, col:53>
| |     `-CallExpr 0x1c455ee2918 <line:375:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ee2900 <line:375:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee28e0 <col:37> '<builtin fn type>' Function 0x1c455df9360 'sin' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ee28b8 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee28a0 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee2888 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee2858 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455ee25f0 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455ee2a38 <line:62:3, col:56> line:375:37 constexpr sin 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ee2980 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455ee2d00 <col:33, col:56>
| |   `-ReturnStmt 0x1c455ee2cf0 <col:35, col:53>
| |     `-CallExpr 0x1c455ee2cc0 <line:375:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455ee2ca8 <line:375:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee2c88 <col:37> '<builtin fn type>' Function 0x1c455df8c10 'sin' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ee2c60 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee2c48 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee2c30 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee2bf8 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455ee2980 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455ee5220 <line:63:3, col:59> line:375:37 constexpr sin 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ee5170 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455ee54e8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ee54d8 <col:37, col:56>
| |     `-CallExpr 0x1c455ee54a8 <line:375:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ee5490 <line:375:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee5470 <col:37> '<builtin fn type>' Function 0x1c455df8e80 'sin' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ee5448 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee5430 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee5418 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee53e8 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ee5170 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455ee55c0 <line:64:3, col:59> line:375:37 constexpr sin 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ee5510 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455ee5890 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ee5880 <col:37, col:56>
| |     `-CallExpr 0x1c455ee5850 <line:375:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ee5838 <line:375:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee5818 <col:37> '<builtin fn type>' Function 0x1c455df90f0 'sin' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ee57f0 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee57d8 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee57c0 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee5790 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ee5510 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455ee5968 <line:65:3, col:59> line:375:37 constexpr sin 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ee58b8 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455ee5c40 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ee5c30 <col:37, col:56>
| |     `-CallExpr 0x1c455ee5c00 <line:375:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ee5be8 <line:375:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee5bc8 <col:37> '<builtin fn type>' Function 0x1c455df9360 'sin' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ee5ba0 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee5b88 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee5b70 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee5b40 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455ee58b8 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455ee5d20 <line:66:3, col:57> line:375:37 constexpr sin 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ee5c68 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455ee6008 <col:34, col:57>
| |   `-ReturnStmt 0x1c455ee5ff8 <col:36, col:54>
| |     `-CallExpr 0x1c455ee5fc8 <line:375:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455ee5fb0 <line:375:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee5f90 <col:37> '<builtin fn type>' Function 0x1c455df8c10 'sin' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ee5f68 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee5f50 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee5f38 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee5f00 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455ee5c68 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455ee60e0 <line:67:3, col:60> line:375:37 constexpr sin 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ee6030 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455ee63c8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ee63b8 <col:38, col:57>
| |     `-CallExpr 0x1c455ee6388 <line:375:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ee6370 <line:375:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee6350 <col:37> '<builtin fn type>' Function 0x1c455df8e80 'sin' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ee6328 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee6310 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee62f8 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee62c8 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ee6030 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455ee64a0 <line:68:3, col:60> line:375:37 constexpr sin 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ee63f0 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455ee6790 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ee6780 <col:38, col:57>
| |     `-CallExpr 0x1c455ee6750 <line:375:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ee6738 <line:375:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee6718 <col:37> '<builtin fn type>' Function 0x1c455df90f0 'sin' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ee66f0 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee66d8 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee66c0 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee6690 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ee63f0 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455ee6868 <line:69:3, col:60> line:375:37 constexpr sin 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ee67b8 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455ee6b60 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ee6b50 <col:38, col:57>
| |     `-CallExpr 0x1c455ee6b20 <line:375:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ee6b08 <line:375:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee6ae8 <col:37> '<builtin fn type>' Function 0x1c455df9360 'sin' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ee6ac0 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee6aa8 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee6a90 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee6a60 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455ee67b8 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455ee6c48 <line:20:3, col:55> line:381:36 constexpr sinh 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455ee6b90 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455ee6eb0 <col:32, col:55>
| |   `-ReturnStmt 0x1c455ee6ea0 <col:34, col:52>
| |     `-CallExpr 0x1c455ee6e70 <line:381:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455ee6e58 <line:381:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee6e38 <col:36> '<builtin fn type>' Function 0x1c455dfd400 'sinh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ee6e10 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee6df8 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee6de0 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee6da8 <col:51> 'double' lvalue ParmVar 0x1c455ee6b90 'V' 'double'
| |-FunctionDecl 0x1c455ee6f88 <line:21:3, col:58> line:381:36 constexpr sinh 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455ee6ed8 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455ee3000 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ee2ff0 <col:36, col:55>
| |     `-CallExpr 0x1c455ee2fc0 <line:381:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ee2fa8 <line:381:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee2f88 <col:36> '<builtin fn type>' Function 0x1c455dfd670 'sinh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ee2f60 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee7138 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee7120 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee70f0 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455ee6ed8 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455ee30d8 <line:22:3, col:58> line:381:36 constexpr sinh 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455ee3028 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455ee3348 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ee3338 <col:36, col:55>
| |     `-CallExpr 0x1c455ee3308 <line:381:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ee32f0 <line:381:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee32d0 <col:36> '<builtin fn type>' Function 0x1c455dfd8e0 'sinh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ee32a8 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee3290 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee3278 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee3248 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455ee3028 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455ee3420 <line:23:3, col:58> line:381:36 constexpr sinh 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455ee3370 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455ee3698 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ee3688 <col:36, col:55>
| |     `-CallExpr 0x1c455ee3658 <line:381:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ee3640 <line:381:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee3620 <col:36> '<builtin fn type>' Function 0x1c455dfdb50 'sinh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ee35f8 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee35e0 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee35c8 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee3598 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455ee3370 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455ee3780 <line:54:3, col:52> line:382:37 constexpr sinh 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455ee36c8 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455ee3a08 <col:29, col:52>
| |   `-ReturnStmt 0x1c455ee39f8 <col:31, col:49>
| |     `-CallExpr 0x1c455ee39c8 <line:382:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455ee39b0 <line:382:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee3990 <col:37> '<builtin fn type>' Function 0x1c455dfd400 'sinh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ee3968 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee3950 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee3938 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee3900 <col:48> 'int' lvalue ParmVar 0x1c455ee36c8 'V' 'int'
| |-FunctionDecl 0x1c455ee3ae0 <line:55:3, col:55> line:382:37 constexpr sinh 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455ee3a30 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455ee3d68 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ee3d58 <col:33, col:52>
| |     `-CallExpr 0x1c455ee3d28 <line:382:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ee3d10 <line:382:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee3cf0 <col:37> '<builtin fn type>' Function 0x1c455dfd670 'sinh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ee3cc8 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee3cb0 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee3c98 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee3c68 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ee3a30 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455ee3e40 <line:56:3, col:55> line:382:37 constexpr sinh 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455ee3d90 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455ee40d0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ee40c0 <col:33, col:52>
| |     `-CallExpr 0x1c455ee4090 <line:382:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ee4078 <line:382:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee4058 <col:37> '<builtin fn type>' Function 0x1c455dfd8e0 'sinh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ee4030 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee4018 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee4000 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee3fd0 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ee3d90 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455ee41a8 <line:57:3, col:55> line:382:37 constexpr sinh 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455ee40f8 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455ee4440 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ee4430 <col:33, col:52>
| |     `-CallExpr 0x1c455ee4400 <line:382:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ee43e8 <line:382:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee43c8 <col:37> '<builtin fn type>' Function 0x1c455dfdb50 'sinh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ee43a0 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee4388 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee4370 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee4340 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ee40f8 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455ee4520 <line:58:3, col:53> line:382:37 constexpr sinh 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455ee4468 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455ee47c8 <col:30, col:53>
| |   `-ReturnStmt 0x1c455ee47b8 <col:32, col:50>
| |     `-CallExpr 0x1c455ee4788 <line:382:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455ee4770 <line:382:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee4750 <col:37> '<builtin fn type>' Function 0x1c455dfd400 'sinh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ee4728 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee4710 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee46f8 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee46c0 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455ee4468 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455ee48a0 <line:59:3, col:56> line:382:37 constexpr sinh 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455ee47f0 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455ee4b48 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ee4b38 <col:34, col:53>
| |     `-CallExpr 0x1c455ee4b08 <line:382:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ee4af0 <line:382:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee4ad0 <col:37> '<builtin fn type>' Function 0x1c455dfd670 'sinh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ee4aa8 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee4a90 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee4a78 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee4a48 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455ee47f0 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455ee4c20 <line:60:3, col:56> line:382:37 constexpr sinh 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455ee4b70 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455ee4ed0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ee4ec0 <col:34, col:53>
| |     `-CallExpr 0x1c455ee4e90 <line:382:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ee4e78 <line:382:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee4e58 <col:37> '<builtin fn type>' Function 0x1c455dfd8e0 'sinh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ee4e30 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee4e18 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee4e00 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee4dd0 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455ee4b70 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455ee7430 <line:61:3, col:56> line:382:37 constexpr sinh 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455ee7380 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455ee76e8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ee76d8 <col:34, col:53>
| |     `-CallExpr 0x1c455ee76a8 <line:382:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ee7690 <line:382:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee7670 <col:37> '<builtin fn type>' Function 0x1c455dfdb50 'sinh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ee7648 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee7630 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee7618 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee75e8 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455ee7380 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455ee77c8 <line:62:3, col:56> line:382:37 constexpr sinh 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ee7710 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455ee7a90 <col:33, col:56>
| |   `-ReturnStmt 0x1c455ee7a80 <col:35, col:53>
| |     `-CallExpr 0x1c455ee7a50 <line:382:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455ee7a38 <line:382:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee7a18 <col:37> '<builtin fn type>' Function 0x1c455dfd400 'sinh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ee79f0 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee79d8 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee79c0 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee7988 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455ee7710 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455ee7b68 <line:63:3, col:59> line:382:37 constexpr sinh 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ee7ab8 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455ee7e30 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ee7e20 <col:37, col:56>
| |     `-CallExpr 0x1c455ee7df0 <line:382:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ee7dd8 <line:382:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee7db8 <col:37> '<builtin fn type>' Function 0x1c455dfd670 'sinh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ee7d90 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee7d78 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee7d60 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee7d30 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ee7ab8 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455ee7f08 <line:64:3, col:59> line:382:37 constexpr sinh 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ee7e58 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455ee81d8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ee81c8 <col:37, col:56>
| |     `-CallExpr 0x1c455ee8198 <line:382:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ee8180 <line:382:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee8160 <col:37> '<builtin fn type>' Function 0x1c455dfd8e0 'sinh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ee8138 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee8120 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee8108 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee80d8 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ee7e58 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455ee82b0 <line:65:3, col:59> line:382:37 constexpr sinh 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ee8200 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455ee8588 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ee8578 <col:37, col:56>
| |     `-CallExpr 0x1c455ee8548 <line:382:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ee8530 <line:382:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee8510 <col:37> '<builtin fn type>' Function 0x1c455dfdb50 'sinh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ee84e8 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee84d0 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee84b8 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee8488 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455ee8200 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455ee8668 <line:66:3, col:57> line:382:37 constexpr sinh 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ee85b0 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455ee8950 <col:34, col:57>
| |   `-ReturnStmt 0x1c455ee8940 <col:36, col:54>
| |     `-CallExpr 0x1c455ee8910 <line:382:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455ee88f8 <line:382:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee88d8 <col:37> '<builtin fn type>' Function 0x1c455dfd400 'sinh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ee88b0 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee8898 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee8880 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee8848 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455ee85b0 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455ee8a28 <line:67:3, col:60> line:382:37 constexpr sinh 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ee8978 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455ee8d10 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ee8d00 <col:38, col:57>
| |     `-CallExpr 0x1c455ee8cd0 <line:382:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ee8cb8 <line:382:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee8c98 <col:37> '<builtin fn type>' Function 0x1c455dfd670 'sinh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ee8c70 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee8c58 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee8c40 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee8c10 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ee8978 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455ee8de8 <line:68:3, col:60> line:382:37 constexpr sinh 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ee8d38 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455ee90d8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455ee90c8 <col:38, col:57>
| |     `-CallExpr 0x1c455ee9098 <line:382:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ee9080 <line:382:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee9060 <col:37> '<builtin fn type>' Function 0x1c455dfd8e0 'sinh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ee9038 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee9020 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee9008 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee8fd8 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ee8d38 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455ee91b0 <line:69:3, col:60> line:382:37 constexpr sinh 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ee9100 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455eeb9c0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455eeb9b0 <col:38, col:57>
| |     `-CallExpr 0x1c455eeb980 <line:382:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eeb968 <line:382:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eeb948 <col:37> '<builtin fn type>' Function 0x1c455dfdb50 'sinh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455eeb920 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eeb908 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eeb8f0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eeb8c0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455ee9100 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455eebaa8 <line:20:3, col:55> line:388:36 constexpr sqrt 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455eeb9f0 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455eebd10 <col:32, col:55>
| |   `-ReturnStmt 0x1c455eebd00 <col:34, col:52>
| |     `-CallExpr 0x1c455eebcd0 <line:388:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455eebcb8 <line:388:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eebc98 <col:36> '<builtin fn type>' Function 0x1c455dfe8a0 'sqrt' 'float (float)'
| |       `-CStyleCastExpr 0x1c455eebc70 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eebc58 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eebc40 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eebc08 <col:51> 'double' lvalue ParmVar 0x1c455eeb9f0 'V' 'double'
| |-FunctionDecl 0x1c455eebde8 <line:21:3, col:58> line:388:36 constexpr sqrt 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455eebd38 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455eec050 <col:34, col:58>
| |   `-ReturnStmt 0x1c455eec040 <col:36, col:55>
| |     `-CallExpr 0x1c455eec010 <line:388:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455eebff8 <line:388:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eebfd8 <col:36> '<builtin fn type>' Function 0x1c455dfeb10 'sqrt' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455eebfb0 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eebf98 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eebf80 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eebf50 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455eebd38 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455eec128 <line:22:3, col:58> line:388:36 constexpr sqrt 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455eec078 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455eec398 <col:34, col:58>
| |   `-ReturnStmt 0x1c455eec388 <col:36, col:55>
| |     `-CallExpr 0x1c455eec358 <line:388:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455eec340 <line:388:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eec320 <col:36> '<builtin fn type>' Function 0x1c455dfed80 'sqrt' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455eec2f8 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eec2e0 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eec2c8 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eec298 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455eec078 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455eec470 <line:23:3, col:58> line:388:36 constexpr sqrt 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455eec3c0 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455eec6e8 <col:34, col:58>
| |   `-ReturnStmt 0x1c455eec6d8 <col:36, col:55>
| |     `-CallExpr 0x1c455eec6a8 <line:388:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eec690 <line:388:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eec670 <col:36> '<builtin fn type>' Function 0x1c455e115e0 'sqrt' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455eec648 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eec630 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eec618 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eec5e8 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455eec3c0 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455eec7d0 <line:54:3, col:52> line:389:37 constexpr sqrt 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455eec718 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455eeca58 <col:29, col:52>
| |   `-ReturnStmt 0x1c455eeca48 <col:31, col:49>
| |     `-CallExpr 0x1c455eeca18 <line:389:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455eeca00 <line:389:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eec9e0 <col:37> '<builtin fn type>' Function 0x1c455dfe8a0 'sqrt' 'float (float)'
| |       `-CStyleCastExpr 0x1c455eec9b8 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eec9a0 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eec988 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eec950 <col:48> 'int' lvalue ParmVar 0x1c455eec718 'V' 'int'
| |-FunctionDecl 0x1c455eecb30 <line:55:3, col:55> line:389:37 constexpr sqrt 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455eeca80 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455eecdb8 <col:31, col:55>
| |   `-ReturnStmt 0x1c455eecda8 <col:33, col:52>
| |     `-CallExpr 0x1c455eecd78 <line:389:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455eecd60 <line:389:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eecd40 <col:37> '<builtin fn type>' Function 0x1c455dfeb10 'sqrt' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455eecd18 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eecd00 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eecce8 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eeccb8 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455eeca80 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455eece90 <line:56:3, col:55> line:389:37 constexpr sqrt 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455eecde0 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455eed120 <col:31, col:55>
| |   `-ReturnStmt 0x1c455eed110 <col:33, col:52>
| |     `-CallExpr 0x1c455eed0e0 <line:389:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455eed0c8 <line:389:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eed0a8 <col:37> '<builtin fn type>' Function 0x1c455dfed80 'sqrt' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455eed080 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eed068 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eed050 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eed020 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455eecde0 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455eed1f8 <line:57:3, col:55> line:389:37 constexpr sqrt 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455eed148 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455eed490 <col:31, col:55>
| |   `-ReturnStmt 0x1c455eed480 <col:33, col:52>
| |     `-CallExpr 0x1c455eed450 <line:389:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eed438 <line:389:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eed418 <col:37> '<builtin fn type>' Function 0x1c455e115e0 'sqrt' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455eed3f0 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eed3d8 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eed3c0 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eed390 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455eed148 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455eed570 <line:58:3, col:53> line:389:37 constexpr sqrt 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455eed4b8 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455eefc38 <col:30, col:53>
| |   `-ReturnStmt 0x1c455eefc28 <col:32, col:50>
| |     `-CallExpr 0x1c455eefbf8 <line:389:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455eefbe0 <line:389:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eefbc0 <col:37> '<builtin fn type>' Function 0x1c455dfe8a0 'sqrt' 'float (float)'
| |       `-CStyleCastExpr 0x1c455eed778 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eed760 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eed748 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eed710 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455eed4b8 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455eefd10 <line:59:3, col:56> line:389:37 constexpr sqrt 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455eefc60 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455eeffb8 <col:32, col:56>
| |   `-ReturnStmt 0x1c455eeffa8 <col:34, col:53>
| |     `-CallExpr 0x1c455eeff78 <line:389:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455eeff60 <line:389:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eeff40 <col:37> '<builtin fn type>' Function 0x1c455dfeb10 'sqrt' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455eeff18 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eeff00 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eefee8 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eefeb8 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455eefc60 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455ef0090 <line:60:3, col:56> line:389:37 constexpr sqrt 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455eeffe0 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455ef0340 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ef0330 <col:34, col:53>
| |     `-CallExpr 0x1c455ef0300 <line:389:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ef02e8 <line:389:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef02c8 <col:37> '<builtin fn type>' Function 0x1c455dfed80 'sqrt' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ef02a0 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef0288 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef0270 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef0240 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455eeffe0 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455ef0418 <line:61:3, col:56> line:389:37 constexpr sqrt 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455ef0368 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455ef06d0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ef06c0 <col:34, col:53>
| |     `-CallExpr 0x1c455ef0690 <line:389:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ef0678 <line:389:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef0658 <col:37> '<builtin fn type>' Function 0x1c455e115e0 'sqrt' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ef0630 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef0618 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef0600 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef05d0 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455ef0368 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455ef07b0 <line:62:3, col:56> line:389:37 constexpr sqrt 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ef06f8 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455ef0a78 <col:33, col:56>
| |   `-ReturnStmt 0x1c455ef0a68 <col:35, col:53>
| |     `-CallExpr 0x1c455ef0a38 <line:389:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455ef0a20 <line:389:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef0a00 <col:37> '<builtin fn type>' Function 0x1c455dfe8a0 'sqrt' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ef09d8 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef09c0 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef09a8 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef0970 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455ef06f8 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455ef0b50 <line:63:3, col:59> line:389:37 constexpr sqrt 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ef0aa0 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455ef0e18 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ef0e08 <col:37, col:56>
| |     `-CallExpr 0x1c455ef0dd8 <line:389:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ef0dc0 <line:389:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef0da0 <col:37> '<builtin fn type>' Function 0x1c455dfeb10 'sqrt' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ef0d78 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef0d60 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef0d48 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef0d18 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ef0aa0 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455ef0ef0 <line:64:3, col:59> line:389:37 constexpr sqrt 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ef0e40 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455ef11c0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ef11b0 <col:37, col:56>
| |     `-CallExpr 0x1c455ef1180 <line:389:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ef1168 <line:389:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef1148 <col:37> '<builtin fn type>' Function 0x1c455dfed80 'sqrt' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ef1120 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef1108 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef10f0 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef10c0 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ef0e40 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455ef1298 <line:65:3, col:59> line:389:37 constexpr sqrt 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ef11e8 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455ef1570 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ef1560 <col:37, col:56>
| |     `-CallExpr 0x1c455ef1530 <line:389:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ef1518 <line:389:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef14f8 <col:37> '<builtin fn type>' Function 0x1c455e115e0 'sqrt' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ef14d0 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef14b8 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef14a0 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef1470 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455ef11e8 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455ef1650 <line:66:3, col:57> line:389:37 constexpr sqrt 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ef1598 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455ef1938 <col:34, col:57>
| |   `-ReturnStmt 0x1c455ef1928 <col:36, col:54>
| |     `-CallExpr 0x1c455ef18f8 <line:389:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455ef18e0 <line:389:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef18c0 <col:37> '<builtin fn type>' Function 0x1c455dfe8a0 'sqrt' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ef1898 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef1880 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef1868 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef1830 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455ef1598 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455ef1a10 <line:67:3, col:60> line:389:37 constexpr sqrt 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ef1960 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455eedbc0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455eedbb0 <col:38, col:57>
| |     `-CallExpr 0x1c455eedb80 <line:389:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455eedb68 <line:389:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eedb48 <col:37> '<builtin fn type>' Function 0x1c455dfeb10 'sqrt' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455eedb20 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eedb08 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eedaf0 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eedac0 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ef1960 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455eedc98 <line:68:3, col:60> line:389:37 constexpr sqrt 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455eedbe8 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455eedf88 <col:36, col:60>
| |   `-ReturnStmt 0x1c455eedf78 <col:38, col:57>
| |     `-CallExpr 0x1c455eedf48 <line:389:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455eedf30 <line:389:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eedf10 <col:37> '<builtin fn type>' Function 0x1c455dfed80 'sqrt' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455eedee8 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eeded0 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eedeb8 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eede88 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455eedbe8 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455eee060 <line:69:3, col:60> line:389:37 constexpr sqrt 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455eedfb0 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455eee358 <col:36, col:60>
| |   `-ReturnStmt 0x1c455eee348 <col:38, col:57>
| |     `-CallExpr 0x1c455eee318 <line:389:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eee300 <line:389:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eee2e0 <col:37> '<builtin fn type>' Function 0x1c455e115e0 'sqrt' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455eee2b8 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eee2a0 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eee288 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eee258 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455eedfb0 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455eee4e8 <line:26:3, line:28:3> line:395:37 constexpr step 'float (double, double)' implicit-inline
| | |-ParmVarDecl 0x1c455eee388 <line:26:22, col:29> col:29 used V1 'double'
| | |-ParmVarDecl 0x1c455eee410 <col:33, col:40> col:40 used V2 'double'
| | `-CompoundStmt 0x1c455eee7f0 <col:44, line:28:3>
| |   `-ReturnStmt 0x1c455eee7e0 <line:27:5, col:35>
| |     `-CallExpr 0x1c455eee7a8 <line:395:37, line:27:35> 'float'
| |       |-ImplicitCastExpr 0x1c455eee790 <line:395:37> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eee770 <col:37> '<builtin fn type>' Function 0x1c455e0f388 'step' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455eee6b8 <line:27:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455eee6a0 <col:22> 'float' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455eee688 <col:22> 'double' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455eee650 <col:22> 'double' lvalue ParmVar 0x1c455eee388 'V1' 'double'
| |       `-CStyleCastExpr 0x1c455eee748 <col:26, col:33> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eee730 <col:33> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eee718 <col:33> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eee6e0 <col:33> 'double' lvalue ParmVar 0x1c455eee410 'V2' 'double'
| |-FunctionDecl 0x1c455eee968 <line:29:3, line:31:3> line:395:37 constexpr step 'float2 (double2, double2)' implicit-inline
| | |-ParmVarDecl 0x1c455eee818 <line:29:23, col:31> col:31 used V1 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455eee898 <col:35, col:43> col:43 used V2 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455eeec68 <col:47, line:31:3>
| |   `-ReturnStmt 0x1c455eeec58 <line:30:5, col:37>
| |     `-CallExpr 0x1c455eeec20 <line:395:37, line:30:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455eeec08 <line:395:37> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eeebe8 <col:37> '<builtin fn type>' Function 0x1c455e0f6a0 'step' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455eeeb38 <line:30:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455eeeb20 <col:23> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455eeeb08 <col:23> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455eeead8 <col:23> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455eee818 'V1' 'double2':'vector<double, 2>'
| |       `-CStyleCastExpr 0x1c455eeebc0 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eeeba8 <col:35> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eeeb90 <col:35> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eeeb60 <col:35> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455eee898 'V2' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455eeede0 <line:32:3, line:34:3> line:395:37 constexpr step 'float3 (double3, double3)' implicit-inline
| | |-ParmVarDecl 0x1c455eeec90 <line:32:23, col:31> col:31 used V1 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455eeed10 <col:35, col:43> col:43 used V2 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455eef0e8 <col:47, line:34:3>
| |   `-ReturnStmt 0x1c455eef0d8 <line:33:5, col:37>
| |     `-CallExpr 0x1c455eef0a0 <line:395:37, line:33:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455eef088 <line:395:37> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eef068 <col:37> '<builtin fn type>' Function 0x1c455e0f9b8 'step' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455eeefb8 <line:33:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455eeefa0 <col:23> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455eeef88 <col:23> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455eeef58 <col:23> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455eeec90 'V1' 'double3':'vector<double, 3>'
| |       `-CStyleCastExpr 0x1c455eef040 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eef028 <col:35> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eef010 <col:35> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eeefe0 <col:35> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455eeed10 'V2' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455eef260 <line:35:3, line:37:3> line:395:37 constexpr step 'float4 (double4, double4)' implicit-inline
| | |-ParmVarDecl 0x1c455eef110 <line:35:23, col:31> col:31 used V1 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455eef190 <col:35, col:43> col:43 used V2 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455eef570 <col:47, line:37:3>
| |   `-ReturnStmt 0x1c455eef560 <line:36:5, col:37>
| |     `-CallExpr 0x1c455eef528 <line:395:37, line:36:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eef510 <line:395:37> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eef4f0 <col:37> '<builtin fn type>' Function 0x1c455e0fcd0 'step' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455eef440 <line:36:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455eef428 <col:23> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455eef410 <col:23> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455eef3e0 <col:23> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455eef110 'V1' 'double4':'vector<double, 4>'
| |       `-CStyleCastExpr 0x1c455eef4c8 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eef4b0 <col:35> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eef498 <col:35> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eef468 <col:35> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455eef190 'V2' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455eef700 <line:72:3, col:73> line:396:38 constexpr step 'float (int, int)' implicit-inline
| | |-ParmVarDecl 0x1c455eef5a0 <line:72:22, col:26> col:26 used V1 'int'
| | |-ParmVarDecl 0x1c455eef628 <col:30, col:34> col:34 used V2 'int'
| | `-CompoundStmt 0x1c455ee9610 <col:38, col:73>
| |   `-ReturnStmt 0x1c455ee9600 <col:40, col:70>
| |     `-CallExpr 0x1c455ee95c8 <line:396:38, line:72:70> 'float'
| |       |-ImplicitCastExpr 0x1c455ee95b0 <line:396:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee9590 <col:38> '<builtin fn type>' Function 0x1c455e0f388 'step' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455eef8f0 <line:72:50, col:57> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455eef8d8 <col:57> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455eef8c0 <col:57> 'int' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455eef888 <col:57> 'int' lvalue ParmVar 0x1c455eef5a0 'V1' 'int'
| |       `-CStyleCastExpr 0x1c455eef980 <col:61, col:68> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eef968 <col:68> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eef950 <col:68> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eef918 <col:68> 'int' lvalue ParmVar 0x1c455eef628 'V2' 'int'
| |-FunctionDecl 0x1c455ee9788 <line:73:3, col:78> line:396:38 constexpr step 'float2 (int2, int2)' implicit-inline
| | |-ParmVarDecl 0x1c455ee9638 <line:73:23, col:28> col:28 used V1 'int2':'vector<int, 2>'
| | |-ParmVarDecl 0x1c455ee96b8 <col:32, col:37> col:37 used V2 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455ee9aa8 <col:41, col:78>
| |   `-ReturnStmt 0x1c455ee9a98 <col:43, col:75>
| |     `-CallExpr 0x1c455ee9a60 <line:396:38, line:73:75> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ee9a48 <line:396:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee9a28 <col:38> '<builtin fn type>' Function 0x1c455e0f6a0 'step' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455ee9978 <line:73:53, col:61> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ee9960 <col:61> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ee9948 <col:61> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ee9918 <col:61> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ee9638 'V1' 'int2':'vector<int, 2>'
| |       `-CStyleCastExpr 0x1c455ee9a00 <col:65, col:73> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee99e8 <col:73> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee99d0 <col:73> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee99a0 <col:73> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ee96b8 'V2' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455ee9c20 <line:74:3, col:78> line:396:38 constexpr step 'float3 (int3, int3)' implicit-inline
| | |-ParmVarDecl 0x1c455ee9ad0 <line:74:23, col:28> col:28 used V1 'int3':'vector<int, 3>'
| | |-ParmVarDecl 0x1c455ee9b50 <col:32, col:37> col:37 used V2 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455ee9f48 <col:41, col:78>
| |   `-ReturnStmt 0x1c455ee9f38 <col:43, col:75>
| |     `-CallExpr 0x1c455ee9f00 <line:396:38, line:74:75> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ee9ee8 <line:396:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ee9ec8 <col:38> '<builtin fn type>' Function 0x1c455e0f9b8 'step' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455ee9e18 <line:74:53, col:61> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ee9e00 <col:61> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ee9de8 <col:61> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ee9db8 <col:61> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ee9ad0 'V1' 'int3':'vector<int, 3>'
| |       `-CStyleCastExpr 0x1c455ee9ea0 <col:65, col:73> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ee9e88 <col:73> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ee9e70 <col:73> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ee9e40 <col:73> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ee9b50 'V2' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455eea0c0 <line:75:3, col:78> line:396:38 constexpr step 'float4 (int4, int4)' implicit-inline
| | |-ParmVarDecl 0x1c455ee9f70 <line:75:23, col:28> col:28 used V1 'int4':'vector<int, 4>'
| | |-ParmVarDecl 0x1c455ee9ff0 <col:32, col:37> col:37 used V2 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455eea3f0 <col:41, col:78>
| |   `-ReturnStmt 0x1c455eea3e0 <col:43, col:75>
| |     `-CallExpr 0x1c455eea3a8 <line:396:38, line:75:75> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455eea390 <line:396:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eea370 <col:38> '<builtin fn type>' Function 0x1c455e0fcd0 'step' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455eea2c0 <line:75:53, col:61> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455eea2a8 <col:61> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455eea290 <col:61> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455eea260 <col:61> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ee9f70 'V1' 'int4':'vector<int, 4>'
| |       `-CStyleCastExpr 0x1c455eea348 <col:65, col:73> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eea330 <col:73> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eea318 <col:73> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eea2e8 <col:73> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ee9ff0 'V2' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455eea570 <line:76:3, col:75> line:396:38 constexpr step 'float (uint, uint)' implicit-inline
| | |-ParmVarDecl 0x1c455eea418 <line:76:22, col:27> col:27 used V1 'uint':'unsigned int'
| | |-ParmVarDecl 0x1c455eea498 <col:31, col:36> col:36 used V2 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455eea8b8 <col:40, col:75>
| |   `-ReturnStmt 0x1c455eea8a8 <col:42, col:72>
| |     `-CallExpr 0x1c455eea870 <line:396:38, line:76:72> 'float'
| |       |-ImplicitCastExpr 0x1c455eea858 <line:396:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eea838 <col:38> '<builtin fn type>' Function 0x1c455e0f388 'step' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455eea780 <line:76:52, col:59> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455eea768 <col:59> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455eea750 <col:59> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455eea718 <col:59> 'uint':'unsigned int' lvalue ParmVar 0x1c455eea418 'V1' 'uint':'unsigned int'
| |       `-CStyleCastExpr 0x1c455eea810 <col:63, col:70> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eea7f8 <col:70> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eea7e0 <col:70> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eea7a8 <col:70> 'uint':'unsigned int' lvalue ParmVar 0x1c455eea498 'V2' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455eeaa30 <line:77:3, line:79:3> line:396:38 constexpr step 'float2 (uint2, uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455eea8e0 <line:77:23, col:29> col:29 used V1 'uint2':'vector<uint, 2>'
| | |-ParmVarDecl 0x1c455eea960 <col:33, col:39> col:39 used V2 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455eead70 <col:43, line:79:3>
| |   `-ReturnStmt 0x1c455eead60 <line:78:5, col:37>
| |     `-CallExpr 0x1c455eead28 <line:396:38, line:78:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455eead10 <line:396:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eeacf0 <col:38> '<builtin fn type>' Function 0x1c455e0f6a0 'step' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455eeac40 <line:78:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455eeac28 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455eeac10 <col:23> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455eeabe0 <col:23> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455eea8e0 'V1' 'uint2':'vector<uint, 2>'
| |       `-CStyleCastExpr 0x1c455eeacc8 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eeacb0 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eeac98 <col:35> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eeac68 <col:35> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455eea960 'V2' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455eeaee8 <line:80:3, line:82:3> line:396:38 constexpr step 'float3 (uint3, uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455eead98 <line:80:23, col:29> col:29 used V1 'uint3':'vector<uint, 3>'
| | |-ParmVarDecl 0x1c455eeae18 <col:33, col:39> col:39 used V2 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455eeb230 <col:43, line:82:3>
| |   `-ReturnStmt 0x1c455eeb220 <line:81:5, col:37>
| |     `-CallExpr 0x1c455eeb1e8 <line:396:38, line:81:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455eeb1d0 <line:396:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455eeb1b0 <col:38> '<builtin fn type>' Function 0x1c455e0f9b8 'step' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455eeb100 <line:81:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455eeb0e8 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455eeb0d0 <col:23> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455eeb0a0 <col:23> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455eead98 'V1' 'uint3':'vector<uint, 3>'
| |       `-CStyleCastExpr 0x1c455eeb188 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455eeb170 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455eeb158 <col:35> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455eeb128 <col:35> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455eeae18 'V2' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455eeb3a8 <line:83:3, line:85:3> line:396:38 constexpr step 'float4 (uint4, uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455eeb258 <line:83:23, col:29> col:29 used V1 'uint4':'vector<uint, 4>'
| | |-ParmVarDecl 0x1c455eeb2d8 <col:33, col:39> col:39 used V2 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455ef1f40 <col:43, line:85:3>
| |   `-ReturnStmt 0x1c455ef1f30 <line:84:5, col:37>
| |     `-CallExpr 0x1c455ef1ef8 <line:396:38, line:84:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ef1ee0 <line:396:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef1ec0 <col:38> '<builtin fn type>' Function 0x1c455e0fcd0 'step' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455ef1e10 <line:84:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ef1df8 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ef1de0 <col:23> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455eeb568 <col:23> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455eeb258 'V1' 'uint4':'vector<uint, 4>'
| |       `-CStyleCastExpr 0x1c455ef1e98 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef1e80 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef1e68 <col:35> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef1e38 <col:35> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455eeb2d8 'V2' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455ef20c0 <line:86:3, line:88:3> line:396:38 constexpr step 'float (int64_t, int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ef1f68 <line:86:22, col:30> col:30 used V1 'int64_t':'long'
| | |-ParmVarDecl 0x1c455ef1fe8 <col:34, col:42> col:42 used V2 'int64_t':'long'
| | `-CompoundStmt 0x1c455ef2428 <col:46, line:88:3>
| |   `-ReturnStmt 0x1c455ef2418 <line:87:5, col:35>
| |     `-CallExpr 0x1c455ef23e0 <line:396:38, line:87:35> 'float'
| |       |-ImplicitCastExpr 0x1c455ef23c8 <line:396:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef23a8 <col:38> '<builtin fn type>' Function 0x1c455e0f388 'step' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455ef22f0 <line:87:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ef22d8 <col:22> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ef22c0 <col:22> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ef2288 <col:22> 'int64_t':'long' lvalue ParmVar 0x1c455ef1f68 'V1' 'int64_t':'long'
| |       `-CStyleCastExpr 0x1c455ef2380 <col:26, col:33> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef2368 <col:33> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef2350 <col:33> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef2318 <col:33> 'int64_t':'long' lvalue ParmVar 0x1c455ef1fe8 'V2' 'int64_t':'long'
| |-FunctionDecl 0x1c455ef25a0 <line:89:3, line:91:3> line:396:38 constexpr step 'float2 (int64_t2, int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ef2450 <line:89:23, col:32> col:32 used V1 'int64_t2':'vector<int64_t, 2>'
| | |-ParmVarDecl 0x1c455ef24d0 <col:36, col:45> col:45 used V2 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455ef2900 <col:49, line:91:3>
| |   `-ReturnStmt 0x1c455ef28f0 <line:90:5, col:37>
| |     `-CallExpr 0x1c455ef28b8 <line:396:38, line:90:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ef28a0 <line:396:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef2880 <col:38> '<builtin fn type>' Function 0x1c455e0f6a0 'step' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455ef27d0 <line:90:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ef27b8 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ef27a0 <col:23> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ef2770 <col:23> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ef2450 'V1' 'int64_t2':'vector<int64_t, 2>'
| |       `-CStyleCastExpr 0x1c455ef2858 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef2840 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef2828 <col:35> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef27f8 <col:35> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ef24d0 'V2' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455ef2a78 <line:92:3, line:94:3> line:396:38 constexpr step 'float3 (int64_t3, int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ef2928 <line:92:23, col:32> col:32 used V1 'int64_t3':'vector<int64_t, 3>'
| | |-ParmVarDecl 0x1c455ef29a8 <col:36, col:45> col:45 used V2 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455ef2de0 <col:49, line:94:3>
| |   `-ReturnStmt 0x1c455ef2dd0 <line:93:5, col:37>
| |     `-CallExpr 0x1c455ef2d98 <line:396:38, line:93:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ef2d80 <line:396:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef2d60 <col:38> '<builtin fn type>' Function 0x1c455e0f9b8 'step' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455ef2cb0 <line:93:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ef2c98 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ef2c80 <col:23> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ef2c50 <col:23> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ef2928 'V1' 'int64_t3':'vector<int64_t, 3>'
| |       `-CStyleCastExpr 0x1c455ef2d38 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef2d20 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef2d08 <col:35> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef2cd8 <col:35> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ef29a8 'V2' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455ef2f58 <line:95:3, line:97:3> line:396:38 constexpr step 'float4 (int64_t4, int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ef2e08 <line:95:23, col:32> col:32 used V1 'int64_t4':'vector<int64_t, 4>'
| | |-ParmVarDecl 0x1c455ef2e88 <col:36, col:45> col:45 used V2 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455ef32c8 <col:49, line:97:3>
| |   `-ReturnStmt 0x1c455ef32b8 <line:96:5, col:37>
| |     `-CallExpr 0x1c455ef3280 <line:396:38, line:96:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ef3268 <line:396:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef3248 <col:38> '<builtin fn type>' Function 0x1c455e0fcd0 'step' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455ef3198 <line:96:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ef3180 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ef3168 <col:23> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ef3138 <col:23> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455ef2e08 'V1' 'int64_t4':'vector<int64_t, 4>'
| |       `-CStyleCastExpr 0x1c455ef3220 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef3208 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef31f0 <col:35> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef31c0 <col:35> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455ef2e88 'V2' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455ef3448 <line:98:3, line:100:3> line:396:38 constexpr step 'float (uint64_t, uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ef32f0 <line:98:22, col:31> col:31 used V1 'uint64_t':'unsigned long'
| | |-ParmVarDecl 0x1c455ef3370 <col:35, col:44> col:44 used V2 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455ef37d0 <col:48, line:100:3>
| |   `-ReturnStmt 0x1c455ef37c0 <line:99:5, col:35>
| |     `-CallExpr 0x1c455ef3788 <line:396:38, line:99:35> 'float'
| |       |-ImplicitCastExpr 0x1c455ef3770 <line:396:38> 'float (*)(float, float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef3750 <col:38> '<builtin fn type>' Function 0x1c455e0f388 'step' 'float (float, float)'
| |       |-CStyleCastExpr 0x1c455ef3698 <line:99:15, col:22> 'float' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ef3680 <col:22> 'float' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ef3668 <col:22> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ef3630 <col:22> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455ef32f0 'V1' 'uint64_t':'unsigned long'
| |       `-CStyleCastExpr 0x1c455ef3728 <col:26, col:33> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef3710 <col:33> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef36f8 <col:33> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef36c0 <col:33> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455ef3370 'V2' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455ef3948 <line:101:3, line:103:3> line:396:38 constexpr step 'float2 (uint64_t2, uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ef37f8 <line:101:23, col:33> col:33 used V1 'uint64_t2':'vector<uint64_t, 2>'
| | |-ParmVarDecl 0x1c455ef3878 <col:37, col:47> col:47 used V2 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455ef3cc8 <col:51, line:103:3>
| |   `-ReturnStmt 0x1c455ef3cb8 <line:102:5, col:37>
| |     `-CallExpr 0x1c455ef3c80 <line:396:38, line:102:37> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ef3c68 <line:396:38> 'float2 (*)(float2, float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef3c48 <col:38> '<builtin fn type>' Function 0x1c455e0f6a0 'step' 'float2 (float2, float2)'
| |       |-CStyleCastExpr 0x1c455ef3b98 <line:102:15, col:23> 'float2':'vector<float, 2>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ef3b80 <col:23> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ef3b68 <col:23> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ef3b38 <col:23> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ef37f8 'V1' 'uint64_t2':'vector<uint64_t, 2>'
| |       `-CStyleCastExpr 0x1c455ef3c20 <col:27, col:35> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef3c08 <col:35> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef3bf0 <col:35> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef3bc0 <col:35> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455ef3878 'V2' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455ef40b0 <line:104:3, line:106:3> line:396:38 constexpr step 'float3 (uint64_t3, uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ef3cf0 <line:104:23, col:33> col:33 used V1 'uint64_t3':'vector<uint64_t, 3>'
| | |-ParmVarDecl 0x1c455ef3fe0 <col:37, col:47> col:47 used V2 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455ef4438 <col:51, line:106:3>
| |   `-ReturnStmt 0x1c455ef4428 <line:105:5, col:37>
| |     `-CallExpr 0x1c455ef43f0 <line:396:38, line:105:37> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ef43d8 <line:396:38> 'float3 (*)(float3, float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef43b8 <col:38> '<builtin fn type>' Function 0x1c455e0f9b8 'step' 'float3 (float3, float3)'
| |       |-CStyleCastExpr 0x1c455ef4308 <line:105:15, col:23> 'float3':'vector<float, 3>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ef42f0 <col:23> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ef42d8 <col:23> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ef42a8 <col:23> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ef3cf0 'V1' 'uint64_t3':'vector<uint64_t, 3>'
| |       `-CStyleCastExpr 0x1c455ef4390 <col:27, col:35> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef4378 <col:35> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef4360 <col:35> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef4330 <col:35> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455ef3fe0 'V2' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455ef45b0 <line:107:3, line:109:3> line:396:38 constexpr step 'float4 (uint64_t4, uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ef4460 <line:107:23, col:33> col:33 used V1 'uint64_t4':'vector<uint64_t, 4>'
| | |-ParmVarDecl 0x1c455ef44e0 <col:37, col:47> col:47 used V2 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455ef4940 <col:51, line:109:3>
| |   `-ReturnStmt 0x1c455ef4930 <line:108:5, col:37>
| |     `-CallExpr 0x1c455ef48f8 <line:396:38, line:108:37> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ef48e0 <line:396:38> 'float4 (*)(float4, float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef48c0 <col:38> '<builtin fn type>' Function 0x1c455e0fcd0 'step' 'float4 (float4, float4)'
| |       |-CStyleCastExpr 0x1c455ef4810 <line:108:15, col:23> 'float4':'vector<float, 4>' <NoOp>
| |       | `-ImplicitCastExpr 0x1c455ef47f8 <col:23> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |       |   `-ImplicitCastExpr 0x1c455ef47e0 <col:23> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |       |     `-DeclRefExpr 0x1c455ef47b0 <col:23> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455ef4460 'V1' 'uint64_t4':'vector<uint64_t, 4>'
| |       `-CStyleCastExpr 0x1c455ef4898 <col:27, col:35> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef4880 <col:35> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef4868 <col:35> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef4838 <col:35> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455ef44e0 'V2' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455ef4a28 <line:20:3, col:55> line:402:36 constexpr tan 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455ef4970 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455ef4c90 <col:32, col:55>
| |   `-ReturnStmt 0x1c455ef4c80 <col:34, col:52>
| |     `-CallExpr 0x1c455ef4c50 <line:402:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455ef4c38 <line:402:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef4c18 <col:36> '<builtin fn type>' Function 0x1c455e10a38 'tan' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ef4bf0 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef4bd8 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef4bc0 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef4b88 <col:51> 'double' lvalue ParmVar 0x1c455ef4970 'V' 'double'
| |-FunctionDecl 0x1c455ef4d68 <line:21:3, col:58> line:402:36 constexpr tan 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455ef4cb8 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455ef4fd0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ef4fc0 <col:36, col:55>
| |     `-CallExpr 0x1c455ef4f90 <line:402:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ef4f78 <line:402:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef4f58 <col:36> '<builtin fn type>' Function 0x1c455e10ca8 'tan' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ef4f30 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef4f18 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef4f00 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef4ed0 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455ef4cb8 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455ef50a8 <line:22:3, col:58> line:402:36 constexpr tan 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455ef4ff8 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455ef5318 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ef5308 <col:36, col:55>
| |     `-CallExpr 0x1c455ef52d8 <line:402:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ef52c0 <line:402:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef52a0 <col:36> '<builtin fn type>' Function 0x1c455e10f18 'tan' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ef5278 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef5260 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef5248 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef5218 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455ef4ff8 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455ef53f0 <line:23:3, col:58> line:402:36 constexpr tan 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455ef5340 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455ef5668 <col:34, col:58>
| |   `-ReturnStmt 0x1c455ef5658 <col:36, col:55>
| |     `-CallExpr 0x1c455ef5628 <line:402:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ef5610 <line:402:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef55f0 <col:36> '<builtin fn type>' Function 0x1c455e11188 'tan' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ef55c8 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef55b0 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef5598 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef5568 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455ef5340 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455ef5750 <line:54:3, col:52> line:403:37 constexpr tan 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455ef5698 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455ef59d8 <col:29, col:52>
| |   `-ReturnStmt 0x1c455ef59c8 <col:31, col:49>
| |     `-CallExpr 0x1c455ef5998 <line:403:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455ef5980 <line:403:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef5960 <col:37> '<builtin fn type>' Function 0x1c455e10a38 'tan' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ef5938 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef5920 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef5908 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef58d0 <col:48> 'int' lvalue ParmVar 0x1c455ef5698 'V' 'int'
| |-FunctionDecl 0x1c455ef5ab0 <line:55:3, col:55> line:403:37 constexpr tan 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455ef5a00 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455ef5d38 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ef5d28 <col:33, col:52>
| |     `-CallExpr 0x1c455ef5cf8 <line:403:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ef5ce0 <line:403:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef5cc0 <col:37> '<builtin fn type>' Function 0x1c455e10ca8 'tan' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ef5c98 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef5c80 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef5c68 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef5c38 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455ef5a00 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455ef5e10 <line:56:3, col:55> line:403:37 constexpr tan 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455ef5d60 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455ef62c0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ef62b0 <col:33, col:52>
| |     `-CallExpr 0x1c455ef6280 <line:403:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ef6268 <line:403:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef6248 <col:37> '<builtin fn type>' Function 0x1c455e10f18 'tan' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ef6220 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef6208 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef61f0 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef5fa0 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455ef5d60 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455ef6398 <line:57:3, col:55> line:403:37 constexpr tan 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455ef62e8 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455ef6630 <col:31, col:55>
| |   `-ReturnStmt 0x1c455ef6620 <col:33, col:52>
| |     `-CallExpr 0x1c455ef65f0 <line:403:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ef65d8 <line:403:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef65b8 <col:37> '<builtin fn type>' Function 0x1c455e11188 'tan' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ef6590 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef6578 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef6560 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef6530 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455ef62e8 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455ef6710 <line:58:3, col:53> line:403:37 constexpr tan 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455ef6658 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455ef69b8 <col:30, col:53>
| |   `-ReturnStmt 0x1c455ef69a8 <col:32, col:50>
| |     `-CallExpr 0x1c455ef6978 <line:403:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455ef6960 <line:403:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef6940 <col:37> '<builtin fn type>' Function 0x1c455e10a38 'tan' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ef6918 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef6900 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef68e8 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef68b0 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455ef6658 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455ef6a90 <line:59:3, col:56> line:403:37 constexpr tan 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455ef69e0 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455ef6d38 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ef6d28 <col:34, col:53>
| |     `-CallExpr 0x1c455ef6cf8 <line:403:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ef6ce0 <line:403:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef6cc0 <col:37> '<builtin fn type>' Function 0x1c455e10ca8 'tan' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ef6c98 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef6c80 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef6c68 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef6c38 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455ef69e0 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455ef6e10 <line:60:3, col:56> line:403:37 constexpr tan 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455ef6d60 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455ef70c0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ef70b0 <col:34, col:53>
| |     `-CallExpr 0x1c455ef7080 <line:403:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ef7068 <line:403:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef7048 <col:37> '<builtin fn type>' Function 0x1c455e10f18 'tan' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ef7020 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef7008 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef6ff0 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef6fc0 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455ef6d60 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455ef7198 <line:61:3, col:56> line:403:37 constexpr tan 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455ef70e8 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455ef7450 <col:32, col:56>
| |   `-ReturnStmt 0x1c455ef7440 <col:34, col:53>
| |     `-CallExpr 0x1c455ef7410 <line:403:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455ef73f8 <line:403:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef73d8 <col:37> '<builtin fn type>' Function 0x1c455e11188 'tan' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455ef73b0 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef7398 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef7380 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef7350 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455ef70e8 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455ef7530 <line:62:3, col:56> line:403:37 constexpr tan 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455ef7478 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455ef77f8 <col:33, col:56>
| |   `-ReturnStmt 0x1c455ef77e8 <col:35, col:53>
| |     `-CallExpr 0x1c455ef77b8 <line:403:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455ef77a0 <line:403:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef7780 <col:37> '<builtin fn type>' Function 0x1c455e10a38 'tan' 'float (float)'
| |       `-CStyleCastExpr 0x1c455ef7758 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef7740 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef7728 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef76f0 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455ef7478 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455ef78d0 <line:63:3, col:59> line:403:37 constexpr tan 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455ef7820 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455ef7b98 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ef7b88 <col:37, col:56>
| |     `-CallExpr 0x1c455ef7b58 <line:403:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455ef7b40 <line:403:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef7b20 <col:37> '<builtin fn type>' Function 0x1c455e10ca8 'tan' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455ef7af8 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef7ae0 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef7ac8 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef7a98 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455ef7820 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455ef7c70 <line:64:3, col:59> line:403:37 constexpr tan 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455ef7bc0 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455ef7f40 <col:35, col:59>
| |   `-ReturnStmt 0x1c455ef7f30 <col:37, col:56>
| |     `-CallExpr 0x1c455ef7f00 <line:403:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455ef7ee8 <line:403:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455ef7ec8 <col:37> '<builtin fn type>' Function 0x1c455e10f18 'tan' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455ef7ea0 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455ef7e88 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455ef7e70 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455ef7e40 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455ef7bc0 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455ef8018 <line:65:3, col:59> line:403:37 constexpr tan 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455ef7f68 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455f24840 <col:35, col:59>
| |   `-ReturnStmt 0x1c455f24830 <col:37, col:56>
| |     `-CallExpr 0x1c455f24800 <line:403:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f247e8 <line:403:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f247c8 <col:37> '<builtin fn type>' Function 0x1c455e11188 'tan' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f247a0 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f24788 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f24770 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f24740 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455ef7f68 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455f24920 <line:66:3, col:57> line:403:37 constexpr tan 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455f24868 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455f24c08 <col:34, col:57>
| |   `-ReturnStmt 0x1c455f24bf8 <col:36, col:54>
| |     `-CallExpr 0x1c455f24bc8 <line:403:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455f24bb0 <line:403:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f24b90 <col:37> '<builtin fn type>' Function 0x1c455e10a38 'tan' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f24b68 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f24b50 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f24b38 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f24b00 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455f24868 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455f24ce0 <line:67:3, col:60> line:403:37 constexpr tan 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455f24c30 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455f24fc8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455f24fb8 <col:38, col:57>
| |     `-CallExpr 0x1c455f24f88 <line:403:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f24f70 <line:403:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f24f50 <col:37> '<builtin fn type>' Function 0x1c455e10ca8 'tan' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f24f28 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f24f10 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f24ef8 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f24ec8 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455f24c30 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455f250a0 <line:68:3, col:60> line:403:37 constexpr tan 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455f24ff0 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455f25390 <col:36, col:60>
| |   `-ReturnStmt 0x1c455f25380 <col:38, col:57>
| |     `-CallExpr 0x1c455f25350 <line:403:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f25338 <line:403:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f25318 <col:37> '<builtin fn type>' Function 0x1c455e10f18 'tan' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f252f0 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f252d8 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f252c0 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f25290 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455f24ff0 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455f25468 <line:69:3, col:60> line:403:37 constexpr tan 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455f253b8 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455f25760 <col:36, col:60>
| |   `-ReturnStmt 0x1c455f25750 <col:38, col:57>
| |     `-CallExpr 0x1c455f25720 <line:403:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f25708 <line:403:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f256e8 <col:37> '<builtin fn type>' Function 0x1c455e11188 'tan' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f256c0 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f256a8 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f25690 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f25660 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455f253b8 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455f25848 <line:20:3, col:55> line:409:36 constexpr tanh 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455f25790 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455f25ab0 <col:32, col:55>
| |   `-ReturnStmt 0x1c455f25aa0 <col:34, col:52>
| |     `-CallExpr 0x1c455f25a70 <line:409:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455f25a58 <line:409:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f25a38 <col:36> '<builtin fn type>' Function 0x1c455e0eba8 'tanh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f25a10 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f259f8 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f259e0 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f259a8 <col:51> 'double' lvalue ParmVar 0x1c455f25790 'V' 'double'
| |-FunctionDecl 0x1c455f25b88 <line:21:3, col:58> line:409:36 constexpr tanh 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455f25ad8 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455f25df0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455f25de0 <col:36, col:55>
| |     `-CallExpr 0x1c455f25db0 <line:409:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f25d98 <line:409:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f25d78 <col:36> '<builtin fn type>' Function 0x1c455e0ee18 'tanh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f25d50 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f25d38 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f25d20 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f25cf0 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455f25ad8 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455f25ec8 <line:22:3, col:58> line:409:36 constexpr tanh 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455f25e18 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455f26138 <col:34, col:58>
| |   `-ReturnStmt 0x1c455f26128 <col:36, col:55>
| |     `-CallExpr 0x1c455f260f8 <line:409:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f260e0 <line:409:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f260c0 <col:36> '<builtin fn type>' Function 0x1c455e0f088 'tanh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f26098 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f26080 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f26068 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f26038 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455f25e18 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455f26210 <line:23:3, col:58> line:409:36 constexpr tanh 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455f26160 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455f26488 <col:34, col:58>
| |   `-ReturnStmt 0x1c455f26478 <col:36, col:55>
| |     `-CallExpr 0x1c455f26448 <line:409:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f26430 <line:409:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f26410 <col:36> '<builtin fn type>' Function 0x1c455e14958 'tanh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f263e8 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f263d0 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f263b8 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f26388 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455f26160 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455f26570 <line:54:3, col:52> line:410:37 constexpr tanh 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455f264b8 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455f1e1c8 <col:29, col:52>
| |   `-ReturnStmt 0x1c455f1e1b8 <col:31, col:49>
| |     `-CallExpr 0x1c455f1e188 <line:410:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455f1e170 <line:410:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f1e150 <col:37> '<builtin fn type>' Function 0x1c455e0eba8 'tanh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f1e128 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f1e110 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f26728 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f266f0 <col:48> 'int' lvalue ParmVar 0x1c455f264b8 'V' 'int'
| |-FunctionDecl 0x1c455f1e2a0 <line:55:3, col:55> line:410:37 constexpr tanh 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455f1e1f0 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455f1e528 <col:31, col:55>
| |   `-ReturnStmt 0x1c455f1e518 <col:33, col:52>
| |     `-CallExpr 0x1c455f1e4e8 <line:410:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f1e4d0 <line:410:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f1e4b0 <col:37> '<builtin fn type>' Function 0x1c455e0ee18 'tanh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f1e488 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f1e470 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f1e458 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f1e428 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455f1e1f0 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455f1e600 <line:56:3, col:55> line:410:37 constexpr tanh 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455f1e550 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455f1e890 <col:31, col:55>
| |   `-ReturnStmt 0x1c455f1e880 <col:33, col:52>
| |     `-CallExpr 0x1c455f1e850 <line:410:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f1e838 <line:410:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f1e818 <col:37> '<builtin fn type>' Function 0x1c455e0f088 'tanh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f1e7f0 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f1e7d8 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f1e7c0 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f1e790 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455f1e550 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455f1e968 <line:57:3, col:55> line:410:37 constexpr tanh 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455f1e8b8 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455f1ec00 <col:31, col:55>
| |   `-ReturnStmt 0x1c455f1ebf0 <col:33, col:52>
| |     `-CallExpr 0x1c455f1ebc0 <line:410:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f1eba8 <line:410:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f1eb88 <col:37> '<builtin fn type>' Function 0x1c455e14958 'tanh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f1eb60 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f1eb48 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f1eb30 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f1eb00 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455f1e8b8 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455f1ece0 <line:58:3, col:53> line:410:37 constexpr tanh 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455f1ec28 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455f1ef88 <col:30, col:53>
| |   `-ReturnStmt 0x1c455f1ef78 <col:32, col:50>
| |     `-CallExpr 0x1c455f1ef48 <line:410:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455f1ef30 <line:410:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f1ef10 <col:37> '<builtin fn type>' Function 0x1c455e0eba8 'tanh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f1eee8 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f1eed0 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f1eeb8 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f1ee80 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455f1ec28 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455f1f060 <line:59:3, col:56> line:410:37 constexpr tanh 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455f1efb0 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455f1f308 <col:32, col:56>
| |   `-ReturnStmt 0x1c455f1f2f8 <col:34, col:53>
| |     `-CallExpr 0x1c455f1f2c8 <line:410:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f1f2b0 <line:410:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f1f290 <col:37> '<builtin fn type>' Function 0x1c455e0ee18 'tanh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f1f268 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f1f250 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f1f238 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f1f208 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455f1efb0 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455f1f3e0 <line:60:3, col:56> line:410:37 constexpr tanh 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455f1f330 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455f1f690 <col:32, col:56>
| |   `-ReturnStmt 0x1c455f1f680 <col:34, col:53>
| |     `-CallExpr 0x1c455f1f650 <line:410:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f1f638 <line:410:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f1f618 <col:37> '<builtin fn type>' Function 0x1c455e0f088 'tanh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f1f5f0 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f1f5d8 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f1f5c0 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f1f590 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455f1f330 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455f1f768 <line:61:3, col:56> line:410:37 constexpr tanh 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455f1f6b8 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455f1fa20 <col:32, col:56>
| |   `-ReturnStmt 0x1c455f1fa10 <col:34, col:53>
| |     `-CallExpr 0x1c455f1f9e0 <line:410:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f1f9c8 <line:410:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f1f9a8 <col:37> '<builtin fn type>' Function 0x1c455e14958 'tanh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f1f980 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f1f968 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f1f950 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f1f920 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455f1f6b8 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455f1fb00 <line:62:3, col:56> line:410:37 constexpr tanh 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455f1fa48 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455f1fdc8 <col:33, col:56>
| |   `-ReturnStmt 0x1c455f1fdb8 <col:35, col:53>
| |     `-CallExpr 0x1c455f1fd88 <line:410:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455f1fd70 <line:410:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f1fd50 <col:37> '<builtin fn type>' Function 0x1c455e0eba8 'tanh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f1fd28 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f1fd10 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f1fcf8 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f1fcc0 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455f1fa48 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455f1fea0 <line:63:3, col:59> line:410:37 constexpr tanh 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455f1fdf0 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455f20378 <col:35, col:59>
| |   `-ReturnStmt 0x1c455f20368 <col:37, col:56>
| |     `-CallExpr 0x1c455f20338 <line:410:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f20320 <line:410:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f200f0 <col:37> '<builtin fn type>' Function 0x1c455e0ee18 'tanh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f200c8 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f200b0 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f20098 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f20068 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455f1fdf0 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455f20450 <line:64:3, col:59> line:410:37 constexpr tanh 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455f203a0 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455f20720 <col:35, col:59>
| |   `-ReturnStmt 0x1c455f20710 <col:37, col:56>
| |     `-CallExpr 0x1c455f206e0 <line:410:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f206c8 <line:410:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f206a8 <col:37> '<builtin fn type>' Function 0x1c455e0f088 'tanh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f20680 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f20668 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f20650 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f20620 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455f203a0 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455f207f8 <line:65:3, col:59> line:410:37 constexpr tanh 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455f20748 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455f20ad0 <col:35, col:59>
| |   `-ReturnStmt 0x1c455f20ac0 <col:37, col:56>
| |     `-CallExpr 0x1c455f20a90 <line:410:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f20a78 <line:410:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f20a58 <col:37> '<builtin fn type>' Function 0x1c455e14958 'tanh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f20a30 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f20a18 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f20a00 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f209d0 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455f20748 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455f20bb0 <line:66:3, col:57> line:410:37 constexpr tanh 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455f20af8 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455f20e98 <col:34, col:57>
| |   `-ReturnStmt 0x1c455f20e88 <col:36, col:54>
| |     `-CallExpr 0x1c455f20e58 <line:410:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455f20e40 <line:410:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f20e20 <col:37> '<builtin fn type>' Function 0x1c455e0eba8 'tanh' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f20df8 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f20de0 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f20dc8 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f20d90 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455f20af8 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455f20f70 <line:67:3, col:60> line:410:37 constexpr tanh 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455f20ec0 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455f21258 <col:36, col:60>
| |   `-ReturnStmt 0x1c455f21248 <col:38, col:57>
| |     `-CallExpr 0x1c455f21218 <line:410:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f21200 <line:410:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f211e0 <col:37> '<builtin fn type>' Function 0x1c455e0ee18 'tanh' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f211b8 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f211a0 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f21188 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f21158 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455f20ec0 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455f21330 <line:68:3, col:60> line:410:37 constexpr tanh 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455f21280 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455f21620 <col:36, col:60>
| |   `-ReturnStmt 0x1c455f21610 <col:38, col:57>
| |     `-CallExpr 0x1c455f215e0 <line:410:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f215c8 <line:410:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f215a8 <col:37> '<builtin fn type>' Function 0x1c455e0f088 'tanh' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f21580 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f21568 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f21550 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f21520 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455f21280 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455f216f8 <line:69:3, col:60> line:410:37 constexpr tanh 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455f21648 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455f219f0 <col:36, col:60>
| |   `-ReturnStmt 0x1c455f219e0 <col:38, col:57>
| |     `-CallExpr 0x1c455f219b0 <line:410:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f21998 <line:410:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f21978 <col:37> '<builtin fn type>' Function 0x1c455e14958 'tanh' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f21950 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f21938 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f21920 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f218f0 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455f21648 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455f21ad8 <line:20:3, col:55> line:416:36 constexpr trunc 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455f21a20 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455f21d40 <col:32, col:55>
| |   `-ReturnStmt 0x1c455f21d30 <col:34, col:52>
| |     `-CallExpr 0x1c455f21d00 <line:416:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455f21ce8 <line:416:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f21cc8 <col:36> '<builtin fn type>' Function 0x1c455e15598 'trunc' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f21ca0 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f21c88 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f21c70 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f21c38 <col:51> 'double' lvalue ParmVar 0x1c455f21a20 'V' 'double'
| |-FunctionDecl 0x1c455f21e18 <line:21:3, col:58> line:416:36 constexpr trunc 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455f21d68 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455f22080 <col:34, col:58>
| |   `-ReturnStmt 0x1c455f22070 <col:36, col:55>
| |     `-CallExpr 0x1c455f22040 <line:416:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f22028 <line:416:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f22008 <col:36> '<builtin fn type>' Function 0x1c455e13718 'trunc' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f21fe0 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f21fc8 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f21fb0 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f21f80 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455f21d68 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455f22158 <line:22:3, col:58> line:416:36 constexpr trunc 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455f220a8 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455f26a08 <col:34, col:58>
| |   `-ReturnStmt 0x1c455f269f8 <col:36, col:55>
| |     `-CallExpr 0x1c455f269c8 <line:416:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f269b0 <line:416:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f26990 <col:36> '<builtin fn type>' Function 0x1c455e13988 'trunc' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f26968 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f26950 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f222f8 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f222c8 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455f220a8 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455f26ae0 <line:23:3, col:58> line:416:36 constexpr trunc 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455f26a30 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455f26d58 <col:34, col:58>
| |   `-ReturnStmt 0x1c455f26d48 <col:36, col:55>
| |     `-CallExpr 0x1c455f26d18 <line:416:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f26d00 <line:416:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f26ce0 <col:36> '<builtin fn type>' Function 0x1c455e13bf8 'trunc' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f26cb8 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f26ca0 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f26c88 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f26c58 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455f26a30 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455f26e40 <line:54:3, col:52> line:417:37 constexpr trunc 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455f26d88 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455f270c8 <col:29, col:52>
| |   `-ReturnStmt 0x1c455f270b8 <col:31, col:49>
| |     `-CallExpr 0x1c455f27088 <line:417:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455f27070 <line:417:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f27050 <col:37> '<builtin fn type>' Function 0x1c455e15598 'trunc' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f27028 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f27010 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f26ff8 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f26fc0 <col:48> 'int' lvalue ParmVar 0x1c455f26d88 'V' 'int'
| |-FunctionDecl 0x1c455f271a0 <line:55:3, col:55> line:417:37 constexpr trunc 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455f270f0 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455f27428 <col:31, col:55>
| |   `-ReturnStmt 0x1c455f27418 <col:33, col:52>
| |     `-CallExpr 0x1c455f273e8 <line:417:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f273d0 <line:417:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f273b0 <col:37> '<builtin fn type>' Function 0x1c455e13718 'trunc' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f27388 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f27370 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f27358 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f27328 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455f270f0 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455f27500 <line:56:3, col:55> line:417:37 constexpr trunc 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455f27450 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455f27790 <col:31, col:55>
| |   `-ReturnStmt 0x1c455f27780 <col:33, col:52>
| |     `-CallExpr 0x1c455f27750 <line:417:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f27738 <line:417:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f27718 <col:37> '<builtin fn type>' Function 0x1c455e13988 'trunc' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f276f0 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f276d8 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f276c0 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f27690 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455f27450 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455f27868 <line:57:3, col:55> line:417:37 constexpr trunc 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455f277b8 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455f27b00 <col:31, col:55>
| |   `-ReturnStmt 0x1c455f27af0 <col:33, col:52>
| |     `-CallExpr 0x1c455f27ac0 <line:417:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f27aa8 <line:417:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f27a88 <col:37> '<builtin fn type>' Function 0x1c455e13bf8 'trunc' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f27a60 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f27a48 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f27a30 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f27a00 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455f277b8 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455f27be0 <line:58:3, col:53> line:417:37 constexpr trunc 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455f27b28 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455f27e88 <col:30, col:53>
| |   `-ReturnStmt 0x1c455f27e78 <col:32, col:50>
| |     `-CallExpr 0x1c455f27e48 <line:417:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455f27e30 <line:417:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f27e10 <col:37> '<builtin fn type>' Function 0x1c455e15598 'trunc' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f27de8 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f27dd0 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f27db8 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f27d80 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455f27b28 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455f27f60 <line:59:3, col:56> line:417:37 constexpr trunc 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455f27eb0 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455f28208 <col:32, col:56>
| |   `-ReturnStmt 0x1c455f281f8 <col:34, col:53>
| |     `-CallExpr 0x1c455f281c8 <line:417:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f281b0 <line:417:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f28190 <col:37> '<builtin fn type>' Function 0x1c455e13718 'trunc' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f28168 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f28150 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f28138 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f28108 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455f27eb0 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455f282e0 <line:60:3, col:56> line:417:37 constexpr trunc 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455f28230 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455f28590 <col:32, col:56>
| |   `-ReturnStmt 0x1c455f28580 <col:34, col:53>
| |     `-CallExpr 0x1c455f28550 <line:417:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f28538 <line:417:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f28518 <col:37> '<builtin fn type>' Function 0x1c455e13988 'trunc' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f284f0 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f284d8 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f284c0 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f28490 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455f28230 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455f28668 <line:61:3, col:56> line:417:37 constexpr trunc 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455f285b8 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455f28920 <col:32, col:56>
| |   `-ReturnStmt 0x1c455f28910 <col:34, col:53>
| |     `-CallExpr 0x1c455f288e0 <line:417:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f288c8 <line:417:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f288a8 <col:37> '<builtin fn type>' Function 0x1c455e13bf8 'trunc' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f28880 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f28868 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f28850 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f28820 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455f285b8 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455f28c18 <line:62:3, col:56> line:417:37 constexpr trunc 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455f28b60 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455f28ee0 <col:33, col:56>
| |   `-ReturnStmt 0x1c455f28ed0 <col:35, col:53>
| |     `-CallExpr 0x1c455f28ea0 <line:417:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455f28e88 <line:417:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f28e68 <col:37> '<builtin fn type>' Function 0x1c455e15598 'trunc' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f28e40 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f28e28 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f28e10 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f28dd8 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455f28b60 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455f28fb8 <line:63:3, col:59> line:417:37 constexpr trunc 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455f28f08 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455f29280 <col:35, col:59>
| |   `-ReturnStmt 0x1c455f29270 <col:37, col:56>
| |     `-CallExpr 0x1c455f29240 <line:417:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f29228 <line:417:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f29208 <col:37> '<builtin fn type>' Function 0x1c455e13718 'trunc' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f291e0 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f291c8 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f291b0 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f29180 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455f28f08 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455f29358 <line:64:3, col:59> line:417:37 constexpr trunc 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455f292a8 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455f29628 <col:35, col:59>
| |   `-ReturnStmt 0x1c455f29618 <col:37, col:56>
| |     `-CallExpr 0x1c455f295e8 <line:417:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f295d0 <line:417:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f295b0 <col:37> '<builtin fn type>' Function 0x1c455e13988 'trunc' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f29588 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f29570 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f29558 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f29528 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455f292a8 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455f29700 <line:65:3, col:59> line:417:37 constexpr trunc 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455f29650 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455f299d8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455f299c8 <col:37, col:56>
| |     `-CallExpr 0x1c455f29998 <line:417:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f29980 <line:417:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f29960 <col:37> '<builtin fn type>' Function 0x1c455e13bf8 'trunc' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f29938 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f29920 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f29908 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f298d8 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455f29650 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455f29ab8 <line:66:3, col:57> line:417:37 constexpr trunc 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455f29a00 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455f29da0 <col:34, col:57>
| |   `-ReturnStmt 0x1c455f29d90 <col:36, col:54>
| |     `-CallExpr 0x1c455f29d60 <line:417:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455f29d48 <line:417:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f29d28 <col:37> '<builtin fn type>' Function 0x1c455e15598 'trunc' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f29d00 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f29ce8 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f29cd0 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f29c98 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455f29a00 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455f29e78 <line:67:3, col:60> line:417:37 constexpr trunc 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455f29dc8 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455f2a160 <col:36, col:60>
| |   `-ReturnStmt 0x1c455f2a150 <col:38, col:57>
| |     `-CallExpr 0x1c455f2a120 <line:417:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f2a108 <line:417:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f2a0e8 <col:37> '<builtin fn type>' Function 0x1c455e13718 'trunc' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f2a0c0 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f2a0a8 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f2a090 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f2a060 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455f29dc8 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455f2a238 <line:68:3, col:60> line:417:37 constexpr trunc 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455f2a188 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455f2a528 <col:36, col:60>
| |   `-ReturnStmt 0x1c455f2a518 <col:38, col:57>
| |     `-CallExpr 0x1c455f2a4e8 <line:417:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f2a4d0 <line:417:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f2a4b0 <col:37> '<builtin fn type>' Function 0x1c455e13988 'trunc' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f2a488 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f2a470 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f2a458 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f2a428 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455f2a188 'V' 'uint64_t3':'vector<uint64_t, 3>'
| |-FunctionDecl 0x1c455f2a600 <line:69:3, col:60> line:417:37 constexpr trunc 'float4 (uint64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455f2a550 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
| | `-CompoundStmt 0x1c455f2a8f8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455f2a8e8 <col:38, col:57>
| |     `-CallExpr 0x1c455f2a8b8 <line:417:37, line:69:57> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f2a8a0 <line:417:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f2a880 <col:37> '<builtin fn type>' Function 0x1c455e13bf8 'trunc' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f2a858 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f2a840 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f2a828 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f2a7f8 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455f2a550 'V' 'uint64_t4':'vector<uint64_t, 4>'
| |-FunctionDecl 0x1c455f2a9e0 <line:20:3, col:55> line:423:36 constexpr radians 'float (double)' implicit-inline
| | |-ParmVarDecl 0x1c455f2a928 <line:20:22, col:29> col:29 used V 'double'
| | `-CompoundStmt 0x1c455f22618 <col:32, col:55>
| |   `-ReturnStmt 0x1c455f22608 <col:34, col:52>
| |     `-CallExpr 0x1c455f225d8 <line:423:36, line:20:52> 'float'
| |       |-ImplicitCastExpr 0x1c455f225c0 <line:423:36> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f225a0 <col:36> '<builtin fn type>' Function 0x1c455e3c030 'radians' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f22578 <line:20:44, col:51> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f22560 <col:51> 'float' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f22548 <col:51> 'double' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f2ab40 <col:51> 'double' lvalue ParmVar 0x1c455f2a928 'V' 'double'
| |-FunctionDecl 0x1c455f226f0 <line:21:3, col:58> line:423:36 constexpr radians 'float2 (double2)' implicit-inline
| | |-ParmVarDecl 0x1c455f22640 <line:21:23, col:31> col:31 used V 'double2':'vector<double, 2>'
| | `-CompoundStmt 0x1c455f22958 <col:34, col:58>
| |   `-ReturnStmt 0x1c455f22948 <col:36, col:55>
| |     `-CallExpr 0x1c455f22918 <line:423:36, line:21:55> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f22900 <line:423:36> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f228e0 <col:36> '<builtin fn type>' Function 0x1c455e3c2a0 'radians' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f228b8 <line:21:46, col:54> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f228a0 <col:54> 'vector<float, 2>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f22888 <col:54> 'double2':'vector<double, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f22858 <col:54> 'double2':'vector<double, 2>' lvalue ParmVar 0x1c455f22640 'V' 'double2':'vector<double, 2>'
| |-FunctionDecl 0x1c455f22a30 <line:22:3, col:58> line:423:36 constexpr radians 'float3 (double3)' implicit-inline
| | |-ParmVarDecl 0x1c455f22980 <line:22:23, col:31> col:31 used V 'double3':'vector<double, 3>'
| | `-CompoundStmt 0x1c455f22ca0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455f22c90 <col:36, col:55>
| |     `-CallExpr 0x1c455f22c60 <line:423:36, line:22:55> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f22c48 <line:423:36> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f22c28 <col:36> '<builtin fn type>' Function 0x1c455e3c510 'radians' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f22c00 <line:22:46, col:54> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f22be8 <col:54> 'vector<float, 3>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f22bd0 <col:54> 'double3':'vector<double, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f22ba0 <col:54> 'double3':'vector<double, 3>' lvalue ParmVar 0x1c455f22980 'V' 'double3':'vector<double, 3>'
| |-FunctionDecl 0x1c455f22d78 <line:23:3, col:58> line:423:36 constexpr radians 'float4 (double4)' implicit-inline
| | |-ParmVarDecl 0x1c455f22cc8 <line:23:23, col:31> col:31 used V 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455f22ff0 <col:34, col:58>
| |   `-ReturnStmt 0x1c455f22fe0 <col:36, col:55>
| |     `-CallExpr 0x1c455f22fb0 <line:423:36, line:23:55> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f22f98 <line:423:36> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f22f78 <col:36> '<builtin fn type>' Function 0x1c455e3c780 'radians' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f22f50 <line:23:46, col:54> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f22f38 <col:54> 'vector<float, 4>' <FloatingCast> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f22f20 <col:54> 'double4':'vector<double, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f22ef0 <col:54> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455f22cc8 'V' 'double4':'vector<double, 4>'
| |-FunctionDecl 0x1c455f230d8 <line:54:3, col:52> line:424:37 constexpr radians 'float (int)' implicit-inline
| | |-ParmVarDecl 0x1c455f23020 <line:54:22, col:26> col:26 used V 'int'
| | `-CompoundStmt 0x1c455f23360 <col:29, col:52>
| |   `-ReturnStmt 0x1c455f23350 <col:31, col:49>
| |     `-CallExpr 0x1c455f23320 <line:424:37, line:54:49> 'float'
| |       |-ImplicitCastExpr 0x1c455f23308 <line:424:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f232e8 <col:37> '<builtin fn type>' Function 0x1c455e3c030 'radians' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f232c0 <line:54:41, col:48> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f232a8 <col:48> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f23290 <col:48> 'int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f23258 <col:48> 'int' lvalue ParmVar 0x1c455f23020 'V' 'int'
| |-FunctionDecl 0x1c455f23438 <line:55:3, col:55> line:424:37 constexpr radians 'float2 (int2)' implicit-inline
| | |-ParmVarDecl 0x1c455f23388 <line:55:23, col:28> col:28 used V 'int2':'vector<int, 2>'
| | `-CompoundStmt 0x1c455f236c0 <col:31, col:55>
| |   `-ReturnStmt 0x1c455f236b0 <col:33, col:52>
| |     `-CallExpr 0x1c455f23680 <line:424:37, line:55:52> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f23668 <line:424:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f23648 <col:37> '<builtin fn type>' Function 0x1c455e3c2a0 'radians' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f23620 <line:55:43, col:51> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f23608 <col:51> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f235f0 <col:51> 'int2':'vector<int, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f235c0 <col:51> 'int2':'vector<int, 2>' lvalue ParmVar 0x1c455f23388 'V' 'int2':'vector<int, 2>'
| |-FunctionDecl 0x1c455f23798 <line:56:3, col:55> line:424:37 constexpr radians 'float3 (int3)' implicit-inline
| | |-ParmVarDecl 0x1c455f236e8 <line:56:23, col:28> col:28 used V 'int3':'vector<int, 3>'
| | `-CompoundStmt 0x1c455f23a28 <col:31, col:55>
| |   `-ReturnStmt 0x1c455f23a18 <col:33, col:52>
| |     `-CallExpr 0x1c455f239e8 <line:424:37, line:56:52> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f239d0 <line:424:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f239b0 <col:37> '<builtin fn type>' Function 0x1c455e3c510 'radians' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f23988 <line:56:43, col:51> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f23970 <col:51> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f23958 <col:51> 'int3':'vector<int, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f23928 <col:51> 'int3':'vector<int, 3>' lvalue ParmVar 0x1c455f236e8 'V' 'int3':'vector<int, 3>'
| |-FunctionDecl 0x1c455f23b00 <line:57:3, col:55> line:424:37 constexpr radians 'float4 (int4)' implicit-inline
| | |-ParmVarDecl 0x1c455f23a50 <line:57:23, col:28> col:28 used V 'int4':'vector<int, 4>'
| | `-CompoundStmt 0x1c455f23d98 <col:31, col:55>
| |   `-ReturnStmt 0x1c455f23d88 <col:33, col:52>
| |     `-CallExpr 0x1c455f23d58 <line:424:37, line:57:52> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f23d40 <line:424:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f23d20 <col:37> '<builtin fn type>' Function 0x1c455e3c780 'radians' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f23cf8 <line:57:43, col:51> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f23ce0 <col:51> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f23cc8 <col:51> 'int4':'vector<int, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f23c98 <col:51> 'int4':'vector<int, 4>' lvalue ParmVar 0x1c455f23a50 'V' 'int4':'vector<int, 4>'
| |-FunctionDecl 0x1c455f23e78 <line:58:3, col:53> line:424:37 constexpr radians 'float (uint)' implicit-inline
| | |-ParmVarDecl 0x1c455f23dc0 <line:58:22, col:27> col:27 used V 'uint':'unsigned int'
| | `-CompoundStmt 0x1c455f24120 <col:30, col:53>
| |   `-ReturnStmt 0x1c455f24110 <col:32, col:50>
| |     `-CallExpr 0x1c455f240e0 <line:424:37, line:58:50> 'float'
| |       |-ImplicitCastExpr 0x1c455f240c8 <line:424:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f240a8 <col:37> '<builtin fn type>' Function 0x1c455e3c030 'radians' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f24080 <line:58:42, col:49> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f24068 <col:49> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f24050 <col:49> 'uint':'unsigned int' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f24018 <col:49> 'uint':'unsigned int' lvalue ParmVar 0x1c455f23dc0 'V' 'uint':'unsigned int'
| |-FunctionDecl 0x1c455f241f8 <line:59:3, col:56> line:424:37 constexpr radians 'float2 (uint2)' implicit-inline
| | |-ParmVarDecl 0x1c455f24148 <line:59:23, col:29> col:29 used V 'uint2':'vector<uint, 2>'
| | `-CompoundStmt 0x1c455f244a0 <col:32, col:56>
| |   `-ReturnStmt 0x1c455f24490 <col:34, col:53>
| |     `-CallExpr 0x1c455f24460 <line:424:37, line:59:53> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f24448 <line:424:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f24428 <col:37> '<builtin fn type>' Function 0x1c455e3c2a0 'radians' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f24400 <line:59:44, col:52> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f243e8 <col:52> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f243d0 <col:52> 'uint2':'vector<uint, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f243a0 <col:52> 'uint2':'vector<uint, 2>' lvalue ParmVar 0x1c455f24148 'V' 'uint2':'vector<uint, 2>'
| |-FunctionDecl 0x1c455f31450 <line:60:3, col:56> line:424:37 constexpr radians 'float3 (uint3)' implicit-inline
| | |-ParmVarDecl 0x1c455f313a0 <line:60:23, col:29> col:29 used V 'uint3':'vector<uint, 3>'
| | `-CompoundStmt 0x1c455f31700 <col:32, col:56>
| |   `-ReturnStmt 0x1c455f316f0 <col:34, col:53>
| |     `-CallExpr 0x1c455f316c0 <line:424:37, line:60:53> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f316a8 <line:424:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f31688 <col:37> '<builtin fn type>' Function 0x1c455e3c510 'radians' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f31660 <line:60:44, col:52> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f31648 <col:52> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f31630 <col:52> 'uint3':'vector<uint, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f31600 <col:52> 'uint3':'vector<uint, 3>' lvalue ParmVar 0x1c455f313a0 'V' 'uint3':'vector<uint, 3>'
| |-FunctionDecl 0x1c455f317d8 <line:61:3, col:56> line:424:37 constexpr radians 'float4 (uint4)' implicit-inline
| | |-ParmVarDecl 0x1c455f31728 <line:61:23, col:29> col:29 used V 'uint4':'vector<uint, 4>'
| | `-CompoundStmt 0x1c455f31a90 <col:32, col:56>
| |   `-ReturnStmt 0x1c455f31a80 <col:34, col:53>
| |     `-CallExpr 0x1c455f31a50 <line:424:37, line:61:53> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f31a38 <line:424:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f31a18 <col:37> '<builtin fn type>' Function 0x1c455e3c780 'radians' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f319f0 <line:61:44, col:52> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f319d8 <col:52> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f319c0 <col:52> 'uint4':'vector<uint, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f31990 <col:52> 'uint4':'vector<uint, 4>' lvalue ParmVar 0x1c455f31728 'V' 'uint4':'vector<uint, 4>'
| |-FunctionDecl 0x1c455f31b70 <line:62:3, col:56> line:424:37 constexpr radians 'float (int64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455f31ab8 <line:62:22, col:30> col:30 used V 'int64_t':'long'
| | `-CompoundStmt 0x1c455f31e38 <col:33, col:56>
| |   `-ReturnStmt 0x1c455f31e28 <col:35, col:53>
| |     `-CallExpr 0x1c455f31df8 <line:424:37, line:62:53> 'float'
| |       |-ImplicitCastExpr 0x1c455f31de0 <line:424:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f31dc0 <col:37> '<builtin fn type>' Function 0x1c455e3c030 'radians' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f31d98 <line:62:45, col:52> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f31d80 <col:52> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f31d68 <col:52> 'int64_t':'long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f31d30 <col:52> 'int64_t':'long' lvalue ParmVar 0x1c455f31ab8 'V' 'int64_t':'long'
| |-FunctionDecl 0x1c455f31f10 <line:63:3, col:59> line:424:37 constexpr radians 'float2 (int64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455f31e60 <line:63:23, col:32> col:32 used V 'int64_t2':'vector<int64_t, 2>'
| | `-CompoundStmt 0x1c455f321d8 <col:35, col:59>
| |   `-ReturnStmt 0x1c455f321c8 <col:37, col:56>
| |     `-CallExpr 0x1c455f32198 <line:424:37, line:63:56> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f32180 <line:424:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f32160 <col:37> '<builtin fn type>' Function 0x1c455e3c2a0 'radians' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f32138 <line:63:47, col:55> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f32120 <col:55> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f32108 <col:55> 'int64_t2':'vector<int64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f320d8 <col:55> 'int64_t2':'vector<int64_t, 2>' lvalue ParmVar 0x1c455f31e60 'V' 'int64_t2':'vector<int64_t, 2>'
| |-FunctionDecl 0x1c455f322b0 <line:64:3, col:59> line:424:37 constexpr radians 'float3 (int64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455f32200 <line:64:23, col:32> col:32 used V 'int64_t3':'vector<int64_t, 3>'
| | `-CompoundStmt 0x1c455f32580 <col:35, col:59>
| |   `-ReturnStmt 0x1c455f32570 <col:37, col:56>
| |     `-CallExpr 0x1c455f32540 <line:424:37, line:64:56> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f32528 <line:424:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f32508 <col:37> '<builtin fn type>' Function 0x1c455e3c510 'radians' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f324e0 <line:64:47, col:55> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f324c8 <col:55> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f324b0 <col:55> 'int64_t3':'vector<int64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f32480 <col:55> 'int64_t3':'vector<int64_t, 3>' lvalue ParmVar 0x1c455f32200 'V' 'int64_t3':'vector<int64_t, 3>'
| |-FunctionDecl 0x1c455f32658 <line:65:3, col:59> line:424:37 constexpr radians 'float4 (int64_t4)' implicit-inline
| | |-ParmVarDecl 0x1c455f325a8 <line:65:23, col:32> col:32 used V 'int64_t4':'vector<int64_t, 4>'
| | `-CompoundStmt 0x1c455f32930 <col:35, col:59>
| |   `-ReturnStmt 0x1c455f32920 <col:37, col:56>
| |     `-CallExpr 0x1c455f328f0 <line:424:37, line:65:56> 'float4':'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f328d8 <line:424:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f328b8 <col:37> '<builtin fn type>' Function 0x1c455e3c780 'radians' 'float4 (float4)'
| |       `-CStyleCastExpr 0x1c455f32890 <line:65:47, col:55> 'float4':'vector<float, 4>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f32878 <col:55> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f32860 <col:55> 'int64_t4':'vector<int64_t, 4>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f32830 <col:55> 'int64_t4':'vector<int64_t, 4>' lvalue ParmVar 0x1c455f325a8 'V' 'int64_t4':'vector<int64_t, 4>'
| |-FunctionDecl 0x1c455f32a10 <line:66:3, col:57> line:424:37 constexpr radians 'float (uint64_t)' implicit-inline
| | |-ParmVarDecl 0x1c455f32958 <line:66:22, col:31> col:31 used V 'uint64_t':'unsigned long'
| | `-CompoundStmt 0x1c455f32cf8 <col:34, col:57>
| |   `-ReturnStmt 0x1c455f32ce8 <col:36, col:54>
| |     `-CallExpr 0x1c455f32cb8 <line:424:37, line:66:54> 'float'
| |       |-ImplicitCastExpr 0x1c455f32ca0 <line:424:37> 'float (*)(float)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f32c80 <col:37> '<builtin fn type>' Function 0x1c455e3c030 'radians' 'float (float)'
| |       `-CStyleCastExpr 0x1c455f32c58 <line:66:46, col:53> 'float' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f32c40 <col:53> 'float' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f32c28 <col:53> 'uint64_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f32bf0 <col:53> 'uint64_t':'unsigned long' lvalue ParmVar 0x1c455f32958 'V' 'uint64_t':'unsigned long'
| |-FunctionDecl 0x1c455f32dd0 <line:67:3, col:60> line:424:37 constexpr radians 'float2 (uint64_t2)' implicit-inline
| | |-ParmVarDecl 0x1c455f32d20 <line:67:23, col:33> col:33 used V 'uint64_t2':'vector<uint64_t, 2>'
| | `-CompoundStmt 0x1c455f330b8 <col:36, col:60>
| |   `-ReturnStmt 0x1c455f330a8 <col:38, col:57>
| |     `-CallExpr 0x1c455f33078 <line:424:37, line:67:57> 'float2':'vector<float, 2>'
| |       |-ImplicitCastExpr 0x1c455f33060 <line:424:37> 'float2 (*)(float2)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f33040 <col:37> '<builtin fn type>' Function 0x1c455e3c2a0 'radians' 'float2 (float2)'
| |       `-CStyleCastExpr 0x1c455f33018 <line:67:48, col:56> 'float2':'vector<float, 2>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f33000 <col:56> 'vector<float, 2>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f32fe8 <col:56> 'uint64_t2':'vector<uint64_t, 2>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f32fb8 <col:56> 'uint64_t2':'vector<uint64_t, 2>' lvalue ParmVar 0x1c455f32d20 'V' 'uint64_t2':'vector<uint64_t, 2>'
| |-FunctionDecl 0x1c455f33190 <line:68:3, col:60> line:424:37 constexpr radians 'float3 (uint64_t3)' implicit-inline
| | |-ParmVarDecl 0x1c455f330e0 <line:68:23, col:33> col:33 used V 'uint64_t3':'vector<uint64_t, 3>'
| | `-CompoundStmt 0x1c455f2f270 <col:36, col:60>
| |   `-ReturnStmt 0x1c455f2f260 <col:38, col:57>
| |     `-CallExpr 0x1c455f2f230 <line:424:37, line:68:57> 'float3':'vector<float, 3>'
| |       |-ImplicitCastExpr 0x1c455f2f218 <line:424:37> 'float3 (*)(float3)' <BuiltinFnToFnPtr>
| |       | `-DeclRefExpr 0x1c455f2f1f8 <col:37> '<builtin fn type>' Function 0x1c455e3c510 'radians' 'float3 (float3)'
| |       `-CStyleCastExpr 0x1c455f2f1d0 <line:68:48, col:56> 'float3':'vector<float, 3>' <NoOp>
| |         `-ImplicitCastExpr 0x1c455f2f1b8 <col:56> 'vector<float, 3>' <IntegralToFloating> part_of_explicit_cast
| |           `-ImplicitCastExpr 0x1c455f2f1a0 <col:56> 'uint64_t3':'vector<uint64_t, 3>' <LValueToRValue> part_of_explicit_cast
| |             `-DeclRefExpr 0x1c455f33380 <col:56> 'uint64_t3':'vector<uint64_t, 3>' lvalue ParmVar 0x1c455f330e0 'V' 'uint64_t3':'vector<uint64_t, 3>'
| `-FunctionDecl 0x1c455f2f348 <line:69:3, col:60> line:424:37 constexpr radians 'float4 (uint64_t4)' implicit-inline
|   |-ParmVarDecl 0x1c455f2f298 <line:69:23, col:33> col:33 used V 'uint64_t4':'vector<uint64_t, 4>'
|   `-CompoundStmt 0x1c455f2f640 <col:36, col:60>
|     `-ReturnStmt 0x1c455f2f630 <col:38, col:57>
|       `-CallExpr 0x1c455f2f600 <line:424:37, line:69:57> 'float4':'vector<float, 4>'
|         |-ImplicitCastExpr 0x1c455f2f5e8 <line:424:37> 'float4 (*)(float4)' <BuiltinFnToFnPtr>
|         | `-DeclRefExpr 0x1c455f2f5c8 <col:37> '<builtin fn type>' Function 0x1c455e3c780 'radians' 'float4 (float4)'
|         `-CStyleCastExpr 0x1c455f2f5a0 <line:69:48, col:56> 'float4':'vector<float, 4>' <NoOp>
|           `-ImplicitCastExpr 0x1c455f2f588 <col:56> 'vector<float, 4>' <IntegralToFloating> part_of_explicit_cast
|             `-ImplicitCastExpr 0x1c455f2f570 <col:56> 'uint64_t4':'vector<uint64_t, 4>' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x1c455f2f540 <col:56> 'uint64_t4':'vector<uint64_t, 4>' lvalue ParmVar 0x1c455f2f298 'V' 'uint64_t4':'vector<uint64_t, 4>'
|-NamespaceDecl 0x1c455f2f718 prev 0x1c455e3cc20 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsic_helpers.h:12:1, line:152:1> line:12:11 hlsl
| |-original Namespace 0x1c4559cd198 'hlsl'
| `-NamespaceDecl 0x1c455f2f788 prev 0x1c455d326c8 <line:13:1, line:151:1> line:13:11 __detail
|   |-original Namespace 0x1c455d326c8 '__detail'
|   |-FunctionDecl 0x1c455f2f8b8 <line:15:1, line:24:1> line:15:16 used constexpr d3d_color_to_ubyte4_impl 'int4 (float4)' implicit-inline
|   | |-ParmVarDecl 0x1c455f2f808 <col:41, col:48> col:48 used V 'float4':'vector<float, 4>'
|   | `-CompoundStmt 0x1c455f2fa68 <col:51, line:24:1>
|   |   `-ReturnStmt 0x1c455f2fa58 <line:23:3, col:19>
|   |     `-ImplicitCastExpr 0x1c455f2fa40 <col:10, col:19> 'vector<int, 4>' <FloatingToIntegral>
|   |       `-BinaryOperator 0x1c455f2fa20 <col:10, col:19> 'vector<float, 4>' '*'
|   |         |-ImplicitCastExpr 0x1c455f2f9f0 <col:10, col:12> 'vector<float, 4>' <LValueToRValue>
|   |         | `-ExtVectorElementExpr 0x1c455f2f9a0 <col:10, col:12> 'vector<float, 4>' lvalue vectorcomponent zyxw
|   |         |   `-DeclRefExpr 0x1c455f2f980 <col:10> 'float4':'vector<float, 4>' lvalue ParmVar 0x1c455f2f808 'V' 'float4':'vector<float, 4>'
|   |         `-ImplicitCastExpr 0x1c455f2fa08 <col:19> 'vector<float, 4>' <VectorSplat>
|   |           `-FloatingLiteral 0x1c455f2f9c8 <col:19> 'float' 2.550020e+02
|   |-FunctionTemplateDecl 0x1c455f2fd08 <line:26:1, col:69> col:35 length_impl
|   | |-TemplateTypeParmDecl 0x1c455f2fa80 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | `-FunctionDecl 0x1c455f2fc60 <col:23, col:69> col:35 constexpr length_impl 'T (T)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f2fb30 <col:47, col:49> col:49 referenced X 'T'
|   |   `-CompoundStmt 0x1c455f2ff68 <col:52, col:69>
|   |     `-ReturnStmt 0x1c455f2ff58 <col:54, col:66>
|   |       `-CallExpr 0x1c455f2ff28 <col:61, col:66> '<dependent type>'
|   |         |-UnresolvedLookupExpr 0x1c455f2fde8 <col:61> '<overloaded function type>' lvalue (ADL) = 'abs' 0x1c455d35238 0x1c455d35590 0x1c455d358f0 0x1c455d35c50 0x1c455d35f08 0x1c455d385c0 0x1c455d38920 0x1c455d38c80 0x1c455d38f60 0x1c455d39250 0x1c455d37440 0x1c455d37730 0x1c455d37988 0x1c455d37cf0 0x1c455d38050 0x1c455d395d0 0x1c455d398c0 0x1c455d39c20 0x1c455d39f80 0x1c455d3a2e0 0x1c455d3da10 0x1c455d3dd00 0x1c455d3dff0 0x1c455d3e2e0 0x1c455d3e538 0x1c455d3a588 0x1c455d3a8f0 0x1c455d3ac50
|   |         `-DeclRefExpr 0x1c455f2ff08 <col:65> 'T' lvalue ParmVar 0x1c455f2fb30 'X' 'T'
|   |-FunctionTemplateDecl 0x1c455f30bc0 <line:28:1, line:36:1> line:30:1 length_vec_impl
|   | |-TemplateTypeParmDecl 0x1c455f2ff80 <line:28:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | |-NonTypeTemplateParmDecl 0x1c455f30018 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 N
|   | `-FunctionDecl 0x1c455f30b18 <line:29:1, line:36:1> line:30:1 constexpr length_vec_impl 'enable_if_t<is_same<float, T>::value || is_same<half, T>::value, T> (vector<T, N>)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f309d0 <col:17, col:30> col:30 referenced X 'vector<T, N>'
|   |   `-CompoundStmt 0x1c455f30f80 <col:33, line:36:1>
|   |     `-ReturnStmt 0x1c455f30f70 <line:34:3, col:24>
|   |       `-CallExpr 0x1c455f30f40 <col:10, col:24> '<dependent type>'
|   |         |-UnresolvedLookupExpr 0x1c455f30ca0 <col:10> '<overloaded function type>' lvalue (ADL) = 'sqrt' 0x1c455dfdee0 0x1c455dfe140 0x1c455dfe3b0 0x1c455dfe620 0x1c455dfe8a0 0x1c455dfeb10 0x1c455dfed80 0x1c455e115e0 0x1c455eebaa8 0x1c455eebde8 0x1c455eec128 0x1c455eec470 0x1c455eec7d0 0x1c455eecb30 0x1c455eece90 0x1c455eed1f8 0x1c455eed570 0x1c455eefd10 0x1c455ef0090 0x1c455ef0418 0x1c455ef07b0 0x1c455ef0b50 0x1c455ef0ef0 0x1c455ef1298 0x1c455ef1650 0x1c455ef1a10 0x1c455eedc98 0x1c455eee060
|   |         `-CallExpr 0x1c455f30f08 <col:15, col:23> '<dependent type>'
|   |           |-UnresolvedLookupExpr 0x1c455f30dc0 <col:15> '<overloaded function type>' lvalue (ADL) = 'dot' 0x1c455d80768 0x1c455d7c7e8 0x1c455d7cb88 0x1c455d7cf28 0x1c455d7d258 0x1c455d80ad0 0x1c455d80e78 0x1c455d81218 0x1c455d81588 0x1c455d818f8 0x1c455d83fd8 0x1c455d84378 0x1c455d84718 0x1c455d84ab0 0x1c455d81c50 0x1c455d81ff0 0x1c455d82390 0x1c455d82730 0x1c455d82ad0 0x1c455d82fa0 0x1c455d83340 0x1c455d836e0 0x1c455d83a80 0x1c455dc0260 0x1c455dc0600
|   |           |-DeclRefExpr 0x1c455f30ec8 <col:19> 'vector<T, N>' lvalue ParmVar 0x1c455f309d0 'X' 'vector<T, N>'
|   |           `-DeclRefExpr 0x1c455f30ee8 <col:22> 'vector<T, N>' lvalue ParmVar 0x1c455f309d0 'X' 'vector<T, N>'
|   |-FunctionTemplateDecl 0x1c455f2b4a0 <line:38:1, line:41:1> line:39:24 dst_impl
|   | |-TemplateTypeParmDecl 0x1c455f30f98 <line:38:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | |-FunctionDecl 0x1c455f2b3f8 <line:39:1, line:41:1> line:39:24 constexpr dst_impl 'vector<T, 4> (vector<T, 4>, vector<T, 4>)' implicit-inline
|   | | |-ParmVarDecl 0x1c455f2b050 <col:33, col:46> col:46 referenced Src0 'vector<T, 4>'
|   | | |-ParmVarDecl 0x1c455f2b290 <col:52, col:65> col:65 referenced Src1 'vector<T, 4>'
|   | | `-CompoundStmt 0x1c455f2b7e0 <col:71, line:41:1>
|   | |   `-ReturnStmt 0x1c455f2b7d0 <line:40:3, col:49>
|   | |     `-InitListExpr 0x1c455f2b770 <col:10, col:49> 'void'
|   | |       |-IntegerLiteral 0x1c455f2b588 <col:11> 'int' 1
|   | |       |-BinaryOperator 0x1c455f2b680 <col:14, col:30> '<dependent type>' '*'
|   | |       | |-ArraySubscriptExpr 0x1c455f2b5f8 <col:14, col:20> '<dependent type>' lvalue
|   | |       | | |-DeclRefExpr 0x1c455f2b5b0 <col:14> 'vector<T, 4>' lvalue ParmVar 0x1c455f2b050 'Src0' 'vector<T, 4>'
|   | |       | | `-IntegerLiteral 0x1c455f2b5d0 <col:19> 'int' 1
|   | |       | `-ArraySubscriptExpr 0x1c455f2b660 <col:24, col:30> '<dependent type>' lvalue
|   | |       |   |-DeclRefExpr 0x1c455f2b618 <col:24> 'vector<T, 4>' lvalue ParmVar 0x1c455f2b290 'Src1' 'vector<T, 4>'
|   | |       |   `-IntegerLiteral 0x1c455f2b638 <col:29> 'int' 1
|   | |       |-ArraySubscriptExpr 0x1c455f2b6e8 <col:33, col:39> '<dependent type>' lvalue
|   | |       | |-DeclRefExpr 0x1c455f2b6a0 <col:33> 'vector<T, 4>' lvalue ParmVar 0x1c455f2b050 'Src0' 'vector<T, 4>'
|   | |       | `-IntegerLiteral 0x1c455f2b6c0 <col:38> 'int' 2
|   | |       `-ArraySubscriptExpr 0x1c455f2b750 <col:42, col:48> '<dependent type>' lvalue
|   | |         |-DeclRefExpr 0x1c455f2b708 <col:42> 'vector<T, 4>' lvalue ParmVar 0x1c455f2b290 'Src1' 'vector<T, 4>'
|   | |         `-IntegerLiteral 0x1c455f2b728 <col:47> 'int' 3
|   | |-FunctionDecl 0x1c455f40210 <line:39:1, line:41:1> line:39:24 used constexpr dst_impl 'vector<half, 4> (vector<half, 4>, vector<half, 4>)' implicit_instantiation implicit-inline
|   | | |-TemplateArgument type 'half'
|   | | | `-BuiltinType 0x1c4559cd0d0 'half'
|   | | |-ParmVarDecl 0x1c455f46338 <col:33, col:46> col:46 used Src0 'vector<half, 4>'
|   | | |-ParmVarDecl 0x1c455f46528 <col:52, col:65> col:65 used Src1 'vector<half, 4>'
|   | | `-CompoundStmt 0x1c455f406a8 <col:71, line:41:1>
|   | |   `-ReturnStmt 0x1c455f40698 <line:40:3, col:49>
|   | |     `-InitListExpr 0x1c455f40638 <col:10, col:49> 'vector<half, 4>'
|   | |       |-ImplicitCastExpr 0x1c455f40578 <col:11> 'half' <IntegralToFloating>
|   | |       | `-IntegerLiteral 0x1c455f2b588 <col:11> 'int' 1
|   | |       |-ImplicitCastExpr 0x1c455f40590 <col:14, col:30> 'half' <FloatingCast>
|   | |       | `-BinaryOperator 0x1c455f40478 <col:14, col:30> 'float' '*'
|   | |       |   |-ImplicitCastExpr 0x1c455f40430 <col:14, col:20> 'float' <FloatingCast>
|   | |       |   | `-ImplicitCastExpr 0x1c455f40418 <col:14, col:20> 'half' <LValueToRValue>
|   | |       |   |   `-ArraySubscriptExpr 0x1c455f403a0 <col:14, col:20> 'half' lvalue vectorcomponent
|   | |       |   |     |-DeclRefExpr 0x1c455f40368 <col:14> 'vector<half, 4>' lvalue ParmVar 0x1c455f46338 'Src0' 'vector<half, 4>'
|   | |       |   |     `-IntegerLiteral 0x1c455f2b5d0 <col:19> 'int' 1
|   | |       |   `-ImplicitCastExpr 0x1c455f40460 <col:24, col:30> 'float' <FloatingCast>
|   | |       |     `-ImplicitCastExpr 0x1c455f40448 <col:24, col:30> 'half' <LValueToRValue>
|   | |       |       `-ArraySubscriptExpr 0x1c455f403f8 <col:24, col:30> 'half' lvalue vectorcomponent
|   | |       |         |-DeclRefExpr 0x1c455f403c0 <col:24> 'vector<half, 4>' lvalue ParmVar 0x1c455f46528 'Src1' 'vector<half, 4>'
|   | |       |         `-IntegerLiteral 0x1c455f2b638 <col:29> 'int' 1
|   | |       |-ImplicitCastExpr 0x1c455f405a8 <col:33, col:39> 'half' <LValueToRValue>
|   | |       | `-ArraySubscriptExpr 0x1c455f404b8 <col:33, col:39> 'half' lvalue vectorcomponent
|   | |       |   |-DeclRefExpr 0x1c455f40498 <col:33> 'vector<half, 4>' lvalue ParmVar 0x1c455f46338 'Src0' 'vector<half, 4>'
|   | |       |   `-IntegerLiteral 0x1c455f2b6c0 <col:38> 'int' 2
|   | |       `-ImplicitCastExpr 0x1c455f405c0 <col:42, col:48> 'half' <LValueToRValue>
|   | |         `-ArraySubscriptExpr 0x1c455f404f8 <col:42, col:48> 'half' lvalue vectorcomponent
|   | |           |-DeclRefExpr 0x1c455f404d8 <col:42> 'vector<half, 4>' lvalue ParmVar 0x1c455f46528 'Src1' 'vector<half, 4>'
|   | |           `-IntegerLiteral 0x1c455f2b728 <col:47> 'int' 3
|   | |-FunctionDecl 0x1c455f411e8 <line:39:1, line:41:1> line:39:24 used constexpr dst_impl 'vector<float, 4> (vector<float, 4>, vector<float, 4>)' implicit_instantiation implicit-inline
|   | | |-TemplateArgument type 'float'
|   | | | `-BuiltinType 0x1c4559cca80 'float'
|   | | |-ParmVarDecl 0x1c455f40ef8 <col:33, col:46> col:46 used Src0 'vector<float, 4>'
|   | | |-ParmVarDecl 0x1c455f410e8 <col:52, col:65> col:65 used Src1 'vector<float, 4>'
|   | | `-CompoundStmt 0x1c455f41638 <col:71, line:41:1>
|   | |   `-ReturnStmt 0x1c455f41628 <line:40:3, col:49>
|   | |     `-InitListExpr 0x1c455f415c8 <col:10, col:49> 'vector<float, 4>'
|   | |       |-ImplicitCastExpr 0x1c455f41520 <col:11> 'float' <IntegralToFloating>
|   | |       | `-IntegerLiteral 0x1c455f2b588 <col:11> 'int' 1
|   | |       |-BinaryOperator 0x1c455f41420 <col:14, col:30> 'float' '*'
|   | |       | |-ImplicitCastExpr 0x1c455f413f0 <col:14, col:20> 'float' <LValueToRValue>
|   | |       | | `-ArraySubscriptExpr 0x1c455f41378 <col:14, col:20> 'float' lvalue vectorcomponent
|   | |       | |   |-DeclRefExpr 0x1c455f41340 <col:14> 'vector<float, 4>' lvalue ParmVar 0x1c455f40ef8 'Src0' 'vector<float, 4>'
|   | |       | |   `-IntegerLiteral 0x1c455f2b5d0 <col:19> 'int' 1
|   | |       | `-ImplicitCastExpr 0x1c455f41408 <col:24, col:30> 'float' <LValueToRValue>
|   | |       |   `-ArraySubscriptExpr 0x1c455f413d0 <col:24, col:30> 'float' lvalue vectorcomponent
|   | |       |     |-DeclRefExpr 0x1c455f41398 <col:24> 'vector<float, 4>' lvalue ParmVar 0x1c455f410e8 'Src1' 'vector<float, 4>'
|   | |       |     `-IntegerLiteral 0x1c455f2b638 <col:29> 'int' 1
|   | |       |-ImplicitCastExpr 0x1c455f41538 <col:33, col:39> 'float' <LValueToRValue>
|   | |       | `-ArraySubscriptExpr 0x1c455f41460 <col:33, col:39> 'float' lvalue vectorcomponent
|   | |       |   |-DeclRefExpr 0x1c455f41440 <col:33> 'vector<float, 4>' lvalue ParmVar 0x1c455f40ef8 'Src0' 'vector<float, 4>'
|   | |       |   `-IntegerLiteral 0x1c455f2b6c0 <col:38> 'int' 2
|   | |       `-ImplicitCastExpr 0x1c455f41550 <col:42, col:48> 'float' <LValueToRValue>
|   | |         `-ArraySubscriptExpr 0x1c455f414a0 <col:42, col:48> 'float' lvalue vectorcomponent
|   | |           |-DeclRefExpr 0x1c455f41480 <col:42> 'vector<float, 4>' lvalue ParmVar 0x1c455f410e8 'Src1' 'vector<float, 4>'
|   | |           `-IntegerLiteral 0x1c455f2b728 <col:47> 'int' 3
|   | `-FunctionDecl 0x1c455f42148 <line:39:1, line:41:1> line:39:24 used constexpr dst_impl 'vector<double, 4> (vector<double, 4>, vector<double, 4>)' implicit_instantiation implicit-inline
|   |   |-TemplateArgument type 'double'
|   |   | `-BuiltinType 0x1c4559ccaa0 'double'
|   |   |-ParmVarDecl 0x1c455f41e58 <col:33, col:46> col:46 used Src0 'vector<double, 4>'
|   |   |-ParmVarDecl 0x1c455f42048 <col:52, col:65> col:65 used Src1 'vector<double, 4>'
|   |   `-CompoundStmt 0x1c455f427b8 <col:71, line:41:1>
|   |     `-ReturnStmt 0x1c455f427a8 <line:40:3, col:49>
|   |       `-InitListExpr 0x1c455f42748 <col:10, col:49> 'vector<double, 4>'
|   |         |-ImplicitCastExpr 0x1c455f426a0 <col:11> 'double' <IntegralToFloating>
|   |         | `-IntegerLiteral 0x1c455f2b588 <col:11> 'int' 1
|   |         |-BinaryOperator 0x1c455f425a0 <col:14, col:30> 'double' '*'
|   |         | |-ImplicitCastExpr 0x1c455f42570 <col:14, col:20> 'double' <LValueToRValue>
|   |         | | `-ArraySubscriptExpr 0x1c455f424f8 <col:14, col:20> 'double' lvalue vectorcomponent
|   |         | |   |-DeclRefExpr 0x1c455f424c0 <col:14> 'vector<double, 4>' lvalue ParmVar 0x1c455f41e58 'Src0' 'vector<double, 4>'
|   |         | |   `-IntegerLiteral 0x1c455f2b5d0 <col:19> 'int' 1
|   |         | `-ImplicitCastExpr 0x1c455f42588 <col:24, col:30> 'double' <LValueToRValue>
|   |         |   `-ArraySubscriptExpr 0x1c455f42550 <col:24, col:30> 'double' lvalue vectorcomponent
|   |         |     |-DeclRefExpr 0x1c455f42518 <col:24> 'vector<double, 4>' lvalue ParmVar 0x1c455f42048 'Src1' 'vector<double, 4>'
|   |         |     `-IntegerLiteral 0x1c455f2b638 <col:29> 'int' 1
|   |         |-ImplicitCastExpr 0x1c455f426b8 <col:33, col:39> 'double' <LValueToRValue>
|   |         | `-ArraySubscriptExpr 0x1c455f425e0 <col:33, col:39> 'double' lvalue vectorcomponent
|   |         |   |-DeclRefExpr 0x1c455f425c0 <col:33> 'vector<double, 4>' lvalue ParmVar 0x1c455f41e58 'Src0' 'vector<double, 4>'
|   |         |   `-IntegerLiteral 0x1c455f2b6c0 <col:38> 'int' 2
|   |         `-ImplicitCastExpr 0x1c455f426d0 <col:42, col:48> 'double' <LValueToRValue>
|   |           `-ArraySubscriptExpr 0x1c455f42620 <col:42, col:48> 'double' lvalue vectorcomponent
|   |             |-DeclRefExpr 0x1c455f42600 <col:42> 'vector<double, 4>' lvalue ParmVar 0x1c455f42048 'Src1' 'vector<double, 4>'
|   |             `-IntegerLiteral 0x1c455f2b728 <col:47> 'int' 3
|   |-FunctionTemplateDecl 0x1c455f2bb28 <line:43:1, line:45:1> line:43:35 distance_impl
|   | |-TemplateTypeParmDecl 0x1c455f2b7f8 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | `-FunctionDecl 0x1c455f2ba80 <col:23, line:45:1> line:43:35 constexpr distance_impl 'T (T, T)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f2b8b0 <col:49, col:51> col:51 referenced X 'T'
|   |   |-ParmVarDecl 0x1c455f2b930 <col:54, col:56> col:56 referenced Y 'T'
|   |   `-CompoundStmt 0x1c455f2bcf8 <col:59, line:45:1>
|   |     `-ReturnStmt 0x1c455f2bce8 <line:44:3, col:27>
|   |       `-CallExpr 0x1c455f2bcb8 <col:10, col:27> '<dependent type>'
|   |         |-UnresolvedLookupExpr 0x1c455f2bc10 <col:10> '<overloaded function type>' lvalue (ADL) = 'length_impl' 0x1c455f2fd08
|   |         `-BinaryOperator 0x1c455f2bc98 <col:22, col:26> '<dependent type>' '-'
|   |           |-DeclRefExpr 0x1c455f2bc58 <col:22> 'T' lvalue ParmVar 0x1c455f2b8b0 'X' 'T'
|   |           `-DeclRefExpr 0x1c455f2bc78 <col:26> 'T' lvalue ParmVar 0x1c455f2b930 'Y' 'T'
|   |-FunctionTemplateDecl 0x1c455f2c9f0 <line:47:1, line:51:1> line:49:1 distance_vec_impl
|   | |-TemplateTypeParmDecl 0x1c455f2bd10 <line:47:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | |-NonTypeTemplateParmDecl 0x1c455f2bda8 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 N
|   | `-FunctionDecl 0x1c455f2c948 <line:48:1, line:51:1> line:49:1 constexpr distance_vec_impl 'enable_if_t<is_same<float, T>::value || is_same<half, T>::value, T> (vector<T, N>, vector<T, N>)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f2c5b0 <col:19, col:32> col:32 referenced X 'vector<T, N>'
|   |   |-ParmVarDecl 0x1c455f2c7e0 <col:35, col:48> col:48 referenced Y 'vector<T, N>'
|   |   `-CompoundStmt 0x1c455f2cbc0 <col:51, line:51:1>
|   |     `-ReturnStmt 0x1c455f2cbb0 <line:50:3, col:31>
|   |       `-CallExpr 0x1c455f2cb80 <col:10, col:31> '<dependent type>'
|   |         |-UnresolvedLookupExpr 0x1c455f2cad8 <col:10> '<overloaded function type>' lvalue (ADL) = 'length_vec_impl' 0x1c455f30bc0
|   |         `-BinaryOperator 0x1c455f2cb60 <col:26, col:30> '<dependent type>' '-'
|   |           |-DeclRefExpr 0x1c455f2cb20 <col:26> 'vector<T, N>' lvalue ParmVar 0x1c455f2c5b0 'X' 'vector<T, N>'
|   |           `-DeclRefExpr 0x1c455f2cb40 <col:30> 'vector<T, N>' lvalue ParmVar 0x1c455f2c7e0 'Y' 'vector<T, N>'
|   |-FunctionDecl 0x1c455f336d8 <line:53:1, line:59:1> line:53:17 used constexpr dot2add_impl 'float (half2, half2, float)' implicit-inline
|   | |-ParmVarDecl 0x1c455f2cbe8 <col:30, col:36> col:36 used a 'half2':'vector<half, 2>'
|   | |-ParmVarDecl 0x1c455f2cc68 <col:39, col:45> col:45 used b 'half2':'vector<half, 2>'
|   | |-ParmVarDecl 0x1c455f2ccf0 <col:48, col:54> col:54 used c 'float'
|   | `-CompoundStmt 0x1c455f33d80 <col:57, line:59:1>
|   |   `-ReturnStmt 0x1c455f33d70 <line:55:3, col:38>
|   |     `-CallExpr 0x1c455f33cb8 <col:10, col:38> 'float'
|   |       |-ImplicitCastExpr 0x1c455f33ca0 <col:10> 'float (*)(vector<_Float16, 2>, vector<_Float16, 2>, float) noexcept' <BuiltinFnToFnPtr>
|   |       | `-DeclRefExpr 0x1c455f33ba0 <col:10> '<builtin fn type>' Function 0x1c455f338c8 '__builtin_dx_dot2add' 'float (vector<_Float16, 2>, vector<_Float16, 2>, float) noexcept'
|   |       |-ImplicitCastExpr 0x1c455f33d10 <col:31> 'vector<_Float16, 2>' <FloatingCast>
|   |       | `-ImplicitCastExpr 0x1c455f33cf8 <col:31> 'half2':'vector<half, 2>' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x1c455f33bd8 <col:31> 'half2':'vector<half, 2>' lvalue ParmVar 0x1c455f2cbe8 'a' 'half2':'vector<half, 2>'
|   |       |-ImplicitCastExpr 0x1c455f33d40 <col:34> 'vector<_Float16, 2>' <FloatingCast>
|   |       | `-ImplicitCastExpr 0x1c455f33d28 <col:34> 'half2':'vector<half, 2>' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x1c455f33bf8 <col:34> 'half2':'vector<half, 2>' lvalue ParmVar 0x1c455f2cc68 'b' 'half2':'vector<half, 2>'
|   |       `-ImplicitCastExpr 0x1c455f33d58 <col:37> 'float' <LValueToRValue>
|   |         `-DeclRefExpr 0x1c455f33c18 <col:37> 'float' lvalue ParmVar 0x1c455f2ccf0 'c' 'float'
|   |-FunctionTemplateDecl 0x1c455f34088 <line:61:1, line:63:1> line:61:35 reflect_impl
|   | |-TemplateTypeParmDecl 0x1c455f33d98 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | `-FunctionDecl 0x1c455f33fe0 <col:23, line:63:1> line:61:35 constexpr reflect_impl 'T (T, T)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f33e50 <col:48, col:50> col:50 referenced I 'T'
|   |   |-ParmVarDecl 0x1c455f33ed0 <col:53, col:55> col:55 referenced N 'T'
|   |   `-CompoundStmt 0x1c455f342a8 <col:58, line:63:1>
|   |     `-ReturnStmt 0x1c455f34298 <line:62:3, col:26>
|   |       `-BinaryOperator 0x1c455f34278 <col:10, col:26> '<dependent type>' '-'
|   |         |-DeclRefExpr 0x1c455f34170 <col:10> 'T' lvalue ParmVar 0x1c455f33e50 'I' 'T'
|   |         `-BinaryOperator 0x1c455f34258 <col:14, col:26> '<dependent type>' '*'
|   |           |-BinaryOperator 0x1c455f34218 <col:14, col:22> '<dependent type>' '*'
|   |           | |-BinaryOperator 0x1c455f341d8 <col:14, col:18> '<dependent type>' '*'
|   |           | | |-IntegerLiteral 0x1c455f34190 <col:14> 'int' 2
|   |           | | `-DeclRefExpr 0x1c455f341b8 <col:18> 'T' lvalue ParmVar 0x1c455f33ed0 'N' 'T'
|   |           | `-DeclRefExpr 0x1c455f341f8 <col:22> 'T' lvalue ParmVar 0x1c455f33e50 'I' 'T'
|   |           `-DeclRefExpr 0x1c455f34238 <col:26> 'T' lvalue ParmVar 0x1c455f33ed0 'N' 'T'
|   |-FunctionTemplateDecl 0x1c455f34ba0 <line:65:1, line:72:1> line:66:24 reflect_vec_impl
|   | |-TemplateTypeParmDecl 0x1c455f342c0 <line:65:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | |-NonTypeTemplateParmDecl 0x1c455f34358 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 L
|   | `-FunctionDecl 0x1c455f34af8 <line:66:1, line:72:1> line:66:24 constexpr reflect_vec_impl 'vector<T, L> (vector<T, L>, vector<T, L>)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f34760 <col:41, col:54> col:54 referenced I 'vector<T, L>'
|   |   |-ParmVarDecl 0x1c455f34990 <col:57, col:70> col:70 referenced N 'vector<T, L>'
|   |   `-CompoundStmt 0x1c455f34ee0 <col:73, line:72:1>
|   |     `-ReturnStmt 0x1c455f34ed0 <line:70:3, col:30>
|   |       `-BinaryOperator 0x1c455f34eb0 <col:10, col:30> '<dependent type>' '-'
|   |         |-DeclRefExpr 0x1c455f34c88 <col:10> 'vector<T, L>' lvalue ParmVar 0x1c455f34760 'I' 'vector<T, L>'
|   |         `-BinaryOperator 0x1c455f34e90 <col:14, col:30> '<dependent type>' '*'
|   |           |-BinaryOperator 0x1c455f34cf0 <col:14, col:18> '<dependent type>' '*'
|   |           | |-IntegerLiteral 0x1c455f34ca8 <col:14> 'int' 2
|   |           | `-DeclRefExpr 0x1c455f34cd0 <col:18> 'vector<T, L>' lvalue ParmVar 0x1c455f34990 'N' 'vector<T, L>'
|   |           `-CallExpr 0x1c455f34e58 <col:22, col:30> '<dependent type>'
|   |             |-UnresolvedLookupExpr 0x1c455f34d10 <col:22> '<overloaded function type>' lvalue (ADL) = 'dot' 0x1c455d80768 0x1c455d7c7e8 0x1c455d7cb88 0x1c455d7cf28 0x1c455d7d258 0x1c455d80ad0 0x1c455d80e78 0x1c455d81218 0x1c455d81588 0x1c455d818f8 0x1c455d83fd8 0x1c455d84378 0x1c455d84718 0x1c455d84ab0 0x1c455d81c50 0x1c455d81ff0 0x1c455d82390 0x1c455d82730 0x1c455d82ad0 0x1c455d82fa0 0x1c455d83340 0x1c455d836e0 0x1c455d83a80 0x1c455dc0260 0x1c455dc0600
|   |             |-DeclRefExpr 0x1c455f34e18 <col:26> 'vector<T, L>' lvalue ParmVar 0x1c455f34760 'I' 'vector<T, L>'
|   |             `-DeclRefExpr 0x1c455f34e38 <col:29> 'vector<T, L>' lvalue ParmVar 0x1c455f34990 'N' 'vector<T, L>'
|   |-FunctionTemplateDecl 0x1c455f35368 <line:74:1, line:82:1> line:74:47 refract_impl
|   | |-TemplateTypeParmDecl 0x1c455f34ef8 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | |-TemplateTypeParmDecl 0x1c455f34f80 <col:23, col:32> col:32 referenced typename depth 0 index 1 U
|   | `-FunctionDecl 0x1c455f352c0 <col:35, line:82:1> line:74:47 constexpr refract_impl 'T (T, T, U)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f35038 <col:60, col:62> col:62 referenced I 'T'
|   |   |-ParmVarDecl 0x1c455f350b8 <col:65, col:67> col:67 referenced N 'T'
|   |   |-ParmVarDecl 0x1c455f35138 <col:70, col:72> col:72 referenced Eta 'U'
|   |   `-CompoundStmt 0x1c455f2d918 <col:77, line:82:1>
|   |     |-DeclStmt 0x1c455f2d100 <line:78:3, col:20>
|   |     | `-VarDecl 0x1c455f35468 <col:3, col:19> col:5 referenced Mul 'T' cinit
|   |     |   `-CallExpr 0x1c455f2d0c8 <col:11, col:19> '<dependent type>'
|   |     |     |-UnresolvedLookupExpr 0x1c455f2cf80 <col:11> '<overloaded function type>' lvalue (ADL) = 'dot' 0x1c455d80768 0x1c455d7c7e8 0x1c455d7cb88 0x1c455d7cf28 0x1c455d7d258 0x1c455d80ad0 0x1c455d80e78 0x1c455d81218 0x1c455d81588 0x1c455d818f8 0x1c455d83fd8 0x1c455d84378 0x1c455d84718 0x1c455d84ab0 0x1c455d81c50 0x1c455d81ff0 0x1c455d82390 0x1c455d82730 0x1c455d82ad0 0x1c455d82fa0 0x1c455d83340 0x1c455d836e0 0x1c455d83a80 0x1c455dc0260 0x1c455dc0600
|   |     |     |-DeclRefExpr 0x1c455f2d088 <col:15> 'T' lvalue ParmVar 0x1c455f350b8 'N' 'T'
|   |     |     `-DeclRefExpr 0x1c455f2d0a8 <col:18> 'T' lvalue ParmVar 0x1c455f35038 'I' 'T'
|   |     |-DeclStmt 0x1c455f2d338 <line:79:3, col:40>
|   |     | `-VarDecl 0x1c455f2d128 <col:3, col:39> col:5 referenced K 'T' cinit
|   |     |   `-BinaryOperator 0x1c455f2d318 <col:9, col:39> '<dependent type>' '-'
|   |     |     |-IntegerLiteral 0x1c455f2d190 <col:9> 'int' 1
|   |     |     `-BinaryOperator 0x1c455f2d2f8 <col:13, col:39> '<dependent type>' '*'
|   |     |       |-BinaryOperator 0x1c455f2d1f8 <col:13, col:19> '<dependent type>' '*'
|   |     |       | |-DeclRefExpr 0x1c455f2d1b8 <col:13> 'U' lvalue ParmVar 0x1c455f35138 'Eta' 'U'
|   |     |       | `-DeclRefExpr 0x1c455f2d1d8 <col:19> 'U' lvalue ParmVar 0x1c455f35138 'Eta' 'U'
|   |     |       `-ParenExpr 0x1c455f2d2d8 <col:25, col:39> '<dependent type>'
|   |     |         `-BinaryOperator 0x1c455f2d2b8 <col:26, col:36> '<dependent type>' '-'
|   |     |           |-IntegerLiteral 0x1c455f2d218 <col:26> 'int' 1
|   |     |           `-BinaryOperator 0x1c455f2d298 <col:30, col:36> '<dependent type>' '*'
|   |     |             |-DeclRefExpr 0x1c455f2d240 <col:30> 'T' lvalue Var 0x1c455f35468 'Mul' 'T'
|   |     |             `-DeclRefExpr 0x1c455f2d278 <col:36> 'T' lvalue Var 0x1c455f35468 'Mul' 'T'
|   |     |-DeclStmt 0x1c455f2d6d0 <line:80:3, col:51>
|   |     | `-VarDecl 0x1c455f2d360 <col:3, col:50> col:5 referenced Result 'T' cinit
|   |     |   `-ParenExpr 0x1c455f2d6b0 <col:14, col:50> '<dependent type>'
|   |     |     `-BinaryOperator 0x1c455f2d690 <col:15, col:49> '<dependent type>' '-'
|   |     |       |-BinaryOperator 0x1c455f2d408 <col:15, col:21> '<dependent type>' '*'
|   |     |       | |-DeclRefExpr 0x1c455f2d3c8 <col:15> 'U' lvalue ParmVar 0x1c455f35138 'Eta' 'U'
|   |     |       | `-DeclRefExpr 0x1c455f2d3e8 <col:21> 'T' lvalue ParmVar 0x1c455f35038 'I' 'T'
|   |     |       `-BinaryOperator 0x1c455f2d670 <col:25, col:49> '<dependent type>' '*'
|   |     |         |-ParenExpr 0x1c455f2d630 <col:25, col:45> '<dependent type>'
|   |     |         | `-BinaryOperator 0x1c455f2d610 <col:26, col:44> '<dependent type>' '+'
|   |     |         |   |-BinaryOperator 0x1c455f2d468 <col:26, col:32> '<dependent type>' '*'
|   |     |         |   | |-DeclRefExpr 0x1c455f2d428 <col:26> 'U' lvalue ParmVar 0x1c455f35138 'Eta' 'U'
|   |     |         |   | `-DeclRefExpr 0x1c455f2d448 <col:32> 'T' lvalue Var 0x1c455f35468 'Mul' 'T'
|   |     |         |   `-CallExpr 0x1c455f2d5e0 <col:38, col:44> '<dependent type>'
|   |     |         |     |-UnresolvedLookupExpr 0x1c455f2d488 <col:38> '<overloaded function type>' lvalue (ADL) = 'sqrt' 0x1c455dfdee0 0x1c455dfe140 0x1c455dfe3b0 0x1c455dfe620 0x1c455dfe8a0 0x1c455dfeb10 0x1c455dfed80 0x1c455e115e0 0x1c455eebaa8 0x1c455eebde8 0x1c455eec128 0x1c455eec470 0x1c455eec7d0 0x1c455eecb30 0x1c455eece90 0x1c455eed1f8 0x1c455eed570 0x1c455eefd10 0x1c455ef0090 0x1c455ef0418 0x1c455ef07b0 0x1c455ef0b50 0x1c455ef0ef0 0x1c455ef1298 0x1c455ef1650 0x1c455ef1a10 0x1c455eedc98 0x1c455eee060
|   |     |         |     `-DeclRefExpr 0x1c455f2d5a8 <col:43> 'T' lvalue Var 0x1c455f2d128 'K' 'T'
|   |     |         `-DeclRefExpr 0x1c455f2d650 <col:49> 'T' lvalue ParmVar 0x1c455f350b8 'N' 'T'
|   |     `-ReturnStmt 0x1c455f2d908 <line:81:3, col:52>
|   |       `-CallExpr 0x1c455f2d8c8 <col:10, col:52> '<dependent type>'
|   |         |-UnresolvedLookupExpr 0x1c455f2d728 <col:10, col:18> '<dependent type>' lvalue (ADL) = 'select' 0x1c455df7ab8 0x1c455df8810 0x1c455dfa5b0 0x1c455dfb260 0x1c455dfc2c0
|   |         | `-TemplateArgument type 'T':'type-parameter-0-0'
|   |         |   `-TemplateTypeParmType 0x1c455f34f50 'T' dependent depth 0 index 0
|   |         |     `-TemplateTypeParm 0x1c455f34ef8 'T'
|   |         |-BinaryOperator 0x1c455f2d808 <col:20, col:24> '<dependent type>' '<'
|   |         | |-DeclRefExpr 0x1c455f2d7c0 <col:20> 'T' lvalue Var 0x1c455f2d128 'K' 'T'
|   |         | `-IntegerLiteral 0x1c455f2d7e0 <col:24> 'int' 0
|   |         |-CXXStaticCastExpr 0x1c455f2d860 <col:27, col:43> 'T' static_cast<T> <Dependent>
|   |         | `-IntegerLiteral 0x1c455f2d828 <col:42> 'int' 0
|   |         `-DeclRefExpr 0x1c455f2d890 <col:46> 'T' lvalue Var 0x1c455f2d360 'Result' 'T'
|   |-FunctionTemplateDecl 0x1c455f2dc38 <line:84:1, line:93:1> line:84:35 fmod_impl
|   | |-TemplateTypeParmDecl 0x1c455f2d948 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | `-FunctionDecl 0x1c455f2db90 <col:23, line:93:1> line:84:35 constexpr fmod_impl 'T (T, T)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f2da00 <col:45, col:47> col:47 referenced X 'T'
|   |   |-ParmVarDecl 0x1c455f2da80 <col:50, col:52> col:52 referenced Y 'T'
|   |   `-CompoundStmt 0x1c455f2e480 <col:55, line:93:1>
|   |     |-DeclStmt 0x1c455f2ddf8 <line:88:3, col:16>
|   |     | `-VarDecl 0x1c455f2dd30 <col:3, col:15> col:5 referenced div 'T' cinit
|   |     |   `-BinaryOperator 0x1c455f2ddd8 <col:11, col:15> '<dependent type>' '/'
|   |     |     |-DeclRefExpr 0x1c455f2dd98 <col:11> 'T' lvalue ParmVar 0x1c455f2da00 'X' 'T'
|   |     |     `-DeclRefExpr 0x1c455f2ddb8 <col:15> 'T' lvalue ParmVar 0x1c455f2da80 'Y' 'T'
|   |     |-DeclStmt 0x1c455f2df08 <line:89:3, col:21>
|   |     | `-VarDecl 0x1c455f2de20 <col:3, col:20> col:8 referenced ge 'bool' cinit
|   |     |   `-BinaryOperator 0x1c455f2dee8 <col:13, col:20> '<dependent type>' '>='
|   |     |     |-DeclRefExpr 0x1c455f2de88 <col:13> 'T' lvalue Var 0x1c455f2dd30 'div' 'T'
|   |     |     `-IntegerLiteral 0x1c455f2dec0 <col:20> 'int' 0
|   |     |-DeclStmt 0x1c455f2e258 <line:90:3, col:25>
|   |     | `-VarDecl 0x1c455f2df30 <col:3, col:24> col:5 referenced frc 'T' cinit
|   |     |   `-CallExpr 0x1c455f2e228 <col:11, col:24> '<dependent type>'
|   |     |     |-UnresolvedLookupExpr 0x1c455f2df98 <col:11> '<overloaded function type>' lvalue (ADL) = 'frac' 0x1c455dccf20 0x1c455dcd180 0x1c455dcd3f0 0x1c455dcd660 0x1c455dcd8e0 0x1c455dcdb50 0x1c455dcabb0 0x1c455dcae20 0x1c455e7b8e0 0x1c455e7bc20 0x1c455e827d0 0x1c455e82b18 0x1c455e82e78 0x1c455e831d8 0x1c455e83538 0x1c455e838a0 0x1c455e83c18 0x1c455e83f98 0x1c455e84318 0x1c455e846a0 0x1c455e890c0 0x1c455e89460 0x1c455e89800 0x1c455e89ba8 0x1c455e89f60 0x1c455e8a320 0x1c455e8a6e0 0x1c455e8aaa8
|   |     |     `-CallExpr 0x1c455f2e1f8 <col:16, col:23> '<dependent type>'
|   |     |       |-UnresolvedLookupExpr 0x1c455f2e0b8 <col:16> '<overloaded function type>' lvalue (ADL) = 'abs' 0x1c455d35238 0x1c455d35590 0x1c455d358f0 0x1c455d35c50 0x1c455d35f08 0x1c455d385c0 0x1c455d38920 0x1c455d38c80 0x1c455d38f60 0x1c455d39250 0x1c455d37440 0x1c455d37730 0x1c455d37988 0x1c455d37cf0 0x1c455d38050 0x1c455d395d0 0x1c455d398c0 0x1c455d39c20 0x1c455d39f80 0x1c455d3a2e0 0x1c455d3da10 0x1c455d3dd00 0x1c455d3dff0 0x1c455d3e2e0 0x1c455d3e538 0x1c455d3a588 0x1c455d3a8f0 0x1c455d3ac50
|   |     |       `-DeclRefExpr 0x1c455f2e1d8 <col:20> 'T' lvalue Var 0x1c455f2dd30 'div' 'T'
|   |     `-ReturnStmt 0x1c455f2e470 <line:91:3, col:37>
|   |       `-BinaryOperator 0x1c455f2e450 <col:10, col:37> '<dependent type>' '*'
|   |         |-CallExpr 0x1c455f2e3f0 <col:10, col:33> '<dependent type>'
|   |         | |-UnresolvedLookupExpr 0x1c455f2e2b0 <col:10, col:18> '<dependent type>' lvalue (ADL) = 'select' 0x1c455df7ab8 0x1c455df8810 0x1c455dfa5b0 0x1c455dfb260 0x1c455dfc2c0
|   |         | | `-TemplateArgument type 'T':'type-parameter-0-0'
|   |         | |   `-TemplateTypeParmType 0x1c455f2d9a0 'T' dependent depth 0 index 0
|   |         | |     `-TemplateTypeParm 0x1c455f2d948 'T'
|   |         | |-DeclRefExpr 0x1c455f2e348 <col:20> 'bool' lvalue Var 0x1c455f2de20 'ge' 'bool'
|   |         | |-DeclRefExpr 0x1c455f2e380 <col:24> 'T' lvalue Var 0x1c455f2df30 'frc' 'T'
|   |         | `-UnaryOperator 0x1c455f2e3d8 <col:29, col:30> '<dependent type>' prefix '-' cannot overflow
|   |         |   `-DeclRefExpr 0x1c455f2e3b8 <col:30> 'T' lvalue Var 0x1c455f2df30 'frc' 'T'
|   |         `-DeclRefExpr 0x1c455f2e430 <col:37> 'T' lvalue ParmVar 0x1c455f2da80 'Y' 'T'
|   |-FunctionTemplateDecl 0x1c455f2ed50 <line:95:1, line:105:1> line:96:24 fmod_vec_impl
|   | |-TemplateTypeParmDecl 0x1c455f2e4b0 <line:95:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | |-NonTypeTemplateParmDecl 0x1c455f2e548 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 N
|   | `-FunctionDecl 0x1c455f2eca8 <line:96:1, line:105:1> line:96:24 constexpr fmod_vec_impl 'vector<T, N> (vector<T, N>, vector<T, N>)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f2e950 <col:38, col:51> col:51 referenced X 'vector<T, N>'
|   |   |-ParmVarDecl 0x1c455f2eb80 <col:54, col:67> col:67 referenced Y 'vector<T, N>'
|   |   `-CompoundStmt 0x1c455f36300 <col:70, line:105:1>
|   |     |-DeclStmt 0x1c455f35918 <line:100:3, col:27>
|   |     | `-VarDecl 0x1c455f35850 <col:3, col:26> col:16 referenced div 'vector<T, N>' cinit
|   |     |   `-BinaryOperator 0x1c455f358f8 <col:22, col:26> '<dependent type>' '/'
|   |     |     |-DeclRefExpr 0x1c455f358b8 <col:22> 'vector<T, N>' lvalue ParmVar 0x1c455f2e950 'X' 'vector<T, N>'
|   |     |     `-DeclRefExpr 0x1c455f358d8 <col:26> 'vector<T, N>' lvalue ParmVar 0x1c455f2eb80 'Y' 'vector<T, N>'
|   |     |-DeclStmt 0x1c455f35bd8 <line:101:3, col:32>
|   |     | `-VarDecl 0x1c455f35af0 <col:3, col:31> col:19 referenced ge 'vector<bool, N>' cinit
|   |     |   `-BinaryOperator 0x1c455f35bb8 <col:24, col:31> '<dependent type>' '>='
|   |     |     |-DeclRefExpr 0x1c455f35b58 <col:24> 'vector<T, N>' lvalue Var 0x1c455f35850 'div' 'vector<T, N>'
|   |     |     `-IntegerLiteral 0x1c455f35b90 <col:31> 'int' 0
|   |     |-DeclStmt 0x1c455f360d8 <line:102:3, col:36>
|   |     | `-VarDecl 0x1c455f35db0 <col:3, col:35> col:16 referenced frc 'vector<T, N>' cinit
|   |     |   `-CallExpr 0x1c455f360a8 <col:22, col:35> '<dependent type>'
|   |     |     |-UnresolvedLookupExpr 0x1c455f35e18 <col:22> '<overloaded function type>' lvalue (ADL) = 'frac' 0x1c455dccf20 0x1c455dcd180 0x1c455dcd3f0 0x1c455dcd660 0x1c455dcd8e0 0x1c455dcdb50 0x1c455dcabb0 0x1c455dcae20 0x1c455e7b8e0 0x1c455e7bc20 0x1c455e827d0 0x1c455e82b18 0x1c455e82e78 0x1c455e831d8 0x1c455e83538 0x1c455e838a0 0x1c455e83c18 0x1c455e83f98 0x1c455e84318 0x1c455e846a0 0x1c455e890c0 0x1c455e89460 0x1c455e89800 0x1c455e89ba8 0x1c455e89f60 0x1c455e8a320 0x1c455e8a6e0 0x1c455e8aaa8
|   |     |     `-CallExpr 0x1c455f36078 <col:27, col:34> '<dependent type>'
|   |     |       |-UnresolvedLookupExpr 0x1c455f35f38 <col:27> '<overloaded function type>' lvalue (ADL) = 'abs' 0x1c455d35238 0x1c455d35590 0x1c455d358f0 0x1c455d35c50 0x1c455d35f08 0x1c455d385c0 0x1c455d38920 0x1c455d38c80 0x1c455d38f60 0x1c455d39250 0x1c455d37440 0x1c455d37730 0x1c455d37988 0x1c455d37cf0 0x1c455d38050 0x1c455d395d0 0x1c455d398c0 0x1c455d39c20 0x1c455d39f80 0x1c455d3a2e0 0x1c455d3da10 0x1c455d3dd00 0x1c455d3dff0 0x1c455d3e2e0 0x1c455d3e538 0x1c455d3a588 0x1c455d3a8f0 0x1c455d3ac50
|   |     |       `-DeclRefExpr 0x1c455f36058 <col:31> 'vector<T, N>' lvalue Var 0x1c455f35850 'div' 'vector<T, N>'
|   |     `-ReturnStmt 0x1c455f362f0 <line:103:3, col:37>
|   |       `-BinaryOperator 0x1c455f362d0 <col:10, col:37> '<dependent type>' '*'
|   |         |-CallExpr 0x1c455f36270 <col:10, col:33> '<dependent type>'
|   |         | |-UnresolvedLookupExpr 0x1c455f36130 <col:10, col:18> '<dependent type>' lvalue (ADL) = 'select' 0x1c455df7ab8 0x1c455df8810 0x1c455dfa5b0 0x1c455dfb260 0x1c455dfc2c0
|   |         | | `-TemplateArgument type 'T':'type-parameter-0-0'
|   |         | |   `-TemplateTypeParmType 0x1c455f2e500 'T' dependent depth 0 index 0
|   |         | |     `-TemplateTypeParm 0x1c455f2e4b0 'T'
|   |         | |-DeclRefExpr 0x1c455f361c8 <col:20> 'vector<bool, N>' lvalue Var 0x1c455f35af0 'ge' 'vector<bool, N>'
|   |         | |-DeclRefExpr 0x1c455f36200 <col:24> 'vector<T, N>' lvalue Var 0x1c455f35db0 'frc' 'vector<T, N>'
|   |         | `-UnaryOperator 0x1c455f36258 <col:29, col:30> '<dependent type>' prefix '-' cannot overflow
|   |         |   `-DeclRefExpr 0x1c455f36238 <col:30> 'vector<T, N>' lvalue Var 0x1c455f35db0 'frc' 'vector<T, N>'
|   |         `-DeclRefExpr 0x1c455f362b0 <col:37> 'vector<T, N>' lvalue ParmVar 0x1c455f2eb80 'Y' 'vector<T, N>'
|   |-FunctionTemplateDecl 0x1c455f36718 <line:107:1, line:114:1> line:107:35 smoothstep_impl
|   | |-TemplateTypeParmDecl 0x1c455f36330 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | `-FunctionDecl 0x1c455f36670 <col:23, line:114:1> line:107:35 constexpr smoothstep_impl 'T (T, T, T)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f363e0 <col:51, col:53> col:53 referenced Min 'T'
|   |   |-ParmVarDecl 0x1c455f36460 <col:58, col:60> col:60 referenced Max 'T'
|   |   |-ParmVarDecl 0x1c455f364e0 <col:65, col:67> col:67 referenced X 'T'
|   |   `-CompoundStmt 0x1c455f36c00 <col:70, line:114:1>
|   |     |-DeclStmt 0x1c455f36a70 <line:111:3, col:42>
|   |     | `-VarDecl 0x1c455f36818 <col:3, col:41> col:5 referenced S 'T' cinit
|   |     |   `-CallExpr 0x1c455f36a40 <col:9, col:41> '<dependent type>'
|   |     |     |-UnresolvedLookupExpr 0x1c455f36880 <col:9> '<overloaded function type>' lvalue (ADL) = 'saturate' 0x1c455df57b0 0x1c455df5a10 0x1c455df5c80 0x1c455df5ef0 0x1c455df6170 0x1c455df63e0 0x1c455df6770 0x1c455df69e0 0x1c455df6c60 0x1c455df6ed0 0x1c455df7140 0x1c455df73b0
|   |     |     `-BinaryOperator 0x1c455f36a20 <col:18, col:40> '<dependent type>' '/'
|   |     |       |-ParenExpr 0x1c455f36980 <col:18, col:26> '<dependent type>'
|   |     |       | `-BinaryOperator 0x1c455f36960 <col:19, col:23> '<dependent type>' '-'
|   |     |       |   |-DeclRefExpr 0x1c455f36920 <col:19> 'T' lvalue ParmVar 0x1c455f364e0 'X' 'T'
|   |     |       |   `-DeclRefExpr 0x1c455f36940 <col:23> 'T' lvalue ParmVar 0x1c455f363e0 'Min' 'T'
|   |     |       `-ParenExpr 0x1c455f36a00 <col:30, col:40> '<dependent type>'
|   |     |         `-BinaryOperator 0x1c455f369e0 <col:31, col:37> '<dependent type>' '-'
|   |     |           |-DeclRefExpr 0x1c455f369a0 <col:31> 'T' lvalue ParmVar 0x1c455f36460 'Max' 'T'
|   |     |           `-DeclRefExpr 0x1c455f369c0 <col:37> 'T' lvalue ParmVar 0x1c455f363e0 'Min' 'T'
|   |     `-ReturnStmt 0x1c455f36bf0 <line:112:3, col:28>
|   |       `-BinaryOperator 0x1c455f36bd0 <col:10, col:28> '<dependent type>' '*'
|   |         |-BinaryOperator 0x1c455f36b90 <col:10, col:24> '<dependent type>' '*'
|   |         | |-ParenExpr 0x1c455f36b50 <col:10, col:20> '<dependent type>'
|   |         | | `-BinaryOperator 0x1c455f36b30 <col:11, col:19> '<dependent type>' '-'
|   |         | |   |-IntegerLiteral 0x1c455f36a88 <col:11> 'int' 3
|   |         | |   `-BinaryOperator 0x1c455f36b10 <col:15, col:19> '<dependent type>' '*'
|   |         | |     |-IntegerLiteral 0x1c455f36ab0 <col:15> 'int' 2
|   |         | |     `-DeclRefExpr 0x1c455f36ad8 <col:19> 'T' lvalue Var 0x1c455f36818 'S' 'T'
|   |         | `-DeclRefExpr 0x1c455f36b70 <col:24> 'T' lvalue Var 0x1c455f36818 'S' 'T'
|   |         `-DeclRefExpr 0x1c455f36bb0 <col:28> 'T' lvalue Var 0x1c455f36818 'S' 'T'
|   |-FunctionTemplateDecl 0x1c455f39be0 <line:116:1, line:125:1> line:117:24 smoothstep_vec_impl
|   | |-TemplateTypeParmDecl 0x1c455f36c20 <line:116:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | |-NonTypeTemplateParmDecl 0x1c455f36cb8 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 N
|   | `-FunctionDecl 0x1c455f376c8 <line:117:1, line:125:1> line:117:24 constexpr smoothstep_vec_impl 'vector<T, N> (vector<T, N>, vector<T, N>, vector<T, N>)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f370c0 <col:44, col:57> col:57 referenced Min 'vector<T, N>'
|   |   |-ParmVarDecl 0x1c455f372f0 <col:62, col:75> col:75 referenced Max 'vector<T, N>'
|   |   |-ParmVarDecl 0x1c455f37520 <line:118:44, col:57> col:57 referenced X 'vector<T, N>'
|   |   `-CompoundStmt 0x1c455f3a278 <col:60, line:125:1>
|   |     |-DeclStmt 0x1c455f3a0e8 <line:122:3, col:53>
|   |     | `-VarDecl 0x1c455f39e90 <col:3, col:52> col:16 referenced S 'vector<T, N>' cinit
|   |     |   `-CallExpr 0x1c455f3a0b8 <col:20, col:52> '<dependent type>'
|   |     |     |-UnresolvedLookupExpr 0x1c455f39ef8 <col:20> '<overloaded function type>' lvalue (ADL) = 'saturate' 0x1c455df57b0 0x1c455df5a10 0x1c455df5c80 0x1c455df5ef0 0x1c455df6170 0x1c455df63e0 0x1c455df6770 0x1c455df69e0 0x1c455df6c60 0x1c455df6ed0 0x1c455df7140 0x1c455df73b0
|   |     |     `-BinaryOperator 0x1c455f3a098 <col:29, col:51> '<dependent type>' '/'
|   |     |       |-ParenExpr 0x1c455f39ff8 <col:29, col:37> '<dependent type>'
|   |     |       | `-BinaryOperator 0x1c455f39fd8 <col:30, col:34> '<dependent type>' '-'
|   |     |       |   |-DeclRefExpr 0x1c455f39f98 <col:30> 'vector<T, N>' lvalue ParmVar 0x1c455f37520 'X' 'vector<T, N>'
|   |     |       |   `-DeclRefExpr 0x1c455f39fb8 <col:34> 'vector<T, N>' lvalue ParmVar 0x1c455f370c0 'Min' 'vector<T, N>'
|   |     |       `-ParenExpr 0x1c455f3a078 <col:41, col:51> '<dependent type>'
|   |     |         `-BinaryOperator 0x1c455f3a058 <col:42, col:48> '<dependent type>' '-'
|   |     |           |-DeclRefExpr 0x1c455f3a018 <col:42> 'vector<T, N>' lvalue ParmVar 0x1c455f372f0 'Max' 'vector<T, N>'
|   |     |           `-DeclRefExpr 0x1c455f3a038 <col:48> 'vector<T, N>' lvalue ParmVar 0x1c455f370c0 'Min' 'vector<T, N>'
|   |     `-ReturnStmt 0x1c455f3a268 <line:123:3, col:28>
|   |       `-BinaryOperator 0x1c455f3a248 <col:10, col:28> '<dependent type>' '*'
|   |         |-BinaryOperator 0x1c455f3a208 <col:10, col:24> '<dependent type>' '*'
|   |         | |-ParenExpr 0x1c455f3a1c8 <col:10, col:20> '<dependent type>'
|   |         | | `-BinaryOperator 0x1c455f3a1a8 <col:11, col:19> '<dependent type>' '-'
|   |         | |   |-IntegerLiteral 0x1c455f3a100 <col:11> 'int' 3
|   |         | |   `-BinaryOperator 0x1c455f3a188 <col:15, col:19> '<dependent type>' '*'
|   |         | |     |-IntegerLiteral 0x1c455f3a128 <col:15> 'int' 2
|   |         | |     `-DeclRefExpr 0x1c455f3a150 <col:19> 'vector<T, N>' lvalue Var 0x1c455f39e90 'S' 'vector<T, N>'
|   |         | `-DeclRefExpr 0x1c455f3a1e8 <col:24> 'vector<T, N>' lvalue Var 0x1c455f39e90 'S' 'vector<T, N>'
|   |         `-DeclRefExpr 0x1c455f3a228 <col:28> 'vector<T, N>' lvalue Var 0x1c455f39e90 'S' 'vector<T, N>'
|   |-FunctionTemplateDecl 0x1c455f3a8b0 <line:127:1, line:137:1> line:127:46 lit_impl
|   | |-TemplateTypeParmDecl 0x1c455f3a298 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | |-FunctionDecl 0x1c455f3a808 <col:23, line:137:1> line:127:46 constexpr lit_impl 'vector<T, 4> (T, T, T)' implicit-inline
|   | | |-ParmVarDecl 0x1c455f3a568 <col:55, col:57> col:57 referenced NDotL 'T'
|   | | |-ParmVarDecl 0x1c455f3a5e8 <col:64, col:66> col:66 referenced NDotH 'T'
|   | | |-ParmVarDecl 0x1c455f3a668 <col:73, col:75> col:75 referenced M 'T'
|   | | `-CompoundStmt 0x1c455f3b808 <col:78, line:137:1>
|   | |   |-DeclStmt 0x1c455f3aa80 <line:128:3, col:31>
|   | |   | `-VarDecl 0x1c455f3a9b0 <col:3, col:30> col:8 referenced DiffuseCond 'bool' cinit
|   | |   |   `-BinaryOperator 0x1c455f3aa60 <col:22, col:30> '<dependent type>' '<'
|   | |   |     |-DeclRefExpr 0x1c455f3aa18 <col:22> 'T' lvalue ParmVar 0x1c455f3a568 'NDotL' 'T'
|   | |   |     `-IntegerLiteral 0x1c455f3aa38 <col:30> 'int' 0
|   | |   |-DeclStmt 0x1c455f3aca8 <line:129:3, col:47>
|   | |   | `-VarDecl 0x1c455f3aaa8 <col:3, col:46> col:5 referenced Diffuse 'T' cinit
|   | |   |   `-CallExpr 0x1c455f3ac68 <col:15, col:46> '<dependent type>'
|   | |   |     |-UnresolvedLookupExpr 0x1c455f3ab50 <col:15, col:23> '<dependent type>' lvalue (ADL) = 'select' 0x1c455df7ab8 0x1c455df8810 0x1c455dfa5b0 0x1c455dfb260 0x1c455dfc2c0
|   | |   |     | `-TemplateArgument type 'T':'type-parameter-0-0'
|   | |   |     |   `-TemplateTypeParmType 0x1c455f3a2f0 'T' dependent depth 0 index 0
|   | |   |     |     `-TemplateTypeParm 0x1c455f3a298 'T'
|   | |   |     |-DeclRefExpr 0x1c455f3abe8 <col:25> 'bool' lvalue Var 0x1c455f3a9b0 'DiffuseCond' 'bool'
|   | |   |     |-IntegerLiteral 0x1c455f3ac20 <col:38> 'int' 0
|   | |   |     `-DeclRefExpr 0x1c455f3ac48 <col:41> 'T' lvalue ParmVar 0x1c455f3a568 'NDotL' 'T'
|   | |   |-DeclStmt 0x1c455f3b008 <line:130:3, col:43>
|   | |   | `-VarDecl 0x1c455f3ae90 <col:3, col:42> col:16 referenced Result 'vector<T, 4>' nrvo cinit
|   | |   |   `-InitListExpr 0x1c455f3afa8 <col:25, col:42> 'void'
|   | |   |     |-IntegerLiteral 0x1c455f3aef8 <col:26> 'int' 1
|   | |   |     |-DeclRefExpr 0x1c455f3af20 <col:29> 'T' lvalue Var 0x1c455f3aaa8 'Diffuse' 'T'
|   | |   |     |-IntegerLiteral 0x1c455f3af58 <col:38> 'int' 0
|   | |   |     `-IntegerLiteral 0x1c455f3af80 <col:41> 'int' 1
|   | |   |-DeclStmt 0x1c455f3b1d8 <line:132:3, col:51>
|   | |   | `-VarDecl 0x1c455f3b030 <col:3, col:50> col:8 referenced SpecularCond 'bool' cinit
|   | |   |   `-CallExpr 0x1c455f3b1a0 <col:23, col:50> '<dependent type>'
|   | |   |     |-UnresolvedLookupExpr 0x1c455f3b098 <col:23> '<overloaded function type>' lvalue (ADL) = 'or' 0x1c455de9680 0x1c455decde0 0x1c455ded0f8 0x1c455ded410
|   | |   |     |-DeclRefExpr 0x1c455f3b0f8 <col:26> 'bool' lvalue Var 0x1c455f3a9b0 'DiffuseCond' 'bool'
|   | |   |     `-ParenExpr 0x1c455f3b180 <col:39, col:49> '<dependent type>'
|   | |   |       `-BinaryOperator 0x1c455f3b160 <col:40, col:48> '<dependent type>' '<'
|   | |   |         |-DeclRefExpr 0x1c455f3b118 <col:40> 'T' lvalue ParmVar 0x1c455f3a5e8 'NDotH' 'T'
|   | |   |         `-IntegerLiteral 0x1c455f3b138 <col:48> 'int' 0
|   | |   |-DeclStmt 0x1c455f3b568 <line:134:3, col:38>
|   | |   | `-VarDecl 0x1c455f3b200 <col:3, col:37> col:5 referenced SpecularExp 'T' cinit
|   | |   |   `-CallExpr 0x1c455f3b538 <col:19, col:37> '<dependent type>'
|   | |   |     |-UnresolvedLookupExpr 0x1c455f3b268 <col:19> '<overloaded function type>' lvalue (ADL) = 'exp' 0x1c455dc3520 0x1c455dc3780 0x1c455dc39f0 0x1c455dc3c60 0x1c455dc3ee0 0x1c455dc4150 0x1c455dc4550 0x1c455dc47c0 0x1c455e71a58 0x1c455e71d98 0x1c455e720d8 0x1c455e72420 0x1c455e72780 0x1c455e72ae0 0x1c455e72e40 0x1c455e731a8 0x1c455e73520 0x1c455e7c2f0 0x1c455e7c670 0x1c455e7c9f8 0x1c455e7cd90 0x1c455e7d130 0x1c455e7d4d0 0x1c455e7d878 0x1c455e7dc30 0x1c455e7dff0 0x1c455e75e58 0x1c455e76220
|   | |   |     `-BinaryOperator 0x1c455f3b518 <col:23, col:36> '<dependent type>' '*'
|   | |   |       |-CallExpr 0x1c455f3b4c8 <col:23, col:32> '<dependent type>'
|   | |   |       | |-UnresolvedLookupExpr 0x1c455f3b388 <col:23> '<overloaded function type>' lvalue (ADL) = 'log' 0x1c455dd3e40 0x1c455dd40a0 0x1c455dd4310 0x1c455dd0258 0x1c455dd04d8 0x1c455dd0748 0x1c455dd09b8 0x1c455dd0c28 0x1c455ebb108 0x1c455ebb448 0x1c455ebb788 0x1c455ebbad0 0x1c455ebbe30 0x1c455ebc190 0x1c455ebc4f0 0x1c455eb8648 0x1c455eb89c0 0x1c455eb8d40 0x1c455eb90c0 0x1c455eb9448 0x1c455eb97e0 0x1c455eb9b80 0x1c455eb9f20 0x1c455eba2c8 0x1c455ec0f18 0x1c455ec12d8 0x1c455ec1698 0x1c455ec1a60
|   | |   |       | `-DeclRefExpr 0x1c455f3b4a8 <col:27> 'T' lvalue ParmVar 0x1c455f3a5e8 'NDotH' 'T'
|   | |   |       `-DeclRefExpr 0x1c455f3b4f8 <col:36> 'T' lvalue ParmVar 0x1c455f3a668 'M' 'T'
|   | |   |-BinaryOperator 0x1c455f3b7b0 <line:135:3, col:53> '<dependent type>' '='
|   | |   | |-ArraySubscriptExpr 0x1c455f3b5e0 <col:3, col:11> '<dependent type>' lvalue
|   | |   | | |-DeclRefExpr 0x1c455f3b580 <col:3> 'vector<T, 4>' lvalue Var 0x1c455f3ae90 'Result' 'vector<T, 4>'
|   | |   | | `-IntegerLiteral 0x1c455f3b5b8 <col:10> 'int' 2
|   | |   | `-CallExpr 0x1c455f3b770 <col:15, col:53> '<dependent type>'
|   | |   |   |-UnresolvedLookupExpr 0x1c455f3b640 <col:15, col:23> '<dependent type>' lvalue (ADL) = 'select' 0x1c455df7ab8 0x1c455df8810 0x1c455dfa5b0 0x1c455dfb260 0x1c455dfc2c0
|   | |   |   | `-TemplateArgument type 'T':'type-parameter-0-0'
|   | |   |   |   `-TemplateTypeParmType 0x1c455f3a2f0 'T' dependent depth 0 index 0
|   | |   |   |     `-TemplateTypeParm 0x1c455f3a298 'T'
|   | |   |   |-DeclRefExpr 0x1c455f3b6d8 <col:25> 'bool' lvalue Var 0x1c455f3b030 'SpecularCond' 'bool'
|   | |   |   |-IntegerLiteral 0x1c455f3b710 <col:39> 'int' 0
|   | |   |   `-DeclRefExpr 0x1c455f3b738 <col:42> 'T' lvalue Var 0x1c455f3b200 'SpecularExp' 'T'
|   | |   `-ReturnStmt 0x1c455f3b7f0 <line:136:3, col:10> nrvo_candidate(Var 0x1c455f3ae90 'Result' 'vector<T, 4>')
|   | |     `-DeclRefExpr 0x1c455f3b7d0 <col:10> 'vector<T, 4>' lvalue Var 0x1c455f3ae90 'Result' 'vector<T, 4>'
|   | |-FunctionDecl 0x1c455f5a408 <line:127:23, line:137:1> line:127:46 used constexpr lit_impl 'vector<half, 4> (half, half, half)' implicit_instantiation implicit-inline
|   | | |-TemplateArgument type 'half'
|   | | | `-BuiltinType 0x1c4559cd0d0 'half'
|   | | |-ParmVarDecl 0x1c455f5a1b0 <col:55, col:57> col:57 used NDotL 'half'
|   | | |-ParmVarDecl 0x1c455f5a230 <col:64, col:66> col:66 used NDotH 'half'
|   | | |-ParmVarDecl 0x1c455f5a2b0 <col:73, col:75> col:75 used M 'half'
|   | | `-CompoundStmt 0x1c455f739c8 <col:78, line:137:1>
|   | |   |-DeclStmt 0x1c455f5a688 <line:128:3, col:31>
|   | |   | `-VarDecl 0x1c455f5a568 <col:3, col:30> col:8 used DiffuseCond 'bool' cinit
|   | |   |   `-BinaryOperator 0x1c455f5a650 <col:22, col:30> 'bool' '<'
|   | |   |     |-ImplicitCastExpr 0x1c455f5a620 <col:22> 'float' <FloatingCast>
|   | |   |     | `-ImplicitCastExpr 0x1c455f5a608 <col:22> 'half' <LValueToRValue>
|   | |   |     |   `-DeclRefExpr 0x1c455f5a5d0 <col:22> 'half' lvalue ParmVar 0x1c455f5a1b0 'NDotL' 'half'
|   | |   |     `-ImplicitCastExpr 0x1c455f5a638 <col:30> 'float' <IntegralToFloating>
|   | |   |       `-IntegerLiteral 0x1c455f3aa38 <col:30> 'int' 0
|   | |   |-DeclStmt 0x1c455f5d6f8 <line:129:3, col:47>
|   | |   | `-VarDecl 0x1c455f5a6e0 <col:3, col:46> col:5 used Diffuse 'half' cinit
|   | |   |   `-CallExpr 0x1c455f5d658 <col:15, col:46> 'half'
|   | |   |     |-ImplicitCastExpr 0x1c455f5d640 <col:15, col:23> 'half (*)(bool, half, half)' <BuiltinFnToFnPtr>
|   | |   |     | `-DeclRefExpr 0x1c455f5d588 <col:15, col:23> '<builtin fn type>' Function 0x1c455f5acf0 'select' 'half (bool, half, half)' (FunctionTemplate 0x1c455df7ab8 'select')
|   | |   |     |-ImplicitCastExpr 0x1c455f5d698 <col:25> 'bool' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x1c455f5a7f0 <col:25> 'bool' lvalue Var 0x1c455f5a568 'DiffuseCond' 'bool'
|   | |   |     |-ImplicitCastExpr 0x1c455f5d6b0 <col:38> 'half' <IntegralToFloating>
|   | |   |     | `-IntegerLiteral 0x1c455f3ac20 <col:38> 'int' 0
|   | |   |     `-ImplicitCastExpr 0x1c455f5d6c8 <col:41> 'half' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x1c455f5a810 <col:41> 'half' lvalue ParmVar 0x1c455f5a1b0 'NDotL' 'half'
|   | |   |-DeclStmt 0x1c455f5db18 <line:130:3, col:43>
|   | |   | `-VarDecl 0x1c455f5d8f8 <col:3, col:42> col:16 used Result 'vector<half, 4>' cinit
|   | |   |   `-InitListExpr 0x1c455f5daa0 <col:25, col:42> 'vector<half, 4>'
|   | |   |     |-ImplicitCastExpr 0x1c455f5d9e0 <col:26> 'half' <IntegralToFloating>
|   | |   |     | `-IntegerLiteral 0x1c455f3aef8 <col:26> 'int' 1
|   | |   |     |-ImplicitCastExpr 0x1c455f5d9f8 <col:29> 'half' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x1c455f5d960 <col:29> 'half' lvalue Var 0x1c455f5a6e0 'Diffuse' 'half'
|   | |   |     |-ImplicitCastExpr 0x1c455f5da10 <col:38> 'half' <IntegralToFloating>
|   | |   |     | `-IntegerLiteral 0x1c455f3af58 <col:38> 'int' 0
|   | |   |     `-ImplicitCastExpr 0x1c455f5da28 <col:41> 'half' <IntegralToFloating>
|   | |   |       `-IntegerLiteral 0x1c455f3af80 <col:41> 'int' 1
|   | |   |-DeclStmt 0x1c455f71010 <line:132:3, col:51>
|   | |   | `-VarDecl 0x1c455f5db30 <col:3, col:50> col:8 used SpecularCond 'bool' cinit
|   | |   |   `-CallExpr 0x1c455f70fa8 <col:23, col:50> 'bool'
|   | |   |     |-ImplicitCastExpr 0x1c455f70f90 <col:23> 'bool (*)(bool, bool)' <BuiltinFnToFnPtr>
|   | |   |     | `-DeclRefExpr 0x1c455f70f40 <col:23> '<builtin fn type>' Function 0x1c455de9680 'or' 'bool (bool, bool)'
|   | |   |     |-ImplicitCastExpr 0x1c455f70fe0 <col:26> 'bool' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x1c455f5dbf8 <col:26> 'bool' lvalue Var 0x1c455f5a568 'DiffuseCond' 'bool'
|   | |   |     `-ParenExpr 0x1c455f5dcb8 <col:39, col:49> 'bool'
|   | |   |       `-BinaryOperator 0x1c455f5dc98 <col:40, col:48> 'bool' '<'
|   | |   |         |-ImplicitCastExpr 0x1c455f5dc68 <col:40> 'float' <FloatingCast>
|   | |   |         | `-ImplicitCastExpr 0x1c455f5dc50 <col:40> 'half' <LValueToRValue>
|   | |   |         |   `-DeclRefExpr 0x1c455f5dc18 <col:40> 'half' lvalue ParmVar 0x1c455f5a230 'NDotH' 'half'
|   | |   |         `-ImplicitCastExpr 0x1c455f5dc80 <col:48> 'float' <IntegralToFloating>
|   | |   |           `-IntegerLiteral 0x1c455f3b138 <col:48> 'int' 0
|   | |   |-DeclStmt 0x1c455f714e8 <line:134:3, col:38>
|   | |   | `-VarDecl 0x1c455f71038 <col:3, col:37> col:5 used SpecularExp 'half' cinit
|   | |   |   `-ImplicitCastExpr 0x1c455f714b8 <col:19, col:37> 'half' <FloatingCast>
|   | |   |     `-CallExpr 0x1c455f71488 <col:19, col:37> 'float'
|   | |   |       |-ImplicitCastExpr 0x1c455f71470 <col:19> 'float (*)(float)' <BuiltinFnToFnPtr>
|   | |   |       | `-DeclRefExpr 0x1c455f71450 <col:19> '<builtin fn type>' Function 0x1c455dc3ee0 'exp' 'float (float)'
|   | |   |       `-BinaryOperator 0x1c455f71430 <col:23, col:36> 'float' '*'
|   | |   |         |-CallExpr 0x1c455f71368 <col:23, col:32> 'float'
|   | |   |         | |-ImplicitCastExpr 0x1c455f71350 <col:23> 'half (*)(half)' <BuiltinFnToFnPtr>
|   | |   |         | | `-DeclRefExpr 0x1c455f71300 <col:23> '<builtin fn type>' Function 0x1c455dd3e40 'log' 'half (half)'
|   | |   |         | `-ImplicitCastExpr 0x1c455f713b0 <col:27> 'float' <FloatingCast>
|   | |   |         |   `-ImplicitCastExpr 0x1c455f71398 <col:27> 'half' <LValueToRValue>
|   | |   |         |     `-DeclRefExpr 0x1c455f712e0 <col:27> 'half' lvalue ParmVar 0x1c455f5a230 'NDotH' 'half'
|   | |   |         `-ImplicitCastExpr 0x1c455f71418 <col:36> 'float' <FloatingCast>
|   | |   |           `-ImplicitCastExpr 0x1c455f71400 <col:36> 'half' <LValueToRValue>
|   | |   |             `-DeclRefExpr 0x1c455f713c8 <col:36> 'half' lvalue ParmVar 0x1c455f5a2b0 'M' 'half'
|   | |   |-BinaryOperator 0x1c455f73960 <line:135:3, col:53> 'half' lvalue vectorcomponent '='
|   | |   | |-ArraySubscriptExpr 0x1c455f71520 <col:3, col:11> 'half' lvalue vectorcomponent
|   | |   | | |-DeclRefExpr 0x1c455f71500 <col:3> 'vector<half, 4>' lvalue Var 0x1c455f5d8f8 'Result' 'vector<half, 4>'
|   | |   | | `-IntegerLiteral 0x1c455f3b5b8 <col:10> 'int' 2
|   | |   | `-CallExpr 0x1c455f738d8 <col:15, col:53> 'half'
|   | |   |   |-ImplicitCastExpr 0x1c455f738c0 <col:15, col:23> 'half (*)(bool, half, half)' <BuiltinFnToFnPtr>
|   | |   |   | `-DeclRefExpr 0x1c455f73868 <col:15, col:23> '<builtin fn type>' Function 0x1c455f5acf0 'select' 'half (bool, half, half)' (FunctionTemplate 0x1c455df7ab8 'select')
|   | |   |   |-ImplicitCastExpr 0x1c455f73918 <col:25> 'bool' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x1c455f715e8 <col:25> 'bool' lvalue Var 0x1c455f5db30 'SpecularCond' 'bool'
|   | |   |   |-ImplicitCastExpr 0x1c455f73930 <col:39> 'half' <IntegralToFloating>
|   | |   |   | `-IntegerLiteral 0x1c455f3b710 <col:39> 'int' 0
|   | |   |   `-ImplicitCastExpr 0x1c455f73948 <col:42> 'half' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x1c455f71608 <col:42> 'half' lvalue Var 0x1c455f71038 'SpecularExp' 'half'
|   | |   `-ReturnStmt 0x1c455f739b8 <line:136:3, col:10>
|   | |     `-ImplicitCastExpr 0x1c455f739a0 <col:10> 'vector<half, 4>' <LValueToRValue>
|   | |       `-DeclRefExpr 0x1c455f73980 <col:10> 'vector<half, 4>' lvalue Var 0x1c455f5d8f8 'Result' 'vector<half, 4>'
|   | `-FunctionDecl 0x1c455f74458 <line:127:23, line:137:1> line:127:46 used constexpr lit_impl 'vector<float, 4> (float, float, float)' implicit_instantiation implicit-inline
|   |   |-TemplateArgument type 'float'
|   |   | `-BuiltinType 0x1c4559cca80 'float'
|   |   |-ParmVarDecl 0x1c455f74200 <col:55, col:57> col:57 used NDotL 'float'
|   |   |-ParmVarDecl 0x1c455f74280 <col:64, col:66> col:66 used NDotH 'float'
|   |   |-ParmVarDecl 0x1c455f74300 <col:73, col:75> col:75 used M 'float'
|   |   `-CompoundStmt 0x1c455f7ecb8 <col:78, line:137:1>
|   |     |-DeclStmt 0x1c455f746c0 <line:128:3, col:31>
|   |     | `-VarDecl 0x1c455f745b8 <col:3, col:30> col:8 used DiffuseCond 'bool' cinit
|   |     |   `-BinaryOperator 0x1c455f74688 <col:22, col:30> 'bool' '<'
|   |     |     |-ImplicitCastExpr 0x1c455f74658 <col:22> 'float' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x1c455f74620 <col:22> 'float' lvalue ParmVar 0x1c455f74200 'NDotL' 'float'
|   |     |     `-ImplicitCastExpr 0x1c455f74670 <col:30> 'float' <IntegralToFloating>
|   |     |       `-IntegerLiteral 0x1c455f3aa38 <col:30> 'int' 0
|   |     |-DeclStmt 0x1c455f6f118 <line:129:3, col:47>
|   |     | `-VarDecl 0x1c455f74720 <col:3, col:46> col:5 used Diffuse 'float' cinit
|   |     |   `-CallExpr 0x1c455f6f078 <col:15, col:46> 'float'
|   |     |     |-ImplicitCastExpr 0x1c455f6f060 <col:15, col:23> 'float (*)(bool, float, float)' <BuiltinFnToFnPtr>
|   |     |     | `-DeclRefExpr 0x1c455f6efa8 <col:15, col:23> '<builtin fn type>' Function 0x1c455f74d30 'select' 'float (bool, float, float)' (FunctionTemplate 0x1c455df7ab8 'select')
|   |     |     |-ImplicitCastExpr 0x1c455f6f0b8 <col:25> 'bool' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x1c455f74830 <col:25> 'bool' lvalue Var 0x1c455f745b8 'DiffuseCond' 'bool'
|   |     |     |-ImplicitCastExpr 0x1c455f6f0d0 <col:38> 'float' <IntegralToFloating>
|   |     |     | `-IntegerLiteral 0x1c455f3ac20 <col:38> 'int' 0
|   |     |     `-ImplicitCastExpr 0x1c455f6f0e8 <col:41> 'float' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x1c455f74850 <col:41> 'float' lvalue ParmVar 0x1c455f74200 'NDotL' 'float'
|   |     |-DeclStmt 0x1c455f6f538 <line:130:3, col:43>
|   |     | `-VarDecl 0x1c455f6f318 <col:3, col:42> col:16 used Result 'vector<float, 4>' cinit
|   |     |   `-InitListExpr 0x1c455f6f4c0 <col:25, col:42> 'vector<float, 4>'
|   |     |     |-ImplicitCastExpr 0x1c455f6f400 <col:26> 'float' <IntegralToFloating>
|   |     |     | `-IntegerLiteral 0x1c455f3aef8 <col:26> 'int' 1
|   |     |     |-ImplicitCastExpr 0x1c455f6f418 <col:29> 'float' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x1c455f6f380 <col:29> 'float' lvalue Var 0x1c455f74720 'Diffuse' 'float'
|   |     |     |-ImplicitCastExpr 0x1c455f6f430 <col:38> 'float' <IntegralToFloating>
|   |     |     | `-IntegerLiteral 0x1c455f3af58 <col:38> 'int' 0
|   |     |     `-ImplicitCastExpr 0x1c455f6f448 <col:41> 'float' <IntegralToFloating>
|   |     |       `-IntegerLiteral 0x1c455f3af80 <col:41> 'int' 1
|   |     |-DeclStmt 0x1c455f6f780 <line:132:3, col:51>
|   |     | `-VarDecl 0x1c455f6f550 <col:3, col:50> col:8 used SpecularCond 'bool' cinit
|   |     |   `-CallExpr 0x1c455f6f718 <col:23, col:50> 'bool'
|   |     |     |-ImplicitCastExpr 0x1c455f6f700 <col:23> 'bool (*)(bool, bool)' <BuiltinFnToFnPtr>
|   |     |     | `-DeclRefExpr 0x1c455f6f6e0 <col:23> '<builtin fn type>' Function 0x1c455de9680 'or' 'bool (bool, bool)'
|   |     |     |-ImplicitCastExpr 0x1c455f6f750 <col:26> 'bool' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x1c455f6f618 <col:26> 'bool' lvalue Var 0x1c455f745b8 'DiffuseCond' 'bool'
|   |     |     `-ParenExpr 0x1c455f6f6c0 <col:39, col:49> 'bool'
|   |     |       `-BinaryOperator 0x1c455f6f6a0 <col:40, col:48> 'bool' '<'
|   |     |         |-ImplicitCastExpr 0x1c455f6f670 <col:40> 'float' <LValueToRValue>
|   |     |         | `-DeclRefExpr 0x1c455f6f638 <col:40> 'float' lvalue ParmVar 0x1c455f74280 'NDotH' 'float'
|   |     |         `-ImplicitCastExpr 0x1c455f6f688 <col:48> 'float' <IntegralToFloating>
|   |     |           `-IntegerLiteral 0x1c455f3b138 <col:48> 'int' 0
|   |     |-DeclStmt 0x1c455f6fbe0 <line:134:3, col:38>
|   |     | `-VarDecl 0x1c455f6f7a8 <col:3, col:37> col:5 used SpecularExp 'float' cinit
|   |     |   `-CallExpr 0x1c455f6fb98 <col:19, col:37> 'float'
|   |     |     |-ImplicitCastExpr 0x1c455f6fb80 <col:19> 'float (*)(float)' <BuiltinFnToFnPtr>
|   |     |     | `-DeclRefExpr 0x1c455f6fb60 <col:19> '<builtin fn type>' Function 0x1c455dc3ee0 'exp' 'float (float)'
|   |     |     `-BinaryOperator 0x1c455f6fb40 <col:23, col:36> 'float' '*'
|   |     |       |-CallExpr 0x1c455f6faa8 <col:23, col:32> 'float'
|   |     |       | |-ImplicitCastExpr 0x1c455f6fa90 <col:23> 'float (*)(float)' <BuiltinFnToFnPtr>
|   |     |       | | `-DeclRefExpr 0x1c455f6fa70 <col:23> '<builtin fn type>' Function 0x1c455dd04d8 'log' 'float (float)'
|   |     |       | `-ImplicitCastExpr 0x1c455f6fad8 <col:27> 'float' <LValueToRValue>
|   |     |       |   `-DeclRefExpr 0x1c455f6fa50 <col:27> 'float' lvalue ParmVar 0x1c455f74280 'NDotH' 'float'
|   |     |       `-ImplicitCastExpr 0x1c455f6fb28 <col:36> 'float' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x1c455f6faf0 <col:36> 'float' lvalue ParmVar 0x1c455f74300 'M' 'float'
|   |     |-BinaryOperator 0x1c455f7ec50 <line:135:3, col:53> 'float' lvalue vectorcomponent '='
|   |     | |-ArraySubscriptExpr 0x1c455f6fc18 <col:3, col:11> 'float' lvalue vectorcomponent
|   |     | | |-DeclRefExpr 0x1c455f6fbf8 <col:3> 'vector<float, 4>' lvalue Var 0x1c455f6f318 'Result' 'vector<float, 4>'
|   |     | | `-IntegerLiteral 0x1c455f3b5b8 <col:10> 'int' 2
|   |     | `-CallExpr 0x1c455f7ebc8 <col:15, col:53> 'float'
|   |     |   |-ImplicitCastExpr 0x1c455f7ebb0 <col:15, col:23> 'float (*)(bool, float, float)' <BuiltinFnToFnPtr>
|   |     |   | `-DeclRefExpr 0x1c455f7eb58 <col:15, col:23> '<builtin fn type>' Function 0x1c455f74d30 'select' 'float (bool, float, float)' (FunctionTemplate 0x1c455df7ab8 'select')
|   |     |   |-ImplicitCastExpr 0x1c455f7ec08 <col:25> 'bool' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x1c455f6fce0 <col:25> 'bool' lvalue Var 0x1c455f6f550 'SpecularCond' 'bool'
|   |     |   |-ImplicitCastExpr 0x1c455f7ec20 <col:39> 'float' <IntegralToFloating>
|   |     |   | `-IntegerLiteral 0x1c455f3b710 <col:39> 'int' 0
|   |     |   `-ImplicitCastExpr 0x1c455f7ec38 <col:42> 'float' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x1c455f6fd00 <col:42> 'float' lvalue Var 0x1c455f6f7a8 'SpecularExp' 'float'
|   |     `-ReturnStmt 0x1c455f7eca8 <line:136:3, col:10>
|   |       `-ImplicitCastExpr 0x1c455f7ec90 <col:10> 'vector<float, 4>' <LValueToRValue>
|   |         `-DeclRefExpr 0x1c455f7ec70 <col:10> 'vector<float, 4>' lvalue Var 0x1c455f6f318 'Result' 'vector<float, 4>'
|   |-FunctionTemplateDecl 0x1c455f3e0a8 <line:139:1, line:145:1> line:139:35 faceforward_impl
|   | |-TemplateTypeParmDecl 0x1c455f3b850 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|   | `-FunctionDecl 0x1c455f3e000 <col:23, line:145:1> line:139:35 constexpr faceforward_impl 'T (T, T, T)' implicit-inline
|   |   |-ParmVarDecl 0x1c455f3b900 <col:52, col:54> col:54 referenced N 'T'
|   |   |-ParmVarDecl 0x1c455f3b980 <col:57, col:59> col:59 referenced I 'T'
|   |   |-ParmVarDecl 0x1c455f3ba00 <col:62, col:64> col:64 referenced Ng 'T'
|   |   `-CompoundStmt 0x1c455f3e470 <col:68, line:145:1>
|   |     `-ReturnStmt 0x1c455f3e460 <line:143:3, col:38>
|   |       `-CallExpr 0x1c455f3e420 <col:10, col:38> '<dependent type>'
|   |         |-UnresolvedLookupExpr 0x1c455f3e198 <col:10> '<overloaded function type>' lvalue (ADL) = 'select' 0x1c455df7ab8 0x1c455df8810 0x1c455dfa5b0 0x1c455dfb260 0x1c455dfc2c0
|   |         |-BinaryOperator 0x1c455f3e3a8 <col:17, col:30> '<dependent type>' '<'
|   |         | |-CallExpr 0x1c455f3e348 <col:17, col:26> '<dependent type>'
|   |         | | |-UnresolvedLookupExpr 0x1c455f3e200 <col:17> '<overloaded function type>' lvalue (ADL) = 'dot' 0x1c455d80768 0x1c455d7c7e8 0x1c455d7cb88 0x1c455d7cf28 0x1c455d7d258 0x1c455d80ad0 0x1c455d80e78 0x1c455d81218 0x1c455d81588 0x1c455d818f8 0x1c455d83fd8 0x1c455d84378 0x1c455d84718 0x1c455d84ab0 0x1c455d81c50 0x1c455d81ff0 0x1c455d82390 0x1c455d82730 0x1c455d82ad0 0x1c455d82fa0 0x1c455d83340 0x1c455d836e0 0x1c455d83a80 0x1c455dc0260 0x1c455dc0600
|   |         | | |-DeclRefExpr 0x1c455f3e308 <col:21> 'T' lvalue ParmVar 0x1c455f3b980 'I' 'T'
|   |         | | `-DeclRefExpr 0x1c455f3e328 <col:24> 'T' lvalue ParmVar 0x1c455f3ba00 'Ng' 'T'
|   |         | `-IntegerLiteral 0x1c455f3e380 <col:30> 'int' 0
|   |         |-DeclRefExpr 0x1c455f3e3c8 <col:33> 'T' lvalue ParmVar 0x1c455f3b900 'N' 'T'
|   |         `-UnaryOperator 0x1c455f3e408 <col:36, col:37> '<dependent type>' prefix '-' cannot overflow
|   |           `-DeclRefExpr 0x1c455f3e3e8 <col:37> 'T' lvalue ParmVar 0x1c455f3b900 'N' 'T'
|   `-FunctionTemplateDecl 0x1c455f3e778 <line:147:1, line:149:1> line:147:35 ldexp_impl
|     |-TemplateTypeParmDecl 0x1c455f3e488 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
|     `-FunctionDecl 0x1c455f3e6d0 <col:23, line:149:1> line:147:35 constexpr ldexp_impl 'T (T, T)' implicit-inline
|       |-ParmVarDecl 0x1c455f3e540 <col:46, col:48> col:48 referenced X 'T'
|       |-ParmVarDecl 0x1c455f3e5c0 <col:51, col:53> col:53 referenced Exp 'T'
|       `-CompoundStmt 0x1c455f3ea20 <col:58, line:149:1>
|         `-ReturnStmt 0x1c455f3ea10 <line:148:3, col:22>
|           `-BinaryOperator 0x1c455f3e9f0 <col:10, col:22> '<dependent type>' '*'
|             |-CallExpr 0x1c455f3e9a0 <col:10, col:18> '<dependent type>'
|             | |-UnresolvedLookupExpr 0x1c455f3e860 <col:10> '<overloaded function type>' lvalue (ADL) = 'exp2' 0x1c455dc4a40 0x1c455dc4ca0 0x1c455dc4f10 0x1c455dc5180 0x1c455dc5400 0x1c455dc1360 0x1c455dc15d0 0x1c455dc1840 0x1c455e76600 0x1c455e76940 0x1c455e76c80 0x1c455e76fc8 0x1c455e77328 0x1c455e77688 0x1c455e779e8 0x1c455e7e640 0x1c455e7e9b8 0x1c455e7ed38 0x1c455e7f0b8 0x1c455e7f440 0x1c455e7f7d8 0x1c455e7fb78 0x1c455e7ff18 0x1c455e802c0 0x1c455e78060 0x1c455e78420 0x1c455e787e0 0x1c455e78ba8
|             | `-DeclRefExpr 0x1c455f3e980 <col:15> 'T' lvalue ParmVar 0x1c455f3e5c0 'Exp' 'T'
|             `-DeclRefExpr 0x1c455f3e9d0 <col:22> 'T' lvalue ParmVar 0x1c455f3e540 'X' 'T'
|-LinkageSpecDecl 0x1c455f33878 <line:55:10> col:10 implicit C
| `-FunctionDecl 0x1c455f338c8 <col:10> col:10 implicit used __builtin_dx_dot2add 'float (vector<_Float16, 2>, vector<_Float16, 2>, float) noexcept' extern
|   |-ParmVarDecl 0x1c455f339d8 <<invalid sloc>> <invalid sloc> 'vector<_Float16, 2>'
|   |-ParmVarDecl 0x1c455f33a48 <<invalid sloc>> <invalid sloc> 'vector<_Float16, 2>'
|   |-ParmVarDecl 0x1c455f33ab8 <<invalid sloc>> <invalid sloc> 'float'
|   |-BuiltinAttr 0x1c455f33970 <<invalid sloc>> Implicit 1501
|   |-NoThrowAttr 0x1c455f33b40 <col:10> Implicit
|   `-ConstAttr 0x1c455f33b70 <col:10> Implicit
|-NamespaceDecl 0x1c455f3eba0 prev 0x1c455f2f718 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsics.h:14:1, line:584:1> line:14:11 hlsl
| |-original Namespace 0x1c4559cd198 'hlsl'
| |-FunctionTemplateDecl 0x1c455f3f2f0 <line:24:1, line:27:1> line:25:28 asfloat
| | |-TemplateTypeParmDecl 0x1c455f3ec10 <line:24:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455f3eca8 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 N
| | `-FunctionDecl 0x1c455f3f248 <line:25:1, line:27:1> line:25:28 constexpr asfloat 'vector<float, N> (vector<T, N>)' implicit-inline
| |   |-ParmVarDecl 0x1c455f3f100 <col:36, col:49> col:49 referenced V 'vector<T, N>'
| |   `-CompoundStmt 0x1c455f3f588 <col:52, line:27:1>
| |     `-ReturnStmt 0x1c455f3f578 <line:26:3, col:43>
| |       `-CallExpr 0x1c455f3f548 <col:10, col:43> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f3f468 <col:10, col:40> '<dependent type>' lvalue (no ADL) = 'bit_cast' 0x1c455d34400 0x1c455d34e50
| |         | |-TemplateArgument type 'float'
| |         | | `-BuiltinType 0x1c4559cca80 'float'
| |         | |-TemplateArgument type 'T':'type-parameter-0-0'
| |         | | `-TemplateTypeParmType 0x1c455f3ec60 'T' dependent depth 0 index 0
| |         | |   `-TemplateTypeParm 0x1c455f3ec10 'T'
| |         | `-TemplateArgument expr 'N':'value-parameter-0-1'
| |         |   `-DeclRefExpr 0x1c455f3f428 <col:39> 'int' NonTypeTemplateParm 0x1c455f3eca8 'N' 'int'
| |         `-DeclRefExpr 0x1c455f3f528 <col:42> 'vector<T, N>' lvalue ParmVar 0x1c455f3f100 'V' 'vector<T, N>'
| |-FunctionTemplateDecl 0x1c455f3f830 <line:29:1, line:31:1> line:29:39 asfloat
| | |-TemplateTypeParmDecl 0x1c455f3f5a0 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f3f788 <col:23, line:31:1> line:29:39 constexpr asfloat 'float (T)' implicit-inline
| |   |-ParmVarDecl 0x1c455f3f650 <col:47, col:49> col:49 referenced F 'T'
| |   `-CompoundStmt 0x1c455f3fa80 <col:52, line:31:1>
| |     `-ReturnStmt 0x1c455f3fa70 <line:30:3, col:40>
| |       `-CallExpr 0x1c455f3fa40 <col:10, col:40> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f3f980 <col:10, col:37> '<dependent type>' lvalue (no ADL) = 'bit_cast' 0x1c455d34400 0x1c455d34e50
| |         | |-TemplateArgument type 'float'
| |         | | `-BuiltinType 0x1c4559cca80 'float'
| |         | `-TemplateArgument type 'T':'type-parameter-0-0'
| |         |   `-TemplateTypeParmType 0x1c455f3f5f0 'T' dependent depth 0 index 0
| |         |     `-TemplateTypeParm 0x1c455f3f5a0 'T'
| |         `-DeclRefExpr 0x1c455f3fa20 <col:39> 'T' lvalue ParmVar 0x1c455f3f650 'F' 'T'
| |-FunctionTemplateDecl 0x1c455f3bf70 <line:41:1, line:43:1> line:41:55 asint
| | |-TemplateTypeParmDecl 0x1c455f3fa98 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455f3fb38 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 N
| | `-FunctionDecl 0x1c455f3bec8 <col:30, line:43:1> line:41:55 constexpr asint 'vector<int, N> (vector<T, N>)' implicit-inline
| |   |-ParmVarDecl 0x1c455f3ff90 <col:61, col:74> col:74 referenced V 'vector<T, N>'
| |   `-CompoundStmt 0x1c455f3c1f0 <col:77, line:43:1>
| |     `-ReturnStmt 0x1c455f3c1e0 <line:42:3, col:41>
| |       `-CallExpr 0x1c455f3c1b0 <col:10, col:41> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f3c0d0 <col:10, col:38> '<dependent type>' lvalue (no ADL) = 'bit_cast' 0x1c455d34400 0x1c455d34e50
| |         | |-TemplateArgument type 'int'
| |         | | `-BuiltinType 0x1c4559cc980 'int'
| |         | |-TemplateArgument type 'T':'type-parameter-0-0'
| |         | | `-TemplateTypeParmType 0x1c455f3faf0 'T' dependent depth 0 index 0
| |         | |   `-TemplateTypeParm 0x1c455f3fa98 'T'
| |         | `-TemplateArgument expr 'N':'value-parameter-0-1'
| |         |   `-DeclRefExpr 0x1c455f3c090 <col:37> 'int' NonTypeTemplateParm 0x1c455f3fb38 'N' 'int'
| |         `-DeclRefExpr 0x1c455f3c190 <col:40> 'vector<T, N>' lvalue ParmVar 0x1c455f3ff90 'V' 'vector<T, N>'
| |-FunctionTemplateDecl 0x1c455f3c4a0 <line:45:1, line:47:1> line:45:37 asint
| | |-TemplateTypeParmDecl 0x1c455f3c208 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f3c3f8 <col:23, line:47:1> line:45:37 constexpr asint 'int (T)' implicit-inline
| |   |-ParmVarDecl 0x1c455f3c2c0 <col:43, col:45> col:45 referenced F 'T'
| |   `-CompoundStmt 0x1c455f3c6f0 <col:48, line:47:1>
| |     `-ReturnStmt 0x1c455f3c6e0 <line:46:3, col:38>
| |       `-CallExpr 0x1c455f3c6b0 <col:10, col:38> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f3c5f0 <col:10, col:35> '<dependent type>' lvalue (no ADL) = 'bit_cast' 0x1c455d34400 0x1c455d34e50
| |         | |-TemplateArgument type 'int'
| |         | | `-BuiltinType 0x1c4559cc980 'int'
| |         | `-TemplateArgument type 'T':'type-parameter-0-0'
| |         |   `-TemplateTypeParmType 0x1c455f3c260 'T' dependent depth 0 index 0
| |         |     `-TemplateTypeParm 0x1c455f3c208 'T'
| |         `-DeclRefExpr 0x1c455f3c690 <col:37> 'T' lvalue ParmVar 0x1c455f3c2c0 'F' 'T'
| |-FunctionTemplateDecl 0x1c455f3cdf0 <line:86:1, line:88:1> line:86:56 asuint
| | |-TemplateTypeParmDecl 0x1c455f3c708 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
| | |-NonTypeTemplateParmDecl 0x1c455f3c7a8 <col:23, col:27> col:27 referenced 'int' depth 0 index 1 N
| | `-FunctionDecl 0x1c455f3cd48 <col:30, line:88:1> line:86:56 constexpr asuint 'vector<uint, N> (vector<T, N>)' implicit-inline
| |   |-ParmVarDecl 0x1c455f3cc00 <col:63, col:76> col:76 referenced V 'vector<T, N>'
| |   `-CompoundStmt 0x1c455f3d068 <col:79, line:88:1>
| |     `-ReturnStmt 0x1c455f3d058 <line:87:3, col:42>
| |       `-CallExpr 0x1c455f3d028 <col:10, col:42> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f3cf48 <col:10, col:39> '<dependent type>' lvalue (no ADL) = 'bit_cast' 0x1c455d34400 0x1c455d34e50
| |         | |-TemplateArgument type 'uint':'unsigned int'
| |         | | `-ElaboratedType 0x1c455d02a60 'uint' sugar
| |         | |   `-TypedefType 0x1c455d02a30 'hlsl::uint' sugar
| |         | |     |-Typedef 0x1c455ceab50 'uint'
| |         | |     `-BuiltinType 0x1c4559cca20 'unsigned int'
| |         | |-TemplateArgument type 'T':'type-parameter-0-0'
| |         | | `-TemplateTypeParmType 0x1c455f3c760 'T' dependent depth 0 index 0
| |         | |   `-TemplateTypeParm 0x1c455f3c708 'T'
| |         | `-TemplateArgument expr 'N':'value-parameter-0-1'
| |         |   `-DeclRefExpr 0x1c455f3cf08 <col:38> 'int' NonTypeTemplateParm 0x1c455f3c7a8 'N' 'int'
| |         `-DeclRefExpr 0x1c455f3d008 <col:41> 'vector<T, N>' lvalue ParmVar 0x1c455f3cc00 'V' 'vector<T, N>'
| |-FunctionTemplateDecl 0x1c455f3d308 <line:90:1, line:92:1> line:90:38 asuint
| | |-TemplateTypeParmDecl 0x1c455f3d080 <col:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f3d260 <col:23, line:92:1> line:90:38 constexpr asuint 'uint (T)' implicit-inline
| |   |-ParmVarDecl 0x1c455f3d130 <col:45, col:47> col:47 referenced F 'T'
| |   `-CompoundStmt 0x1c455f3d550 <col:50, line:92:1>
| |     `-ReturnStmt 0x1c455f3d540 <line:91:3, col:39>
| |       `-CallExpr 0x1c455f3d510 <col:10, col:39> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f3d450 <col:10, col:36> '<dependent type>' lvalue (no ADL) = 'bit_cast' 0x1c455d34400 0x1c455d34e50
| |         | |-TemplateArgument type 'uint':'unsigned int'
| |         | | `-ElaboratedType 0x1c455d02a60 'uint' sugar
| |         | |   `-TypedefType 0x1c455d02a30 'hlsl::uint' sugar
| |         | |     |-Typedef 0x1c455ceab50 'uint'
| |         | |     `-BuiltinType 0x1c4559cca20 'unsigned int'
| |         | `-TemplateArgument type 'T':'type-parameter-0-0'
| |         |   `-TemplateTypeParmType 0x1c455f3d0d0 'T' dependent depth 0 index 0
| |         |     `-TemplateTypeParm 0x1c455f3d080 'T'
| |         `-DeclRefExpr 0x1c455f3d4f0 <col:38> 'T' lvalue ParmVar 0x1c455f3d130 'F' 'T'
| |-FunctionDecl 0x1c455f3d968 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_alias_intrinsics.h:20:3, C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsics.h:104:39> col:6 asuint 'void (double, out uint, out uint)'
| | |-ParmVarDecl 0x1c455f3d590 <col:13> col:19 'double'
| | |-ParmVarDecl 0x1c455f3d678 <col:21, col:25> col:29 'uint &__restrict'
| | | `-HLSLParamModifierAttr 0x1c455f3d6e8 <col:21> out
| | |-ParmVarDecl 0x1c455f3d768 <col:31, col:35> col:39 'uint &__restrict'
| | | `-HLSLParamModifierAttr 0x1c455f3d7d8 <col:31> out
| | |-BuiltinAliasAttr 0x1c455f3da28 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_alias_intrinsics.h:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_splitdouble
| | |-NoThrowAttr 0x1c455f3daa8 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsics.h:104:6> Implicit
| | `-ConstAttr 0x1c455f3dad8 <col:6> Implicit
| |-FunctionDecl 0x1c455f37af8 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_alias_intrinsics.h:20:3, C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsics.h:106:42> col:6 asuint 'void (double2, out uint2, out uint2)'
| | |-ParmVarDecl 0x1c455f3db38 <col:13> col:20 'double2':'vector<double, 2>'
| | |-ParmVarDecl 0x1c455f3dc28 <col:22, col:26> col:31 'uint2 &__restrict'
| | | `-HLSLParamModifierAttr 0x1c455f3dc98 <col:22> out
| | |-ParmVarDecl 0x1c455f3dd18 <col:33, col:37> col:42 'uint2 &__restrict'
| | | `-HLSLParamModifierAttr 0x1c455f3dd88 <col:33> out
| | |-BuiltinAliasAttr 0x1c455f37bb8 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_alias_intrinsics.h:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_splitdouble
| | |-NoThrowAttr 0x1c455f37c38 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsics.h:106:6> Implicit
| | `-ConstAttr 0x1c455f37c68 <col:6> Implicit
| |-FunctionDecl 0x1c455f380a8 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_alias_intrinsics.h:20:3, C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsics.h:108:42> col:6 asuint 'void (double3, out uint3, out uint3)'
| | |-ParmVarDecl 0x1c455f37cc8 <col:13> col:20 'double3':'vector<double, 3>'
| | |-ParmVarDecl 0x1c455f37db8 <col:22, col:26> col:31 'uint3 &__restrict'
| | | `-HLSLParamModifierAttr 0x1c455f37e28 <col:22> out
| | |-ParmVarDecl 0x1c455f37ea8 <col:33, col:37> col:42 'uint3 &__restrict'
| | | `-HLSLParamModifierAttr 0x1c455f37f18 <col:33> out
| | |-BuiltinAliasAttr 0x1c455f38168 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_alias_intrinsics.h:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_splitdouble
| | |-NoThrowAttr 0x1c455f381e8 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsics.h:108:6> Implicit
| | `-ConstAttr 0x1c455f38218 <col:6> Implicit
| |-FunctionDecl 0x1c455f38658 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_alias_intrinsics.h:20:3, C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsics.h:110:42> col:6 asuint 'void (double4, out uint4, out uint4)'
| | |-ParmVarDecl 0x1c455f38278 <col:13> col:20 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455f38368 <col:22, col:26> col:31 'uint4 &__restrict'
| | | `-HLSLParamModifierAttr 0x1c455f383d8 <col:22> out
| | |-ParmVarDecl 0x1c455f38458 <col:33, col:37> col:42 'uint4 &__restrict'
| | | `-HLSLParamModifierAttr 0x1c455f384c8 <col:33> out
| | |-BuiltinAliasAttr 0x1c455f38718 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_alias_intrinsics.h:20:18, col:45> clang_builtin_alias __builtin_hlsl_elementwise_splitdouble
| | |-NoThrowAttr 0x1c455f38798 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsics.h:110:6> Implicit
| | `-ConstAttr 0x1c455f387c8 <col:6> Implicit
| |-FunctionTemplateDecl 0x1c455f39200 <line:150:1, line:156:1> line:154:39 distance
| | |-TemplateTypeParmDecl 0x1c455f38808 <line:150:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f39158 <line:152:1, line:156:1> line:154:39 distance 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<half, T>::value, T> (T, T)' inline
| |   |-ParmVarDecl 0x1c455f38f58 <col:48, col:50> col:50 referenced X 'T'
| |   |-ParmVarDecl 0x1c455f38fd8 <col:53, col:55> col:55 referenced Y 'T'
| |   `-CompoundStmt 0x1c455f393d8 <col:58, line:156:1>
| |     `-ReturnStmt 0x1c455f393c8 <line:155:3, col:38>
| |       `-CallExpr 0x1c455f39390 <col:10, col:38> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f39308 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'distance_impl' 0x1c455f2bb28
| |         |-DeclRefExpr 0x1c455f39350 <col:34> 'T' lvalue ParmVar 0x1c455f38f58 'X' 'T'
| |         `-DeclRefExpr 0x1c455f39370 <col:37> 'T' lvalue ParmVar 0x1c455f38fd8 'Y' 'T'
| |-FunctionTemplateDecl 0x1c455f46c40 <line:158:1, line:163:1> line:161:1 distance
| | |-TemplateTypeParmDecl 0x1c455f393f0 <line:158:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f46b98 <line:159:1, line:163:1> line:161:1 distance 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<float, T>::value, T> (T, T)' inline
| |   |-ParmVarDecl 0x1c455f46998 <col:10, col:12> col:12 referenced X 'T'
| |   |-ParmVarDecl 0x1c455f46a18 <col:15, col:17> col:17 referenced Y 'T'
| |   `-CompoundStmt 0x1c455f46e28 <col:20, line:163:1>
| |     `-ReturnStmt 0x1c455f46e18 <line:162:3, col:38>
| |       `-CallExpr 0x1c455f46de0 <col:10, col:38> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f46d58 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'distance_impl' 0x1c455f2bb28
| |         |-DeclRefExpr 0x1c455f46da0 <col:34> 'T' lvalue ParmVar 0x1c455f46998 'X' 'T'
| |         `-DeclRefExpr 0x1c455f46dc0 <col:37> 'T' lvalue ParmVar 0x1c455f46a18 'Y' 'T'
| |-FunctionTemplateDecl 0x1c455f48110 <line:165:1, line:170:1> line:167:19 distance
| | |-NonTypeTemplateParmDecl 0x1c455f46e58 <line:165:11, col:15> col:15 referenced 'int' depth 0 index 0 N
| | `-FunctionDecl 0x1c455f48068 <line:167:1, line:170:1> line:167:19 distance 'const half (__detail::HLSL_FIXED_VECTOR<half, N>, __detail::HLSL_FIXED_VECTOR<half, N>)' inline
| |   |-ParmVarDecl 0x1c455f47778 <col:28, col:65> col:65 referenced X '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |   |-ParmVarDecl 0x1c455f47f10 <line:168:28, col:65> col:65 referenced Y '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |   `-CompoundStmt 0x1c455f482f8 <col:68, line:170:1>
| |     `-ReturnStmt 0x1c455f482e8 <line:169:3, col:42>
| |       `-CallExpr 0x1c455f482b0 <col:10, col:42> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f48228 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'distance_vec_impl' 0x1c455f2c9f0
| |         |-DeclRefExpr 0x1c455f48270 <col:38> '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>' lvalue ParmVar 0x1c455f47778 'X' '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |         `-DeclRefExpr 0x1c455f48290 <col:41> '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>' lvalue ParmVar 0x1c455f47f10 'Y' '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |-FunctionTemplateDecl 0x1c455f453e0 <line:172:1, line:176:1> line:173:20 distance
| | |-NonTypeTemplateParmDecl 0x1c455f48328 <line:172:11, col:15> col:15 referenced 'int' depth 0 index 0 N
| | `-FunctionDecl 0x1c455f45338 <line:173:1, line:176:1> line:173:20 distance 'const float (__detail::HLSL_FIXED_VECTOR<float, N>, __detail::HLSL_FIXED_VECTOR<float, N>)' inline
| |   |-ParmVarDecl 0x1c455f44a48 <col:29, col:67> col:67 referenced X '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |   |-ParmVarDecl 0x1c455f451e0 <line:174:29, col:67> col:67 referenced Y '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |   `-CompoundStmt 0x1c455f455c8 <col:70, line:176:1>
| |     `-ReturnStmt 0x1c455f455b8 <line:175:3, col:42>
| |       `-CallExpr 0x1c455f45580 <col:10, col:42> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f454f8 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'distance_vec_impl' 0x1c455f2c9f0
| |         |-DeclRefExpr 0x1c455f45540 <col:38> '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>' lvalue ParmVar 0x1c455f44a48 'X' '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |         `-DeclRefExpr 0x1c455f45560 <col:41> '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>' lvalue ParmVar 0x1c455f451e0 'Y' '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |-FunctionDecl 0x1c455f45898 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_alias_intrinsics.h:22:3, C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsics.h:191:1> line:189:20 dot2add 'const float (half2, half2, float)' inline
| | |-ParmVarDecl 0x1c455f45600 <col:28, col:34> col:34 used A 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455f45680 <col:37, col:43> col:43 used B 'half2':'vector<half, 2>'
| | |-ParmVarDecl 0x1c455f45708 <col:46, col:52> col:52 used C 'float'
| | |-CompoundStmt 0x1c455f45c00 <col:55, line:191:1>
| | | `-ReturnStmt 0x1c455f45bf0 <line:190:3, col:40>
| | |   `-CallExpr 0x1c455f45b68 <col:10, col:40> 'float'
| | |     |-ImplicitCastExpr 0x1c455f45b50 <col:10, col:20> 'float (*)(half2, half2, float)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x1c455f45a58 <col:10, col:20> 'float (half2, half2, float)' lvalue Function 0x1c455f336d8 'dot2add_impl' 'float (half2, half2, float)'
| | |     |   `-NestedNameSpecifier Namespace 0x1c455f2f788 '__detail'
| | |     |-ImplicitCastExpr 0x1c455f45ba8 <col:33> 'half2':'vector<half, 2>' <LValueToRValue>
| | |     | `-DeclRefExpr 0x1c455f45a88 <col:33> 'half2':'vector<half, 2>' lvalue ParmVar 0x1c455f45600 'A' 'half2':'vector<half, 2>'
| | |     |-ImplicitCastExpr 0x1c455f45bc0 <col:36> 'half2':'vector<half, 2>' <LValueToRValue>
| | |     | `-DeclRefExpr 0x1c455f45aa8 <col:36> 'half2':'vector<half, 2>' lvalue ParmVar 0x1c455f45680 'B' 'half2':'vector<half, 2>'
| | |     `-ImplicitCastExpr 0x1c455f45bd8 <col:39> 'float' <LValueToRValue>
| | |       `-DeclRefExpr 0x1c455f45ac8 <col:39> 'float' lvalue ParmVar 0x1c455f45708 'C' 'float'
| | `-AvailabilityAttr 0x1c455f45958 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_alias_intrinsics.h:22:18, col:61> shadermodel 6.4 0 0 "" "" 0
| |-FunctionDecl 0x1c455f45e00 <C:\llvm-project2\build\x64-Debug\lib\clang\22\include\hlsl/hlsl_intrinsics.h:205:1, line:207:1> line:205:20 dst 'const half4 (half4, half4)' inline
| | |-ParmVarDecl 0x1c455f45c28 <col:24, col:30> col:30 used Src0 'half4':'vector<half, 4>'
| | |-ParmVarDecl 0x1c455f45ca8 <col:36, col:42> col:42 used Src1 'half4':'vector<half, 4>'
| | `-CompoundStmt 0x1c455f407b0 <col:48, line:207:1>
| |   `-ReturnStmt 0x1c455f407a0 <line:206:3, col:39>
| |     `-CallExpr 0x1c455f40738 <col:10, col:39> 'vector<half, 4>'
| |       |-ImplicitCastExpr 0x1c455f40720 <col:10, col:20> 'vector<half, 4> (*)(vector<half, 4>, vector<half, 4>)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x1c455f40330 <col:10, col:20> 'vector<half, 4> (vector<half, 4>, vector<half, 4>)' lvalue Function 0x1c455f40210 'dst_impl' 'vector<half, 4> (vector<half, 4>, vector<half, 4>)' (FunctionTemplate 0x1c455f2b4a0 'dst_impl')
| |       |   `-NestedNameSpecifier Namespace 0x1c455f2f788 '__detail'
| |       |-ImplicitCastExpr 0x1c455f40770 <col:29> 'half4':'vector<half, 4>' <LValueToRValue>
| |       | `-DeclRefExpr 0x1c455f45f38 <col:29> 'half4':'vector<half, 4>' lvalue ParmVar 0x1c455f45c28 'Src0' 'half4':'vector<half, 4>'
| |       `-ImplicitCastExpr 0x1c455f40788 <col:35> 'half4':'vector<half, 4>' <LValueToRValue>
| |         `-DeclRefExpr 0x1c455f45f58 <col:35> 'half4':'vector<half, 4>' lvalue ParmVar 0x1c455f45ca8 'Src1' 'half4':'vector<half, 4>'
| |-FunctionDecl 0x1c455f409b0 <line:209:1, line:211:1> line:209:21 dst 'const float4 (float4, float4)' inline
| | |-ParmVarDecl 0x1c455f407d8 <col:25, col:32> col:32 used Src0 'float4':'vector<float, 4>'
| | |-ParmVarDecl 0x1c455f40858 <col:38, col:45> col:45 used Src1 'float4':'vector<float, 4>'
| | `-CompoundStmt 0x1c455f41710 <col:51, line:211:1>
| |   `-ReturnStmt 0x1c455f41700 <line:210:3, col:39>
| |     `-CallExpr 0x1c455f41698 <col:10, col:39> 'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f41680 <col:10, col:20> 'vector<float, 4> (*)(vector<float, 4>, vector<float, 4>)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x1c455f41308 <col:10, col:20> 'vector<float, 4> (vector<float, 4>, vector<float, 4>)' lvalue Function 0x1c455f411e8 'dst_impl' 'vector<float, 4> (vector<float, 4>, vector<float, 4>)' (FunctionTemplate 0x1c455f2b4a0 'dst_impl')
| |       |   `-NestedNameSpecifier Namespace 0x1c455f2f788 '__detail'
| |       |-ImplicitCastExpr 0x1c455f416d0 <col:29> 'float4':'vector<float, 4>' <LValueToRValue>
| |       | `-DeclRefExpr 0x1c455f40af8 <col:29> 'float4':'vector<float, 4>' lvalue ParmVar 0x1c455f407d8 'Src0' 'float4':'vector<float, 4>'
| |       `-ImplicitCastExpr 0x1c455f416e8 <col:35> 'float4':'vector<float, 4>' <LValueToRValue>
| |         `-DeclRefExpr 0x1c455f40b18 <col:35> 'float4':'vector<float, 4>' lvalue ParmVar 0x1c455f40858 'Src1' 'float4':'vector<float, 4>'
| |-FunctionDecl 0x1c455f41910 <line:213:1, line:215:1> line:213:22 dst 'const double4 (double4, double4)' inline
| | |-ParmVarDecl 0x1c455f41738 <col:26, col:34> col:34 used Src0 'double4':'vector<double, 4>'
| | |-ParmVarDecl 0x1c455f417b8 <col:40, col:48> col:48 used Src1 'double4':'vector<double, 4>'
| | `-CompoundStmt 0x1c455f428c0 <col:54, line:215:1>
| |   `-ReturnStmt 0x1c455f428b0 <line:214:3, col:39>
| |     `-CallExpr 0x1c455f42848 <col:10, col:39> 'vector<double, 4>'
| |       |-ImplicitCastExpr 0x1c455f42830 <col:10, col:20> 'vector<double, 4> (*)(vector<double, 4>, vector<double, 4>)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x1c455f42488 <col:10, col:20> 'vector<double, 4> (vector<double, 4>, vector<double, 4>)' lvalue Function 0x1c455f42148 'dst_impl' 'vector<double, 4> (vector<double, 4>, vector<double, 4>)' (FunctionTemplate 0x1c455f2b4a0 'dst_impl')
| |       |   `-NestedNameSpecifier Namespace 0x1c455f2f788 '__detail'
| |       |-ImplicitCastExpr 0x1c455f42880 <col:29> 'double4':'vector<double, 4>' <LValueToRValue>
| |       | `-DeclRefExpr 0x1c455f41a58 <col:29> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455f41738 'Src0' 'double4':'vector<double, 4>'
| |       `-ImplicitCastExpr 0x1c455f42898 <col:35> 'double4':'vector<double, 4>' <LValueToRValue>
| |         `-DeclRefExpr 0x1c455f41a78 <col:35> 'double4':'vector<double, 4>' lvalue ParmVar 0x1c455f417b8 'Src1' 'double4':'vector<double, 4>'
| |-FunctionTemplateDecl 0x1c455f43280 <line:232:1, line:238:1> line:236:39 faceforward
| | |-TemplateTypeParmDecl 0x1c455f428d8 <line:232:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f431d8 <line:234:1, line:238:1> line:236:39 faceforward 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<half, T>::value, T> (T, T, T)' inline
| |   |-ParmVarDecl 0x1c455f42f28 <col:51, col:53> col:53 referenced N 'T'
| |   |-ParmVarDecl 0x1c455f42fa8 <col:56, col:58> col:58 referenced I 'T'
| |   |-ParmVarDecl 0x1c455f43028 <col:61, col:63> col:63 referenced Ng 'T'
| |   `-CompoundStmt 0x1c455f43488 <col:67, line:238:1>
| |     `-ReturnStmt 0x1c455f43478 <line:237:3, col:45>
| |       `-CallExpr 0x1c455f43438 <col:10, col:45> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f43390 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'faceforward_impl' 0x1c455f3e0a8
| |         |-DeclRefExpr 0x1c455f433d8 <col:37> 'T' lvalue ParmVar 0x1c455f42f28 'N' 'T'
| |         |-DeclRefExpr 0x1c455f433f8 <col:40> 'T' lvalue ParmVar 0x1c455f42fa8 'I' 'T'
| |         `-DeclRefExpr 0x1c455f43418 <col:43> 'T' lvalue ParmVar 0x1c455f43028 'Ng' 'T'
| |-FunctionTemplateDecl 0x1c455f43e40 <line:240:1, line:245:1> line:243:1 faceforward
| | |-TemplateTypeParmDecl 0x1c455f434a0 <line:240:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f43d98 <line:241:1, line:245:1> line:243:1 faceforward 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<float, T>::value, T> (T, T, T)' inline
| |   |-ParmVarDecl 0x1c455f43ae8 <col:13, col:15> col:15 referenced N 'T'
| |   |-ParmVarDecl 0x1c455f43b68 <col:18, col:20> col:20 referenced I 'T'
| |   |-ParmVarDecl 0x1c455f43be8 <col:23, col:25> col:25 referenced Ng 'T'
| |   `-CompoundStmt 0x1c455f44058 <col:29, line:245:1>
| |     `-ReturnStmt 0x1c455f44048 <line:244:3, col:45>
| |       `-CallExpr 0x1c455f44008 <col:10, col:45> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f43f60 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'faceforward_impl' 0x1c455f3e0a8
| |         |-DeclRefExpr 0x1c455f43fa8 <col:37> 'T' lvalue ParmVar 0x1c455f43ae8 'N' 'T'
| |         |-DeclRefExpr 0x1c455f43fc8 <col:40> 'T' lvalue ParmVar 0x1c455f43b68 'I' 'T'
| |         `-DeclRefExpr 0x1c455f43fe8 <col:43> 'T' lvalue ParmVar 0x1c455f43be8 'Ng' 'T'
| |-FunctionTemplateDecl 0x1c455f4a6f0 <line:247:1, line:254:1> line:249:51 faceforward
| | |-NonTypeTemplateParmDecl 0x1c455f44088 <line:247:11, col:15> col:15 referenced 'int' depth 0 index 0 L
| | `-FunctionDecl 0x1c455f4a648 <line:249:1, line:254:1> line:249:51 faceforward 'const __detail::HLSL_FIXED_VECTOR<half, L> (__detail::HLSL_FIXED_VECTOR<half, L>, __detail::HLSL_FIXED_VECTOR<half, L>, __detail::HLSL_FIXED_VECTOR<half, L>)' inline
| |   |-ParmVarDecl 0x1c455f49568 <line:250:5, col:42> col:42 referenced N '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |   |-ParmVarDecl 0x1c455f49d00 <line:251:5, col:42> col:42 referenced I '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |   |-ParmVarDecl 0x1c455f4a490 <line:252:5, col:42> col:42 referenced Ng '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |   `-CompoundStmt 0x1c455f4a908 <col:46, line:254:1>
| |     `-ReturnStmt 0x1c455f4a8f8 <line:253:3, col:45>
| |       `-CallExpr 0x1c455f4a8b8 <col:10, col:45> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f4a810 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'faceforward_impl' 0x1c455f3e0a8
| |         |-DeclRefExpr 0x1c455f4a858 <col:37> '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>' lvalue ParmVar 0x1c455f49568 'N' '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |         |-DeclRefExpr 0x1c455f4a878 <col:40> '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>' lvalue ParmVar 0x1c455f49d00 'I' '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |         `-DeclRefExpr 0x1c455f4a898 <col:43> '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>' lvalue ParmVar 0x1c455f4a490 'Ng' '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |-FunctionTemplateDecl 0x1c455f531b0 <line:256:1, line:262:1> line:258:1 faceforward
| | |-NonTypeTemplateParmDecl 0x1c455f4a938 <line:256:11, col:15> col:15 referenced 'int' depth 0 index 0 L
| | `-FunctionDecl 0x1c455f53108 <line:257:1, line:262:1> line:258:1 faceforward 'const __detail::HLSL_FIXED_VECTOR<float, L> (__detail::HLSL_FIXED_VECTOR<float, L>, __detail::HLSL_FIXED_VECTOR<float, L>, __detail::HLSL_FIXED_VECTOR<float, L>)' inline
| |   |-ParmVarDecl 0x1c455f52028 <col:13, col:51> col:51 referenced N '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |   |-ParmVarDecl 0x1c455f527c0 <line:259:13, col:51> col:51 referenced I '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |   |-ParmVarDecl 0x1c455f52f50 <line:260:13, col:51> col:51 referenced Ng '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |   `-CompoundStmt 0x1c455f4ada0 <col:55, line:262:1>
| |     `-ReturnStmt 0x1c455f4ad90 <line:261:3, col:45>
| |       `-CallExpr 0x1c455f4ad50 <col:10, col:45> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f4aca8 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'faceforward_impl' 0x1c455f3e0a8
| |         |-DeclRefExpr 0x1c455f4acf0 <col:37> '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>' lvalue ParmVar 0x1c455f52028 'N' '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |         |-DeclRefExpr 0x1c455f4ad10 <col:40> '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>' lvalue ParmVar 0x1c455f527c0 'I' '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |         `-DeclRefExpr 0x1c455f4ad30 <col:43> '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>' lvalue ParmVar 0x1c455f52f50 'Ng' '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |-FunctionTemplateDecl 0x1c455f4b670 <line:276:1, line:282:1> line:280:39 fmod
| | |-TemplateTypeParmDecl 0x1c455f4adb8 <line:276:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f4b5c8 <line:278:1, line:282:1> line:280:39 fmod 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<half, T>::value, T> (T, T)' inline
| |   |-ParmVarDecl 0x1c455f4b408 <col:44, col:46> col:46 referenced X 'T'
| |   |-ParmVarDecl 0x1c455f4b488 <col:49, col:51> col:51 referenced Y 'T'
| |   `-CompoundStmt 0x1c455f4b848 <col:54, line:282:1>
| |     `-ReturnStmt 0x1c455f4b838 <line:281:3, col:34>
| |       `-CallExpr 0x1c455f4b800 <col:10, col:34> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f4b778 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'fmod_impl' 0x1c455f2dc38
| |         |-DeclRefExpr 0x1c455f4b7c0 <col:30> 'T' lvalue ParmVar 0x1c455f4b408 'X' 'T'
| |         `-DeclRefExpr 0x1c455f4b7e0 <col:33> 'T' lvalue ParmVar 0x1c455f4b488 'Y' 'T'
| |-FunctionTemplateDecl 0x1c455f4c110 <line:284:1, line:289:1> line:287:1 fmod
| | |-TemplateTypeParmDecl 0x1c455f4b860 <line:284:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f4c068 <line:285:1, line:289:1> line:287:1 fmod 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<float, T>::value, T> (T, T)' inline
| |   |-ParmVarDecl 0x1c455f4bea8 <col:6, col:8> col:8 referenced X 'T'
| |   |-ParmVarDecl 0x1c455f4bf28 <col:11, col:13> col:13 referenced Y 'T'
| |   `-CompoundStmt 0x1c455f4c2f8 <col:16, line:289:1>
| |     `-ReturnStmt 0x1c455f4c2e8 <line:288:3, col:34>
| |       `-CallExpr 0x1c455f4c2b0 <col:10, col:34> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f4c228 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'fmod_impl' 0x1c455f2dc38
| |         |-DeclRefExpr 0x1c455f4c270 <col:30> 'T' lvalue ParmVar 0x1c455f4bea8 'X' 'T'
| |         `-DeclRefExpr 0x1c455f4c290 <col:33> 'T' lvalue ParmVar 0x1c455f4bf28 'Y' 'T'
| |-FunctionTemplateDecl 0x1c455f4dd90 <line:291:1, line:297:1> line:293:51 fmod
| | |-NonTypeTemplateParmDecl 0x1c455f4c328 <line:291:11, col:15> col:15 referenced 'int' depth 0 index 0 N
| | `-FunctionDecl 0x1c455f4dce8 <line:293:1, line:297:1> line:293:51 fmod 'const __detail::HLSL_FIXED_VECTOR<half, N> (__detail::HLSL_FIXED_VECTOR<half, N>, __detail::HLSL_FIXED_VECTOR<half, N>)' inline
| |   |-ParmVarDecl 0x1c455f4d3d8 <line:294:5, col:42> col:42 referenced X '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |   |-ParmVarDecl 0x1c455f4db70 <line:295:5, col:42> col:42 referenced Y '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |   `-CompoundStmt 0x1c455f4df78 <col:45, line:297:1>
| |     `-ReturnStmt 0x1c455f4df68 <line:296:3, col:38>
| |       `-CallExpr 0x1c455f4df30 <col:10, col:38> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f4dea8 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'fmod_vec_impl' 0x1c455f2ed50
| |         |-DeclRefExpr 0x1c455f4def0 <col:34> '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>' lvalue ParmVar 0x1c455f4d3d8 'X' '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |         `-DeclRefExpr 0x1c455f4df10 <col:37> '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>' lvalue ParmVar 0x1c455f4db70 'Y' '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |-FunctionTemplateDecl 0x1c455f53e50 <line:299:1, line:304:1> line:301:1 fmod
| | |-NonTypeTemplateParmDecl 0x1c455f4dfa8 <line:299:11, col:15> col:15 referenced 'int' depth 0 index 0 N
| | `-FunctionDecl 0x1c455f53da8 <line:300:1, line:304:1> line:301:1 fmod 'const __detail::HLSL_FIXED_VECTOR<float, N> (__detail::HLSL_FIXED_VECTOR<float, N>, __detail::HLSL_FIXED_VECTOR<float, N>)' inline
| |   |-ParmVarDecl 0x1c455f534a0 <col:6, col:44> col:44 referenced X '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |   |-ParmVarDecl 0x1c455f53c30 <line:302:6, col:44> col:44 referenced Y '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |   `-CompoundStmt 0x1c455f54038 <col:47, line:304:1>
| |     `-ReturnStmt 0x1c455f54028 <line:303:3, col:38>
| |       `-CallExpr 0x1c455f53ff0 <col:10, col:38> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f53f68 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'fmod_vec_impl' 0x1c455f2ed50
| |         |-DeclRefExpr 0x1c455f53fb0 <col:34> '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>' lvalue ParmVar 0x1c455f534a0 'X' '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |         `-DeclRefExpr 0x1c455f53fd0 <col:37> '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>' lvalue ParmVar 0x1c455f53c30 'Y' '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |-FunctionTemplateDecl 0x1c455f54900 <line:318:1, line:324:1> line:322:39 ldexp
| | |-TemplateTypeParmDecl 0x1c455f54050 <line:318:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f54858 <line:320:1, line:324:1> line:322:39 ldexp 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<half, T>::value, T> (T, T)' inline
| |   |-ParmVarDecl 0x1c455f54698 <col:45, col:47> col:47 referenced X 'T'
| |   |-ParmVarDecl 0x1c455f54718 <col:50, col:52> col:52 referenced Exp 'T'
| |   `-CompoundStmt 0x1c455f54ad8 <col:57, line:324:1>
| |     `-ReturnStmt 0x1c455f54ac8 <line:323:3, col:37>
| |       `-CallExpr 0x1c455f54a90 <col:10, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f54a08 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'ldexp_impl' 0x1c455f3e778
| |         |-DeclRefExpr 0x1c455f54a50 <col:31> 'T' lvalue ParmVar 0x1c455f54698 'X' 'T'
| |         `-DeclRefExpr 0x1c455f54a70 <col:34> 'T' lvalue ParmVar 0x1c455f54718 'Exp' 'T'
| |-FunctionTemplateDecl 0x1c455f553a0 <line:326:1, line:331:1> line:329:1 ldexp
| | |-TemplateTypeParmDecl 0x1c455f54af0 <line:326:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f552f8 <line:327:1, line:331:1> line:329:1 ldexp 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<float, T>::value, T> (T, T)' inline
| |   |-ParmVarDecl 0x1c455f55138 <col:7, col:9> col:9 referenced X 'T'
| |   |-ParmVarDecl 0x1c455f551b8 <col:12, col:14> col:14 referenced Exp 'T'
| |   `-CompoundStmt 0x1c455f557a0 <col:19, line:331:1>
| |     `-ReturnStmt 0x1c455f55790 <line:330:3, col:37>
| |       `-CallExpr 0x1c455f55758 <col:10, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f556d0 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'ldexp_impl' 0x1c455f3e778
| |         |-DeclRefExpr 0x1c455f55718 <col:31> 'T' lvalue ParmVar 0x1c455f55138 'X' 'T'
| |         `-DeclRefExpr 0x1c455f55738 <col:34> 'T' lvalue ParmVar 0x1c455f551b8 'Exp' 'T'
| |-FunctionTemplateDecl 0x1c455f56fd0 <line:333:1, line:339:1> line:335:51 ldexp
| | |-NonTypeTemplateParmDecl 0x1c455f557d0 <line:333:11, col:15> col:15 referenced 'int' depth 0 index 0 N
| | `-FunctionDecl 0x1c455f56f28 <line:335:1, line:339:1> line:335:51 ldexp 'const __detail::HLSL_FIXED_VECTOR<half, N> (__detail::HLSL_FIXED_VECTOR<half, N>, __detail::HLSL_FIXED_VECTOR<half, N>)' inline
| |   |-ParmVarDecl 0x1c455f56658 <line:336:5, col:42> col:42 referenced X '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |   |-ParmVarDecl 0x1c455f56df0 <line:337:5, col:42> col:42 referenced Exp '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |   `-CompoundStmt 0x1c455f571b8 <col:47, line:339:1>
| |     `-ReturnStmt 0x1c455f571a8 <line:338:3, col:37>
| |       `-CallExpr 0x1c455f57170 <col:10, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f570e8 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'ldexp_impl' 0x1c455f3e778
| |         |-DeclRefExpr 0x1c455f57130 <col:31> '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>' lvalue ParmVar 0x1c455f56658 'X' '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |         `-DeclRefExpr 0x1c455f57150 <col:34> '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>' lvalue ParmVar 0x1c455f56df0 'Exp' '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |-FunctionTemplateDecl 0x1c455f503d0 <line:341:1, line:346:1> line:343:1 ldexp
| | |-NonTypeTemplateParmDecl 0x1c455f571e8 <line:341:11, col:15> col:15 referenced 'int' depth 0 index 0 N
| | `-FunctionDecl 0x1c455f50328 <line:342:1, line:346:1> line:343:1 ldexp 'const __detail::HLSL_FIXED_VECTOR<float, N> (__detail::HLSL_FIXED_VECTOR<float, N>, __detail::HLSL_FIXED_VECTOR<float, N>)' inline
| |   |-ParmVarDecl 0x1c455f4fa58 <col:7, col:45> col:45 referenced X '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |   |-ParmVarDecl 0x1c455f501f0 <line:344:7, col:45> col:45 referenced Exp '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |   `-CompoundStmt 0x1c455f505b8 <col:50, line:346:1>
| |     `-ReturnStmt 0x1c455f505a8 <line:345:3, col:37>
| |       `-CallExpr 0x1c455f50570 <col:10, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f504e8 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'ldexp_impl' 0x1c455f3e778
| |         |-DeclRefExpr 0x1c455f50530 <col:31> '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>' lvalue ParmVar 0x1c455f4fa58 'X' '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |         `-DeclRefExpr 0x1c455f50550 <col:34> '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>' lvalue ParmVar 0x1c455f501f0 'Exp' '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |-FunctionTemplateDecl 0x1c455f50e10 <line:358:1, line:364:1> line:362:39 length
| | |-TemplateTypeParmDecl 0x1c455f505d0 <line:358:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f50d68 <line:360:1, line:364:1> line:362:39 length 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<half, T>::value, T> (T)' inline
| |   |-ParmVarDecl 0x1c455f50c18 <col:46, col:48> col:48 referenced X 'T'
| |   `-CompoundStmt 0x1c455f50fb8 <col:51, line:364:1>
| |     `-ReturnStmt 0x1c455f50fa8 <line:363:3, col:33>
| |       `-CallExpr 0x1c455f50f78 <col:10, col:33> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f50f10 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'length_impl' 0x1c455f2fd08
| |         `-DeclRefExpr 0x1c455f50f58 <col:32> 'T' lvalue ParmVar 0x1c455f50c18 'X' 'T'
| |-FunctionTemplateDecl 0x1c455f58050 <line:366:1, line:371:1> line:369:1 length
| | |-TemplateTypeParmDecl 0x1c455f50fd0 <line:366:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f57fa8 <line:367:1, line:371:1> line:369:1 length 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<float, T>::value, T> (T)' inline
| |   |-ParmVarDecl 0x1c455f57e58 <col:8, col:10> col:10 referenced X 'T'
| |   `-CompoundStmt 0x1c455f58208 <col:13, line:371:1>
| |     `-ReturnStmt 0x1c455f581f8 <line:370:3, col:33>
| |       `-CallExpr 0x1c455f581c8 <col:10, col:33> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f58160 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'length_impl' 0x1c455f2fd08
| |         `-DeclRefExpr 0x1c455f581a8 <col:32> 'T' lvalue ParmVar 0x1c455f57e58 'X' 'T'
| |-FunctionTemplateDecl 0x1c455f58bb0 <line:373:1, line:377:1> line:375:19 length
| | |-NonTypeTemplateParmDecl 0x1c455f58238 <line:373:11, col:15> col:15 referenced 'int' depth 0 index 0 N
| | `-FunctionDecl 0x1c455f58b08 <line:375:1, line:377:1> line:375:19 length 'const half (__detail::HLSL_FIXED_VECTOR<half, N>)' inline
| |   |-ParmVarDecl 0x1c455f589d8 <col:26, col:63> col:63 referenced X '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |   `-CompoundStmt 0x1c455f58d68 <col:66, line:377:1>
| |     `-ReturnStmt 0x1c455f58d58 <line:376:3, col:37>
| |       `-CallExpr 0x1c455f58d28 <col:10, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f58cc0 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'length_vec_impl' 0x1c455f30bc0
| |         `-DeclRefExpr 0x1c455f58d08 <col:36> '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>' lvalue ParmVar 0x1c455f589d8 'X' '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |-FunctionTemplateDecl 0x1c455f59710 <line:379:1, line:382:1> line:380:20 length
| | |-NonTypeTemplateParmDecl 0x1c455f58d98 <line:379:11, col:15> col:15 referenced 'int' depth 0 index 0 N
| | `-FunctionDecl 0x1c455f59668 <line:380:1, line:382:1> line:380:20 length 'const float (__detail::HLSL_FIXED_VECTOR<float, N>)' inline
| |   |-ParmVarDecl 0x1c455f59538 <col:27, col:65> col:65 referenced X '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |   `-CompoundStmt 0x1c455f59ae0 <col:68, line:382:1>
| |     `-ReturnStmt 0x1c455f59ad0 <line:381:3, col:37>
| |       `-CallExpr 0x1c455f59888 <col:10, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f59820 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'length_vec_impl' 0x1c455f30bc0
| |         `-DeclRefExpr 0x1c455f59868 <col:36> '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>' lvalue ParmVar 0x1c455f59538 'X' '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
| |-FunctionDecl 0x1c455f59db0 <line:400:1, line:402:1> line:400:20 lit 'const half4 (half, half, half)' inline
| | |-ParmVarDecl 0x1c455f59b10 <col:24, col:29> col:29 used NDotL 'half'
| | |-ParmVarDecl 0x1c455f59b98 <col:36, col:41> col:41 used NDotH 'half'
| | |-ParmVarDecl 0x1c455f59c20 <col:48, col:53> col:53 used M 'half'
| | `-CompoundStmt 0x1c455f73b20 <col:56, line:402:1>
| |   `-ReturnStmt 0x1c455f73b10 <line:401:3, col:44>
| |     `-CallExpr 0x1c455f73a88 <col:10, col:44> 'vector<half, 4>'
| |       |-ImplicitCastExpr 0x1c455f73a70 <col:10, col:20> 'vector<half, 4> (*)(half, half, half)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x1c455f5a530 <col:10, col:20> 'vector<half, 4> (half, half, half)' lvalue Function 0x1c455f5a408 'lit_impl' 'vector<half, 4> (half, half, half)' (FunctionTemplate 0x1c455f3a8b0 'lit_impl')
| |       |   `-NestedNameSpecifier Namespace 0x1c455f2f788 '__detail'
| |       |-ImplicitCastExpr 0x1c455f73ac8 <col:29> 'half' <LValueToRValue>
| |       | `-DeclRefExpr 0x1c455f59ef0 <col:29> 'half' lvalue ParmVar 0x1c455f59b10 'NDotL' 'half'
| |       |-ImplicitCastExpr 0x1c455f73ae0 <col:36> 'half' <LValueToRValue>
| |       | `-DeclRefExpr 0x1c455f59f10 <col:36> 'half' lvalue ParmVar 0x1c455f59b98 'NDotH' 'half'
| |       `-ImplicitCastExpr 0x1c455f73af8 <col:43> 'half' <LValueToRValue>
| |         `-DeclRefExpr 0x1c455f59f30 <col:43> 'half' lvalue ParmVar 0x1c455f59c20 'M' 'half'
| |-FunctionDecl 0x1c455f73df0 <line:404:1, line:406:1> line:404:21 lit 'const float4 (float, float, float)' inline
| | |-ParmVarDecl 0x1c455f73b50 <col:25, col:31> col:31 used NDotL 'float'
| | |-ParmVarDecl 0x1c455f73bd8 <col:38, col:44> col:44 used NDotH 'float'
| | |-ParmVarDecl 0x1c455f73c60 <col:51, col:57> col:57 used M 'float'
| | `-CompoundStmt 0x1c455f7ee10 <col:60, line:406:1>
| |   `-ReturnStmt 0x1c455f7ee00 <line:405:3, col:44>
| |     `-CallExpr 0x1c455f7ed78 <col:10, col:44> 'vector<float, 4>'
| |       |-ImplicitCastExpr 0x1c455f7ed60 <col:10, col:20> 'vector<float, 4> (*)(float, float, float)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x1c455f74580 <col:10, col:20> 'vector<float, 4> (float, float, float)' lvalue Function 0x1c455f74458 'lit_impl' 'vector<float, 4> (float, float, float)' (FunctionTemplate 0x1c455f3a8b0 'lit_impl')
| |       |   `-NestedNameSpecifier Namespace 0x1c455f2f788 '__detail'
| |       |-ImplicitCastExpr 0x1c455f7edb8 <col:29> 'float' <LValueToRValue>
| |       | `-DeclRefExpr 0x1c455f73f40 <col:29> 'float' lvalue ParmVar 0x1c455f73b50 'NDotL' 'float'
| |       |-ImplicitCastExpr 0x1c455f7edd0 <col:36> 'float' <LValueToRValue>
| |       | `-DeclRefExpr 0x1c455f73f60 <col:36> 'float' lvalue ParmVar 0x1c455f73bd8 'NDotH' 'float'
| |       `-ImplicitCastExpr 0x1c455f7ede8 <col:43> 'float' <LValueToRValue>
| |         `-DeclRefExpr 0x1c455f73f80 <col:43> 'float' lvalue ParmVar 0x1c455f73c60 'M' 'float'
| |-FunctionDecl 0x1c455f7eee8 <line:421:1, line:423:1> line:421:16 constexpr D3DCOLORtoUBYTE4 'int4 (float4)' implicit-inline
| | |-ParmVarDecl 0x1c455f7ee38 <col:33, col:40> col:40 used V 'float4':'vector<float, 4>'
| | `-CompoundStmt 0x1c455f7f0f0 <col:43, line:423:1>
| |   `-ReturnStmt 0x1c455f7f0e0 <line:422:3, col:46>
| |     `-CallExpr 0x1c455f7f098 <col:10, col:46> 'int4':'vector<int, 4>'
| |       |-ImplicitCastExpr 0x1c455f7f080 <col:10, col:20> 'int4 (*)(float4)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x1c455f7efd0 <col:10, col:20> 'int4 (float4)' lvalue Function 0x1c455f2f8b8 'd3d_color_to_ubyte4_impl' 'int4 (float4)'
| |       |   `-NestedNameSpecifier Namespace 0x1c455f2f788 '__detail'
| |       `-ImplicitCastExpr 0x1c455f7f0c8 <col:45> 'float4':'vector<float, 4>' <LValueToRValue>
| |         `-DeclRefExpr 0x1c455f7f000 <col:45> 'float4':'vector<float, 4>' lvalue ParmVar 0x1c455f7ee38 'V' 'float4':'vector<float, 4>'
| |-FunctionTemplateDecl 0x1c455f7f9c0 <line:448:1, line:454:1> line:452:39 reflect
| | |-TemplateTypeParmDecl 0x1c455f7f108 <line:448:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f7f918 <line:450:1, line:454:1> line:452:39 reflect 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<half, T>::value, T> (T, T)' inline
| |   |-ParmVarDecl 0x1c455f7f758 <col:47, col:49> col:49 referenced I 'T'
| |   |-ParmVarDecl 0x1c455f7f7d8 <col:52, col:54> col:54 referenced N 'T'
| |   `-CompoundStmt 0x1c455f77570 <col:57, line:454:1>
| |     `-ReturnStmt 0x1c455f7fb88 <line:453:3, col:37>
| |       `-CallExpr 0x1c455f7fb50 <col:10, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f7fac8 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'reflect_impl' 0x1c455f34088
| |         |-DeclRefExpr 0x1c455f7fb10 <col:33> 'T' lvalue ParmVar 0x1c455f7f758 'I' 'T'
| |         `-DeclRefExpr 0x1c455f7fb30 <col:36> 'T' lvalue ParmVar 0x1c455f7f7d8 'N' 'T'
| |-FunctionTemplateDecl 0x1c455f77e40 <line:456:1, line:461:1> line:459:1 reflect
| | |-TemplateTypeParmDecl 0x1c455f77588 <line:456:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f77d98 <line:457:1, line:461:1> line:459:1 reflect 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<float, T>::value, T> (T, T)' inline
| |   |-ParmVarDecl 0x1c455f77bd8 <col:9, col:11> col:11 referenced I 'T'
| |   |-ParmVarDecl 0x1c455f77c58 <col:14, col:16> col:16 referenced N 'T'
| |   `-CompoundStmt 0x1c455f78028 <col:19, line:461:1>
| |     `-ReturnStmt 0x1c455f78018 <line:460:3, col:37>
| |       `-CallExpr 0x1c455f77fe0 <col:10, col:37> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f77f58 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'reflect_impl' 0x1c455f34088
| |         |-DeclRefExpr 0x1c455f77fa0 <col:33> 'T' lvalue ParmVar 0x1c455f77bd8 'I' 'T'
| |         `-DeclRefExpr 0x1c455f77fc0 <col:36> 'T' lvalue ParmVar 0x1c455f77c58 'N' 'T'
| |-FunctionTemplateDecl 0x1c455f7bc90 <line:463:1, line:469:1> line:465:51 reflect
| | |-NonTypeTemplateParmDecl 0x1c455f78058 <line:463:11, col:15> col:15 referenced 'int' depth 0 index 0 L
| | `-FunctionDecl 0x1c455f7bbe8 <line:465:1, line:469:1> line:465:51 reflect 'const __detail::HLSL_FIXED_VECTOR<half, L> (__detail::HLSL_FIXED_VECTOR<half, L>, __detail::HLSL_FIXED_VECTOR<half, L>)' inline
| |   |-ParmVarDecl 0x1c455f78ee8 <line:466:5, col:42> col:42 referenced I '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |   |-ParmVarDecl 0x1c455f7bab0 <line:467:5, col:42> col:42 referenced N '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |   `-CompoundStmt 0x1c455f7be78 <col:45, line:469:1>
| |     `-ReturnStmt 0x1c455f7be68 <line:468:3, col:41>
| |       `-CallExpr 0x1c455f7be30 <col:10, col:41> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f7bda8 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'reflect_vec_impl' 0x1c455f34ba0
| |         |-DeclRefExpr 0x1c455f7bdf0 <col:37> '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>' lvalue ParmVar 0x1c455f78ee8 'I' '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |         `-DeclRefExpr 0x1c455f7be10 <col:40> '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>' lvalue ParmVar 0x1c455f7bab0 'N' '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |-FunctionTemplateDecl 0x1c455f7d6b0 <line:471:1, line:476:1> line:473:1 reflect
| | |-NonTypeTemplateParmDecl 0x1c455f7bea8 <line:471:11, col:15> col:15 referenced 'int' depth 0 index 0 L
| | `-FunctionDecl 0x1c455f7d608 <line:472:1, line:476:1> line:473:1 reflect 'const __detail::HLSL_FIXED_VECTOR<float, L> (__detail::HLSL_FIXED_VECTOR<float, L>, __detail::HLSL_FIXED_VECTOR<float, L>)' inline
| |   |-ParmVarDecl 0x1c455f7cd38 <col:9, col:47> col:47 referenced I '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |   |-ParmVarDecl 0x1c455f7d4d0 <line:474:9, col:47> col:47 referenced N '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |   `-CompoundStmt 0x1c455f7d898 <col:50, line:476:1>
| |     `-ReturnStmt 0x1c455f7d888 <line:475:3, col:41>
| |       `-CallExpr 0x1c455f7d850 <col:10, col:41> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f7d7c8 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'reflect_vec_impl' 0x1c455f34ba0
| |         |-DeclRefExpr 0x1c455f7d810 <col:37> '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>' lvalue ParmVar 0x1c455f7cd38 'I' '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |         `-DeclRefExpr 0x1c455f7d830 <col:40> '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>' lvalue ParmVar 0x1c455f7d4d0 'N' '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |-FunctionTemplateDecl 0x1c455f80650 <line:507:1, line:513:1> line:511:39 refract
| | |-TemplateTypeParmDecl 0x1c455f7d8b0 <line:507:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f805a8 <line:509:1, line:513:1> line:511:39 refract 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<half, T>::value, T> (T, T, T)' inline
| |   |-ParmVarDecl 0x1c455f80348 <col:47, col:49> col:49 referenced I 'T'
| |   |-ParmVarDecl 0x1c455f803c8 <col:52, col:54> col:54 referenced N 'T'
| |   |-ParmVarDecl 0x1c455f80448 <col:57, col:59> col:59 referenced eta 'T'
| |   `-CompoundStmt 0x1c455f80858 <col:64, line:513:1>
| |     `-ReturnStmt 0x1c455f80848 <line:512:3, col:42>
| |       `-CallExpr 0x1c455f80808 <col:10, col:42> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f80760 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'refract_impl' 0x1c455f35368
| |         |-DeclRefExpr 0x1c455f807a8 <col:33> 'T' lvalue ParmVar 0x1c455f80348 'I' 'T'
| |         |-DeclRefExpr 0x1c455f807c8 <col:36> 'T' lvalue ParmVar 0x1c455f803c8 'N' 'T'
| |         `-DeclRefExpr 0x1c455f807e8 <col:39> 'T' lvalue ParmVar 0x1c455f80448 'eta' 'T'
| |-FunctionTemplateDecl 0x1c455f811c0 <line:515:1, line:520:1> line:518:1 refract
| | |-TemplateTypeParmDecl 0x1c455f80870 <line:515:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f81118 <line:516:1, line:520:1> line:518:1 refract 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<float, T>::value, T> (T, T, T)' inline
| |   |-ParmVarDecl 0x1c455f80eb8 <col:9, col:11> col:11 referenced I 'T'
| |   |-ParmVarDecl 0x1c455f80f38 <col:14, col:16> col:16 referenced N 'T'
| |   |-ParmVarDecl 0x1c455f80fb8 <col:19, col:21> col:21 referenced eta 'T'
| |   `-CompoundStmt 0x1c455f813d8 <col:26, line:520:1>
| |     `-ReturnStmt 0x1c455f813c8 <line:519:3, col:42>
| |       `-CallExpr 0x1c455f81388 <col:10, col:42> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f812e0 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'refract_impl' 0x1c455f35368
| |         |-DeclRefExpr 0x1c455f81328 <col:33> 'T' lvalue ParmVar 0x1c455f80eb8 'I' 'T'
| |         |-DeclRefExpr 0x1c455f81348 <col:36> 'T' lvalue ParmVar 0x1c455f80f38 'N' 'T'
| |         `-DeclRefExpr 0x1c455f81368 <col:39> 'T' lvalue ParmVar 0x1c455f80fb8 'eta' 'T'
| |-FunctionTemplateDecl 0x1c455f7a6e0 <line:522:1, line:528:1> line:524:51 refract
| | |-NonTypeTemplateParmDecl 0x1c455f81408 <line:522:11, col:15> col:15 referenced 'int' depth 0 index 0 L
| | `-FunctionDecl 0x1c455f7a638 <line:524:1, line:528:1> line:524:51 refract 'const __detail::HLSL_FIXED_VECTOR<half, L> (__detail::HLSL_FIXED_VECTOR<half, L>, __detail::HLSL_FIXED_VECTOR<half, L>, half)' inline
| |   |-ParmVarDecl 0x1c455f79c68 <line:525:5, col:42> col:42 referenced I '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |   |-ParmVarDecl 0x1c455f7a400 <line:526:5, col:42> col:42 referenced N '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |   |-ParmVarDecl 0x1c455f7a488 <col:45, col:50> col:50 referenced eta 'half'
| |   `-CompoundStmt 0x1c455f7a8f8 <col:55, line:528:1>
| |     `-ReturnStmt 0x1c455f7a8e8 <line:527:3, col:42>
| |       `-CallExpr 0x1c455f7a8a8 <col:10, col:42> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f7a800 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'refract_impl' 0x1c455f35368
| |         |-DeclRefExpr 0x1c455f7a848 <col:33> '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>' lvalue ParmVar 0x1c455f79c68 'I' '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |         |-DeclRefExpr 0x1c455f7a868 <col:36> '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>' lvalue ParmVar 0x1c455f7a400 'N' '__detail::HLSL_FIXED_VECTOR<half, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), half>, L>'
| |         `-DeclRefExpr 0x1c455f7a888 <col:39> 'half' lvalue ParmVar 0x1c455f7a488 'eta' 'half'
| |-FunctionTemplateDecl 0x1c455f84c80 <line:530:1, line:535:1> line:532:1 refract
| | |-NonTypeTemplateParmDecl 0x1c455f7a928 <line:530:11, col:15> col:15 referenced 'int' depth 0 index 0 L
| | `-FunctionDecl 0x1c455f84bd8 <line:531:1, line:535:1> line:532:1 refract 'const __detail::HLSL_FIXED_VECTOR<float, L> (__detail::HLSL_FIXED_VECTOR<float, L>, __detail::HLSL_FIXED_VECTOR<float, L>, float)' inline
| |   |-ParmVarDecl 0x1c455f84208 <col:9, col:47> col:47 referenced I '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |   |-ParmVarDecl 0x1c455f849a0 <line:533:9, col:47> col:47 referenced N '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |   |-ParmVarDecl 0x1c455f84a28 <col:50, col:56> col:56 referenced eta 'float'
| |   `-CompoundStmt 0x1c455f84e98 <col:61, line:535:1>
| |     `-ReturnStmt 0x1c455f84e88 <line:534:3, col:42>
| |       `-CallExpr 0x1c455f84e48 <col:10, col:42> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f84da0 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'refract_impl' 0x1c455f35368
| |         |-DeclRefExpr 0x1c455f84de8 <col:33> '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>' lvalue ParmVar 0x1c455f84208 'I' '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |         |-DeclRefExpr 0x1c455f84e08 <col:36> '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>' lvalue ParmVar 0x1c455f849a0 'N' '__detail::HLSL_FIXED_VECTOR<float, L>':'vector<__detail::enable_if_t<(L > 1 && L <= 4), float>, L>'
| |         `-DeclRefExpr 0x1c455f84e28 <col:39> 'float' lvalue ParmVar 0x1c455f84a28 'eta' 'float'
| |-FunctionTemplateDecl 0x1c455f85800 <line:552:1, line:558:1> line:556:39 smoothstep
| | |-TemplateTypeParmDecl 0x1c455f84eb0 <line:552:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f85758 <line:554:1, line:558:1> line:556:39 smoothstep 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<half, T>::value, T> (T, T, T)' inline
| |   |-ParmVarDecl 0x1c455f854f8 <col:50, col:52> col:52 referenced Min 'T'
| |   |-ParmVarDecl 0x1c455f85578 <col:57, col:59> col:59 referenced Max 'T'
| |   |-ParmVarDecl 0x1c455f855f8 <col:64, col:66> col:66 referenced X 'T'
| |   `-CompoundStmt 0x1c455f85a08 <col:69, line:558:1>
| |     `-ReturnStmt 0x1c455f859f8 <line:557:3, col:47>
| |       `-CallExpr 0x1c455f859b8 <col:10, col:47> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f85910 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'smoothstep_impl' 0x1c455f36718
| |         |-DeclRefExpr 0x1c455f85958 <col:36> 'T' lvalue ParmVar 0x1c455f854f8 'Min' 'T'
| |         |-DeclRefExpr 0x1c455f85978 <col:41> 'T' lvalue ParmVar 0x1c455f85578 'Max' 'T'
| |         `-DeclRefExpr 0x1c455f85998 <col:46> 'T' lvalue ParmVar 0x1c455f855f8 'X' 'T'
| |-FunctionTemplateDecl 0x1c455f821d0 <line:560:1, line:565:1> line:563:1 smoothstep
| | |-TemplateTypeParmDecl 0x1c455f85a20 <line:560:11, col:20> col:20 referenced typename depth 0 index 0 T
| | `-FunctionDecl 0x1c455f82128 <line:561:1, line:565:1> line:563:1 smoothstep 'const __detail::enable_if_t<__detail::is_arithmetic<T>::Value && __detail::is_same<float, T>::value, T> (T, T, T)' inline
| |   |-ParmVarDecl 0x1c455f86068 <col:12, col:14> col:14 referenced Min 'T'
| |   |-ParmVarDecl 0x1c455f860e8 <col:19, col:21> col:21 referenced Max 'T'
| |   |-ParmVarDecl 0x1c455f81fc0 <col:26, col:28> col:28 referenced X 'T'
| |   `-CompoundStmt 0x1c455f823e8 <col:31, line:565:1>
| |     `-ReturnStmt 0x1c455f823d8 <line:564:3, col:47>
| |       `-CallExpr 0x1c455f82398 <col:10, col:47> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f822f0 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'smoothstep_impl' 0x1c455f36718
| |         |-DeclRefExpr 0x1c455f82338 <col:36> 'T' lvalue ParmVar 0x1c455f86068 'Min' 'T'
| |         |-DeclRefExpr 0x1c455f82358 <col:41> 'T' lvalue ParmVar 0x1c455f860e8 'Max' 'T'
| |         `-DeclRefExpr 0x1c455f82378 <col:46> 'T' lvalue ParmVar 0x1c455f81fc0 'X' 'T'
| |-FunctionTemplateDecl 0x1c455f8ac20 <line:567:1, line:574:1> line:569:51 smoothstep
| | |-NonTypeTemplateParmDecl 0x1c455f82418 <line:567:11, col:15> col:15 referenced 'int' depth 0 index 0 N
| | `-FunctionDecl 0x1c455f8ab78 <line:569:1, line:574:1> line:569:51 smoothstep 'const __detail::HLSL_FIXED_VECTOR<half, N> (__detail::HLSL_FIXED_VECTOR<half, N>, __detail::HLSL_FIXED_VECTOR<half, N>, __detail::HLSL_FIXED_VECTOR<half, N>)' inline
| |   |-ParmVarDecl 0x1c455f832a8 <line:570:5, col:42> col:42 referenced Min '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |   |-ParmVarDecl 0x1c455f83a40 <line:571:5, col:42> col:42 referenced Max '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |   |-ParmVarDecl 0x1c455f8aa10 <line:572:5, col:42> col:42 referenced X '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |   `-CompoundStmt 0x1c455f8ae38 <col:45, line:574:1>
| |     `-ReturnStmt 0x1c455f8ae28 <line:573:3, col:51>
| |       `-CallExpr 0x1c455f8ade8 <col:10, col:51> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x1c455f8ad40 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'smoothstep_vec_impl' 0x1c455f39be0
| |         |-DeclRefExpr 0x1c455f8ad88 <col:40> '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>' lvalue ParmVar 0x1c455f832a8 'Min' '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |         |-DeclRefExpr 0x1c455f8ada8 <col:45> '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>' lvalue ParmVar 0x1c455f83a40 'Max' '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| |         `-DeclRefExpr 0x1c455f8adc8 <col:50> '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>' lvalue ParmVar 0x1c455f8aa10 'X' '__detail::HLSL_FIXED_VECTOR<half, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), half>, N>'
| `-FunctionTemplateDecl 0x1c455f8d050 <line:576:1, line:582:1> line:578:1 smoothstep
|   |-NonTypeTemplateParmDecl 0x1c455f8ae68 <line:576:11, col:15> col:15 referenced 'int' depth 0 index 0 N
|   `-FunctionDecl 0x1c455f8cfa8 <line:577:1, line:582:1> line:578:1 smoothstep 'const __detail::HLSL_FIXED_VECTOR<float, N> (__detail::HLSL_FIXED_VECTOR<float, N>, __detail::HLSL_FIXED_VECTOR<float, N>, __detail::HLSL_FIXED_VECTOR<float, N>)' inline
|     |-ParmVarDecl 0x1c455f8bcf8 <col:12, col:50> col:50 referenced Min '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
|     |-ParmVarDecl 0x1c455f8c490 <line:579:12, col:50> col:50 referenced Max '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
|     |-ParmVarDecl 0x1c455f8ce40 <line:580:12, col:50> col:50 referenced X '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
|     `-CompoundStmt 0x1c455f8d268 <col:53, line:582:1>
|       `-ReturnStmt 0x1c455f8d258 <line:581:3, col:51>
|         `-CallExpr 0x1c455f8d218 <col:10, col:51> '<dependent type>'
|           |-UnresolvedLookupExpr 0x1c455f8d170 <col:10, col:20> '<overloaded function type>' lvalue (no ADL) = 'smoothstep_vec_impl' 0x1c455f39be0
|           |-DeclRefExpr 0x1c455f8d1b8 <col:40> '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>' lvalue ParmVar 0x1c455f8bcf8 'Min' '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
|           |-DeclRefExpr 0x1c455f8d1d8 <col:45> '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>' lvalue ParmVar 0x1c455f8c490 'Max' '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
|           `-DeclRefExpr 0x1c455f8d1f8 <col:50> '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>' lvalue ParmVar 0x1c455f8ce40 'X' '__detail::HLSL_FIXED_VECTOR<float, N>':'vector<__detail::enable_if_t<(N > 1 && N <= 4), float>, N>'
|-HLSLBufferDecl 0x1c455f8d630 <C:\llvm-project2\clang\test\AST\HLSL\resource_binding_attr.hlsl:7:1, line:9:1> line:7:9 cbuffer CB
| |-HLSLResourceClassAttr 0x1c455f8d6a8 <<invalid sloc>> Implicit CBuffer
| |-HLSLResourceBindingAttr 0x1c455f8d710 <col:14> "b3" "space2"
| |-VarDecl 0x1c455f8d798 <line:8:3, col:9> col:9 used a 'hlsl_constant float'
| `-CXXRecordDecl 0x1c455f8d818 <<invalid sloc>> <invalid sloc> implicit struct __cblayout_CB definition
|   |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
|   | |-DefaultConstructor exists trivial needs_implicit
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-PackedAttr 0x1c455f8d8e0 <<invalid sloc>> Implicit
|   `-FieldDecl 0x1c455f8d9c0 <<invalid sloc>> <invalid sloc> a 'float'
|-HLSLBufferDecl 0x1c455f8da60 <line:15:1, line:17:1> line:15:9 tbuffer TB
| |-HLSLResourceClassAttr 0x1c455f8dad8 <<invalid sloc>> Implicit SRV
| |-HLSLResourceBindingAttr 0x1c455f8db40 <col:14> "t2" "space1"
| |-VarDecl 0x1c455f8dbc8 <line:16:3, col:9> col:9 used b 'hlsl_constant float'
| `-CXXRecordDecl 0x1c455f8dc48 <<invalid sloc>> <invalid sloc> implicit struct __cblayout_TB definition
|   |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
|   | |-DefaultConstructor exists trivial needs_implicit
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-PackedAttr 0x1c455f8dd10 <<invalid sloc>> Implicit
|   `-FieldDecl 0x1c455f8ddf0 <<invalid sloc>> <invalid sloc> b 'float'
|-ExportDecl 0x1c455f8de48 <line:19:1, line:21:1> line:19:1
| `-FunctionDecl 0x1c455f8def8 <col:8, line:21:1> line:19:14 used foo 'float ()'
|   `-CompoundStmt 0x1c455f8e058 <col:20, line:21:1>
|     `-ReturnStmt 0x1c455f8e048 <line:20:3, col:14>
|       `-BinaryOperator 0x1c455f8e028 <col:10, col:14> 'float' '+'
|         |-ImplicitCastExpr 0x1c455f8dff8 <col:10> 'float' <LValueToRValue>
|         | `-DeclRefExpr 0x1c455f8dfb8 <col:10> 'hlsl_constant float' lvalue Var 0x1c455f8d798 'a' 'hlsl_constant float'
|         `-ImplicitCastExpr 0x1c455f8e010 <col:14> 'float' <LValueToRValue>
|           `-DeclRefExpr 0x1c455f8dfd8 <col:14> 'hlsl_constant float' lvalue Var 0x1c455f8dbc8 'b' 'hlsl_constant float'
|-LinkageSpecDecl 0x1c455f8e780 <<invalid sloc>> <invalid sloc> implicit C
| `-FunctionDecl 0x1c455f8e7d0 <<invalid sloc>> <invalid sloc> implicit __builtin_hlsl_resource_uninitializedhandle 'void (...) noexcept' extern
|   |-BuiltinAttr 0x1c455f8e878 <<invalid sloc>> Implicit 710
|   `-NoThrowAttr 0x1c455f8e8e0 <<invalid sloc>> Implicit
|-LinkageSpecDecl 0x1c455f88bc8 <<invalid sloc>> <invalid sloc> implicit C
| `-FunctionDecl 0x1c455f88c18 <<invalid sloc>> <invalid sloc> implicit used __builtin_hlsl_resource_handlefrombinding 'void (...) noexcept' extern
|   |-BuiltinAttr 0x1c455f88cc0 <<invalid sloc>> Implicit 708
|   `-NoThrowAttr 0x1c455f88d28 <<invalid sloc>> Implicit
|-LinkageSpecDecl 0x1c455f89458 <<invalid sloc>> <invalid sloc> implicit C
| `-FunctionDecl 0x1c455f894a8 <<invalid sloc>> <invalid sloc> implicit used __builtin_hlsl_resource_handlefromimplicitbinding 'void (...) noexcept' extern
|   |-BuiltinAttr 0x1c455f89550 <<invalid sloc>> Implicit 709
|   `-NoThrowAttr 0x1c455f895b8 <<invalid sloc>> Implicit
|-LinkageSpecDecl 0x1c455f89af8 <<invalid sloc>> <invalid sloc> implicit C
| `-FunctionDecl 0x1c455f89b48 <<invalid sloc>> <invalid sloc> implicit __builtin_hlsl_resource_getpointer 'void (...) noexcept' extern
|   |-BuiltinAttr 0x1c455f89bf0 <<invalid sloc>> Implicit 707
|   `-NoThrowAttr 0x1c455f89c58 <<invalid sloc>> Implicit
|-VarDecl 0x1c455f8e420 <line:25:1, col:17> col:17 UAV 'RWBuffer<float>':'hlsl::RWBuffer<float>' static callinit
| |-CXXConstructExpr 0x1c455f87e08 <col:17> 'RWBuffer<float>':'hlsl::RWBuffer<float>' 'void (unsigned int, unsigned int, int, unsigned int, const char *)'
| | |-IntegerLiteral 0x1c455f87840 <<invalid sloc>> 'unsigned int' 3
| | |-IntegerLiteral 0x1c455f87770 <<invalid sloc>> 'unsigned int' 0
| | |-IntegerLiteral 0x1c455f87720 <<invalid sloc>> 'int' 1
| | |-IntegerLiteral 0x1c455f87748 <<invalid sloc>> 'unsigned int' 0
| | `-ImplicitCastExpr 0x1c455f87cb8 <<invalid sloc>> 'const char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x1c455f87820 <<invalid sloc>> 'const char[4]' lvalue "UAV"
| `-HLSLResourceBindingAttr 0x1c455f87680 <col:23> "u3" "space0"
|-VarDecl 0x1c455f87fb0 <line:31:1, col:17> col:17 UAV1 'RWBuffer<float>':'hlsl::RWBuffer<float>' static callinit
| |-CXXConstructExpr 0x1c455f88240 <col:17> 'RWBuffer<float>':'hlsl::RWBuffer<float>' 'void (unsigned int, unsigned int, int, unsigned int, const char *)'
| | |-IntegerLiteral 0x1c455f881d0 <<invalid sloc>> 'unsigned int' 2
| | |-IntegerLiteral 0x1c455f88108 <<invalid sloc>> 'unsigned int' 0
| | |-IntegerLiteral 0x1c455f880b8 <<invalid sloc>> 'int' 1
| | |-IntegerLiteral 0x1c455f880e0 <<invalid sloc>> 'unsigned int' 0
| | `-ImplicitCastExpr 0x1c455f881f8 <<invalid sloc>> 'const char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x1c455f881b0 <<invalid sloc>> 'const char[5]' lvalue "UAV1"
| `-HLSLResourceBindingAttr 0x1c455f88018 <col:24> "u2" "space0"
|-VarDecl 0x1c455f88320 <col:1, col:38> col:38 UAV2 'RWBuffer<float>':'hlsl::RWBuffer<float>' static callinit
| |-CXXConstructExpr 0x1c455f953c8 <col:38> 'RWBuffer<float>':'hlsl::RWBuffer<float>' 'void (unsigned int, unsigned int, int, unsigned int, const char *)'
| | |-IntegerLiteral 0x1c455f95388 <<invalid sloc>> 'unsigned int' 4
| | |-IntegerLiteral 0x1c455f95340 <<invalid sloc>> 'unsigned int' 0
| | |-IntegerLiteral 0x1c455f952f0 <<invalid sloc>> 'int' 1
| | |-IntegerLiteral 0x1c455f95318 <<invalid sloc>> 'unsigned int' 0
| | `-ImplicitCastExpr 0x1c455f953b0 <<invalid sloc>> 'const char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x1c455f95368 <<invalid sloc>> 'const char[5]' lvalue "UAV2"
| `-HLSLResourceBindingAttr 0x1c455f95250 <col:45> "u4" "space0"
|-VarDecl 0x1c455f95590 <line:35:1, col:17> col:17 UAV3 'RWBuffer<float>':'hlsl::RWBuffer<float>' static callinit
| |-CXXConstructExpr 0x1c455f957a0 <col:17> 'RWBuffer<float>':'hlsl::RWBuffer<float>' 'void (unsigned int, int, unsigned int, unsigned int, const char *)'
| | |-IntegerLiteral 0x1c455f956e8 <<invalid sloc>> 'unsigned int' 5
| | |-IntegerLiteral 0x1c455f95698 <<invalid sloc>> 'int' 1
| | |-IntegerLiteral 0x1c455f956c0 <<invalid sloc>> 'unsigned int' 0
| | |-IntegerLiteral 0x1c455f95730 <<invalid sloc>> 'unsigned int' 0
| | `-ImplicitCastExpr 0x1c455f95758 <<invalid sloc>> 'const char *' <ArrayToPointerDecay>
| |   `-StringLiteral 0x1c455f95710 <<invalid sloc>> 'const char[5]' lvalue "UAV3"
| `-HLSLResourceBindingAttr 0x1c455f955f8 <col:24> "" "space5"
|-VarDecl 0x1c455f95a40 <line:39:1, col:29> col:17 UAV_Array 'RWBuffer<float>[10]' static
| `-HLSLResourceBindingAttr 0x1c455f95aa8 <col:33> "u10" "space6"
|-VarDecl 0x1c455f95f08 <line:45:1, col:7> col:7 f 'hlsl_constant float'
| `-HLSLResourceBindingAttr 0x1c455f95f70 <col:11> "c5" "space0"
|-VarDecl 0x1c455f96048 <line:49:1, col:6> col:6 intv 'hlsl_constant int4':'vector<int hlsl_constant, 4>'
| `-HLSLResourceBindingAttr 0x1c455f960b0 <col:13> "c2" "space0"
|-VarDecl 0x1c455f96268 <line:53:1, col:13> col:8 dar 'hlsl_constant double[5]'
| `-HLSLResourceBindingAttr 0x1c455f962d0 <col:18> "c3" "space0"
|-CXXRecordDecl 0x1c455f963c8 <line:55:1, line:57:1> line:55:8 referenced struct S definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-PackedAttr 0x1c455f96490 <<invalid sloc>> Implicit
| |-CXXRecordDecl 0x1c455f96558 <col:1, col:8> col:8 implicit struct S
| `-FieldDecl 0x1c455f96618 <line:56:3, col:7> col:7 a 'int'
|-VarDecl 0x1c455f966f0 <line:61:1, col:3> col:3 s 'hlsl_constant S'
| `-HLSLResourceBindingAttr 0x1c455f96758 <col:7> "c10" "space0"
|-HLSLBufferDecl 0x1c455f96858 <line:69:1, line:71:1> line:69:9 cbuffer CB2
| |-HLSLResourceClassAttr 0x1c455f968d0 <<invalid sloc>> Implicit CBuffer
| |-HLSLResourceBindingAttr 0x1c455f96c00 <<invalid sloc>> Implicit "" "0"
| |-VarDecl 0x1c455f96948 <line:70:3, col:10> col:10 c 'hlsl_constant float4':'vector<float hlsl_constant, 4>'
| `-CXXRecordDecl 0x1c455f969c8 <<invalid sloc>> <invalid sloc> implicit struct __cblayout_CB2 definition
|   |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
|   | |-DefaultConstructor exists trivial needs_implicit
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-PackedAttr 0x1c455f96a90 <<invalid sloc>> Implicit
|   `-FieldDecl 0x1c455f96b68 <<invalid sloc>> <invalid sloc> c 'vector<float, 4>'
|-VarDecl 0x1c455f97180 <line:76:1, col:30> col:25 SB 'StructuredBuffer<float>[10]' static
| `-HLSLResourceBindingAttr 0x1c455f8f4a8 <<invalid sloc>> Implicit "" "0"
`-HLSLBufferDecl 0x1c455f906d8 <<invalid sloc>> <invalid sloc> implicit cbuffer $Globals
  |-HLSLResourceBindingAttr 0x1c455f90770 <<invalid sloc>> Implicit "" "0"
  `-CXXRecordDecl 0x1c455f90810 <<invalid sloc>> <invalid sloc> implicit struct __cblayout_$Globals definition
    |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
    | |-DefaultConstructor exists trivial needs_implicit
    | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
    | |-MoveConstructor exists simple trivial needs_implicit
    | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
    | |-MoveAssignment exists simple trivial needs_implicit
    | `-Destructor simple irrelevant trivial needs_implicit
    |-PackedAttr 0x1c455f908e0 <<invalid sloc>> Implicit
    |-FieldDecl 0x1c455f909c0 <<invalid sloc>> <invalid sloc> f 'float'
    |-FieldDecl 0x1c455f90a28 <<invalid sloc>> <invalid sloc> intv 'vector<int, 4>'
    |-FieldDecl 0x1c455f90aa8 <<invalid sloc>> <invalid sloc> dar 'double[5]'
    `-FieldDecl 0x1c455f90b10 <<invalid sloc>> <invalid sloc> s 'S'
