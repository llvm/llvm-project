/*
{0}: TypeDef list
{1}: TypeParser function
{2}: TypePrinter function
{3}: Dialect CppName
{4}: TypeID Defines
{5}: Namespace open
{6}: Namespace close
*/

R"(
#ifdef GET_TYPEDEF_LIST
#undef GET_TYPEDEF_LIST

{0}

#endif  // GET_TYPEDEF_LIST


#ifdef GET_TYPEDEF_CLASSES
#undef GET_TYPEDEF_CLASSES

{4}

{5}

{1}

{2}

/// Parse a type registered to this dialect.
::mlir::Type {3}::parseType(::mlir::DialectAsmParser &parser) const {{
  ::llvm::SMLoc typeLoc = parser.getCurrentLocation();
  ::llvm::StringRef mnemonic;
  ::mlir::Type genType;
  auto parseResult = generatedTypeParser(parser, &mnemonic, genType);
  if (parseResult.has_value())
    return genType;
  
  parser.emitError(typeLoc) << "unknown  type `"
      << mnemonic << "` in dialect `" << getNamespace() << "`";
  return {{};
}
/// Print a type registered to this dialect.
void {3}::printType(::mlir::Type type,
                    ::mlir::DialectAsmPrinter &printer) const {{
  if (::mlir::succeeded(generatedTypePrinter(type, printer)))
    return;
  
}

{6}
#endif // GET_TYPEDEF_CLASSES
)"