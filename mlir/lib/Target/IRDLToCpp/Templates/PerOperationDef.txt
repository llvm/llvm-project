/*
0: Operation CppName
1: Operand count
2: Result count
3: Build definitions

4: open namespace
5: close namespace
6: namespace path
*/

R"(

//===----------------------------------------------------------------------===//
// __NAMESPACE_PATH__::__OP_CPP_NAME__ definitions
//===----------------------------------------------------------------------===//

__NAMESPACE_OPEN__

::llvm::LogicalResult __OP_CPP_NAME__::verifyInvariantsImpl() {
  return ::mlir::success();
}

::llvm::LogicalResult __OP_CPP_NAME__::verifyInvariants() {
  return verifyInvariantsImpl();
}

__OP_BUILD_DEFS__

void __OP_CPP_NAME__::build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::mlir::ValueRange operands, ::llvm::ArrayRef<::mlir::NamedAttribute> attributes) {
  assert(operands.size() == __OP_OPERAND_COUNT__);
  assert(resultTypes.size() == __OP_RESULT_COUNT__);
  odsState.addOperands(operands);
  odsState.addAttributes(attributes);
  odsState.addTypes(resultTypes);
}


__NAMESPACE_CLOSE__

MLIR_DEFINE_EXPLICIT_TYPE_ID(__NAMESPACE_PATH__::__OP_CPP_NAME__)
)"