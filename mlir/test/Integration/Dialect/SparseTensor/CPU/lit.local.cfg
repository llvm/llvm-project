import sys
from lit.llvm import llvm_config

# FIXME: %mlir_native_utils_lib_dir is set incorrectly on Windows
if sys.platform == "win32":
    config.unsupported = True

# ArmSVE tests must be enabled via build flag.
if config.mlir_run_arm_sve_tests:
    config.substitutions.append(("%ENABLE_VLA", "true"))
    config.substitutions.append(
        ("%VLA_ARCH_ATTR_OPTIONS", '--march=aarch64 --mattr="+sve"')
    )
else:
    config.substitutions.append(("%ENABLE_VLA", "false"))
    config.substitutions.append(("%VLA_ARCH_ATTR_OPTIONS", ""))
    config.substitutions.append(("%mlir_native_utils_lib_dir", config.mlir_lib_dir))

# CONFIGURATION FOR COMPILATION
# -----------------------------
# Sparse compiler options. (Re)Define this substitution in every test file.
config.substitutions.insert(0, ("%{sparse_compiler_opts}",'' ))
# The following substitution should only be used _after_
# %{sparse_compiler_opts} has been updated to enable vectorization.
config.substitutions.insert(0, ("%{sparse_compiler_opts_sve}",'enable-arm-sve=true %{sparse_compiler_opts}'))
# Runs the sparse compiler.
config.substitutions.insert(0, ("%{compile}", 'mlir-opt %s --sparse-compiler="%{sparse_compiler_opts}"'))
# Runs the sparse compiler with SVE/VLA vectorisation.
config.substitutions.insert(0, ("%{compile_sve}", 'mlir-opt %s --sparse-compiler="%{sparse_compiler_opts_sve}"'))

# CONFIGURATION FOR JIT'ing AND EXECUTION
# ---------------------------------------
# Runtime libraries to use. (Re)Define this substitution in every test file.
config.substitutions.insert(0, ("%{run_libs}", ""))
config.substitutions.insert(0, ("%{run_opts}", "-e entry -entry-point-result=void"))
# JIT and run the compiled test.
config.substitutions.insert(0, ("%{run}", "mlir-cpu-runner %{run_opts} %{run_libs}"))
# JIT and run the compiled test with SVE enabled.
config.substitutions.insert(0, ("%{run_sve}", '%mcr_aarch64_cmd --march=aarch64 --mattr="+sve" %{run_opts} %{run_libs}'))
