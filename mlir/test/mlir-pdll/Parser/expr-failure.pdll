// RUN: not mlir-pdll %s -split-input-file 2>&1 | FileCheck %s

//===----------------------------------------------------------------------===//
// Reference Expr
//===----------------------------------------------------------------------===//

Pattern {
  // CHECK: expected identifier constraint
  let foo = Foo: ;
}

// -----

Pattern {
  // CHECK: undefined reference to `bar`
  let foo = bar;
}

// -----

Pattern FooPattern {
  erase _: Op;
}

Pattern {
  // CHECK: invalid reference to `FooPattern`
  let foo = FooPattern;
}

// -----

Pattern {
  // CHECK: expected `:` after `_` variable
  let foo = _;
}

// -----

Pattern {
  // CHECK: expected identifier constraint
  let foo = _: ;
}

// -----

//===----------------------------------------------------------------------===//
// Member Access Expr
//===----------------------------------------------------------------------===//

Pattern {
  // CHECK: expected identifier or numeric member name
  let root: Op;
  erase root.<>;
}

// -----

Pattern {
  // CHECK: invalid member access `unknown_result` on expression of type `Op`
  let root: Op;
  erase root.unknown_result;
}

// -----

//===----------------------------------------------------------------------===//
// `attr` Expr
//===----------------------------------------------------------------------===//

Pattern {
  // CHECK: expected string literal containing MLIR attribute
  let foo = attr<foo>;
}

// -----

Pattern {
  // CHECK: expected `>` after attribute literal
  let foo = attr<""<>;
}

// -----

//===----------------------------------------------------------------------===//
// `type` Expr
//===----------------------------------------------------------------------===//

Pattern {
  // CHECK: expected string literal containing MLIR type
  let foo = type<foo;
}

// -----

Pattern {
  // CHECK: expected `>` after type literal
  let foo = type<"";
}
