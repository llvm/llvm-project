ods_def<MatmulOp>
implements_interface<LinalgContractionOpInterface> :
def matmul(A: f32(M, K), B: f32(K, N)) -> (C: f32(M, N)) {
  C(m, n) = std_addf<k>(std_mulf(A(m, k), B(k, n)));
}

ods_def<MatmulColumnMajorOp>
implements_interface<LinalgContractionOpInterface> :
def matmul_column_major(A: f32(K, M), B: f32(N, K)) -> (C: f32(N, M)) {
  C(n, m) = std_addf<k>(std_mulf(A(k, m), B(n, k)));
}

ods_def<MatmulI8I8I32Op>
implements_interface<LinalgContractionOpInterface> :
def matmul_i8_i8_i32(A: i8(M, K), B: i8(K, N)) -> (C: i32(M, N)) {
  // TODO: ideally something closer to
  //   C(m, n) += cast<i32>(A(m, k)) * cast<i32>(B(k, n))
  C(m, n) = std_addi<k>(std_sexti32(std_muli(A(m, k), B(k, n))));
}

ods_def<MatvecOp>
implements_interface<LinalgContractionOpInterface> :
def matvec(A: f32(M, N), y: f32(N)) -> (x: f32(M)) {
  x(m) = std_addf<n>(std_mulf(A(m, n), y(n)));
}

ods_def<VecmatOp>
implements_interface<LinalgContractionOpInterface> :
def vecmat(y: f32(M), A: f32(M, N)) -> (x: f32(N)) {
  x(n) = std_addf<m>(std_mulf(y(m), A(m, n)));
}

ods_def<DotOp>
implements_interface<LinalgContractionOpInterface> :
def dot(A: f32(M), B: f32(M)) -> (C: f32()) {
  C() = std_addf<m>(std_mulf(A(m), B(m)));
}

ods_def<BatchMatmulOp>
implements_interface<LinalgContractionOpInterface> :
def batch_matmul(A: f32(Batch, M, K), B: f32(Batch, K, N)) -> (C: f32(Batch, M, N)) {
  C(b, m, n) = std_addf<k>(std_mulf(A(b, m, k), B(b, k, n)));
}

ods_def<ConvWOp>:
def conv_1d(I: f32(W), K: f32(KW)) -> (O: f32(W)) {
  O(w) = std_addf<kw>(std_mulf(I(w + kw), K(kw)));
}

ods_def<ConvNWCOp>:
def conv_1d_nwc(I: f32(N, W, C), K: f32(F, KW, C)) -> (O: f32(N, W, F)) {
  O(n, w, f) = std_addf<kw>(std_mulf(I(n, w + kw, c), K(f, kw, c)));
}

ods_def<ConvNCWOp>:
def conv_1d_ncw(I: f32(N, C, W), K: f32(F, C, KW)) -> (O: f32(N, F, W)) {
  O(n, f, w) = std_addf<kw>(std_mulf(I(n, c, w + kw), K(f, c, kw)));
}

ods_def<ConvHWOp>:
def conv_2d(I: f32(H, W), K: f32(KH, KW)) -> (O: f32(H, W)) {
  O(h, w) = std_addf<kh, kw>(std_mulf(I(h + kh, w + kw), K(kh, kw)));
}

ods_def<ConvNHWCOp>:
def conv_2d_nhwc(I: f32(N, H, W, C), K: f32(F, KH, KW, C)) -> (O: f32(N, H, W, F)) {
  O(n, h, w, f) = std_addf<kh, kw>(std_mulf(
    I(n, h + kh, w + kw, c), K(f, kh, kw, c)));
}

ods_def<ConvNCHWOp>:
def conv_2d_nchw(I: f32(N, C, H, W), K: f32(F, C, KH, KW)) -> (O: f32(N, F, H, W)) {
  O(n, f, h, w) = std_addf<kh, kw>(std_mulf(
    I(n, c, h + kh, w + kw), K(f, c, kh, kw)));
}

ods_def<ConvDHWOp>:
def conv_3d(I: f32(D, H, W), K: f32(KD, KH, KW)) -> (O: f32(D, H, W)) {
  O(d, h, w) = std_addf<kd, kh, kw>(std_mulf(
    I(d + kd, h + kh, w + kw), K(kd, kh, kw)));
}

ods_def<ConvNDHWCOp>:
def conv_3d_ndhwc(I: f32(N, D, H, W, C), K: f32(F, KD, KH, KW, C)) -> (O: f32(N, D, H, W, F)) {
  O(n, d, h, w, f) = std_addf<kd, kh, kw>(std_mulf(
    I(n, d + kd, h + kh, w + kw, c), K(f, kd, kh, kw, c)));
}

ods_def<ConvNCDHWOp>:
def conv_3d_ncdhw(I: f32(N, C, D, H, W), K: f32(F, C, KD, KH, KW)) -> (O: f32(N, F, D, H, W)) {
  O(n, f, d, h, w) = std_addf<kd, kh, kw>(std_mulf(
    I(n, c, d + kd, h + kh, w + kw), K(f, c, kd, kh, kw)));
}

ods_def<DepthwiseConvInputNHWCFilterHWCOp>:
def depthwise_conv_2d_input_nhwc_filter_hwc
      (I: f32(N, IH, IW, C), K: f32(KH, KW, C))
   -> (O: f32(N, OH, OW, C))
  attr(strides: 2xi64)
"""A depth-wise 2-D convolution operation.

This operation performs depth-wise 2-D convolution over an input `I` and filter
`F` and generates output `O` using the following computation:

```
O(n, oh, ow, c) = std_addf<kh, kw>(std_mulf(
  I(n, oh * strides[0] + kh, ow * strides[1] + kw, c), K(kh, kw, c)))
```

where

* `I` is a 4-D tensor with shape `(N, IH, IW, C)`.
* `F` is a 3-D tensor with shape `(KH, KW, C)`.
* `O` is a 4-D tensor with shape `(N, OH, OW, C)`.
* `strides` is a 2-element vector attribute for window strides along the
  height/width dimension.

The indexing maps for these three tensors contain 6 dimensions, following the
order of (`N`, `OH`, `OW`, `C`, `KH`, `KW`).

Note: this op only supports channel multiplier == 1.
"""
{
  O(n, oh, ow, c) = std_addf<kh, kw>(std_mulf(
    I(n, oh * strides[0] + kh, ow * strides[1] + kw, c), K(kh, kw, c)));
}
