//===--- HeaderSearchOptions.def - HeaderSearch option database -*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines the header search options. Users of this file must
// define the HEADERSEARCHOPT macro to make use of this information.
//
//===----------------------------------------------------------------------===//

#ifndef HEADERSEARCHOPT
#define HEADERSEARCHOPT(Name, Bits, Description)                               \
  TYPED_HEADERSEARCHOPT(unsigned, Name, Description)
#endif

#ifndef TYPED_HEADERSEARCHOPT
#define TYPED_HEADERSEARCHOPT(Type, Name, Description)
#endif

TYPED_HEADERSEARCHOPT(std::string, Sysroot,
                      "If non-empty, the directory to use as a \"virtual "
                      "system root\" for include paths.")

TYPED_HEADERSEARCHOPT(std::string, ModuleFormat,
                      "The module/pch container format.")

HEADERSEARCHOPT(DisableModuleHash, 1,
                "Whether we should disable the use of the hash string within "
                "the module cache. Note: Only used for testing!")

HEADERSEARCHOPT(ImplicitModuleMaps, 1,
                "Implicit module maps.  This option is enabld by default when "
                "modules is enabled.")

HEADERSEARCHOPT(
    ModuleMapFileHomeIsCwd, 1,
    "Set the 'home directory' of a module map file to the current working "
    "directory (or the home directory of the module map file that contained "
    "the 'extern module' directive importing this module map file if any) "
    "rather than the directory containing the module map file. The home "
    "directory is where we look for files named in the module map file.")

HEADERSEARCHOPT(UseBuiltinIncludes, 1, "Include the compiler builtin includes.")

HEADERSEARCHOPT(UseStandardSystemIncludes, 1,
                "Include the system standard include search directories.")

HEADERSEARCHOPT(
    UseStandardCXXIncludes, 1,
    "Include the system standard C++ library include search directories.")

HEADERSEARCHOPT(UseLibcxx, 1, "Use libc++ instead of the default libstdc++.")

HEADERSEARCHOPT(Verbose, 1,
                "Whether header search information should be output as for -v.")

HEADERSEARCHOPT(
    ModulesValidateOncePerBuildSession, 1,
    "If true, skip verifying input files used by modules if the module was "
    "already verified during this build session (see BuildSessionTimestamp).")

HEADERSEARCHOPT(
    ModulesValidateSystemHeaders, 1,
    "Whether to validate system input files when a module is loaded.")

HEADERSEARCHOPT(ValidateASTInputFilesContent, 1,
                "Whether the content of input files should be hashed and used "
                "to validate consistency.")

HEADERSEARCHOPT(UseDebugInfo, 1,
                "Whether the module includes debug information (-gmodules).")

HEADERSEARCHOPT(ModulesValidateDiagnosticOptions, 1, "")

HEADERSEARCHOPT(ModulesHashContent, 1, "")

HEADERSEARCHOPT(ModulesStrictContextHash, 1,
                "Whether we should include all things that could impact the "
                "module in the hash. This includes things like the full header "
                "search path, and enabled diagnostics.")

TYPED_HEADERSEARCHOPT(std::vector<Entry>, UserEntries,
                      "User specified include entries.")

TYPED_HEADERSEARCHOPT(std::vector<SystemHeaderPrefix>, SystemHeaderPrefixes,
                      "User-specified system header prefixes.")

TYPED_HEADERSEARCHOPT(std::string, ResourceDir,
                      "The directory which holds the compiler resource files "
                      "(builtin includes, etc.).")

TYPED_HEADERSEARCHOPT(std::string, ModuleCachePath,
                      "The directory used for the module cache.")

TYPED_HEADERSEARCHOPT(std::string, ModuleUserBuildPath,
                      "The directory used for a user build.")

TYPED_HEADERSEARCHOPT(PrebuiltModuleFilesTy, PrebuiltModuleFiles,
                      "The mapping of module names to prebuilt module files.")

TYPED_HEADERSEARCHOPT(std::vector<std::string>, PrebuiltModulePaths,
                      "The directories used to load prebuilt module files.")

TYPED_HEADERSEARCHOPT(
    unsigned, ModuleCachePruneInterval,
    "The interval (in seconds) between pruning operations. This operation is "
    "expensive, because it requires Clang to walk through the directory "
    "structure of the module cache, stat()'ing and removing files. The "
    "default value is large, e.g., the operation runs once a week.")

TYPED_HEADERSEARCHOPT(
    unsigned, ModuleCachePruneAfter,
    "The time (in seconds) after which an unused module file will be "
    "considered unused and will, therefore, be pruned. When the module cache "
    "is pruned, any module file that has not been accessed in this many "
    "seconds will be removed. The default value is large, e.g., a month, to "
    "avoid forcing infrequently-used modules to be regenerated often.")

TYPED_HEADERSEARCHOPT(
    uint64_t, BuildSessionTimestamp,
    "The time in seconds when the build session started. This time is used "
    "by other optimizations in header search and module loading.")

TYPED_HEADERSEARCHOPT(ModulesIgnoreMacrosTy, ModulesIgnoreMacros,
                      "The set of macro names that should be ignored for the "
                      "purposes of computing the module hash.")

TYPED_HEADERSEARCHOPT(
    std::vector<std::string>, VFSOverlayFiles,
    "The set of user-provided virtual filesystem overlay files.")

#undef HEADERSEARCHOPT
#undef TYPED_HEADERSEARCHOPT
