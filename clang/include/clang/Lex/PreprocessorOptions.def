//===--- PreprocessorOptions.def - Preprocessor option database -*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines the preprocessor options. Users of this file must
// define the TYPED_PREPROCESSOROPT macro to make use of this information.
//
//===----------------------------------------------------------------------===//

#ifndef TYPED_PREPROCESSOROPT
#error Define the TYPED_PREPROCESSOROPT macro to handle target options
#endif

TYPED_PREPROCESSOROPT(MacrosTy, Macros, "")

TYPED_PREPROCESSOROPT(std::vector<std::string>, Includes, "")

TYPED_PREPROCESSOROPT(std::vector<std::string>, MacroIncludes, "")

TYPED_PREPROCESSOROPT(
    bool, UsePredefines,
    "Initialize the preprocessor with the compiler and target "
    "specific predefines.")

TYPED_PREPROCESSOROPT(
    bool, DetailedRecord,
    "Whether we should maintain a detailed record of all macro "
    "definitions and expansions.")

TYPED_PREPROCESSOROPT(
    bool, PCHWithHdrStop,
    "When true, we are creating or using a PCH where a #pragma hdrstop is "
    "expected to indicate the beginning or end of the PCH.")

TYPED_PREPROCESSOROPT(
    bool, PCHWithHdrStopCreate,
    "When true, we are creating a PCH or creating the PCH object "
    "while expecting a #pragma hdrstop to separate the two.  Allow "
    "for a missing #pragma hdrstop, which generates a PCH for the "
    "whole file, and creates an empty PCH object.")

TYPED_PREPROCESSOROPT(
    std::string, PCHThroughHeader,
    "If non-empty, the filename used in an #include directive in the primary "
    "source file (or command-line preinclude) that is used to implement "
    "MSVC-style precompiled headers. When creating a PCH, after the #include "
    "of this header, the PCH generation stops. When using a PCH, tokens are "
    "skipped until after an #include of this header is seen.")

TYPED_PREPROCESSOROPT(
    std::string, ImplicitPCHInclude,
    "The implicit PCH included at the start of the translation unit, or empty.")

TYPED_PREPROCESSOROPT(
    std::vector<std::string>, ChainedIncludes,
    "Headers that will be converted to chained PCHs in memory.")

TYPED_PREPROCESSOROPT(
    bool, DisablePCHValidation,
    "When true, disables most of the normal validation performed "
    "on precompiled headers.")

TYPED_PREPROCESSOROPT(
    bool, AllowPCHWithCompilerErrors,
    "When true, a PCH with compiler errors will not be rejected.")

TYPED_PREPROCESSOROPT(
    bool, DumpDeserializedPCHDecls,
    "Dump declarations that are deserialized from PCH, for testing.")

TYPED_PREPROCESSOROPT(
    std::set<std::string>, DeserializedPCHDeclsToErrorOn,
    "This is a set of names for decls that we do not want to be deserialized, "
    "and we emit an error if they are; for testing purposes.")

TYPED_PREPROCESSOROPT(
    PrecompiledPreambleBytesTy, PrecompiledPreambleBytes,
    "If non-zero, the implicit PCH include is actually a precompiled preamble "
    "that covers this number of bytes in the main source file. The boolean "
    "indicates whether the preamble ends at the start of a new line.")

TYPED_PREPROCESSOROPT(
    bool, GeneratePreamble,
    "True indicates that a preamble is being generated. When the "
    "lexer is done, one of the things that need to be preserved is "
    "the conditional #if stack, so the ASTWriter/ASTReader can "
    "save/restore it when processing the rest of the file.")

TYPED_PREPROCESSOROPT(
    bool, WriteCommentListToPCH,
    "Whether to write comment locations into the PCH when building "
    "it. Reading the comments from the PCH can be a performance "
    "hit even if the clients don't use them.")

TYPED_PREPROCESSOROPT(
    bool, SingleFileParseMode,
    "When enabled, preprocessor is in a mode for parsing a single "
    "file only. Disables #includes of other files and if there are "
    "unresolved identifiers in preprocessor directive conditions "
    "it causes all blocks to be parsed so that the client can get "
    "the maximum amount of information from the parser.")

TYPED_PREPROCESSOROPT(
    bool, LexEditorPlaceholders,
    "When enabled, the preprocessor will construct editor placeholder tokens.")

TYPED_PREPROCESSOROPT(
    bool, RemappedFilesKeepOriginalName,
    "True if the SourceManager should report the original file name for "
    "contents of files that were remapped to other files. Defaults to true.")

TYPED_PREPROCESSOROPT(
    RemappedFilesTy, RemappedFiles,
    "The set of file remappings, which take existing files on the system (the "
    "first part of each pair) and gives them the contents of other files on "
    "the system (the second part of each pair).")

TYPED_PREPROCESSOROPT(
    RemappedFileBuffersTy, RemappedFileBuffers,
    "The set of file-to-buffer remappings, which take existing files on the "
    "system (the first part of each pair) and gives them the contents of the "
    "specified memory buffer (the second part of each pair).")

TYPED_PREPROCESSOROPT(
    bool, RetainRemappedFileBuffers,
    "Whether the compiler instance should retain (i.e., not free) "
    "the buffers associated with remapped files. This flag "
    "defaults to false; it can be set true only through direct "
    "manipulation of the compiler invocation object, in cases "
    "where the compiler invocation and its buffers will be reused.")

TYPED_PREPROCESSOROPT(
    bool, RetainExcludedConditionalBlocks,
    "When enabled, excluded conditional blocks retain in the main file.")

TYPED_PREPROCESSOROPT(
    ObjCXXARCStandardLibraryKind, ObjCXXARCStandardLibrary,
    "The Objective-C++ ARC standard library that we should support, by "
    "providing appropriate definitions to retrofit the standard library with "
    "support for lifetime-qualified pointers.")

TYPED_PREPROCESSOROPT(std::shared_ptr<FailedModulesSet>, FailedModules, "")

TYPED_PREPROCESSOROPT(MacroPrefixMapTy, MacroPrefixMap,
                      "A prefix map for __FILE__ and __BASE_FILE__.")

TYPED_PREPROCESSOROPT(
    ExcludedPreprocessorDirectiveSkipMapping *,
    ExcludedConditionalDirectiveSkipMappings,
    "Contains the currently active skipped range mappings for "
    "skipping excluded conditional directives. The pointer is "
    "passed to the Preprocessor when it's constructed. The pointer "
    "is unowned, the client is responsible for its lifetime.")

TYPED_PREPROCESSOROPT(bool, SetUpStaticAnalyzer,
                      "Set up preprocessor for RunAnalysis action.")

TYPED_PREPROCESSOROPT(
    bool, DisablePragmaDebugCrash,
    "Prevents intended crashes when using #pragma clang __debug. For testing.")

#undef TYPED_PREPROCESSOROPT
