//===--- FrontendOptions.def - FileSystem option database -----*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines the Frontend options.
//
//===----------------------------------------------------------------------===//

#ifndef TYPED_FRONTENDOPT
#define TYPED_FRONTENDOPT(Type, Name, Description)
#endif

#ifndef FRONTENDOPT
#define FRONTENDOPT(Name, Bits, Description)                                   \
  TYPED_FRONTENDOPT(unsigned, Name, Description)
#endif

FRONTENDOPT(DisableFree, 1, "Disable memory freeing on exit.")

FRONTENDOPT(RelocatablePCH, 1,
            "When generating PCH files, instruct the AST writer to create "
            "relocatable PCH files.")

FRONTENDOPT(ShowHelp, 1, "Show the -help text.")

FRONTENDOPT(ShowStats, 1, "Show frontend performance metrics and statistics.")

FRONTENDOPT(ShowTimers, 1, "Show timers for individual actions.")

FRONTENDOPT(PrintSupportedCPUs, 1,
            "print the supported cpus for the current target")

FRONTENDOPT(TimeTrace, 1, "Output time trace profile.")

FRONTENDOPT(ShowVersion, 1, "Show the -version text.")

FRONTENDOPT(FixWhatYouCan, 1, "Apply fixes even if there are unfixable errors.")

FRONTENDOPT(FixOnlyWarnings, 1, "Apply fixes only for warnings.")

FRONTENDOPT(FixAndRecompile, 1, "Apply fixes and recompile.")

FRONTENDOPT(FixToTemporaries, 1, "Apply fixes to temporary files.")

FRONTENDOPT(ARCMTAction, 3, "")

FRONTENDOPT(ARCMTMigrateEmitARCErrors, 1,
            "Emit ARC errors even if the migrator can fix them.")

FRONTENDOPT(SkipFunctionBodies, 1,
            "Skip over function bodies to speed up parsing in cases you do not "
            "need them (e.g. with code completion).")

FRONTENDOPT(UseGlobalModuleIndex, 1,
            "Whether we can use the global module index if available.")

FRONTENDOPT(GenerateGlobalModuleIndex, 1,
            "Whether we can generate the global module index if needed.")

FRONTENDOPT(ASTDumpDecls, 1,
            "Whether we include declaration dumps in AST dumps.")

FRONTENDOPT(ASTDumpAll, 1,
            "Whether we deserialize all decls when forming AST dumps.")

FRONTENDOPT(ASTDumpLookups, 1,
            "Whether we include lookup table dumps in AST dumps.")

FRONTENDOPT(ASTDumpDeclTypes, 1,
            "Whether we include declaration type dumps in AST dumps.")

FRONTENDOPT(BuildingImplicitModule, 1,
            "Whether we are performing an implicit module build.")

FRONTENDOPT(ModulesEmbedAllFiles, 1,
            "Whether we should embed all used files into the PCM file.")

FRONTENDOPT(IncludeTimestamps, 1,
            "Whether timestamps should be written to the produced PCH file.")

FRONTENDOPT(UseTemporary, 1,
            "Should a temporary file be used during compilation.")

FRONTENDOPT(IsSystemModule, 1,
            "When using -emit-module, treat the modulemap as a system module.")

TYPED_FRONTENDOPT(ASTDumpOutputFormat, ASTDumpFormat,
                  "Specifies the output format of the AST.")

TYPED_FRONTENDOPT(unsigned, ObjCMTAction, "")

TYPED_FRONTENDOPT(std::string, ObjCMTWhiteListPath, "")

TYPED_FRONTENDOPT(std::string, MTMigrateDir, "")

TYPED_FRONTENDOPT(std::string, ARCMTMigrateReportOut, "")

TYPED_FRONTENDOPT(InputsTy, Inputs, "The input files and their types.")

TYPED_FRONTENDOPT(
    std::string, OriginalModuleMap,
    "When the input is a module map, the original module map file from which "
    "that map was inferred, if any (for umbrella modules).")

TYPED_FRONTENDOPT(std::string, OutputFile, "The output file, if any.")

TYPED_FRONTENDOPT(std::string, FixItSuffix,
                  "If given, the new suffix for fix-it rewritten files.")

TYPED_FRONTENDOPT(std::string, ASTDumpFilter,
                  "If given, filter dumped AST Decl nodes by this substring.")

TYPED_FRONTENDOPT(ParsedSourceLocation, CodeCompletionAt,
                  "If given, enable code completion at the provided location.")

TYPED_FRONTENDOPT(frontend::ActionKind, ProgramAction,
                  "The frontend action to perform.")

TYPED_FRONTENDOPT(std::string, ActionName,
                  "The name of the action to run when using a plugin action.")

TYPED_FRONTENDOPT(PluginArgsTy, PluginArgs, "Args to pass to the plugins")

TYPED_FRONTENDOPT(
    std::vector<std::string>, AddPluginActions,
    "The list of plugin actions to run in addition to the normal action.")

TYPED_FRONTENDOPT(std::vector<std::string>, Plugins,
                  "The list of plugins to load.")

TYPED_FRONTENDOPT(std::vector<std::shared_ptr<ModuleFileExtension>>,
                  ModuleFileExtensions, "The list of module file extensions.")

TYPED_FRONTENDOPT(
    std::vector<std::string>, ModuleMapFiles,
    "The list of module map files to load before processing the input.")

TYPED_FRONTENDOPT(std::vector<std::string>, ModuleFiles,
                  "The list of additional prebuilt module files to load before "
                  "processing the input.")

TYPED_FRONTENDOPT(std::vector<std::string>, ModulesEmbedFiles,
                  "The list of files to embed into the compiled module file.")

TYPED_FRONTENDOPT(std::vector<std::string>, ASTMergeFiles,
                  "The list of AST files to merge.")

TYPED_FRONTENDOPT(
    std::vector<std::string>, LLVMArgs,
    "A list of arguments to forward to LLVM's option processing; this should "
    "only be used for debugging and experimental features.")

TYPED_FRONTENDOPT(std::string, OverrideRecordLayoutsFile,
                  "File name of the file that will provide record layouts (in "
                  "the format produced by -fdump-record-layouts).")

TYPED_FRONTENDOPT(std::string, AuxTriple,
                  "Auxiliary triple for CUDA/HIP compilation.")

TYPED_FRONTENDOPT(Optional<std::string>, AuxTargetCPU,
                  "Auxiliary target CPU for CUDA/HIP compilation.")

TYPED_FRONTENDOPT(Optional<std::vector<std::string>>, AuxTargetFeatures,
                  "Auxiliary target features for CUDA/HIP compilation.")

TYPED_FRONTENDOPT(std::string, StatsFile, "Filename to write statistics to.")

TYPED_FRONTENDOPT(
    unsigned, TimeTraceGranularity,
    "Minimum time granularity (in microseconds) traced by time profiler.")

TYPED_FRONTENDOPT(InputKind, DashX, "Input Kind")

#undef TYPED_FRONTENDOPT
#undef FRONTENDOPT