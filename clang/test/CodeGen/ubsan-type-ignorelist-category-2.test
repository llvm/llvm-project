// RUN: rm -rf %t
// RUN: split-file %s %t

// RUN: %clang_cc1 -triple x86_64-linux-gnu -fsanitize=signed-integer-overflow,unsigned-integer-overflow -fsanitize-ignorelist=%t/order-0.ignorelist -emit-llvm %t/test.c -o - | FileCheck %s --check-prefixes=CHECK,SANITIZE
// RUN: %clang_cc1 -triple x86_64-linux-gnu -fsanitize=signed-integer-overflow,unsigned-integer-overflow -fsanitize-ignorelist=%t/order-1.ignorelist -emit-llvm %t/test.c -o - | FileCheck %s --check-prefixes=CHECK,IGNORE
// RUN: %clang_cc1 -triple x86_64-linux-gnu -fsanitize=signed-integer-overflow,unsigned-integer-overflow -fsanitize-ignorelist=%t/order-2.ignorelist -emit-llvm %t/test.c -o - | FileCheck %s --check-prefixes=CHECK,SANITIZE
// RUN: %clang_cc1 -triple x86_64-linux-gnu -fsanitize=signed-integer-overflow,unsigned-integer-overflow -fsanitize-ignorelist=%t/order-3.ignorelist -emit-llvm %t/test.c -o - | FileCheck %s --check-prefixes=CHECK,IGNORE
// RUN: %clang_cc1 -triple x86_64-linux-gnu -fsanitize=signed-integer-overflow,unsigned-integer-overflow -fsanitize-ignorelist=%t/order-4.ignorelist -emit-llvm %t/test.c -o - | FileCheck %s --check-prefixes=CHECK,SANITIZE
// RUN: %clang_cc1 -triple x86_64-linux-gnu -fsanitize=signed-integer-overflow,unsigned-integer-overflow -fsanitize-ignorelist=%t/order-5.ignorelist -emit-llvm %t/test.c -o - | FileCheck %s --check-prefixes=CHECK,IGNORE
// RUN: %clang_cc1 -triple x86_64-linux-gnu -fsanitize=signed-integer-overflow,unsigned-integer-overflow -fsanitize-ignorelist=%t/order-6.ignorelist -emit-llvm %t/test.c -o - | FileCheck %s --check-prefixes=CHECK,SANITIZE
// RUN: %clang_cc1 -triple x86_64-linux-gnu -fsanitize=signed-integer-overflow,unsigned-integer-overflow -fsanitize-ignorelist=%t/order-7.ignorelist -emit-llvm %t/test.c -o - | FileCheck %s --check-prefixes=CHECK,IGNORE
// RUN: %clang_cc1 -triple x86_64-linux-gnu -fsanitize=signed-integer-overflow,unsigned-integer-overflow -fsanitize-ignorelist=%t/order-8.ignorelist -emit-llvm %t/test.c -o - | FileCheck %s --check-prefixes=CHECK,SANITIZE


// The same type can appear multiple times within an ignorelist. Any ``=sanitize`` type
// entries enable sanitizer instrumentation, even if it was ignored by entries before.
// If multiple entries match the source, than the latest entry takes the
// precedence.


//--- order-0.ignorelist
type:int
type:int=sanitize

//--- order-1.ignorelist
type:int=sanitize
type:int

//--- order-2.ignorelist
type:in*
type:int=sanitize

//--- order-3.ignorelist
type:in*=sanitize
type:int

//--- order-4.ignorelist
type:int
type:in*=sanitize

//--- order-5.ignorelist
type:int=sanitize
type:in*

//--- order-6.ignorelist
type:int
type:int=sanitize

//--- order-7.ignorelist
[{unsigned-integer-overflow,signed-integer-overflow}]
type:*
type:int=sanitize
type:i*t
type:*nt=sanitize
[{unsigned-integer-overflow,signed-integer-overflow}]
type:*
type:int
type:i*t=sanitize
type:*nt

//--- order-8.ignorelist
[{unsigned-integer-overflow,signed-integer-overflow}]
type:*
type:int
type:i*t=sanitize
type:*nt
[{unsigned-integer-overflow,signed-integer-overflow}]
type:*
type:int=sanitize
type:i*t
type:*nt=sanitize


//--- test.c
// CHECK-LABEL: define dso_local void @test
void test(int A) {
// IGNORE: %inc = add nsw
// SANITIZE: @llvm.sadd.with.overflow.i32
  ++A;
}

