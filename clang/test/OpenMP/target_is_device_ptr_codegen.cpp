// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs --replace-value-regex "__omp_offloading_[0-9a-z]+_[0-9a-z]+" "reduction_size[.].+[.]" "pl_cond[.].+[.|,]" --prefix-filecheck-ir-name _
// expected-no-diagnostics
#ifndef HEADER
#define HEADER

///==========================================================================///
// RUN: %clang_cc1 -DCK1 -verify -fopenmp -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -emit-llvm %s -o - | FileCheck %s --check-prefix CK10
// RUN: %clang_cc1 -DCK1 -fopenmp -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck %s  --check-prefix CK11
// RUN: %clang_cc1 -DCK1 -verify -fopenmp -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -emit-llvm %s -o - | FileCheck %s  --check-prefix CK12
// RUN: %clang_cc1 -DCK1 -fopenmp -fopenmp-targets=i386-pc-linux-gnu -x c++ -std=c++11 -triple i386-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck %s  --check-prefix CK13

// RUN: %clang_cc1 -DCK1 -verify -fopenmp-simd -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -emit-llvm %s -o - | FileCheck --check-prefix SIMD-ONLY00 %s
// RUN: %clang_cc1 -DCK1 -fopenmp-simd -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY01 %s
// RUN: %clang_cc1 -DCK1 -verify -fopenmp-simd -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -emit-llvm %s -o - | FileCheck --check-prefix SIMD-ONLY02 %s
// RUN: %clang_cc1 -DCK1 -fopenmp-simd -fopenmp-targets=i386-pc-linux-gnu -x c++ -std=c++11 -triple i386-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY03 %s
#ifdef CK1

double *g;








template<typename T>
void foo(float *&lr, T *&tr) {
  float *l;
  T *t;


#pragma omp target is_device_ptr(g)
  {
    ++g;
  }


#pragma omp target is_device_ptr(l)
  {
    ++l;
  }


#pragma omp target is_device_ptr(t)
  {
    ++t;
  }


#pragma omp target is_device_ptr(lr)
  {
    ++lr;
  }


#pragma omp target is_device_ptr(tr)
  {
    ++tr;
  }


#pragma omp target is_device_ptr(tr, lr)
  {
    ++tr;
  }



#pragma omp target is_device_ptr(tr, lr)
  {
    ++tr,++lr;
  }
}

void bar(float *&a, int *&b) {
  foo<int>(a,b);
}

#endif
///==========================================================================///
// RUN: %clang_cc1 -DCK2 -verify -fopenmp -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -emit-llvm %s -o - | FileCheck %s --check-prefix CK20
// RUN: %clang_cc1 -DCK2 -fopenmp -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck %s  --check-prefix CK21
// RUN: %clang_cc1 -DCK2 -verify -fopenmp -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -emit-llvm %s -o - | FileCheck %s  --check-prefix CK22
// RUN: %clang_cc1 -DCK2 -fopenmp -fopenmp-targets=i386-pc-linux-gnu -x c++ -std=c++11 -triple i386-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck %s  --check-prefix CK23

// RUN: %clang_cc1 -DCK2 -verify -fopenmp-simd -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -emit-llvm %s -o - | FileCheck --check-prefix SIMD-ONLY10 %s
// RUN: %clang_cc1 -DCK2 -fopenmp-simd -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY11 %s
// RUN: %clang_cc1 -DCK2 -verify -fopenmp-simd -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -emit-llvm %s -o - | FileCheck --check-prefix SIMD-ONLY12 %s
// RUN: %clang_cc1 -DCK2 -fopenmp-simd -fopenmp-targets=i386-pc-linux-gnu -x c++ -std=c++11 -triple i386-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY13 %s
#ifdef CK2


template <typename T>
struct ST {
  T *a;
  double *&b;
  ST(double *&b) : a(0), b(b) {}

  void foo(double *&arg) {
    int *la = 0;


#pragma omp target is_device_ptr(a)
    {
      a++;
    }


#pragma omp target is_device_ptr(b)
    {
      b++;
    }



#pragma omp target is_device_ptr(a, b)
    {
      a++;
      b++;
    }
  }
};

void bar(double *arg){
  ST<double> A(arg);
  A.foo(arg);
  ++arg;
}
#endif
///==========================================================================///
// RUN: %clang_cc1 -DCK3 -verify -fopenmp -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -emit-llvm %s -o - | FileCheck %s --check-prefix CK30
// RUN: %clang_cc1 -DCK3 -fopenmp -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck %s  --check-prefix CK31
// RUN: %clang_cc1 -DCK3 -verify -fopenmp -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -emit-llvm %s -o - | FileCheck %s  --check-prefix CK32
// RUN: %clang_cc1 -DCK3 -fopenmp -fopenmp-targets=i386-pc-linux-gnu -x c++ -std=c++11 -triple i386-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck %s  --check-prefix CK33

// RUN: %clang_cc1 -DCK3 -verify -fopenmp-simd -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -emit-llvm %s -o - | FileCheck --check-prefix SIMD-ONLY20 %s
// RUN: %clang_cc1 -DCK3 -fopenmp-simd -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -std=c++11 -triple powerpc64le-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -fopenmp-targets=powerpc64le-ibm-linux-gnu -x c++ -triple powerpc64le-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY21 %s
// RUN: %clang_cc1 -DCK3 -verify -fopenmp-simd -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -emit-llvm %s -o - | FileCheck --check-prefix SIMD-ONLY22 %s
// RUN: %clang_cc1 -DCK3 -fopenmp-simd -fopenmp-targets=i386-pc-linux-gnu -x c++ -std=c++11 -triple i386-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -fopenmp-simd -fopenmp-targets=i386-pc-linux-gnu -x c++ -triple i386-unknown-unknown -std=c++11 -include-pch %t -verify %s -emit-llvm -o - | FileCheck --check-prefix SIMD-ONLY23 %s
#ifdef CK3

// OMP_MAP_TARGET_PARAM = 0x20 | OMP_MAP_TO = 0x1 = 0x21
void bar() {
  __attribute__((aligned(64))) double *ptr;

#pragma omp target is_device_ptr(ptr)
  *ptr = 0;
}
#endif
#endif
// CK1-64-LABEL: define {{[^@]+}}@_Z3barRPfRPi
// CK1-64-SAME: (ptr noundef nonnull align 8 dereferenceable(8) [[A:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) #[[ATTR0:[0-9]+]] {
// CK1-64-NEXT:  entry:
// CK1-64-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// CK1-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
// CK1-64-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// CK1-64-NEXT:    call void @_Z3fooIiEvRPfRPT_(ptr noundef nonnull align 8 dereferenceable(8) [[TMP0]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP1]])
// CK1-64-NEXT:    ret void
// CK1-64-LABEL: define {{[^@]+}}@_Z3fooIiEvRPfRPT_
// CK1-64-SAME: (ptr noundef nonnull align 8 dereferenceable(8) [[LR:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[TR:%.*]]) #[[ATTR0]] comdat {
// CK1-64-NEXT:  entry:
// CK1-64-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[L:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[T:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_BASEPTRS1:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_PTRS2:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_MAPPERS3:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_BASEPTRS7:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_PTRS8:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_MAPPERS9:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_BASEPTRS13:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_PTRS14:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_MAPPERS15:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[_TMP19:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_BASEPTRS20:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_PTRS21:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_MAPPERS22:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[_TMP26:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_BASEPTRS27:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_PTRS28:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_MAPPERS29:%.*]] = alloca [1 x ptr], align 8
// CK1-64-NEXT:    [[_TMP33:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[_TMP34:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_BASEPTRS35:%.*]] = alloca [2 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_PTRS36:%.*]] = alloca [2 x ptr], align 8
// CK1-64-NEXT:    [[DOTOFFLOAD_MAPPERS37:%.*]] = alloca [2 x ptr], align 8
// CK1-64-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK1-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr @g, align 8
// CK1-64-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 8
// CK1-64-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 8
// CK1-64-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i64 0, i64 0
// CK1-64-NEXT:    store ptr null, ptr [[TMP3]], align 8
// CK1-64-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK1-64-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK1-64-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK1-64-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK1-64-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK1-64-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK1-64-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK1-64-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK1-64-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 8
// CK1-64-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK1-64-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 8
// CK1-64-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK1-64-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 8
// CK1-64-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK1-64-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 8
// CK1-64-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK1-64-NEXT:    store ptr null, ptr [[TMP12]], align 8
// CK1-64-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK1-64-NEXT:    store ptr null, ptr [[TMP13]], align 8
// CK1-64-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK1-64-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK1-64-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK1-64-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK1-64-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK1-64-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK1-64-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK1-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK1-64-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK1-64-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK1-64-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37.region_id, ptr [[KERNEL_ARGS]])
// CK1-64-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK1-64-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK1-64:       omp_offload.failed:
// CK1-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK1-64-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK1-64:       omp_offload.cont:
// CK1-64-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[L]], align 8
// CK1-64-NEXT:    [[TMP22:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP21]], ptr [[TMP22]], align 8
// CK1-64-NEXT:    [[TMP23:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP21]], ptr [[TMP23]], align 8
// CK1-64-NEXT:    [[TMP24:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS3]], i64 0, i64 0
// CK1-64-NEXT:    store ptr null, ptr [[TMP24]], align 8
// CK1-64-NEXT:    [[TMP25:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK1-64-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK1-64-NEXT:    [[KERNEL_ARGS4:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-64-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 0
// CK1-64-NEXT:    store i32 2, ptr [[TMP27]], align 4
// CK1-64-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 1
// CK1-64-NEXT:    store i32 1, ptr [[TMP28]], align 4
// CK1-64-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 2
// CK1-64-NEXT:    store ptr [[TMP25]], ptr [[TMP29]], align 8
// CK1-64-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 3
// CK1-64-NEXT:    store ptr [[TMP26]], ptr [[TMP30]], align 8
// CK1-64-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 4
// CK1-64-NEXT:    store ptr @.offload_sizes.1, ptr [[TMP31]], align 8
// CK1-64-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 5
// CK1-64-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP32]], align 8
// CK1-64-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 6
// CK1-64-NEXT:    store ptr null, ptr [[TMP33]], align 8
// CK1-64-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 7
// CK1-64-NEXT:    store ptr null, ptr [[TMP34]], align 8
// CK1-64-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 8
// CK1-64-NEXT:    store i64 0, ptr [[TMP35]], align 8
// CK1-64-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 9
// CK1-64-NEXT:    store i64 0, ptr [[TMP36]], align 8
// CK1-64-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 10
// CK1-64-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP37]], align 4
// CK1-64-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 11
// CK1-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP38]], align 4
// CK1-64-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 12
// CK1-64-NEXT:    store i32 0, ptr [[TMP39]], align 4
// CK1-64-NEXT:    [[TMP40:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43.region_id, ptr [[KERNEL_ARGS4]])
// CK1-64-NEXT:    [[TMP41:%.*]] = icmp ne i32 [[TMP40]], 0
// CK1-64-NEXT:    br i1 [[TMP41]], label [[OMP_OFFLOAD_FAILED5:%.*]], label [[OMP_OFFLOAD_CONT6:%.*]]
// CK1-64:       omp_offload.failed5:
// CK1-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43(ptr [[TMP21]]) #[[ATTR2]]
// CK1-64-NEXT:    br label [[OMP_OFFLOAD_CONT6]]
// CK1-64:       omp_offload.cont6:
// CK1-64-NEXT:    [[TMP42:%.*]] = load ptr, ptr [[T]], align 8
// CK1-64-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP42]], ptr [[TMP43]], align 8
// CK1-64-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP42]], ptr [[TMP44]], align 8
// CK1-64-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS9]], i64 0, i64 0
// CK1-64-NEXT:    store ptr null, ptr [[TMP45]], align 8
// CK1-64-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK1-64-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK1-64-NEXT:    [[KERNEL_ARGS10:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-64-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 0
// CK1-64-NEXT:    store i32 2, ptr [[TMP48]], align 4
// CK1-64-NEXT:    [[TMP49:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 1
// CK1-64-NEXT:    store i32 1, ptr [[TMP49]], align 4
// CK1-64-NEXT:    [[TMP50:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 2
// CK1-64-NEXT:    store ptr [[TMP46]], ptr [[TMP50]], align 8
// CK1-64-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 3
// CK1-64-NEXT:    store ptr [[TMP47]], ptr [[TMP51]], align 8
// CK1-64-NEXT:    [[TMP52:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 4
// CK1-64-NEXT:    store ptr @.offload_sizes.3, ptr [[TMP52]], align 8
// CK1-64-NEXT:    [[TMP53:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 5
// CK1-64-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP53]], align 8
// CK1-64-NEXT:    [[TMP54:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 6
// CK1-64-NEXT:    store ptr null, ptr [[TMP54]], align 8
// CK1-64-NEXT:    [[TMP55:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 7
// CK1-64-NEXT:    store ptr null, ptr [[TMP55]], align 8
// CK1-64-NEXT:    [[TMP56:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 8
// CK1-64-NEXT:    store i64 0, ptr [[TMP56]], align 8
// CK1-64-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 9
// CK1-64-NEXT:    store i64 0, ptr [[TMP57]], align 8
// CK1-64-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 10
// CK1-64-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP58]], align 4
// CK1-64-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 11
// CK1-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP59]], align 4
// CK1-64-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 12
// CK1-64-NEXT:    store i32 0, ptr [[TMP60]], align 4
// CK1-64-NEXT:    [[TMP61:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49.region_id, ptr [[KERNEL_ARGS10]])
// CK1-64-NEXT:    [[TMP62:%.*]] = icmp ne i32 [[TMP61]], 0
// CK1-64-NEXT:    br i1 [[TMP62]], label [[OMP_OFFLOAD_FAILED11:%.*]], label [[OMP_OFFLOAD_CONT12:%.*]]
// CK1-64:       omp_offload.failed11:
// CK1-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49(ptr [[TMP42]]) #[[ATTR2]]
// CK1-64-NEXT:    br label [[OMP_OFFLOAD_CONT12]]
// CK1-64:       omp_offload.cont12:
// CK1-64-NEXT:    [[TMP63:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[TMP63]], ptr [[TMP]], align 8
// CK1-64-NEXT:    [[TMP64:%.*]] = load ptr, ptr [[TMP]], align 8
// CK1-64-NEXT:    [[TMP65:%.*]] = load ptr, ptr [[TMP64]], align 8
// CK1-64-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP65]], ptr [[TMP66]], align 8
// CK1-64-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP65]], ptr [[TMP67]], align 8
// CK1-64-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS15]], i64 0, i64 0
// CK1-64-NEXT:    store ptr null, ptr [[TMP68]], align 8
// CK1-64-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK1-64-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK1-64-NEXT:    [[KERNEL_ARGS16:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-64-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 0
// CK1-64-NEXT:    store i32 2, ptr [[TMP71]], align 4
// CK1-64-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 1
// CK1-64-NEXT:    store i32 1, ptr [[TMP72]], align 4
// CK1-64-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 2
// CK1-64-NEXT:    store ptr [[TMP69]], ptr [[TMP73]], align 8
// CK1-64-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 3
// CK1-64-NEXT:    store ptr [[TMP70]], ptr [[TMP74]], align 8
// CK1-64-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 4
// CK1-64-NEXT:    store ptr @.offload_sizes.5, ptr [[TMP75]], align 8
// CK1-64-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 5
// CK1-64-NEXT:    store ptr @.offload_maptypes.6, ptr [[TMP76]], align 8
// CK1-64-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 6
// CK1-64-NEXT:    store ptr null, ptr [[TMP77]], align 8
// CK1-64-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 7
// CK1-64-NEXT:    store ptr null, ptr [[TMP78]], align 8
// CK1-64-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 8
// CK1-64-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK1-64-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 9
// CK1-64-NEXT:    store i64 0, ptr [[TMP80]], align 8
// CK1-64-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 10
// CK1-64-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP81]], align 4
// CK1-64-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 11
// CK1-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP82]], align 4
// CK1-64-NEXT:    [[TMP83:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 12
// CK1-64-NEXT:    store i32 0, ptr [[TMP83]], align 4
// CK1-64-NEXT:    [[TMP84:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55.region_id, ptr [[KERNEL_ARGS16]])
// CK1-64-NEXT:    [[TMP85:%.*]] = icmp ne i32 [[TMP84]], 0
// CK1-64-NEXT:    br i1 [[TMP85]], label [[OMP_OFFLOAD_FAILED17:%.*]], label [[OMP_OFFLOAD_CONT18:%.*]]
// CK1-64:       omp_offload.failed17:
// CK1-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55(ptr [[TMP65]]) #[[ATTR2]]
// CK1-64-NEXT:    br label [[OMP_OFFLOAD_CONT18]]
// CK1-64:       omp_offload.cont18:
// CK1-64-NEXT:    [[TMP86:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[TMP86]], ptr [[_TMP19]], align 8
// CK1-64-NEXT:    [[TMP87:%.*]] = load ptr, ptr [[_TMP19]], align 8
// CK1-64-NEXT:    [[TMP88:%.*]] = load ptr, ptr [[TMP87]], align 8
// CK1-64-NEXT:    [[TMP89:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP88]], ptr [[TMP89]], align 8
// CK1-64-NEXT:    [[TMP90:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP88]], ptr [[TMP90]], align 8
// CK1-64-NEXT:    [[TMP91:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS22]], i64 0, i64 0
// CK1-64-NEXT:    store ptr null, ptr [[TMP91]], align 8
// CK1-64-NEXT:    [[TMP92:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK1-64-NEXT:    [[TMP93:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK1-64-NEXT:    [[KERNEL_ARGS23:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-64-NEXT:    [[TMP94:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 0
// CK1-64-NEXT:    store i32 2, ptr [[TMP94]], align 4
// CK1-64-NEXT:    [[TMP95:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 1
// CK1-64-NEXT:    store i32 1, ptr [[TMP95]], align 4
// CK1-64-NEXT:    [[TMP96:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 2
// CK1-64-NEXT:    store ptr [[TMP92]], ptr [[TMP96]], align 8
// CK1-64-NEXT:    [[TMP97:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 3
// CK1-64-NEXT:    store ptr [[TMP93]], ptr [[TMP97]], align 8
// CK1-64-NEXT:    [[TMP98:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 4
// CK1-64-NEXT:    store ptr @.offload_sizes.7, ptr [[TMP98]], align 8
// CK1-64-NEXT:    [[TMP99:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 5
// CK1-64-NEXT:    store ptr @.offload_maptypes.8, ptr [[TMP99]], align 8
// CK1-64-NEXT:    [[TMP100:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 6
// CK1-64-NEXT:    store ptr null, ptr [[TMP100]], align 8
// CK1-64-NEXT:    [[TMP101:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 7
// CK1-64-NEXT:    store ptr null, ptr [[TMP101]], align 8
// CK1-64-NEXT:    [[TMP102:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 8
// CK1-64-NEXT:    store i64 0, ptr [[TMP102]], align 8
// CK1-64-NEXT:    [[TMP103:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 9
// CK1-64-NEXT:    store i64 0, ptr [[TMP103]], align 8
// CK1-64-NEXT:    [[TMP104:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 10
// CK1-64-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP104]], align 4
// CK1-64-NEXT:    [[TMP105:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 11
// CK1-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP105]], align 4
// CK1-64-NEXT:    [[TMP106:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 12
// CK1-64-NEXT:    store i32 0, ptr [[TMP106]], align 4
// CK1-64-NEXT:    [[TMP107:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61.region_id, ptr [[KERNEL_ARGS23]])
// CK1-64-NEXT:    [[TMP108:%.*]] = icmp ne i32 [[TMP107]], 0
// CK1-64-NEXT:    br i1 [[TMP108]], label [[OMP_OFFLOAD_FAILED24:%.*]], label [[OMP_OFFLOAD_CONT25:%.*]]
// CK1-64:       omp_offload.failed24:
// CK1-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61(ptr [[TMP88]]) #[[ATTR2]]
// CK1-64-NEXT:    br label [[OMP_OFFLOAD_CONT25]]
// CK1-64:       omp_offload.cont25:
// CK1-64-NEXT:    [[TMP109:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[TMP109]], ptr [[_TMP26]], align 8
// CK1-64-NEXT:    [[TMP110:%.*]] = load ptr, ptr [[_TMP26]], align 8
// CK1-64-NEXT:    [[TMP111:%.*]] = load ptr, ptr [[TMP110]], align 8
// CK1-64-NEXT:    [[TMP112:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP111]], ptr [[TMP112]], align 8
// CK1-64-NEXT:    [[TMP113:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP111]], ptr [[TMP113]], align 8
// CK1-64-NEXT:    [[TMP114:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS29]], i64 0, i64 0
// CK1-64-NEXT:    store ptr null, ptr [[TMP114]], align 8
// CK1-64-NEXT:    [[TMP115:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK1-64-NEXT:    [[TMP116:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK1-64-NEXT:    [[KERNEL_ARGS30:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-64-NEXT:    [[TMP117:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 0
// CK1-64-NEXT:    store i32 2, ptr [[TMP117]], align 4
// CK1-64-NEXT:    [[TMP118:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 1
// CK1-64-NEXT:    store i32 1, ptr [[TMP118]], align 4
// CK1-64-NEXT:    [[TMP119:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 2
// CK1-64-NEXT:    store ptr [[TMP115]], ptr [[TMP119]], align 8
// CK1-64-NEXT:    [[TMP120:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 3
// CK1-64-NEXT:    store ptr [[TMP116]], ptr [[TMP120]], align 8
// CK1-64-NEXT:    [[TMP121:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 4
// CK1-64-NEXT:    store ptr @.offload_sizes.9, ptr [[TMP121]], align 8
// CK1-64-NEXT:    [[TMP122:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 5
// CK1-64-NEXT:    store ptr @.offload_maptypes.10, ptr [[TMP122]], align 8
// CK1-64-NEXT:    [[TMP123:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 6
// CK1-64-NEXT:    store ptr null, ptr [[TMP123]], align 8
// CK1-64-NEXT:    [[TMP124:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 7
// CK1-64-NEXT:    store ptr null, ptr [[TMP124]], align 8
// CK1-64-NEXT:    [[TMP125:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 8
// CK1-64-NEXT:    store i64 0, ptr [[TMP125]], align 8
// CK1-64-NEXT:    [[TMP126:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 9
// CK1-64-NEXT:    store i64 0, ptr [[TMP126]], align 8
// CK1-64-NEXT:    [[TMP127:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 10
// CK1-64-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP127]], align 4
// CK1-64-NEXT:    [[TMP128:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 11
// CK1-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP128]], align 4
// CK1-64-NEXT:    [[TMP129:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 12
// CK1-64-NEXT:    store i32 0, ptr [[TMP129]], align 4
// CK1-64-NEXT:    [[TMP130:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67.region_id, ptr [[KERNEL_ARGS30]])
// CK1-64-NEXT:    [[TMP131:%.*]] = icmp ne i32 [[TMP130]], 0
// CK1-64-NEXT:    br i1 [[TMP131]], label [[OMP_OFFLOAD_FAILED31:%.*]], label [[OMP_OFFLOAD_CONT32:%.*]]
// CK1-64:       omp_offload.failed31:
// CK1-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67(ptr [[TMP111]]) #[[ATTR2]]
// CK1-64-NEXT:    br label [[OMP_OFFLOAD_CONT32]]
// CK1-64:       omp_offload.cont32:
// CK1-64-NEXT:    [[TMP132:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[TMP132]], ptr [[_TMP33]], align 8
// CK1-64-NEXT:    [[TMP133:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[TMP133]], ptr [[_TMP34]], align 8
// CK1-64-NEXT:    [[TMP134:%.*]] = load ptr, ptr [[_TMP33]], align 8
// CK1-64-NEXT:    [[TMP135:%.*]] = load ptr, ptr [[TMP134]], align 8
// CK1-64-NEXT:    [[TMP136:%.*]] = load ptr, ptr [[_TMP34]], align 8
// CK1-64-NEXT:    [[TMP137:%.*]] = load ptr, ptr [[TMP136]], align 8
// CK1-64-NEXT:    [[TMP138:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP135]], ptr [[TMP138]], align 8
// CK1-64-NEXT:    [[TMP139:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK1-64-NEXT:    store ptr [[TMP135]], ptr [[TMP139]], align 8
// CK1-64-NEXT:    [[TMP140:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i64 0, i64 0
// CK1-64-NEXT:    store ptr null, ptr [[TMP140]], align 8
// CK1-64-NEXT:    [[TMP141:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 1
// CK1-64-NEXT:    store ptr [[TMP137]], ptr [[TMP141]], align 8
// CK1-64-NEXT:    [[TMP142:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 1
// CK1-64-NEXT:    store ptr [[TMP137]], ptr [[TMP142]], align 8
// CK1-64-NEXT:    [[TMP143:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i64 0, i64 1
// CK1-64-NEXT:    store ptr null, ptr [[TMP143]], align 8
// CK1-64-NEXT:    [[TMP144:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK1-64-NEXT:    [[TMP145:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK1-64-NEXT:    [[KERNEL_ARGS38:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-64-NEXT:    [[TMP146:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 0
// CK1-64-NEXT:    store i32 2, ptr [[TMP146]], align 4
// CK1-64-NEXT:    [[TMP147:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 1
// CK1-64-NEXT:    store i32 2, ptr [[TMP147]], align 4
// CK1-64-NEXT:    [[TMP148:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 2
// CK1-64-NEXT:    store ptr [[TMP144]], ptr [[TMP148]], align 8
// CK1-64-NEXT:    [[TMP149:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 3
// CK1-64-NEXT:    store ptr [[TMP145]], ptr [[TMP149]], align 8
// CK1-64-NEXT:    [[TMP150:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 4
// CK1-64-NEXT:    store ptr @.offload_sizes.11, ptr [[TMP150]], align 8
// CK1-64-NEXT:    [[TMP151:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 5
// CK1-64-NEXT:    store ptr @.offload_maptypes.12, ptr [[TMP151]], align 8
// CK1-64-NEXT:    [[TMP152:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 6
// CK1-64-NEXT:    store ptr null, ptr [[TMP152]], align 8
// CK1-64-NEXT:    [[TMP153:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 7
// CK1-64-NEXT:    store ptr null, ptr [[TMP153]], align 8
// CK1-64-NEXT:    [[TMP154:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 8
// CK1-64-NEXT:    store i64 0, ptr [[TMP154]], align 8
// CK1-64-NEXT:    [[TMP155:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 9
// CK1-64-NEXT:    store i64 0, ptr [[TMP155]], align 8
// CK1-64-NEXT:    [[TMP156:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 10
// CK1-64-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP156]], align 4
// CK1-64-NEXT:    [[TMP157:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 11
// CK1-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP157]], align 4
// CK1-64-NEXT:    [[TMP158:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 12
// CK1-64-NEXT:    store i32 0, ptr [[TMP158]], align 4
// CK1-64-NEXT:    [[TMP159:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74.region_id, ptr [[KERNEL_ARGS38]])
// CK1-64-NEXT:    [[TMP160:%.*]] = icmp ne i32 [[TMP159]], 0
// CK1-64-NEXT:    br i1 [[TMP160]], label [[OMP_OFFLOAD_FAILED39:%.*]], label [[OMP_OFFLOAD_CONT40:%.*]]
// CK1-64:       omp_offload.failed39:
// CK1-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74(ptr [[TMP135]], ptr [[TMP137]]) #[[ATTR2]]
// CK1-64-NEXT:    br label [[OMP_OFFLOAD_CONT40]]
// CK1-64:       omp_offload.cont40:
// CK1-64-NEXT:    ret void
// CK1-64-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37
// CK1-64-SAME: (ptr noundef [[G:%.*]]) #[[ATTR1:[0-9]+]] {
// CK1-64-NEXT:  entry:
// CK1-64-NEXT:    [[G_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    store ptr [[G]], ptr [[G_ADDR]], align 8
// CK1-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[G_ADDR]], align 8
// CK1-64-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK1-64-NEXT:    store ptr [[INCDEC_PTR]], ptr [[G_ADDR]], align 8
// CK1-64-NEXT:    ret void
// CK1-64-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43
// CK1-64-SAME: (ptr noundef [[L:%.*]]) #[[ATTR1]] {
// CK1-64-NEXT:  entry:
// CK1-64-NEXT:    [[L_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    store ptr [[L]], ptr [[L_ADDR]], align 8
// CK1-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[L_ADDR]], align 8
// CK1-64-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP0]], i32 1
// CK1-64-NEXT:    store ptr [[INCDEC_PTR]], ptr [[L_ADDR]], align 8
// CK1-64-NEXT:    ret void
// CK1-64-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49
// CK1-64-SAME: (ptr noundef [[T:%.*]]) #[[ATTR1]] {
// CK1-64-NEXT:  entry:
// CK1-64-NEXT:    [[T_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    store ptr [[T]], ptr [[T_ADDR]], align 8
// CK1-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[T_ADDR]], align 8
// CK1-64-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP0]], i32 1
// CK1-64-NEXT:    store ptr [[INCDEC_PTR]], ptr [[T_ADDR]], align 8
// CK1-64-NEXT:    ret void
// CK1-64-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55
// CK1-64-SAME: (ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK1-64-NEXT:  entry:
// CK1-64-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[LR_ADDR]], ptr [[TMP]], align 8
// CK1-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK1-64-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK1-64-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 1
// CK1-64-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK1-64-NEXT:    ret void
// CK1-64-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61
// CK1-64-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK1-64-NEXT:  entry:
// CK1-64-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 8
// CK1-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK1-64-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK1-64-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK1-64-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK1-64-NEXT:    ret void
// CK1-64-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67
// CK1-64-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK1-64-NEXT:  entry:
// CK1-64-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 8
// CK1-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK1-64-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK1-64-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK1-64-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK1-64-NEXT:    ret void
// CK1-64-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74
// CK1-64-SAME: (ptr noundef [[TR:%.*]], ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK1-64-NEXT:  entry:
// CK1-64-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 8
// CK1-64-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 8
// CK1-64-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 8
// CK1-64-NEXT:    store ptr [[LR_ADDR]], ptr [[_TMP1]], align 8
// CK1-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK1-64-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK1-64-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK1-64-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK1-64-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[_TMP1]], align 8
// CK1-64-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
// CK1-64-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds float, ptr [[TMP3]], i32 1
// CK1-64-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[TMP2]], align 8
// CK1-64-NEXT:    ret void
// CK1-64-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK1-64-SAME: () #[[ATTR3:[0-9]+]] {
// CK1-64-NEXT:  entry:
// CK1-64-NEXT:    call void @__tgt_register_requires(i64 1)
// CK1-64-NEXT:    ret void
// CK2-64-LABEL: define {{[^@]+}}@_Z3barPd
// CK2-64-SAME: (ptr noundef [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
// CK2-64-NEXT:  entry:
// CK2-64-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 8
// CK2-64-NEXT:    [[A:%.*]] = alloca [[STRUCT_ST:%.*]], align 8
// CK2-64-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 8
// CK2-64-NEXT:    call void @_ZN2STIdEC1ERPd(ptr noundef nonnull align 8 dereferenceable(16) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG_ADDR]])
// CK2-64-NEXT:    call void @_ZN2STIdE3fooERPd(ptr noundef nonnull align 8 dereferenceable(16) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG_ADDR]])
// CK2-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARG_ADDR]], align 8
// CK2-64-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK2-64-NEXT:    store ptr [[INCDEC_PTR]], ptr [[ARG_ADDR]], align 8
// CK2-64-NEXT:    ret void
// CK2-64-LABEL: define {{[^@]+}}@_ZN2STIdEC1ERPd
// CK2-64-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) unnamed_addr #[[ATTR1:[0-9]+]] comdat align 2 {
// CK2-64-NEXT:  entry:
// CK2-64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK2-64-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// CK2-64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// CK2-64-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// CK2-64-NEXT:    call void @_ZN2STIdEC2ERPd(ptr noundef nonnull align 8 dereferenceable(16) [[THIS1]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP0]])
// CK2-64-NEXT:    ret void
// CK2-64-LABEL: define {{[^@]+}}@_ZN2STIdE3fooERPd
// CK2-64-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG:%.*]]) #[[ATTR0]] comdat align 2 {
// CK2-64-NEXT:  entry:
// CK2-64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK2-64-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 8
// CK2-64-NEXT:    [[LA:%.*]] = alloca ptr, align 8
// CK2-64-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 8
// CK2-64-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 8
// CK2-64-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 8
// CK2-64-NEXT:    [[DOTOFFLOAD_BASEPTRS2:%.*]] = alloca [2 x ptr], align 8
// CK2-64-NEXT:    [[DOTOFFLOAD_PTRS3:%.*]] = alloca [2 x ptr], align 8
// CK2-64-NEXT:    [[DOTOFFLOAD_MAPPERS4:%.*]] = alloca [2 x ptr], align 8
// CK2-64-NEXT:    [[DOTOFFLOAD_SIZES:%.*]] = alloca [2 x i64], align 8
// CK2-64-NEXT:    [[DOTOFFLOAD_BASEPTRS10:%.*]] = alloca [3 x ptr], align 8
// CK2-64-NEXT:    [[DOTOFFLOAD_PTRS11:%.*]] = alloca [3 x ptr], align 8
// CK2-64-NEXT:    [[DOTOFFLOAD_MAPPERS12:%.*]] = alloca [3 x ptr], align 8
// CK2-64-NEXT:    [[DOTOFFLOAD_SIZES13:%.*]] = alloca [3 x i64], align 8
// CK2-64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 8
// CK2-64-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    store ptr null, ptr [[LA]], align 8
// CK2-64-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK2-64-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK2-64-NEXT:    store ptr [[THIS1]], ptr [[TMP0]], align 8
// CK2-64-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK2-64-NEXT:    store ptr [[A]], ptr [[TMP1]], align 8
// CK2-64-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i64 0, i64 0
// CK2-64-NEXT:    store ptr null, ptr [[TMP2]], align 8
// CK2-64-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK2-64-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK2-64-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK2-64-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK2-64-NEXT:    store i32 2, ptr [[TMP5]], align 4
// CK2-64-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK2-64-NEXT:    store i32 1, ptr [[TMP6]], align 4
// CK2-64-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK2-64-NEXT:    store ptr [[TMP3]], ptr [[TMP7]], align 8
// CK2-64-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK2-64-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 8
// CK2-64-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK2-64-NEXT:    store ptr @.offload_sizes, ptr [[TMP9]], align 8
// CK2-64-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK2-64-NEXT:    store ptr @.offload_maptypes, ptr [[TMP10]], align 8
// CK2-64-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK2-64-NEXT:    store ptr null, ptr [[TMP11]], align 8
// CK2-64-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK2-64-NEXT:    store ptr null, ptr [[TMP12]], align 8
// CK2-64-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK2-64-NEXT:    store i64 0, ptr [[TMP13]], align 8
// CK2-64-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK2-64-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK2-64-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK2-64-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP15]], align 4
// CK2-64-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK2-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP16]], align 4
// CK2-64-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK2-64-NEXT:    store i32 0, ptr [[TMP17]], align 4
// CK2-64-NEXT:    [[TMP18:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112.region_id, ptr [[KERNEL_ARGS]])
// CK2-64-NEXT:    [[TMP19:%.*]] = icmp ne i32 [[TMP18]], 0
// CK2-64-NEXT:    br i1 [[TMP19]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK2-64:       omp_offload.failed:
// CK2-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112(ptr [[THIS1]]) #[[ATTR3:[0-9]+]]
// CK2-64-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK2-64:       omp_offload.cont:
// CK2-64-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK2-64-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[B]], align 8
// CK2-64-NEXT:    [[TMP21:%.*]] = getelementptr ptr, ptr [[B]], i32 1
// CK2-64-NEXT:    [[TMP22:%.*]] = ptrtoint ptr [[TMP21]] to i64
// CK2-64-NEXT:    [[TMP23:%.*]] = ptrtoint ptr [[B]] to i64
// CK2-64-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP22]], [[TMP23]]
// CK2-64-NEXT:    [[TMP25:%.*]] = sdiv exact i64 [[TMP24]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK2-64-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 8 [[DOTOFFLOAD_SIZES]], ptr align 8 @.offload_sizes.1, i64 16, i1 false)
// CK2-64-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK2-64-NEXT:    store ptr [[THIS1]], ptr [[TMP26]], align 8
// CK2-64-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK2-64-NEXT:    store ptr [[B]], ptr [[TMP27]], align 8
// CK2-64-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK2-64-NEXT:    store i64 [[TMP25]], ptr [[TMP28]], align 8
// CK2-64-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i64 0, i64 0
// CK2-64-NEXT:    store ptr null, ptr [[TMP29]], align 8
// CK2-64-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 1
// CK2-64-NEXT:    store ptr [[THIS1]], ptr [[TMP30]], align 8
// CK2-64-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 1
// CK2-64-NEXT:    store ptr [[TMP20]], ptr [[TMP31]], align 8
// CK2-64-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i64 0, i64 1
// CK2-64-NEXT:    store ptr null, ptr [[TMP32]], align 8
// CK2-64-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK2-64-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK2-64-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK2-64-NEXT:    [[KERNEL_ARGS5:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK2-64-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 0
// CK2-64-NEXT:    store i32 2, ptr [[TMP36]], align 4
// CK2-64-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 1
// CK2-64-NEXT:    store i32 2, ptr [[TMP37]], align 4
// CK2-64-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 2
// CK2-64-NEXT:    store ptr [[TMP33]], ptr [[TMP38]], align 8
// CK2-64-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 3
// CK2-64-NEXT:    store ptr [[TMP34]], ptr [[TMP39]], align 8
// CK2-64-NEXT:    [[TMP40:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 4
// CK2-64-NEXT:    store ptr [[TMP35]], ptr [[TMP40]], align 8
// CK2-64-NEXT:    [[TMP41:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 5
// CK2-64-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP41]], align 8
// CK2-64-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 6
// CK2-64-NEXT:    store ptr null, ptr [[TMP42]], align 8
// CK2-64-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 7
// CK2-64-NEXT:    store ptr null, ptr [[TMP43]], align 8
// CK2-64-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 8
// CK2-64-NEXT:    store i64 0, ptr [[TMP44]], align 8
// CK2-64-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 9
// CK2-64-NEXT:    store i64 0, ptr [[TMP45]], align 8
// CK2-64-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 10
// CK2-64-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP46]], align 4
// CK2-64-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 11
// CK2-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP47]], align 4
// CK2-64-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 12
// CK2-64-NEXT:    store i32 0, ptr [[TMP48]], align 4
// CK2-64-NEXT:    [[TMP49:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118.region_id, ptr [[KERNEL_ARGS5]])
// CK2-64-NEXT:    [[TMP50:%.*]] = icmp ne i32 [[TMP49]], 0
// CK2-64-NEXT:    br i1 [[TMP50]], label [[OMP_OFFLOAD_FAILED6:%.*]], label [[OMP_OFFLOAD_CONT7:%.*]]
// CK2-64:       omp_offload.failed6:
// CK2-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118(ptr [[THIS1]]) #[[ATTR3]]
// CK2-64-NEXT:    br label [[OMP_OFFLOAD_CONT7]]
// CK2-64:       omp_offload.cont7:
// CK2-64-NEXT:    [[A8:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 0
// CK2-64-NEXT:    [[B9:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK2-64-NEXT:    [[TMP51:%.*]] = load ptr, ptr [[B9]], align 8
// CK2-64-NEXT:    [[TMP52:%.*]] = getelementptr ptr, ptr [[B9]], i32 1
// CK2-64-NEXT:    [[TMP53:%.*]] = ptrtoint ptr [[TMP52]] to i64
// CK2-64-NEXT:    [[TMP54:%.*]] = ptrtoint ptr [[A8]] to i64
// CK2-64-NEXT:    [[TMP55:%.*]] = sub i64 [[TMP53]], [[TMP54]]
// CK2-64-NEXT:    [[TMP56:%.*]] = sdiv exact i64 [[TMP55]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK2-64-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 8 [[DOTOFFLOAD_SIZES13]], ptr align 8 @.offload_sizes.3, i64 24, i1 false)
// CK2-64-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK2-64-NEXT:    store ptr [[THIS1]], ptr [[TMP57]], align 8
// CK2-64-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK2-64-NEXT:    store ptr [[A8]], ptr [[TMP58]], align 8
// CK2-64-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK2-64-NEXT:    store i64 [[TMP56]], ptr [[TMP59]], align 8
// CK2-64-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i64 0, i64 0
// CK2-64-NEXT:    store ptr null, ptr [[TMP60]], align 8
// CK2-64-NEXT:    [[TMP61:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 1
// CK2-64-NEXT:    store ptr [[THIS1]], ptr [[TMP61]], align 8
// CK2-64-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 1
// CK2-64-NEXT:    store ptr [[A8]], ptr [[TMP62]], align 8
// CK2-64-NEXT:    [[TMP63:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i64 0, i64 1
// CK2-64-NEXT:    store ptr null, ptr [[TMP63]], align 8
// CK2-64-NEXT:    [[TMP64:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 2
// CK2-64-NEXT:    store ptr [[THIS1]], ptr [[TMP64]], align 8
// CK2-64-NEXT:    [[TMP65:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 2
// CK2-64-NEXT:    store ptr [[TMP51]], ptr [[TMP65]], align 8
// CK2-64-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i64 0, i64 2
// CK2-64-NEXT:    store ptr null, ptr [[TMP66]], align 8
// CK2-64-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK2-64-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK2-64-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK2-64-NEXT:    [[KERNEL_ARGS14:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK2-64-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 0
// CK2-64-NEXT:    store i32 2, ptr [[TMP70]], align 4
// CK2-64-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 1
// CK2-64-NEXT:    store i32 3, ptr [[TMP71]], align 4
// CK2-64-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 2
// CK2-64-NEXT:    store ptr [[TMP67]], ptr [[TMP72]], align 8
// CK2-64-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 3
// CK2-64-NEXT:    store ptr [[TMP68]], ptr [[TMP73]], align 8
// CK2-64-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 4
// CK2-64-NEXT:    store ptr [[TMP69]], ptr [[TMP74]], align 8
// CK2-64-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 5
// CK2-64-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP75]], align 8
// CK2-64-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 6
// CK2-64-NEXT:    store ptr null, ptr [[TMP76]], align 8
// CK2-64-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 7
// CK2-64-NEXT:    store ptr null, ptr [[TMP77]], align 8
// CK2-64-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 8
// CK2-64-NEXT:    store i64 0, ptr [[TMP78]], align 8
// CK2-64-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 9
// CK2-64-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK2-64-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 10
// CK2-64-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP80]], align 4
// CK2-64-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 11
// CK2-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP81]], align 4
// CK2-64-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 12
// CK2-64-NEXT:    store i32 0, ptr [[TMP82]], align 4
// CK2-64-NEXT:    [[TMP83:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125.region_id, ptr [[KERNEL_ARGS14]])
// CK2-64-NEXT:    [[TMP84:%.*]] = icmp ne i32 [[TMP83]], 0
// CK2-64-NEXT:    br i1 [[TMP84]], label [[OMP_OFFLOAD_FAILED15:%.*]], label [[OMP_OFFLOAD_CONT16:%.*]]
// CK2-64:       omp_offload.failed15:
// CK2-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125(ptr [[THIS1]]) #[[ATTR3]]
// CK2-64-NEXT:    br label [[OMP_OFFLOAD_CONT16]]
// CK2-64:       omp_offload.cont16:
// CK2-64-NEXT:    ret void
// CK2-64-LABEL: define {{[^@]+}}@_ZN2STIdEC2ERPd
// CK2-64-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) unnamed_addr #[[ATTR1]] comdat align 2 {
// CK2-64-NEXT:  entry:
// CK2-64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK2-64-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// CK2-64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// CK2-64-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK2-64-NEXT:    store ptr null, ptr [[A]], align 8
// CK2-64-NEXT:    [[B2:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK2-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// CK2-64-NEXT:    store ptr [[TMP0]], ptr [[B2]], align 8
// CK2-64-NEXT:    ret void
// CK2-64-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112
// CK2-64-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2:[0-9]+]] {
// CK2-64-NEXT:  entry:
// CK2-64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK2-64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK2-64-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 8
// CK2-64-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK2-64-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 8
// CK2-64-NEXT:    ret void
// CK2-64-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118
// CK2-64-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK2-64-NEXT:  entry:
// CK2-64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK2-64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 1
// CK2-64-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B]], align 8
// CK2-64-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 8
// CK2-64-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i32 1
// CK2-64-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP1]], align 8
// CK2-64-NEXT:    ret void
// CK2-64-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125
// CK2-64-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK2-64-NEXT:  entry:
// CK2-64-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK2-64-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK2-64-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK2-64-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 8
// CK2-64-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK2-64-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 8
// CK2-64-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[TMP0]], i32 0, i32 1
// CK2-64-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[B]], align 8
// CK2-64-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
// CK2-64-NEXT:    [[INCDEC_PTR1:%.*]] = getelementptr inbounds double, ptr [[TMP3]], i32 1
// CK2-64-NEXT:    store ptr [[INCDEC_PTR1]], ptr [[TMP2]], align 8
// CK2-64-NEXT:    ret void
// CK2-64-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK2-64-SAME: () #[[ATTR5:[0-9]+]] {
// CK2-64-NEXT:  entry:
// CK2-64-NEXT:    call void @__tgt_register_requires(i64 1)
// CK2-64-NEXT:    ret void
// CK2-32-LABEL: define {{[^@]+}}@_Z3barPd
// CK2-32-SAME: (ptr noundef [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
// CK2-32-NEXT:  entry:
// CK2-32-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 4
// CK2-32-NEXT:    [[A:%.*]] = alloca [[STRUCT_ST:%.*]], align 4
// CK2-32-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 4
// CK2-32-NEXT:    call void @_ZN2STIdEC1ERPd(ptr noundef nonnull align 4 dereferenceable(8) [[A]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG_ADDR]])
// CK2-32-NEXT:    call void @_ZN2STIdE3fooERPd(ptr noundef nonnull align 4 dereferenceable(8) [[A]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG_ADDR]])
// CK2-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARG_ADDR]], align 4
// CK2-32-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK2-32-NEXT:    store ptr [[INCDEC_PTR]], ptr [[ARG_ADDR]], align 4
// CK2-32-NEXT:    ret void
// CK2-32-LABEL: define {{[^@]+}}@_ZN2STIdEC1ERPd
// CK2-32-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) unnamed_addr #[[ATTR1:[0-9]+]] comdat align 2 {
// CK2-32-NEXT:  entry:
// CK2-32-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK2-32-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// CK2-32-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// CK2-32-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// CK2-32-NEXT:    call void @_ZN2STIdEC2ERPd(ptr noundef nonnull align 4 dereferenceable(8) [[THIS1]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]])
// CK2-32-NEXT:    ret void
// CK2-32-LABEL: define {{[^@]+}}@_ZN2STIdE3fooERPd
// CK2-32-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR0]] comdat align 2 {
// CK2-32-NEXT:  entry:
// CK2-32-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK2-32-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 4
// CK2-32-NEXT:    [[LA:%.*]] = alloca ptr, align 4
// CK2-32-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 4
// CK2-32-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 4
// CK2-32-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 4
// CK2-32-NEXT:    [[DOTOFFLOAD_BASEPTRS2:%.*]] = alloca [2 x ptr], align 4
// CK2-32-NEXT:    [[DOTOFFLOAD_PTRS3:%.*]] = alloca [2 x ptr], align 4
// CK2-32-NEXT:    [[DOTOFFLOAD_MAPPERS4:%.*]] = alloca [2 x ptr], align 4
// CK2-32-NEXT:    [[DOTOFFLOAD_SIZES:%.*]] = alloca [2 x i64], align 4
// CK2-32-NEXT:    [[DOTOFFLOAD_BASEPTRS10:%.*]] = alloca [3 x ptr], align 4
// CK2-32-NEXT:    [[DOTOFFLOAD_PTRS11:%.*]] = alloca [3 x ptr], align 4
// CK2-32-NEXT:    [[DOTOFFLOAD_MAPPERS12:%.*]] = alloca [3 x ptr], align 4
// CK2-32-NEXT:    [[DOTOFFLOAD_SIZES13:%.*]] = alloca [3 x i64], align 4
// CK2-32-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 4
// CK2-32-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    store ptr null, ptr [[LA]], align 4
// CK2-32-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK2-32-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK2-32-NEXT:    store ptr [[THIS1]], ptr [[TMP0]], align 4
// CK2-32-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK2-32-NEXT:    store ptr [[A]], ptr [[TMP1]], align 4
// CK2-32-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i32 0, i32 0
// CK2-32-NEXT:    store ptr null, ptr [[TMP2]], align 4
// CK2-32-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK2-32-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK2-32-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK2-32-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK2-32-NEXT:    store i32 2, ptr [[TMP5]], align 4
// CK2-32-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK2-32-NEXT:    store i32 1, ptr [[TMP6]], align 4
// CK2-32-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK2-32-NEXT:    store ptr [[TMP3]], ptr [[TMP7]], align 4
// CK2-32-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK2-32-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 4
// CK2-32-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK2-32-NEXT:    store ptr @.offload_sizes, ptr [[TMP9]], align 4
// CK2-32-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK2-32-NEXT:    store ptr @.offload_maptypes, ptr [[TMP10]], align 4
// CK2-32-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK2-32-NEXT:    store ptr null, ptr [[TMP11]], align 4
// CK2-32-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK2-32-NEXT:    store ptr null, ptr [[TMP12]], align 4
// CK2-32-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK2-32-NEXT:    store i64 0, ptr [[TMP13]], align 8
// CK2-32-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK2-32-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK2-32-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK2-32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP15]], align 4
// CK2-32-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK2-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP16]], align 4
// CK2-32-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK2-32-NEXT:    store i32 0, ptr [[TMP17]], align 4
// CK2-32-NEXT:    [[TMP18:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112.region_id, ptr [[KERNEL_ARGS]])
// CK2-32-NEXT:    [[TMP19:%.*]] = icmp ne i32 [[TMP18]], 0
// CK2-32-NEXT:    br i1 [[TMP19]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK2-32:       omp_offload.failed:
// CK2-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112(ptr [[THIS1]]) #[[ATTR3:[0-9]+]]
// CK2-32-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK2-32:       omp_offload.cont:
// CK2-32-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK2-32-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[B]], align 4
// CK2-32-NEXT:    [[TMP21:%.*]] = getelementptr ptr, ptr [[B]], i32 1
// CK2-32-NEXT:    [[TMP22:%.*]] = ptrtoint ptr [[TMP21]] to i64
// CK2-32-NEXT:    [[TMP23:%.*]] = ptrtoint ptr [[B]] to i64
// CK2-32-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP22]], [[TMP23]]
// CK2-32-NEXT:    [[TMP25:%.*]] = sdiv exact i64 [[TMP24]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK2-32-NEXT:    call void @llvm.memcpy.p0.p0.i32(ptr align 4 [[DOTOFFLOAD_SIZES]], ptr align 4 @.offload_sizes.1, i32 16, i1 false)
// CK2-32-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK2-32-NEXT:    store ptr [[THIS1]], ptr [[TMP26]], align 4
// CK2-32-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK2-32-NEXT:    store ptr [[B]], ptr [[TMP27]], align 4
// CK2-32-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK2-32-NEXT:    store i64 [[TMP25]], ptr [[TMP28]], align 4
// CK2-32-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i32 0, i32 0
// CK2-32-NEXT:    store ptr null, ptr [[TMP29]], align 4
// CK2-32-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 1
// CK2-32-NEXT:    store ptr [[THIS1]], ptr [[TMP30]], align 4
// CK2-32-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 1
// CK2-32-NEXT:    store ptr [[TMP20]], ptr [[TMP31]], align 4
// CK2-32-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i32 0, i32 1
// CK2-32-NEXT:    store ptr null, ptr [[TMP32]], align 4
// CK2-32-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK2-32-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK2-32-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK2-32-NEXT:    [[KERNEL_ARGS5:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK2-32-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 0
// CK2-32-NEXT:    store i32 2, ptr [[TMP36]], align 4
// CK2-32-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 1
// CK2-32-NEXT:    store i32 2, ptr [[TMP37]], align 4
// CK2-32-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 2
// CK2-32-NEXT:    store ptr [[TMP33]], ptr [[TMP38]], align 4
// CK2-32-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 3
// CK2-32-NEXT:    store ptr [[TMP34]], ptr [[TMP39]], align 4
// CK2-32-NEXT:    [[TMP40:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 4
// CK2-32-NEXT:    store ptr [[TMP35]], ptr [[TMP40]], align 4
// CK2-32-NEXT:    [[TMP41:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 5
// CK2-32-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP41]], align 4
// CK2-32-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 6
// CK2-32-NEXT:    store ptr null, ptr [[TMP42]], align 4
// CK2-32-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 7
// CK2-32-NEXT:    store ptr null, ptr [[TMP43]], align 4
// CK2-32-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 8
// CK2-32-NEXT:    store i64 0, ptr [[TMP44]], align 8
// CK2-32-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 9
// CK2-32-NEXT:    store i64 0, ptr [[TMP45]], align 8
// CK2-32-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 10
// CK2-32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP46]], align 4
// CK2-32-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 11
// CK2-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP47]], align 4
// CK2-32-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 12
// CK2-32-NEXT:    store i32 0, ptr [[TMP48]], align 4
// CK2-32-NEXT:    [[TMP49:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118.region_id, ptr [[KERNEL_ARGS5]])
// CK2-32-NEXT:    [[TMP50:%.*]] = icmp ne i32 [[TMP49]], 0
// CK2-32-NEXT:    br i1 [[TMP50]], label [[OMP_OFFLOAD_FAILED6:%.*]], label [[OMP_OFFLOAD_CONT7:%.*]]
// CK2-32:       omp_offload.failed6:
// CK2-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118(ptr [[THIS1]]) #[[ATTR3]]
// CK2-32-NEXT:    br label [[OMP_OFFLOAD_CONT7]]
// CK2-32:       omp_offload.cont7:
// CK2-32-NEXT:    [[A8:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 0
// CK2-32-NEXT:    [[B9:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK2-32-NEXT:    [[TMP51:%.*]] = load ptr, ptr [[B9]], align 4
// CK2-32-NEXT:    [[TMP52:%.*]] = getelementptr ptr, ptr [[B9]], i32 1
// CK2-32-NEXT:    [[TMP53:%.*]] = ptrtoint ptr [[TMP52]] to i64
// CK2-32-NEXT:    [[TMP54:%.*]] = ptrtoint ptr [[A8]] to i64
// CK2-32-NEXT:    [[TMP55:%.*]] = sub i64 [[TMP53]], [[TMP54]]
// CK2-32-NEXT:    [[TMP56:%.*]] = sdiv exact i64 [[TMP55]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK2-32-NEXT:    call void @llvm.memcpy.p0.p0.i32(ptr align 4 [[DOTOFFLOAD_SIZES13]], ptr align 4 @.offload_sizes.3, i32 24, i1 false)
// CK2-32-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK2-32-NEXT:    store ptr [[THIS1]], ptr [[TMP57]], align 4
// CK2-32-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK2-32-NEXT:    store ptr [[A8]], ptr [[TMP58]], align 4
// CK2-32-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK2-32-NEXT:    store i64 [[TMP56]], ptr [[TMP59]], align 4
// CK2-32-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i32 0, i32 0
// CK2-32-NEXT:    store ptr null, ptr [[TMP60]], align 4
// CK2-32-NEXT:    [[TMP61:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 1
// CK2-32-NEXT:    store ptr [[THIS1]], ptr [[TMP61]], align 4
// CK2-32-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 1
// CK2-32-NEXT:    store ptr [[A8]], ptr [[TMP62]], align 4
// CK2-32-NEXT:    [[TMP63:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i32 0, i32 1
// CK2-32-NEXT:    store ptr null, ptr [[TMP63]], align 4
// CK2-32-NEXT:    [[TMP64:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 2
// CK2-32-NEXT:    store ptr [[THIS1]], ptr [[TMP64]], align 4
// CK2-32-NEXT:    [[TMP65:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 2
// CK2-32-NEXT:    store ptr [[TMP51]], ptr [[TMP65]], align 4
// CK2-32-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i32 0, i32 2
// CK2-32-NEXT:    store ptr null, ptr [[TMP66]], align 4
// CK2-32-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK2-32-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK2-32-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK2-32-NEXT:    [[KERNEL_ARGS14:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK2-32-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 0
// CK2-32-NEXT:    store i32 2, ptr [[TMP70]], align 4
// CK2-32-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 1
// CK2-32-NEXT:    store i32 3, ptr [[TMP71]], align 4
// CK2-32-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 2
// CK2-32-NEXT:    store ptr [[TMP67]], ptr [[TMP72]], align 4
// CK2-32-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 3
// CK2-32-NEXT:    store ptr [[TMP68]], ptr [[TMP73]], align 4
// CK2-32-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 4
// CK2-32-NEXT:    store ptr [[TMP69]], ptr [[TMP74]], align 4
// CK2-32-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 5
// CK2-32-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP75]], align 4
// CK2-32-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 6
// CK2-32-NEXT:    store ptr null, ptr [[TMP76]], align 4
// CK2-32-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 7
// CK2-32-NEXT:    store ptr null, ptr [[TMP77]], align 4
// CK2-32-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 8
// CK2-32-NEXT:    store i64 0, ptr [[TMP78]], align 8
// CK2-32-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 9
// CK2-32-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK2-32-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 10
// CK2-32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP80]], align 4
// CK2-32-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 11
// CK2-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP81]], align 4
// CK2-32-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 12
// CK2-32-NEXT:    store i32 0, ptr [[TMP82]], align 4
// CK2-32-NEXT:    [[TMP83:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125.region_id, ptr [[KERNEL_ARGS14]])
// CK2-32-NEXT:    [[TMP84:%.*]] = icmp ne i32 [[TMP83]], 0
// CK2-32-NEXT:    br i1 [[TMP84]], label [[OMP_OFFLOAD_FAILED15:%.*]], label [[OMP_OFFLOAD_CONT16:%.*]]
// CK2-32:       omp_offload.failed15:
// CK2-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125(ptr [[THIS1]]) #[[ATTR3]]
// CK2-32-NEXT:    br label [[OMP_OFFLOAD_CONT16]]
// CK2-32:       omp_offload.cont16:
// CK2-32-NEXT:    ret void
// CK2-32-LABEL: define {{[^@]+}}@_ZN2STIdEC2ERPd
// CK2-32-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) unnamed_addr #[[ATTR1]] comdat align 2 {
// CK2-32-NEXT:  entry:
// CK2-32-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK2-32-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// CK2-32-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// CK2-32-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK2-32-NEXT:    store ptr null, ptr [[A]], align 4
// CK2-32-NEXT:    [[B2:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK2-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// CK2-32-NEXT:    store ptr [[TMP0]], ptr [[B2]], align 4
// CK2-32-NEXT:    ret void
// CK2-32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112
// CK2-32-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2:[0-9]+]] {
// CK2-32-NEXT:  entry:
// CK2-32-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK2-32-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK2-32-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 4
// CK2-32-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK2-32-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 4
// CK2-32-NEXT:    ret void
// CK2-32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118
// CK2-32-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK2-32-NEXT:  entry:
// CK2-32-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK2-32-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 1
// CK2-32-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B]], align 4
// CK2-32-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 4
// CK2-32-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i32 1
// CK2-32-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP1]], align 4
// CK2-32-NEXT:    ret void
// CK2-32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125
// CK2-32-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK2-32-NEXT:  entry:
// CK2-32-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK2-32-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK2-32-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK2-32-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 4
// CK2-32-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK2-32-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 4
// CK2-32-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[TMP0]], i32 0, i32 1
// CK2-32-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[B]], align 4
// CK2-32-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 4
// CK2-32-NEXT:    [[INCDEC_PTR1:%.*]] = getelementptr inbounds double, ptr [[TMP3]], i32 1
// CK2-32-NEXT:    store ptr [[INCDEC_PTR1]], ptr [[TMP2]], align 4
// CK2-32-NEXT:    ret void
// CK2-32-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK2-32-SAME: () #[[ATTR5:[0-9]+]] {
// CK2-32-NEXT:  entry:
// CK2-32-NEXT:    call void @__tgt_register_requires(i64 1)
// CK2-32-NEXT:    ret void
// CK3-64-LABEL: define {{[^@]+}}@_Z3barv
// CK3-64-SAME: () #[[ATTR0:[0-9]+]] {
// CK3-64-NEXT:  entry:
// CK3-64-NEXT:    [[PTR:%.*]] = alloca ptr, align 64
// CK3-64-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 8
// CK3-64-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 8
// CK3-64-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 8
// CK3-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR]], align 64
// CK3-64-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK3-64-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 8
// CK3-64-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK3-64-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 8
// CK3-64-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i64 0, i64 0
// CK3-64-NEXT:    store ptr null, ptr [[TMP3]], align 8
// CK3-64-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK3-64-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK3-64-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK3-64-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK3-64-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK3-64-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK3-64-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK3-64-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK3-64-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 8
// CK3-64-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK3-64-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 8
// CK3-64-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK3-64-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 8
// CK3-64-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK3-64-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 8
// CK3-64-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK3-64-NEXT:    store ptr null, ptr [[TMP12]], align 8
// CK3-64-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK3-64-NEXT:    store ptr null, ptr [[TMP13]], align 8
// CK3-64-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK3-64-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK3-64-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK3-64-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK3-64-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK3-64-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK3-64-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK3-64-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK3-64-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK3-64-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK3-64-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159.region_id, ptr [[KERNEL_ARGS]])
// CK3-64-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK3-64-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK3-64:       omp_offload.failed:
// CK3-64-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK3-64-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK3-64:       omp_offload.cont:
// CK3-64-NEXT:    ret void
// CK3-64-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159
// CK3-64-SAME: (ptr noundef [[PTR:%.*]]) #[[ATTR1:[0-9]+]] {
// CK3-64-NEXT:  entry:
// CK3-64-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8
// CK3-64-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR]], align 8
// CK3-64-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR]], align 8
// CK3-64-NEXT:    store double 0.000000e+00, ptr [[TMP0]], align 8
// CK3-64-NEXT:    ret void
// CK3-64-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK3-64-SAME: () #[[ATTR3:[0-9]+]] {
// CK3-64-NEXT:  entry:
// CK3-64-NEXT:    call void @__tgt_register_requires(i64 1)
// CK3-64-NEXT:    ret void
// CK3-32-LABEL: define {{[^@]+}}@_Z3barv
// CK3-32-SAME: () #[[ATTR0:[0-9]+]] {
// CK3-32-NEXT:  entry:
// CK3-32-NEXT:    [[PTR:%.*]] = alloca ptr, align 64
// CK3-32-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 4
// CK3-32-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 4
// CK3-32-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 4
// CK3-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR]], align 64
// CK3-32-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK3-32-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 4
// CK3-32-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK3-32-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 4
// CK3-32-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i32 0, i32 0
// CK3-32-NEXT:    store ptr null, ptr [[TMP3]], align 4
// CK3-32-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK3-32-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK3-32-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK3-32-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK3-32-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK3-32-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK3-32-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK3-32-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK3-32-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 4
// CK3-32-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK3-32-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 4
// CK3-32-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK3-32-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 4
// CK3-32-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK3-32-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 4
// CK3-32-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK3-32-NEXT:    store ptr null, ptr [[TMP12]], align 4
// CK3-32-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK3-32-NEXT:    store ptr null, ptr [[TMP13]], align 4
// CK3-32-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK3-32-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK3-32-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK3-32-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK3-32-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK3-32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK3-32-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK3-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK3-32-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK3-32-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK3-32-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159.region_id, ptr [[KERNEL_ARGS]])
// CK3-32-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK3-32-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK3-32:       omp_offload.failed:
// CK3-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK3-32-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK3-32:       omp_offload.cont:
// CK3-32-NEXT:    ret void
// CK3-32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159
// CK3-32-SAME: (ptr noundef [[PTR:%.*]]) #[[ATTR1:[0-9]+]] {
// CK3-32-NEXT:  entry:
// CK3-32-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 4
// CK3-32-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR]], align 4
// CK3-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR]], align 4
// CK3-32-NEXT:    store double 0.000000e+00, ptr [[TMP0]], align 4
// CK3-32-NEXT:    ret void
// CK3-32-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK3-32-SAME: () #[[ATTR3:[0-9]+]] {
// CK3-32-NEXT:  entry:
// CK3-32-NEXT:    call void @__tgt_register_requires(i64 1)
// CK3-32-NEXT:    ret void
// CK1-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK1-SAME: () #[[ATTR3:[0-9]+]] {
// CK1-NEXT:  entry:
// CK1-NEXT:    call void @__tgt_register_requires(i64 1)
// CK1-NEXT:    ret void
// CK1-32-LABEL: define {{[^@]+}}@_Z3barRPfRPi
// CK1-32-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[A:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) #[[ATTR0:[0-9]+]] {
// CK1-32-NEXT:  entry:
// CK1-32-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// CK1-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 4
// CK1-32-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// CK1-32-NEXT:    call void @_Z3fooIiEvRPfRPT_(ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP1]])
// CK1-32-NEXT:    ret void
// CK1-32-LABEL: define {{[^@]+}}@_Z3fooIiEvRPfRPT_
// CK1-32-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[LR:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[TR:%.*]]) #[[ATTR0]] comdat {
// CK1-32-NEXT:  entry:
// CK1-32-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[L:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[T:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_BASEPTRS1:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_PTRS2:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_MAPPERS3:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_BASEPTRS7:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_PTRS8:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_MAPPERS9:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_BASEPTRS13:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_PTRS14:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_MAPPERS15:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[_TMP19:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_BASEPTRS20:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_PTRS21:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_MAPPERS22:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[_TMP26:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_BASEPTRS27:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_PTRS28:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_MAPPERS29:%.*]] = alloca [1 x ptr], align 4
// CK1-32-NEXT:    [[_TMP33:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[_TMP34:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_BASEPTRS35:%.*]] = alloca [2 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_PTRS36:%.*]] = alloca [2 x ptr], align 4
// CK1-32-NEXT:    [[DOTOFFLOAD_MAPPERS37:%.*]] = alloca [2 x ptr], align 4
// CK1-32-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK1-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr @g, align 4
// CK1-32-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 4
// CK1-32-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 4
// CK1-32-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i32 0, i32 0
// CK1-32-NEXT:    store ptr null, ptr [[TMP3]], align 4
// CK1-32-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK1-32-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK1-32-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK1-32-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK1-32-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK1-32-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK1-32-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK1-32-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK1-32-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 4
// CK1-32-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK1-32-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 4
// CK1-32-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK1-32-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 4
// CK1-32-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK1-32-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 4
// CK1-32-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK1-32-NEXT:    store ptr null, ptr [[TMP12]], align 4
// CK1-32-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK1-32-NEXT:    store ptr null, ptr [[TMP13]], align 4
// CK1-32-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK1-32-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK1-32-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK1-32-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK1-32-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK1-32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK1-32-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK1-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK1-32-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK1-32-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK1-32-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37.region_id, ptr [[KERNEL_ARGS]])
// CK1-32-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK1-32-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK1-32:       omp_offload.failed:
// CK1-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK1-32-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK1-32:       omp_offload.cont:
// CK1-32-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[L]], align 4
// CK1-32-NEXT:    [[TMP22:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP21]], ptr [[TMP22]], align 4
// CK1-32-NEXT:    [[TMP23:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP21]], ptr [[TMP23]], align 4
// CK1-32-NEXT:    [[TMP24:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS3]], i32 0, i32 0
// CK1-32-NEXT:    store ptr null, ptr [[TMP24]], align 4
// CK1-32-NEXT:    [[TMP25:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK1-32-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK1-32-NEXT:    [[KERNEL_ARGS4:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-32-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 0
// CK1-32-NEXT:    store i32 2, ptr [[TMP27]], align 4
// CK1-32-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 1
// CK1-32-NEXT:    store i32 1, ptr [[TMP28]], align 4
// CK1-32-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 2
// CK1-32-NEXT:    store ptr [[TMP25]], ptr [[TMP29]], align 4
// CK1-32-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 3
// CK1-32-NEXT:    store ptr [[TMP26]], ptr [[TMP30]], align 4
// CK1-32-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 4
// CK1-32-NEXT:    store ptr @.offload_sizes.1, ptr [[TMP31]], align 4
// CK1-32-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 5
// CK1-32-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP32]], align 4
// CK1-32-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 6
// CK1-32-NEXT:    store ptr null, ptr [[TMP33]], align 4
// CK1-32-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 7
// CK1-32-NEXT:    store ptr null, ptr [[TMP34]], align 4
// CK1-32-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 8
// CK1-32-NEXT:    store i64 0, ptr [[TMP35]], align 8
// CK1-32-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 9
// CK1-32-NEXT:    store i64 0, ptr [[TMP36]], align 8
// CK1-32-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 10
// CK1-32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP37]], align 4
// CK1-32-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 11
// CK1-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP38]], align 4
// CK1-32-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 12
// CK1-32-NEXT:    store i32 0, ptr [[TMP39]], align 4
// CK1-32-NEXT:    [[TMP40:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43.region_id, ptr [[KERNEL_ARGS4]])
// CK1-32-NEXT:    [[TMP41:%.*]] = icmp ne i32 [[TMP40]], 0
// CK1-32-NEXT:    br i1 [[TMP41]], label [[OMP_OFFLOAD_FAILED5:%.*]], label [[OMP_OFFLOAD_CONT6:%.*]]
// CK1-32:       omp_offload.failed5:
// CK1-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43(ptr [[TMP21]]) #[[ATTR2]]
// CK1-32-NEXT:    br label [[OMP_OFFLOAD_CONT6]]
// CK1-32:       omp_offload.cont6:
// CK1-32-NEXT:    [[TMP42:%.*]] = load ptr, ptr [[T]], align 4
// CK1-32-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP42]], ptr [[TMP43]], align 4
// CK1-32-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP42]], ptr [[TMP44]], align 4
// CK1-32-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS9]], i32 0, i32 0
// CK1-32-NEXT:    store ptr null, ptr [[TMP45]], align 4
// CK1-32-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK1-32-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK1-32-NEXT:    [[KERNEL_ARGS10:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-32-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 0
// CK1-32-NEXT:    store i32 2, ptr [[TMP48]], align 4
// CK1-32-NEXT:    [[TMP49:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 1
// CK1-32-NEXT:    store i32 1, ptr [[TMP49]], align 4
// CK1-32-NEXT:    [[TMP50:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 2
// CK1-32-NEXT:    store ptr [[TMP46]], ptr [[TMP50]], align 4
// CK1-32-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 3
// CK1-32-NEXT:    store ptr [[TMP47]], ptr [[TMP51]], align 4
// CK1-32-NEXT:    [[TMP52:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 4
// CK1-32-NEXT:    store ptr @.offload_sizes.3, ptr [[TMP52]], align 4
// CK1-32-NEXT:    [[TMP53:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 5
// CK1-32-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP53]], align 4
// CK1-32-NEXT:    [[TMP54:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 6
// CK1-32-NEXT:    store ptr null, ptr [[TMP54]], align 4
// CK1-32-NEXT:    [[TMP55:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 7
// CK1-32-NEXT:    store ptr null, ptr [[TMP55]], align 4
// CK1-32-NEXT:    [[TMP56:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 8
// CK1-32-NEXT:    store i64 0, ptr [[TMP56]], align 8
// CK1-32-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 9
// CK1-32-NEXT:    store i64 0, ptr [[TMP57]], align 8
// CK1-32-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 10
// CK1-32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP58]], align 4
// CK1-32-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 11
// CK1-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP59]], align 4
// CK1-32-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 12
// CK1-32-NEXT:    store i32 0, ptr [[TMP60]], align 4
// CK1-32-NEXT:    [[TMP61:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49.region_id, ptr [[KERNEL_ARGS10]])
// CK1-32-NEXT:    [[TMP62:%.*]] = icmp ne i32 [[TMP61]], 0
// CK1-32-NEXT:    br i1 [[TMP62]], label [[OMP_OFFLOAD_FAILED11:%.*]], label [[OMP_OFFLOAD_CONT12:%.*]]
// CK1-32:       omp_offload.failed11:
// CK1-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49(ptr [[TMP42]]) #[[ATTR2]]
// CK1-32-NEXT:    br label [[OMP_OFFLOAD_CONT12]]
// CK1-32:       omp_offload.cont12:
// CK1-32-NEXT:    [[TMP63:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[TMP63]], ptr [[TMP]], align 4
// CK1-32-NEXT:    [[TMP64:%.*]] = load ptr, ptr [[TMP]], align 4
// CK1-32-NEXT:    [[TMP65:%.*]] = load ptr, ptr [[TMP64]], align 4
// CK1-32-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP65]], ptr [[TMP66]], align 4
// CK1-32-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP65]], ptr [[TMP67]], align 4
// CK1-32-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS15]], i32 0, i32 0
// CK1-32-NEXT:    store ptr null, ptr [[TMP68]], align 4
// CK1-32-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK1-32-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK1-32-NEXT:    [[KERNEL_ARGS16:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-32-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 0
// CK1-32-NEXT:    store i32 2, ptr [[TMP71]], align 4
// CK1-32-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 1
// CK1-32-NEXT:    store i32 1, ptr [[TMP72]], align 4
// CK1-32-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 2
// CK1-32-NEXT:    store ptr [[TMP69]], ptr [[TMP73]], align 4
// CK1-32-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 3
// CK1-32-NEXT:    store ptr [[TMP70]], ptr [[TMP74]], align 4
// CK1-32-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 4
// CK1-32-NEXT:    store ptr @.offload_sizes.5, ptr [[TMP75]], align 4
// CK1-32-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 5
// CK1-32-NEXT:    store ptr @.offload_maptypes.6, ptr [[TMP76]], align 4
// CK1-32-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 6
// CK1-32-NEXT:    store ptr null, ptr [[TMP77]], align 4
// CK1-32-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 7
// CK1-32-NEXT:    store ptr null, ptr [[TMP78]], align 4
// CK1-32-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 8
// CK1-32-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK1-32-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 9
// CK1-32-NEXT:    store i64 0, ptr [[TMP80]], align 8
// CK1-32-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 10
// CK1-32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP81]], align 4
// CK1-32-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 11
// CK1-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP82]], align 4
// CK1-32-NEXT:    [[TMP83:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 12
// CK1-32-NEXT:    store i32 0, ptr [[TMP83]], align 4
// CK1-32-NEXT:    [[TMP84:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55.region_id, ptr [[KERNEL_ARGS16]])
// CK1-32-NEXT:    [[TMP85:%.*]] = icmp ne i32 [[TMP84]], 0
// CK1-32-NEXT:    br i1 [[TMP85]], label [[OMP_OFFLOAD_FAILED17:%.*]], label [[OMP_OFFLOAD_CONT18:%.*]]
// CK1-32:       omp_offload.failed17:
// CK1-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55(ptr [[TMP65]]) #[[ATTR2]]
// CK1-32-NEXT:    br label [[OMP_OFFLOAD_CONT18]]
// CK1-32:       omp_offload.cont18:
// CK1-32-NEXT:    [[TMP86:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[TMP86]], ptr [[_TMP19]], align 4
// CK1-32-NEXT:    [[TMP87:%.*]] = load ptr, ptr [[_TMP19]], align 4
// CK1-32-NEXT:    [[TMP88:%.*]] = load ptr, ptr [[TMP87]], align 4
// CK1-32-NEXT:    [[TMP89:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP88]], ptr [[TMP89]], align 4
// CK1-32-NEXT:    [[TMP90:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP88]], ptr [[TMP90]], align 4
// CK1-32-NEXT:    [[TMP91:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS22]], i32 0, i32 0
// CK1-32-NEXT:    store ptr null, ptr [[TMP91]], align 4
// CK1-32-NEXT:    [[TMP92:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK1-32-NEXT:    [[TMP93:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK1-32-NEXT:    [[KERNEL_ARGS23:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-32-NEXT:    [[TMP94:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 0
// CK1-32-NEXT:    store i32 2, ptr [[TMP94]], align 4
// CK1-32-NEXT:    [[TMP95:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 1
// CK1-32-NEXT:    store i32 1, ptr [[TMP95]], align 4
// CK1-32-NEXT:    [[TMP96:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 2
// CK1-32-NEXT:    store ptr [[TMP92]], ptr [[TMP96]], align 4
// CK1-32-NEXT:    [[TMP97:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 3
// CK1-32-NEXT:    store ptr [[TMP93]], ptr [[TMP97]], align 4
// CK1-32-NEXT:    [[TMP98:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 4
// CK1-32-NEXT:    store ptr @.offload_sizes.7, ptr [[TMP98]], align 4
// CK1-32-NEXT:    [[TMP99:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 5
// CK1-32-NEXT:    store ptr @.offload_maptypes.8, ptr [[TMP99]], align 4
// CK1-32-NEXT:    [[TMP100:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 6
// CK1-32-NEXT:    store ptr null, ptr [[TMP100]], align 4
// CK1-32-NEXT:    [[TMP101:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 7
// CK1-32-NEXT:    store ptr null, ptr [[TMP101]], align 4
// CK1-32-NEXT:    [[TMP102:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 8
// CK1-32-NEXT:    store i64 0, ptr [[TMP102]], align 8
// CK1-32-NEXT:    [[TMP103:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 9
// CK1-32-NEXT:    store i64 0, ptr [[TMP103]], align 8
// CK1-32-NEXT:    [[TMP104:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 10
// CK1-32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP104]], align 4
// CK1-32-NEXT:    [[TMP105:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 11
// CK1-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP105]], align 4
// CK1-32-NEXT:    [[TMP106:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 12
// CK1-32-NEXT:    store i32 0, ptr [[TMP106]], align 4
// CK1-32-NEXT:    [[TMP107:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61.region_id, ptr [[KERNEL_ARGS23]])
// CK1-32-NEXT:    [[TMP108:%.*]] = icmp ne i32 [[TMP107]], 0
// CK1-32-NEXT:    br i1 [[TMP108]], label [[OMP_OFFLOAD_FAILED24:%.*]], label [[OMP_OFFLOAD_CONT25:%.*]]
// CK1-32:       omp_offload.failed24:
// CK1-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61(ptr [[TMP88]]) #[[ATTR2]]
// CK1-32-NEXT:    br label [[OMP_OFFLOAD_CONT25]]
// CK1-32:       omp_offload.cont25:
// CK1-32-NEXT:    [[TMP109:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[TMP109]], ptr [[_TMP26]], align 4
// CK1-32-NEXT:    [[TMP110:%.*]] = load ptr, ptr [[_TMP26]], align 4
// CK1-32-NEXT:    [[TMP111:%.*]] = load ptr, ptr [[TMP110]], align 4
// CK1-32-NEXT:    [[TMP112:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP111]], ptr [[TMP112]], align 4
// CK1-32-NEXT:    [[TMP113:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP111]], ptr [[TMP113]], align 4
// CK1-32-NEXT:    [[TMP114:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS29]], i32 0, i32 0
// CK1-32-NEXT:    store ptr null, ptr [[TMP114]], align 4
// CK1-32-NEXT:    [[TMP115:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK1-32-NEXT:    [[TMP116:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK1-32-NEXT:    [[KERNEL_ARGS30:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-32-NEXT:    [[TMP117:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 0
// CK1-32-NEXT:    store i32 2, ptr [[TMP117]], align 4
// CK1-32-NEXT:    [[TMP118:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 1
// CK1-32-NEXT:    store i32 1, ptr [[TMP118]], align 4
// CK1-32-NEXT:    [[TMP119:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 2
// CK1-32-NEXT:    store ptr [[TMP115]], ptr [[TMP119]], align 4
// CK1-32-NEXT:    [[TMP120:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 3
// CK1-32-NEXT:    store ptr [[TMP116]], ptr [[TMP120]], align 4
// CK1-32-NEXT:    [[TMP121:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 4
// CK1-32-NEXT:    store ptr @.offload_sizes.9, ptr [[TMP121]], align 4
// CK1-32-NEXT:    [[TMP122:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 5
// CK1-32-NEXT:    store ptr @.offload_maptypes.10, ptr [[TMP122]], align 4
// CK1-32-NEXT:    [[TMP123:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 6
// CK1-32-NEXT:    store ptr null, ptr [[TMP123]], align 4
// CK1-32-NEXT:    [[TMP124:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 7
// CK1-32-NEXT:    store ptr null, ptr [[TMP124]], align 4
// CK1-32-NEXT:    [[TMP125:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 8
// CK1-32-NEXT:    store i64 0, ptr [[TMP125]], align 8
// CK1-32-NEXT:    [[TMP126:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 9
// CK1-32-NEXT:    store i64 0, ptr [[TMP126]], align 8
// CK1-32-NEXT:    [[TMP127:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 10
// CK1-32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP127]], align 4
// CK1-32-NEXT:    [[TMP128:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 11
// CK1-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP128]], align 4
// CK1-32-NEXT:    [[TMP129:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 12
// CK1-32-NEXT:    store i32 0, ptr [[TMP129]], align 4
// CK1-32-NEXT:    [[TMP130:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67.region_id, ptr [[KERNEL_ARGS30]])
// CK1-32-NEXT:    [[TMP131:%.*]] = icmp ne i32 [[TMP130]], 0
// CK1-32-NEXT:    br i1 [[TMP131]], label [[OMP_OFFLOAD_FAILED31:%.*]], label [[OMP_OFFLOAD_CONT32:%.*]]
// CK1-32:       omp_offload.failed31:
// CK1-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67(ptr [[TMP111]]) #[[ATTR2]]
// CK1-32-NEXT:    br label [[OMP_OFFLOAD_CONT32]]
// CK1-32:       omp_offload.cont32:
// CK1-32-NEXT:    [[TMP132:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[TMP132]], ptr [[_TMP33]], align 4
// CK1-32-NEXT:    [[TMP133:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[TMP133]], ptr [[_TMP34]], align 4
// CK1-32-NEXT:    [[TMP134:%.*]] = load ptr, ptr [[_TMP33]], align 4
// CK1-32-NEXT:    [[TMP135:%.*]] = load ptr, ptr [[TMP134]], align 4
// CK1-32-NEXT:    [[TMP136:%.*]] = load ptr, ptr [[_TMP34]], align 4
// CK1-32-NEXT:    [[TMP137:%.*]] = load ptr, ptr [[TMP136]], align 4
// CK1-32-NEXT:    [[TMP138:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP135]], ptr [[TMP138]], align 4
// CK1-32-NEXT:    [[TMP139:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK1-32-NEXT:    store ptr [[TMP135]], ptr [[TMP139]], align 4
// CK1-32-NEXT:    [[TMP140:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i32 0, i32 0
// CK1-32-NEXT:    store ptr null, ptr [[TMP140]], align 4
// CK1-32-NEXT:    [[TMP141:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 1
// CK1-32-NEXT:    store ptr [[TMP137]], ptr [[TMP141]], align 4
// CK1-32-NEXT:    [[TMP142:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 1
// CK1-32-NEXT:    store ptr [[TMP137]], ptr [[TMP142]], align 4
// CK1-32-NEXT:    [[TMP143:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i32 0, i32 1
// CK1-32-NEXT:    store ptr null, ptr [[TMP143]], align 4
// CK1-32-NEXT:    [[TMP144:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK1-32-NEXT:    [[TMP145:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK1-32-NEXT:    [[KERNEL_ARGS38:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK1-32-NEXT:    [[TMP146:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 0
// CK1-32-NEXT:    store i32 2, ptr [[TMP146]], align 4
// CK1-32-NEXT:    [[TMP147:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 1
// CK1-32-NEXT:    store i32 2, ptr [[TMP147]], align 4
// CK1-32-NEXT:    [[TMP148:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 2
// CK1-32-NEXT:    store ptr [[TMP144]], ptr [[TMP148]], align 4
// CK1-32-NEXT:    [[TMP149:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 3
// CK1-32-NEXT:    store ptr [[TMP145]], ptr [[TMP149]], align 4
// CK1-32-NEXT:    [[TMP150:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 4
// CK1-32-NEXT:    store ptr @.offload_sizes.11, ptr [[TMP150]], align 4
// CK1-32-NEXT:    [[TMP151:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 5
// CK1-32-NEXT:    store ptr @.offload_maptypes.12, ptr [[TMP151]], align 4
// CK1-32-NEXT:    [[TMP152:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 6
// CK1-32-NEXT:    store ptr null, ptr [[TMP152]], align 4
// CK1-32-NEXT:    [[TMP153:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 7
// CK1-32-NEXT:    store ptr null, ptr [[TMP153]], align 4
// CK1-32-NEXT:    [[TMP154:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 8
// CK1-32-NEXT:    store i64 0, ptr [[TMP154]], align 8
// CK1-32-NEXT:    [[TMP155:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 9
// CK1-32-NEXT:    store i64 0, ptr [[TMP155]], align 8
// CK1-32-NEXT:    [[TMP156:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 10
// CK1-32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP156]], align 4
// CK1-32-NEXT:    [[TMP157:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 11
// CK1-32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP157]], align 4
// CK1-32-NEXT:    [[TMP158:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 12
// CK1-32-NEXT:    store i32 0, ptr [[TMP158]], align 4
// CK1-32-NEXT:    [[TMP159:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74.region_id, ptr [[KERNEL_ARGS38]])
// CK1-32-NEXT:    [[TMP160:%.*]] = icmp ne i32 [[TMP159]], 0
// CK1-32-NEXT:    br i1 [[TMP160]], label [[OMP_OFFLOAD_FAILED39:%.*]], label [[OMP_OFFLOAD_CONT40:%.*]]
// CK1-32:       omp_offload.failed39:
// CK1-32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74(ptr [[TMP135]], ptr [[TMP137]]) #[[ATTR2]]
// CK1-32-NEXT:    br label [[OMP_OFFLOAD_CONT40]]
// CK1-32:       omp_offload.cont40:
// CK1-32-NEXT:    ret void
// CK1-32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37
// CK1-32-SAME: (ptr noundef [[G:%.*]]) #[[ATTR1:[0-9]+]] {
// CK1-32-NEXT:  entry:
// CK1-32-NEXT:    [[G_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    store ptr [[G]], ptr [[G_ADDR]], align 4
// CK1-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[G_ADDR]], align 4
// CK1-32-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK1-32-NEXT:    store ptr [[INCDEC_PTR]], ptr [[G_ADDR]], align 4
// CK1-32-NEXT:    ret void
// CK1-32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43
// CK1-32-SAME: (ptr noundef [[L:%.*]]) #[[ATTR1]] {
// CK1-32-NEXT:  entry:
// CK1-32-NEXT:    [[L_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    store ptr [[L]], ptr [[L_ADDR]], align 4
// CK1-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[L_ADDR]], align 4
// CK1-32-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP0]], i32 1
// CK1-32-NEXT:    store ptr [[INCDEC_PTR]], ptr [[L_ADDR]], align 4
// CK1-32-NEXT:    ret void
// CK1-32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49
// CK1-32-SAME: (ptr noundef [[T:%.*]]) #[[ATTR1]] {
// CK1-32-NEXT:  entry:
// CK1-32-NEXT:    [[T_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    store ptr [[T]], ptr [[T_ADDR]], align 4
// CK1-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[T_ADDR]], align 4
// CK1-32-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP0]], i32 1
// CK1-32-NEXT:    store ptr [[INCDEC_PTR]], ptr [[T_ADDR]], align 4
// CK1-32-NEXT:    ret void
// CK1-32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55
// CK1-32-SAME: (ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK1-32-NEXT:  entry:
// CK1-32-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[LR_ADDR]], ptr [[TMP]], align 4
// CK1-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK1-32-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK1-32-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 1
// CK1-32-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK1-32-NEXT:    ret void
// CK1-32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61
// CK1-32-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK1-32-NEXT:  entry:
// CK1-32-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 4
// CK1-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK1-32-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK1-32-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK1-32-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK1-32-NEXT:    ret void
// CK1-32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67
// CK1-32-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK1-32-NEXT:  entry:
// CK1-32-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 4
// CK1-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK1-32-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK1-32-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK1-32-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK1-32-NEXT:    ret void
// CK1-32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74
// CK1-32-SAME: (ptr noundef [[TR:%.*]], ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK1-32-NEXT:  entry:
// CK1-32-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 4
// CK1-32-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 4
// CK1-32-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 4
// CK1-32-NEXT:    store ptr [[LR_ADDR]], ptr [[_TMP1]], align 4
// CK1-32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK1-32-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK1-32-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK1-32-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK1-32-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[_TMP1]], align 4
// CK1-32-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 4
// CK1-32-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds float, ptr [[TMP3]], i32 1
// CK1-32-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[TMP2]], align 4
// CK1-32-NEXT:    ret void
// CK1-32-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK1-32-SAME: () #[[ATTR3:[0-9]+]] {
// CK1-32-NEXT:  entry:
// CK1-32-NEXT:    call void @__tgt_register_requires(i64 1)
// CK1-32-NEXT:    ret void
// CK2-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK2-SAME: () #[[ATTR5:[0-9]+]] {
// CK2-NEXT:  entry:
// CK2-NEXT:    call void @__tgt_register_requires(i64 1)
// CK2-NEXT:    ret void
// CK3-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK3-SAME: () #[[ATTR3:[0-9]+]] {
// CK3-NEXT:  entry:
// CK3-NEXT:    call void @__tgt_register_requires(i64 1)
// CK3-NEXT:    ret void
// CK10-LABEL: define {{[^@]+}}@_Z3barRPfRPi
// CK10-SAME: (ptr noundef nonnull align 8 dereferenceable(8) [[A:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) #[[ATTR0:[0-9]+]] {
// CK10-NEXT:  entry:
// CK10-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 8
// CK10-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// CK10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
// CK10-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// CK10-NEXT:    call void @_Z3fooIiEvRPfRPT_(ptr noundef nonnull align 8 dereferenceable(8) [[TMP0]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP1]])
// CK10-NEXT:    ret void
//
//
// CK10-LABEL: define {{[^@]+}}@_Z3fooIiEvRPfRPT_
// CK10-SAME: (ptr noundef nonnull align 8 dereferenceable(8) [[LR:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[TR:%.*]]) #[[ATTR0]] comdat {
// CK10-NEXT:  entry:
// CK10-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[L:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[T:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK10-NEXT:    [[DOTOFFLOAD_BASEPTRS1:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_PTRS2:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_MAPPERS3:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[KERNEL_ARGS4:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK10-NEXT:    [[DOTOFFLOAD_BASEPTRS7:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_PTRS8:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_MAPPERS9:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[KERNEL_ARGS10:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK10-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[DOTOFFLOAD_BASEPTRS13:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_PTRS14:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_MAPPERS15:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[KERNEL_ARGS16:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK10-NEXT:    [[_TMP19:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[DOTOFFLOAD_BASEPTRS20:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_PTRS21:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_MAPPERS22:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[KERNEL_ARGS23:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK10-NEXT:    [[_TMP26:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[DOTOFFLOAD_BASEPTRS27:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_PTRS28:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_MAPPERS29:%.*]] = alloca [1 x ptr], align 8
// CK10-NEXT:    [[KERNEL_ARGS30:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK10-NEXT:    [[_TMP33:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[_TMP34:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[DOTOFFLOAD_BASEPTRS35:%.*]] = alloca [2 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_PTRS36:%.*]] = alloca [2 x ptr], align 8
// CK10-NEXT:    [[DOTOFFLOAD_MAPPERS37:%.*]] = alloca [2 x ptr], align 8
// CK10-NEXT:    [[KERNEL_ARGS38:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK10-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 8
// CK10-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK10-NEXT:    [[TMP0:%.*]] = load ptr, ptr @g, align 8
// CK10-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 8
// CK10-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 8
// CK10-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i64 0, i64 0
// CK10-NEXT:    store ptr null, ptr [[TMP3]], align 8
// CK10-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK10-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK10-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK10-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK10-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK10-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK10-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK10-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 8
// CK10-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK10-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 8
// CK10-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK10-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 8
// CK10-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK10-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 8
// CK10-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK10-NEXT:    store ptr null, ptr [[TMP12]], align 8
// CK10-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK10-NEXT:    store ptr null, ptr [[TMP13]], align 8
// CK10-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK10-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK10-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK10-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK10-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK10-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK10-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK10-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK10-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK10-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK10-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37.region_id, ptr [[KERNEL_ARGS]])
// CK10-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK10-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK10:       omp_offload.failed:
// CK10-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK10-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK10:       omp_offload.cont:
// CK10-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[L]], align 8
// CK10-NEXT:    [[TMP22:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP21]], ptr [[TMP22]], align 8
// CK10-NEXT:    [[TMP23:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP21]], ptr [[TMP23]], align 8
// CK10-NEXT:    [[TMP24:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS3]], i64 0, i64 0
// CK10-NEXT:    store ptr null, ptr [[TMP24]], align 8
// CK10-NEXT:    [[TMP25:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK10-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK10-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 0
// CK10-NEXT:    store i32 2, ptr [[TMP27]], align 4
// CK10-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 1
// CK10-NEXT:    store i32 1, ptr [[TMP28]], align 4
// CK10-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 2
// CK10-NEXT:    store ptr [[TMP25]], ptr [[TMP29]], align 8
// CK10-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 3
// CK10-NEXT:    store ptr [[TMP26]], ptr [[TMP30]], align 8
// CK10-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 4
// CK10-NEXT:    store ptr @.offload_sizes.1, ptr [[TMP31]], align 8
// CK10-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 5
// CK10-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP32]], align 8
// CK10-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 6
// CK10-NEXT:    store ptr null, ptr [[TMP33]], align 8
// CK10-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 7
// CK10-NEXT:    store ptr null, ptr [[TMP34]], align 8
// CK10-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 8
// CK10-NEXT:    store i64 0, ptr [[TMP35]], align 8
// CK10-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 9
// CK10-NEXT:    store i64 0, ptr [[TMP36]], align 8
// CK10-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 10
// CK10-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP37]], align 4
// CK10-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 11
// CK10-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP38]], align 4
// CK10-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 12
// CK10-NEXT:    store i32 0, ptr [[TMP39]], align 4
// CK10-NEXT:    [[TMP40:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43.region_id, ptr [[KERNEL_ARGS4]])
// CK10-NEXT:    [[TMP41:%.*]] = icmp ne i32 [[TMP40]], 0
// CK10-NEXT:    br i1 [[TMP41]], label [[OMP_OFFLOAD_FAILED5:%.*]], label [[OMP_OFFLOAD_CONT6:%.*]]
// CK10:       omp_offload.failed5:
// CK10-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43(ptr [[TMP21]]) #[[ATTR2]]
// CK10-NEXT:    br label [[OMP_OFFLOAD_CONT6]]
// CK10:       omp_offload.cont6:
// CK10-NEXT:    [[TMP42:%.*]] = load ptr, ptr [[T]], align 8
// CK10-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP42]], ptr [[TMP43]], align 8
// CK10-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP42]], ptr [[TMP44]], align 8
// CK10-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS9]], i64 0, i64 0
// CK10-NEXT:    store ptr null, ptr [[TMP45]], align 8
// CK10-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK10-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK10-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 0
// CK10-NEXT:    store i32 2, ptr [[TMP48]], align 4
// CK10-NEXT:    [[TMP49:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 1
// CK10-NEXT:    store i32 1, ptr [[TMP49]], align 4
// CK10-NEXT:    [[TMP50:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 2
// CK10-NEXT:    store ptr [[TMP46]], ptr [[TMP50]], align 8
// CK10-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 3
// CK10-NEXT:    store ptr [[TMP47]], ptr [[TMP51]], align 8
// CK10-NEXT:    [[TMP52:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 4
// CK10-NEXT:    store ptr @.offload_sizes.3, ptr [[TMP52]], align 8
// CK10-NEXT:    [[TMP53:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 5
// CK10-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP53]], align 8
// CK10-NEXT:    [[TMP54:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 6
// CK10-NEXT:    store ptr null, ptr [[TMP54]], align 8
// CK10-NEXT:    [[TMP55:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 7
// CK10-NEXT:    store ptr null, ptr [[TMP55]], align 8
// CK10-NEXT:    [[TMP56:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 8
// CK10-NEXT:    store i64 0, ptr [[TMP56]], align 8
// CK10-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 9
// CK10-NEXT:    store i64 0, ptr [[TMP57]], align 8
// CK10-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 10
// CK10-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP58]], align 4
// CK10-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 11
// CK10-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP59]], align 4
// CK10-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 12
// CK10-NEXT:    store i32 0, ptr [[TMP60]], align 4
// CK10-NEXT:    [[TMP61:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49.region_id, ptr [[KERNEL_ARGS10]])
// CK10-NEXT:    [[TMP62:%.*]] = icmp ne i32 [[TMP61]], 0
// CK10-NEXT:    br i1 [[TMP62]], label [[OMP_OFFLOAD_FAILED11:%.*]], label [[OMP_OFFLOAD_CONT12:%.*]]
// CK10:       omp_offload.failed11:
// CK10-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49(ptr [[TMP42]]) #[[ATTR2]]
// CK10-NEXT:    br label [[OMP_OFFLOAD_CONT12]]
// CK10:       omp_offload.cont12:
// CK10-NEXT:    [[TMP63:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// CK10-NEXT:    store ptr [[TMP63]], ptr [[TMP]], align 8
// CK10-NEXT:    [[TMP64:%.*]] = load ptr, ptr [[TMP]], align 8
// CK10-NEXT:    [[TMP65:%.*]] = load ptr, ptr [[TMP64]], align 8
// CK10-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP65]], ptr [[TMP66]], align 8
// CK10-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP65]], ptr [[TMP67]], align 8
// CK10-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS15]], i64 0, i64 0
// CK10-NEXT:    store ptr null, ptr [[TMP68]], align 8
// CK10-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK10-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK10-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 0
// CK10-NEXT:    store i32 2, ptr [[TMP71]], align 4
// CK10-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 1
// CK10-NEXT:    store i32 1, ptr [[TMP72]], align 4
// CK10-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 2
// CK10-NEXT:    store ptr [[TMP69]], ptr [[TMP73]], align 8
// CK10-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 3
// CK10-NEXT:    store ptr [[TMP70]], ptr [[TMP74]], align 8
// CK10-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 4
// CK10-NEXT:    store ptr @.offload_sizes.5, ptr [[TMP75]], align 8
// CK10-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 5
// CK10-NEXT:    store ptr @.offload_maptypes.6, ptr [[TMP76]], align 8
// CK10-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 6
// CK10-NEXT:    store ptr null, ptr [[TMP77]], align 8
// CK10-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 7
// CK10-NEXT:    store ptr null, ptr [[TMP78]], align 8
// CK10-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 8
// CK10-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK10-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 9
// CK10-NEXT:    store i64 0, ptr [[TMP80]], align 8
// CK10-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 10
// CK10-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP81]], align 4
// CK10-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 11
// CK10-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP82]], align 4
// CK10-NEXT:    [[TMP83:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 12
// CK10-NEXT:    store i32 0, ptr [[TMP83]], align 4
// CK10-NEXT:    [[TMP84:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55.region_id, ptr [[KERNEL_ARGS16]])
// CK10-NEXT:    [[TMP85:%.*]] = icmp ne i32 [[TMP84]], 0
// CK10-NEXT:    br i1 [[TMP85]], label [[OMP_OFFLOAD_FAILED17:%.*]], label [[OMP_OFFLOAD_CONT18:%.*]]
// CK10:       omp_offload.failed17:
// CK10-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55(ptr [[TMP65]]) #[[ATTR2]]
// CK10-NEXT:    br label [[OMP_OFFLOAD_CONT18]]
// CK10:       omp_offload.cont18:
// CK10-NEXT:    [[TMP86:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// CK10-NEXT:    store ptr [[TMP86]], ptr [[_TMP19]], align 8
// CK10-NEXT:    [[TMP87:%.*]] = load ptr, ptr [[_TMP19]], align 8
// CK10-NEXT:    [[TMP88:%.*]] = load ptr, ptr [[TMP87]], align 8
// CK10-NEXT:    [[TMP89:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP88]], ptr [[TMP89]], align 8
// CK10-NEXT:    [[TMP90:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP88]], ptr [[TMP90]], align 8
// CK10-NEXT:    [[TMP91:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS22]], i64 0, i64 0
// CK10-NEXT:    store ptr null, ptr [[TMP91]], align 8
// CK10-NEXT:    [[TMP92:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK10-NEXT:    [[TMP93:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK10-NEXT:    [[TMP94:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 0
// CK10-NEXT:    store i32 2, ptr [[TMP94]], align 4
// CK10-NEXT:    [[TMP95:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 1
// CK10-NEXT:    store i32 1, ptr [[TMP95]], align 4
// CK10-NEXT:    [[TMP96:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 2
// CK10-NEXT:    store ptr [[TMP92]], ptr [[TMP96]], align 8
// CK10-NEXT:    [[TMP97:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 3
// CK10-NEXT:    store ptr [[TMP93]], ptr [[TMP97]], align 8
// CK10-NEXT:    [[TMP98:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 4
// CK10-NEXT:    store ptr @.offload_sizes.7, ptr [[TMP98]], align 8
// CK10-NEXT:    [[TMP99:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 5
// CK10-NEXT:    store ptr @.offload_maptypes.8, ptr [[TMP99]], align 8
// CK10-NEXT:    [[TMP100:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 6
// CK10-NEXT:    store ptr null, ptr [[TMP100]], align 8
// CK10-NEXT:    [[TMP101:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 7
// CK10-NEXT:    store ptr null, ptr [[TMP101]], align 8
// CK10-NEXT:    [[TMP102:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 8
// CK10-NEXT:    store i64 0, ptr [[TMP102]], align 8
// CK10-NEXT:    [[TMP103:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 9
// CK10-NEXT:    store i64 0, ptr [[TMP103]], align 8
// CK10-NEXT:    [[TMP104:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 10
// CK10-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP104]], align 4
// CK10-NEXT:    [[TMP105:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 11
// CK10-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP105]], align 4
// CK10-NEXT:    [[TMP106:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 12
// CK10-NEXT:    store i32 0, ptr [[TMP106]], align 4
// CK10-NEXT:    [[TMP107:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61.region_id, ptr [[KERNEL_ARGS23]])
// CK10-NEXT:    [[TMP108:%.*]] = icmp ne i32 [[TMP107]], 0
// CK10-NEXT:    br i1 [[TMP108]], label [[OMP_OFFLOAD_FAILED24:%.*]], label [[OMP_OFFLOAD_CONT25:%.*]]
// CK10:       omp_offload.failed24:
// CK10-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61(ptr [[TMP88]]) #[[ATTR2]]
// CK10-NEXT:    br label [[OMP_OFFLOAD_CONT25]]
// CK10:       omp_offload.cont25:
// CK10-NEXT:    [[TMP109:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// CK10-NEXT:    store ptr [[TMP109]], ptr [[_TMP26]], align 8
// CK10-NEXT:    [[TMP110:%.*]] = load ptr, ptr [[_TMP26]], align 8
// CK10-NEXT:    [[TMP111:%.*]] = load ptr, ptr [[TMP110]], align 8
// CK10-NEXT:    [[TMP112:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP111]], ptr [[TMP112]], align 8
// CK10-NEXT:    [[TMP113:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP111]], ptr [[TMP113]], align 8
// CK10-NEXT:    [[TMP114:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS29]], i64 0, i64 0
// CK10-NEXT:    store ptr null, ptr [[TMP114]], align 8
// CK10-NEXT:    [[TMP115:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK10-NEXT:    [[TMP116:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK10-NEXT:    [[TMP117:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 0
// CK10-NEXT:    store i32 2, ptr [[TMP117]], align 4
// CK10-NEXT:    [[TMP118:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 1
// CK10-NEXT:    store i32 1, ptr [[TMP118]], align 4
// CK10-NEXT:    [[TMP119:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 2
// CK10-NEXT:    store ptr [[TMP115]], ptr [[TMP119]], align 8
// CK10-NEXT:    [[TMP120:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 3
// CK10-NEXT:    store ptr [[TMP116]], ptr [[TMP120]], align 8
// CK10-NEXT:    [[TMP121:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 4
// CK10-NEXT:    store ptr @.offload_sizes.9, ptr [[TMP121]], align 8
// CK10-NEXT:    [[TMP122:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 5
// CK10-NEXT:    store ptr @.offload_maptypes.10, ptr [[TMP122]], align 8
// CK10-NEXT:    [[TMP123:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 6
// CK10-NEXT:    store ptr null, ptr [[TMP123]], align 8
// CK10-NEXT:    [[TMP124:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 7
// CK10-NEXT:    store ptr null, ptr [[TMP124]], align 8
// CK10-NEXT:    [[TMP125:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 8
// CK10-NEXT:    store i64 0, ptr [[TMP125]], align 8
// CK10-NEXT:    [[TMP126:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 9
// CK10-NEXT:    store i64 0, ptr [[TMP126]], align 8
// CK10-NEXT:    [[TMP127:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 10
// CK10-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP127]], align 4
// CK10-NEXT:    [[TMP128:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 11
// CK10-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP128]], align 4
// CK10-NEXT:    [[TMP129:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 12
// CK10-NEXT:    store i32 0, ptr [[TMP129]], align 4
// CK10-NEXT:    [[TMP130:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67.region_id, ptr [[KERNEL_ARGS30]])
// CK10-NEXT:    [[TMP131:%.*]] = icmp ne i32 [[TMP130]], 0
// CK10-NEXT:    br i1 [[TMP131]], label [[OMP_OFFLOAD_FAILED31:%.*]], label [[OMP_OFFLOAD_CONT32:%.*]]
// CK10:       omp_offload.failed31:
// CK10-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67(ptr [[TMP111]]) #[[ATTR2]]
// CK10-NEXT:    br label [[OMP_OFFLOAD_CONT32]]
// CK10:       omp_offload.cont32:
// CK10-NEXT:    [[TMP132:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// CK10-NEXT:    store ptr [[TMP132]], ptr [[_TMP33]], align 8
// CK10-NEXT:    [[TMP133:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// CK10-NEXT:    store ptr [[TMP133]], ptr [[_TMP34]], align 8
// CK10-NEXT:    [[TMP134:%.*]] = load ptr, ptr [[_TMP33]], align 8
// CK10-NEXT:    [[TMP135:%.*]] = load ptr, ptr [[TMP134]], align 8
// CK10-NEXT:    [[TMP136:%.*]] = load ptr, ptr [[_TMP34]], align 8
// CK10-NEXT:    [[TMP137:%.*]] = load ptr, ptr [[TMP136]], align 8
// CK10-NEXT:    [[TMP138:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP135]], ptr [[TMP138]], align 8
// CK10-NEXT:    [[TMP139:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK10-NEXT:    store ptr [[TMP135]], ptr [[TMP139]], align 8
// CK10-NEXT:    [[TMP140:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i64 0, i64 0
// CK10-NEXT:    store ptr null, ptr [[TMP140]], align 8
// CK10-NEXT:    [[TMP141:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 1
// CK10-NEXT:    store ptr [[TMP137]], ptr [[TMP141]], align 8
// CK10-NEXT:    [[TMP142:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 1
// CK10-NEXT:    store ptr [[TMP137]], ptr [[TMP142]], align 8
// CK10-NEXT:    [[TMP143:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i64 0, i64 1
// CK10-NEXT:    store ptr null, ptr [[TMP143]], align 8
// CK10-NEXT:    [[TMP144:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK10-NEXT:    [[TMP145:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK10-NEXT:    [[TMP146:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 0
// CK10-NEXT:    store i32 2, ptr [[TMP146]], align 4
// CK10-NEXT:    [[TMP147:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 1
// CK10-NEXT:    store i32 2, ptr [[TMP147]], align 4
// CK10-NEXT:    [[TMP148:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 2
// CK10-NEXT:    store ptr [[TMP144]], ptr [[TMP148]], align 8
// CK10-NEXT:    [[TMP149:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 3
// CK10-NEXT:    store ptr [[TMP145]], ptr [[TMP149]], align 8
// CK10-NEXT:    [[TMP150:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 4
// CK10-NEXT:    store ptr @.offload_sizes.11, ptr [[TMP150]], align 8
// CK10-NEXT:    [[TMP151:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 5
// CK10-NEXT:    store ptr @.offload_maptypes.12, ptr [[TMP151]], align 8
// CK10-NEXT:    [[TMP152:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 6
// CK10-NEXT:    store ptr null, ptr [[TMP152]], align 8
// CK10-NEXT:    [[TMP153:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 7
// CK10-NEXT:    store ptr null, ptr [[TMP153]], align 8
// CK10-NEXT:    [[TMP154:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 8
// CK10-NEXT:    store i64 0, ptr [[TMP154]], align 8
// CK10-NEXT:    [[TMP155:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 9
// CK10-NEXT:    store i64 0, ptr [[TMP155]], align 8
// CK10-NEXT:    [[TMP156:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 10
// CK10-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP156]], align 4
// CK10-NEXT:    [[TMP157:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 11
// CK10-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP157]], align 4
// CK10-NEXT:    [[TMP158:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 12
// CK10-NEXT:    store i32 0, ptr [[TMP158]], align 4
// CK10-NEXT:    [[TMP159:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74.region_id, ptr [[KERNEL_ARGS38]])
// CK10-NEXT:    [[TMP160:%.*]] = icmp ne i32 [[TMP159]], 0
// CK10-NEXT:    br i1 [[TMP160]], label [[OMP_OFFLOAD_FAILED39:%.*]], label [[OMP_OFFLOAD_CONT40:%.*]]
// CK10:       omp_offload.failed39:
// CK10-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74(ptr [[TMP135]], ptr [[TMP137]]) #[[ATTR2]]
// CK10-NEXT:    br label [[OMP_OFFLOAD_CONT40]]
// CK10:       omp_offload.cont40:
// CK10-NEXT:    ret void
//
//
// CK10-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37
// CK10-SAME: (ptr noundef [[G:%.*]]) #[[ATTR1:[0-9]+]] {
// CK10-NEXT:  entry:
// CK10-NEXT:    [[G_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    store ptr [[G]], ptr [[G_ADDR]], align 8
// CK10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[G_ADDR]], align 8
// CK10-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK10-NEXT:    store ptr [[INCDEC_PTR]], ptr [[G_ADDR]], align 8
// CK10-NEXT:    ret void
//
//
// CK10-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43
// CK10-SAME: (ptr noundef [[L:%.*]]) #[[ATTR1]] {
// CK10-NEXT:  entry:
// CK10-NEXT:    [[L_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    store ptr [[L]], ptr [[L_ADDR]], align 8
// CK10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[L_ADDR]], align 8
// CK10-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP0]], i32 1
// CK10-NEXT:    store ptr [[INCDEC_PTR]], ptr [[L_ADDR]], align 8
// CK10-NEXT:    ret void
//
//
// CK10-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49
// CK10-SAME: (ptr noundef [[T:%.*]]) #[[ATTR1]] {
// CK10-NEXT:  entry:
// CK10-NEXT:    [[T_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    store ptr [[T]], ptr [[T_ADDR]], align 8
// CK10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[T_ADDR]], align 8
// CK10-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP0]], i32 1
// CK10-NEXT:    store ptr [[INCDEC_PTR]], ptr [[T_ADDR]], align 8
// CK10-NEXT:    ret void
//
//
// CK10-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55
// CK10-SAME: (ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK10-NEXT:  entry:
// CK10-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK10-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 8
// CK10-NEXT:    store ptr [[LR_ADDR]], ptr [[TMP]], align 8
// CK10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK10-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK10-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 1
// CK10-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK10-NEXT:    ret void
//
//
// CK10-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61
// CK10-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK10-NEXT:  entry:
// CK10-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK10-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK10-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 8
// CK10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK10-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK10-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK10-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK10-NEXT:    ret void
//
//
// CK10-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67
// CK10-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK10-NEXT:  entry:
// CK10-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK10-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK10-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 8
// CK10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK10-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK10-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK10-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK10-NEXT:    ret void
//
//
// CK10-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74
// CK10-SAME: (ptr noundef [[TR:%.*]], ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK10-NEXT:  entry:
// CK10-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK10-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 8
// CK10-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK10-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 8
// CK10-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 8
// CK10-NEXT:    store ptr [[LR_ADDR]], ptr [[_TMP1]], align 8
// CK10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK10-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK10-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK10-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK10-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[_TMP1]], align 8
// CK10-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
// CK10-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds float, ptr [[TMP3]], i32 1
// CK10-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[TMP2]], align 8
// CK10-NEXT:    ret void
//
//
// CK10-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK10-SAME: () #[[ATTR3:[0-9]+]] {
// CK10-NEXT:  entry:
// CK10-NEXT:    call void @__tgt_register_requires(i64 1)
// CK10-NEXT:    ret void
//
//
// CK11-LABEL: define {{[^@]+}}@_Z3barRPfRPi
// CK11-SAME: (ptr noundef nonnull align 8 dereferenceable(8) [[A:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) #[[ATTR0:[0-9]+]] {
// CK11-NEXT:  entry:
// CK11-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 8
// CK11-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// CK11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
// CK11-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// CK11-NEXT:    call void @_Z3fooIiEvRPfRPT_(ptr noundef nonnull align 8 dereferenceable(8) [[TMP0]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP1]])
// CK11-NEXT:    ret void
//
//
// CK11-LABEL: define {{[^@]+}}@_Z3fooIiEvRPfRPT_
// CK11-SAME: (ptr noundef nonnull align 8 dereferenceable(8) [[LR:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[TR:%.*]]) #[[ATTR0]] comdat {
// CK11-NEXT:  entry:
// CK11-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[L:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[T:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK11-NEXT:    [[DOTOFFLOAD_BASEPTRS1:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_PTRS2:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_MAPPERS3:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[KERNEL_ARGS4:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK11-NEXT:    [[DOTOFFLOAD_BASEPTRS7:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_PTRS8:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_MAPPERS9:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[KERNEL_ARGS10:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK11-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[DOTOFFLOAD_BASEPTRS13:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_PTRS14:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_MAPPERS15:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[KERNEL_ARGS16:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK11-NEXT:    [[_TMP19:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[DOTOFFLOAD_BASEPTRS20:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_PTRS21:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_MAPPERS22:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[KERNEL_ARGS23:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK11-NEXT:    [[_TMP26:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[DOTOFFLOAD_BASEPTRS27:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_PTRS28:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_MAPPERS29:%.*]] = alloca [1 x ptr], align 8
// CK11-NEXT:    [[KERNEL_ARGS30:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK11-NEXT:    [[_TMP33:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[_TMP34:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[DOTOFFLOAD_BASEPTRS35:%.*]] = alloca [2 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_PTRS36:%.*]] = alloca [2 x ptr], align 8
// CK11-NEXT:    [[DOTOFFLOAD_MAPPERS37:%.*]] = alloca [2 x ptr], align 8
// CK11-NEXT:    [[KERNEL_ARGS38:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK11-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 8
// CK11-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK11-NEXT:    [[TMP0:%.*]] = load ptr, ptr @g, align 8
// CK11-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 8
// CK11-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 8
// CK11-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i64 0, i64 0
// CK11-NEXT:    store ptr null, ptr [[TMP3]], align 8
// CK11-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK11-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK11-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK11-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK11-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK11-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK11-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK11-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 8
// CK11-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK11-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 8
// CK11-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK11-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 8
// CK11-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK11-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 8
// CK11-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK11-NEXT:    store ptr null, ptr [[TMP12]], align 8
// CK11-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK11-NEXT:    store ptr null, ptr [[TMP13]], align 8
// CK11-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK11-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK11-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK11-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK11-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK11-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK11-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK11-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK11-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK11-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK11-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37.region_id, ptr [[KERNEL_ARGS]])
// CK11-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK11-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK11:       omp_offload.failed:
// CK11-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK11-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK11:       omp_offload.cont:
// CK11-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[L]], align 8
// CK11-NEXT:    [[TMP22:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP21]], ptr [[TMP22]], align 8
// CK11-NEXT:    [[TMP23:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP21]], ptr [[TMP23]], align 8
// CK11-NEXT:    [[TMP24:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS3]], i64 0, i64 0
// CK11-NEXT:    store ptr null, ptr [[TMP24]], align 8
// CK11-NEXT:    [[TMP25:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK11-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK11-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 0
// CK11-NEXT:    store i32 2, ptr [[TMP27]], align 4
// CK11-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 1
// CK11-NEXT:    store i32 1, ptr [[TMP28]], align 4
// CK11-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 2
// CK11-NEXT:    store ptr [[TMP25]], ptr [[TMP29]], align 8
// CK11-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 3
// CK11-NEXT:    store ptr [[TMP26]], ptr [[TMP30]], align 8
// CK11-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 4
// CK11-NEXT:    store ptr @.offload_sizes.1, ptr [[TMP31]], align 8
// CK11-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 5
// CK11-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP32]], align 8
// CK11-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 6
// CK11-NEXT:    store ptr null, ptr [[TMP33]], align 8
// CK11-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 7
// CK11-NEXT:    store ptr null, ptr [[TMP34]], align 8
// CK11-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 8
// CK11-NEXT:    store i64 0, ptr [[TMP35]], align 8
// CK11-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 9
// CK11-NEXT:    store i64 0, ptr [[TMP36]], align 8
// CK11-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 10
// CK11-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP37]], align 4
// CK11-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 11
// CK11-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP38]], align 4
// CK11-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 12
// CK11-NEXT:    store i32 0, ptr [[TMP39]], align 4
// CK11-NEXT:    [[TMP40:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43.region_id, ptr [[KERNEL_ARGS4]])
// CK11-NEXT:    [[TMP41:%.*]] = icmp ne i32 [[TMP40]], 0
// CK11-NEXT:    br i1 [[TMP41]], label [[OMP_OFFLOAD_FAILED5:%.*]], label [[OMP_OFFLOAD_CONT6:%.*]]
// CK11:       omp_offload.failed5:
// CK11-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43(ptr [[TMP21]]) #[[ATTR2]]
// CK11-NEXT:    br label [[OMP_OFFLOAD_CONT6]]
// CK11:       omp_offload.cont6:
// CK11-NEXT:    [[TMP42:%.*]] = load ptr, ptr [[T]], align 8
// CK11-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP42]], ptr [[TMP43]], align 8
// CK11-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP42]], ptr [[TMP44]], align 8
// CK11-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS9]], i64 0, i64 0
// CK11-NEXT:    store ptr null, ptr [[TMP45]], align 8
// CK11-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK11-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK11-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 0
// CK11-NEXT:    store i32 2, ptr [[TMP48]], align 4
// CK11-NEXT:    [[TMP49:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 1
// CK11-NEXT:    store i32 1, ptr [[TMP49]], align 4
// CK11-NEXT:    [[TMP50:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 2
// CK11-NEXT:    store ptr [[TMP46]], ptr [[TMP50]], align 8
// CK11-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 3
// CK11-NEXT:    store ptr [[TMP47]], ptr [[TMP51]], align 8
// CK11-NEXT:    [[TMP52:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 4
// CK11-NEXT:    store ptr @.offload_sizes.3, ptr [[TMP52]], align 8
// CK11-NEXT:    [[TMP53:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 5
// CK11-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP53]], align 8
// CK11-NEXT:    [[TMP54:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 6
// CK11-NEXT:    store ptr null, ptr [[TMP54]], align 8
// CK11-NEXT:    [[TMP55:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 7
// CK11-NEXT:    store ptr null, ptr [[TMP55]], align 8
// CK11-NEXT:    [[TMP56:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 8
// CK11-NEXT:    store i64 0, ptr [[TMP56]], align 8
// CK11-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 9
// CK11-NEXT:    store i64 0, ptr [[TMP57]], align 8
// CK11-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 10
// CK11-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP58]], align 4
// CK11-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 11
// CK11-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP59]], align 4
// CK11-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 12
// CK11-NEXT:    store i32 0, ptr [[TMP60]], align 4
// CK11-NEXT:    [[TMP61:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49.region_id, ptr [[KERNEL_ARGS10]])
// CK11-NEXT:    [[TMP62:%.*]] = icmp ne i32 [[TMP61]], 0
// CK11-NEXT:    br i1 [[TMP62]], label [[OMP_OFFLOAD_FAILED11:%.*]], label [[OMP_OFFLOAD_CONT12:%.*]]
// CK11:       omp_offload.failed11:
// CK11-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49(ptr [[TMP42]]) #[[ATTR2]]
// CK11-NEXT:    br label [[OMP_OFFLOAD_CONT12]]
// CK11:       omp_offload.cont12:
// CK11-NEXT:    [[TMP63:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// CK11-NEXT:    store ptr [[TMP63]], ptr [[TMP]], align 8
// CK11-NEXT:    [[TMP64:%.*]] = load ptr, ptr [[TMP]], align 8
// CK11-NEXT:    [[TMP65:%.*]] = load ptr, ptr [[TMP64]], align 8
// CK11-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP65]], ptr [[TMP66]], align 8
// CK11-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP65]], ptr [[TMP67]], align 8
// CK11-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS15]], i64 0, i64 0
// CK11-NEXT:    store ptr null, ptr [[TMP68]], align 8
// CK11-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK11-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK11-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 0
// CK11-NEXT:    store i32 2, ptr [[TMP71]], align 4
// CK11-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 1
// CK11-NEXT:    store i32 1, ptr [[TMP72]], align 4
// CK11-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 2
// CK11-NEXT:    store ptr [[TMP69]], ptr [[TMP73]], align 8
// CK11-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 3
// CK11-NEXT:    store ptr [[TMP70]], ptr [[TMP74]], align 8
// CK11-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 4
// CK11-NEXT:    store ptr @.offload_sizes.5, ptr [[TMP75]], align 8
// CK11-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 5
// CK11-NEXT:    store ptr @.offload_maptypes.6, ptr [[TMP76]], align 8
// CK11-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 6
// CK11-NEXT:    store ptr null, ptr [[TMP77]], align 8
// CK11-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 7
// CK11-NEXT:    store ptr null, ptr [[TMP78]], align 8
// CK11-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 8
// CK11-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK11-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 9
// CK11-NEXT:    store i64 0, ptr [[TMP80]], align 8
// CK11-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 10
// CK11-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP81]], align 4
// CK11-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 11
// CK11-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP82]], align 4
// CK11-NEXT:    [[TMP83:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 12
// CK11-NEXT:    store i32 0, ptr [[TMP83]], align 4
// CK11-NEXT:    [[TMP84:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55.region_id, ptr [[KERNEL_ARGS16]])
// CK11-NEXT:    [[TMP85:%.*]] = icmp ne i32 [[TMP84]], 0
// CK11-NEXT:    br i1 [[TMP85]], label [[OMP_OFFLOAD_FAILED17:%.*]], label [[OMP_OFFLOAD_CONT18:%.*]]
// CK11:       omp_offload.failed17:
// CK11-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55(ptr [[TMP65]]) #[[ATTR2]]
// CK11-NEXT:    br label [[OMP_OFFLOAD_CONT18]]
// CK11:       omp_offload.cont18:
// CK11-NEXT:    [[TMP86:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// CK11-NEXT:    store ptr [[TMP86]], ptr [[_TMP19]], align 8
// CK11-NEXT:    [[TMP87:%.*]] = load ptr, ptr [[_TMP19]], align 8
// CK11-NEXT:    [[TMP88:%.*]] = load ptr, ptr [[TMP87]], align 8
// CK11-NEXT:    [[TMP89:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP88]], ptr [[TMP89]], align 8
// CK11-NEXT:    [[TMP90:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP88]], ptr [[TMP90]], align 8
// CK11-NEXT:    [[TMP91:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS22]], i64 0, i64 0
// CK11-NEXT:    store ptr null, ptr [[TMP91]], align 8
// CK11-NEXT:    [[TMP92:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK11-NEXT:    [[TMP93:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK11-NEXT:    [[TMP94:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 0
// CK11-NEXT:    store i32 2, ptr [[TMP94]], align 4
// CK11-NEXT:    [[TMP95:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 1
// CK11-NEXT:    store i32 1, ptr [[TMP95]], align 4
// CK11-NEXT:    [[TMP96:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 2
// CK11-NEXT:    store ptr [[TMP92]], ptr [[TMP96]], align 8
// CK11-NEXT:    [[TMP97:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 3
// CK11-NEXT:    store ptr [[TMP93]], ptr [[TMP97]], align 8
// CK11-NEXT:    [[TMP98:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 4
// CK11-NEXT:    store ptr @.offload_sizes.7, ptr [[TMP98]], align 8
// CK11-NEXT:    [[TMP99:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 5
// CK11-NEXT:    store ptr @.offload_maptypes.8, ptr [[TMP99]], align 8
// CK11-NEXT:    [[TMP100:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 6
// CK11-NEXT:    store ptr null, ptr [[TMP100]], align 8
// CK11-NEXT:    [[TMP101:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 7
// CK11-NEXT:    store ptr null, ptr [[TMP101]], align 8
// CK11-NEXT:    [[TMP102:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 8
// CK11-NEXT:    store i64 0, ptr [[TMP102]], align 8
// CK11-NEXT:    [[TMP103:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 9
// CK11-NEXT:    store i64 0, ptr [[TMP103]], align 8
// CK11-NEXT:    [[TMP104:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 10
// CK11-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP104]], align 4
// CK11-NEXT:    [[TMP105:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 11
// CK11-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP105]], align 4
// CK11-NEXT:    [[TMP106:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 12
// CK11-NEXT:    store i32 0, ptr [[TMP106]], align 4
// CK11-NEXT:    [[TMP107:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61.region_id, ptr [[KERNEL_ARGS23]])
// CK11-NEXT:    [[TMP108:%.*]] = icmp ne i32 [[TMP107]], 0
// CK11-NEXT:    br i1 [[TMP108]], label [[OMP_OFFLOAD_FAILED24:%.*]], label [[OMP_OFFLOAD_CONT25:%.*]]
// CK11:       omp_offload.failed24:
// CK11-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61(ptr [[TMP88]]) #[[ATTR2]]
// CK11-NEXT:    br label [[OMP_OFFLOAD_CONT25]]
// CK11:       omp_offload.cont25:
// CK11-NEXT:    [[TMP109:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// CK11-NEXT:    store ptr [[TMP109]], ptr [[_TMP26]], align 8
// CK11-NEXT:    [[TMP110:%.*]] = load ptr, ptr [[_TMP26]], align 8
// CK11-NEXT:    [[TMP111:%.*]] = load ptr, ptr [[TMP110]], align 8
// CK11-NEXT:    [[TMP112:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP111]], ptr [[TMP112]], align 8
// CK11-NEXT:    [[TMP113:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP111]], ptr [[TMP113]], align 8
// CK11-NEXT:    [[TMP114:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS29]], i64 0, i64 0
// CK11-NEXT:    store ptr null, ptr [[TMP114]], align 8
// CK11-NEXT:    [[TMP115:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK11-NEXT:    [[TMP116:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK11-NEXT:    [[TMP117:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 0
// CK11-NEXT:    store i32 2, ptr [[TMP117]], align 4
// CK11-NEXT:    [[TMP118:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 1
// CK11-NEXT:    store i32 1, ptr [[TMP118]], align 4
// CK11-NEXT:    [[TMP119:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 2
// CK11-NEXT:    store ptr [[TMP115]], ptr [[TMP119]], align 8
// CK11-NEXT:    [[TMP120:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 3
// CK11-NEXT:    store ptr [[TMP116]], ptr [[TMP120]], align 8
// CK11-NEXT:    [[TMP121:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 4
// CK11-NEXT:    store ptr @.offload_sizes.9, ptr [[TMP121]], align 8
// CK11-NEXT:    [[TMP122:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 5
// CK11-NEXT:    store ptr @.offload_maptypes.10, ptr [[TMP122]], align 8
// CK11-NEXT:    [[TMP123:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 6
// CK11-NEXT:    store ptr null, ptr [[TMP123]], align 8
// CK11-NEXT:    [[TMP124:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 7
// CK11-NEXT:    store ptr null, ptr [[TMP124]], align 8
// CK11-NEXT:    [[TMP125:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 8
// CK11-NEXT:    store i64 0, ptr [[TMP125]], align 8
// CK11-NEXT:    [[TMP126:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 9
// CK11-NEXT:    store i64 0, ptr [[TMP126]], align 8
// CK11-NEXT:    [[TMP127:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 10
// CK11-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP127]], align 4
// CK11-NEXT:    [[TMP128:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 11
// CK11-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP128]], align 4
// CK11-NEXT:    [[TMP129:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 12
// CK11-NEXT:    store i32 0, ptr [[TMP129]], align 4
// CK11-NEXT:    [[TMP130:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67.region_id, ptr [[KERNEL_ARGS30]])
// CK11-NEXT:    [[TMP131:%.*]] = icmp ne i32 [[TMP130]], 0
// CK11-NEXT:    br i1 [[TMP131]], label [[OMP_OFFLOAD_FAILED31:%.*]], label [[OMP_OFFLOAD_CONT32:%.*]]
// CK11:       omp_offload.failed31:
// CK11-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67(ptr [[TMP111]]) #[[ATTR2]]
// CK11-NEXT:    br label [[OMP_OFFLOAD_CONT32]]
// CK11:       omp_offload.cont32:
// CK11-NEXT:    [[TMP132:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// CK11-NEXT:    store ptr [[TMP132]], ptr [[_TMP33]], align 8
// CK11-NEXT:    [[TMP133:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// CK11-NEXT:    store ptr [[TMP133]], ptr [[_TMP34]], align 8
// CK11-NEXT:    [[TMP134:%.*]] = load ptr, ptr [[_TMP33]], align 8
// CK11-NEXT:    [[TMP135:%.*]] = load ptr, ptr [[TMP134]], align 8
// CK11-NEXT:    [[TMP136:%.*]] = load ptr, ptr [[_TMP34]], align 8
// CK11-NEXT:    [[TMP137:%.*]] = load ptr, ptr [[TMP136]], align 8
// CK11-NEXT:    [[TMP138:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP135]], ptr [[TMP138]], align 8
// CK11-NEXT:    [[TMP139:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK11-NEXT:    store ptr [[TMP135]], ptr [[TMP139]], align 8
// CK11-NEXT:    [[TMP140:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i64 0, i64 0
// CK11-NEXT:    store ptr null, ptr [[TMP140]], align 8
// CK11-NEXT:    [[TMP141:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 1
// CK11-NEXT:    store ptr [[TMP137]], ptr [[TMP141]], align 8
// CK11-NEXT:    [[TMP142:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 1
// CK11-NEXT:    store ptr [[TMP137]], ptr [[TMP142]], align 8
// CK11-NEXT:    [[TMP143:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i64 0, i64 1
// CK11-NEXT:    store ptr null, ptr [[TMP143]], align 8
// CK11-NEXT:    [[TMP144:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK11-NEXT:    [[TMP145:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK11-NEXT:    [[TMP146:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 0
// CK11-NEXT:    store i32 2, ptr [[TMP146]], align 4
// CK11-NEXT:    [[TMP147:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 1
// CK11-NEXT:    store i32 2, ptr [[TMP147]], align 4
// CK11-NEXT:    [[TMP148:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 2
// CK11-NEXT:    store ptr [[TMP144]], ptr [[TMP148]], align 8
// CK11-NEXT:    [[TMP149:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 3
// CK11-NEXT:    store ptr [[TMP145]], ptr [[TMP149]], align 8
// CK11-NEXT:    [[TMP150:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 4
// CK11-NEXT:    store ptr @.offload_sizes.11, ptr [[TMP150]], align 8
// CK11-NEXT:    [[TMP151:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 5
// CK11-NEXT:    store ptr @.offload_maptypes.12, ptr [[TMP151]], align 8
// CK11-NEXT:    [[TMP152:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 6
// CK11-NEXT:    store ptr null, ptr [[TMP152]], align 8
// CK11-NEXT:    [[TMP153:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 7
// CK11-NEXT:    store ptr null, ptr [[TMP153]], align 8
// CK11-NEXT:    [[TMP154:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 8
// CK11-NEXT:    store i64 0, ptr [[TMP154]], align 8
// CK11-NEXT:    [[TMP155:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 9
// CK11-NEXT:    store i64 0, ptr [[TMP155]], align 8
// CK11-NEXT:    [[TMP156:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 10
// CK11-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP156]], align 4
// CK11-NEXT:    [[TMP157:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 11
// CK11-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP157]], align 4
// CK11-NEXT:    [[TMP158:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 12
// CK11-NEXT:    store i32 0, ptr [[TMP158]], align 4
// CK11-NEXT:    [[TMP159:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74.region_id, ptr [[KERNEL_ARGS38]])
// CK11-NEXT:    [[TMP160:%.*]] = icmp ne i32 [[TMP159]], 0
// CK11-NEXT:    br i1 [[TMP160]], label [[OMP_OFFLOAD_FAILED39:%.*]], label [[OMP_OFFLOAD_CONT40:%.*]]
// CK11:       omp_offload.failed39:
// CK11-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74(ptr [[TMP135]], ptr [[TMP137]]) #[[ATTR2]]
// CK11-NEXT:    br label [[OMP_OFFLOAD_CONT40]]
// CK11:       omp_offload.cont40:
// CK11-NEXT:    ret void
//
//
// CK11-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37
// CK11-SAME: (ptr noundef [[G:%.*]]) #[[ATTR1:[0-9]+]] {
// CK11-NEXT:  entry:
// CK11-NEXT:    [[G_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    store ptr [[G]], ptr [[G_ADDR]], align 8
// CK11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[G_ADDR]], align 8
// CK11-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK11-NEXT:    store ptr [[INCDEC_PTR]], ptr [[G_ADDR]], align 8
// CK11-NEXT:    ret void
//
//
// CK11-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43
// CK11-SAME: (ptr noundef [[L:%.*]]) #[[ATTR1]] {
// CK11-NEXT:  entry:
// CK11-NEXT:    [[L_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    store ptr [[L]], ptr [[L_ADDR]], align 8
// CK11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[L_ADDR]], align 8
// CK11-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP0]], i32 1
// CK11-NEXT:    store ptr [[INCDEC_PTR]], ptr [[L_ADDR]], align 8
// CK11-NEXT:    ret void
//
//
// CK11-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49
// CK11-SAME: (ptr noundef [[T:%.*]]) #[[ATTR1]] {
// CK11-NEXT:  entry:
// CK11-NEXT:    [[T_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    store ptr [[T]], ptr [[T_ADDR]], align 8
// CK11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[T_ADDR]], align 8
// CK11-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP0]], i32 1
// CK11-NEXT:    store ptr [[INCDEC_PTR]], ptr [[T_ADDR]], align 8
// CK11-NEXT:    ret void
//
//
// CK11-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55
// CK11-SAME: (ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK11-NEXT:  entry:
// CK11-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK11-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 8
// CK11-NEXT:    store ptr [[LR_ADDR]], ptr [[TMP]], align 8
// CK11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK11-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK11-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 1
// CK11-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK11-NEXT:    ret void
//
//
// CK11-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61
// CK11-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK11-NEXT:  entry:
// CK11-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK11-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK11-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 8
// CK11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK11-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK11-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK11-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK11-NEXT:    ret void
//
//
// CK11-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67
// CK11-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK11-NEXT:  entry:
// CK11-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK11-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK11-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 8
// CK11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK11-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK11-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK11-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK11-NEXT:    ret void
//
//
// CK11-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74
// CK11-SAME: (ptr noundef [[TR:%.*]], ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK11-NEXT:  entry:
// CK11-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// CK11-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 8
// CK11-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// CK11-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 8
// CK11-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 8
// CK11-NEXT:    store ptr [[LR_ADDR]], ptr [[_TMP1]], align 8
// CK11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 8
// CK11-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 8
// CK11-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK11-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 8
// CK11-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[_TMP1]], align 8
// CK11-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
// CK11-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds float, ptr [[TMP3]], i32 1
// CK11-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[TMP2]], align 8
// CK11-NEXT:    ret void
//
//
// CK11-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK11-SAME: () #[[ATTR3:[0-9]+]] {
// CK11-NEXT:  entry:
// CK11-NEXT:    call void @__tgt_register_requires(i64 1)
// CK11-NEXT:    ret void
//
//
// CK12-LABEL: define {{[^@]+}}@_Z3barRPfRPi
// CK12-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[A:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) #[[ATTR0:[0-9]+]] {
// CK12-NEXT:  entry:
// CK12-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 4
// CK12-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// CK12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 4
// CK12-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// CK12-NEXT:    call void @_Z3fooIiEvRPfRPT_(ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP1]])
// CK12-NEXT:    ret void
//
//
// CK12-LABEL: define {{[^@]+}}@_Z3fooIiEvRPfRPT_
// CK12-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[LR:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[TR:%.*]]) #[[ATTR0]] comdat {
// CK12-NEXT:  entry:
// CK12-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[L:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[T:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK12-NEXT:    [[DOTOFFLOAD_BASEPTRS1:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_PTRS2:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_MAPPERS3:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[KERNEL_ARGS4:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK12-NEXT:    [[DOTOFFLOAD_BASEPTRS7:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_PTRS8:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_MAPPERS9:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[KERNEL_ARGS10:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK12-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[DOTOFFLOAD_BASEPTRS13:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_PTRS14:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_MAPPERS15:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[KERNEL_ARGS16:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK12-NEXT:    [[_TMP19:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[DOTOFFLOAD_BASEPTRS20:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_PTRS21:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_MAPPERS22:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[KERNEL_ARGS23:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK12-NEXT:    [[_TMP26:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[DOTOFFLOAD_BASEPTRS27:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_PTRS28:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_MAPPERS29:%.*]] = alloca [1 x ptr], align 4
// CK12-NEXT:    [[KERNEL_ARGS30:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK12-NEXT:    [[_TMP33:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[_TMP34:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[DOTOFFLOAD_BASEPTRS35:%.*]] = alloca [2 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_PTRS36:%.*]] = alloca [2 x ptr], align 4
// CK12-NEXT:    [[DOTOFFLOAD_MAPPERS37:%.*]] = alloca [2 x ptr], align 4
// CK12-NEXT:    [[KERNEL_ARGS38:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK12-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 4
// CK12-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK12-NEXT:    [[TMP0:%.*]] = load ptr, ptr @g, align 4
// CK12-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 4
// CK12-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 4
// CK12-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i32 0, i32 0
// CK12-NEXT:    store ptr null, ptr [[TMP3]], align 4
// CK12-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK12-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK12-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK12-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK12-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK12-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK12-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK12-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 4
// CK12-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK12-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 4
// CK12-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK12-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 4
// CK12-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK12-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 4
// CK12-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK12-NEXT:    store ptr null, ptr [[TMP12]], align 4
// CK12-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK12-NEXT:    store ptr null, ptr [[TMP13]], align 4
// CK12-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK12-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK12-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK12-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK12-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK12-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK12-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK12-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK12-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK12-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK12-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37.region_id, ptr [[KERNEL_ARGS]])
// CK12-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK12-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK12:       omp_offload.failed:
// CK12-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK12-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK12:       omp_offload.cont:
// CK12-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[L]], align 4
// CK12-NEXT:    [[TMP22:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP21]], ptr [[TMP22]], align 4
// CK12-NEXT:    [[TMP23:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP21]], ptr [[TMP23]], align 4
// CK12-NEXT:    [[TMP24:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS3]], i32 0, i32 0
// CK12-NEXT:    store ptr null, ptr [[TMP24]], align 4
// CK12-NEXT:    [[TMP25:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK12-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK12-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 0
// CK12-NEXT:    store i32 2, ptr [[TMP27]], align 4
// CK12-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 1
// CK12-NEXT:    store i32 1, ptr [[TMP28]], align 4
// CK12-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 2
// CK12-NEXT:    store ptr [[TMP25]], ptr [[TMP29]], align 4
// CK12-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 3
// CK12-NEXT:    store ptr [[TMP26]], ptr [[TMP30]], align 4
// CK12-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 4
// CK12-NEXT:    store ptr @.offload_sizes.1, ptr [[TMP31]], align 4
// CK12-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 5
// CK12-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP32]], align 4
// CK12-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 6
// CK12-NEXT:    store ptr null, ptr [[TMP33]], align 4
// CK12-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 7
// CK12-NEXT:    store ptr null, ptr [[TMP34]], align 4
// CK12-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 8
// CK12-NEXT:    store i64 0, ptr [[TMP35]], align 8
// CK12-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 9
// CK12-NEXT:    store i64 0, ptr [[TMP36]], align 8
// CK12-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 10
// CK12-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP37]], align 4
// CK12-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 11
// CK12-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP38]], align 4
// CK12-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 12
// CK12-NEXT:    store i32 0, ptr [[TMP39]], align 4
// CK12-NEXT:    [[TMP40:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43.region_id, ptr [[KERNEL_ARGS4]])
// CK12-NEXT:    [[TMP41:%.*]] = icmp ne i32 [[TMP40]], 0
// CK12-NEXT:    br i1 [[TMP41]], label [[OMP_OFFLOAD_FAILED5:%.*]], label [[OMP_OFFLOAD_CONT6:%.*]]
// CK12:       omp_offload.failed5:
// CK12-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43(ptr [[TMP21]]) #[[ATTR2]]
// CK12-NEXT:    br label [[OMP_OFFLOAD_CONT6]]
// CK12:       omp_offload.cont6:
// CK12-NEXT:    [[TMP42:%.*]] = load ptr, ptr [[T]], align 4
// CK12-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP42]], ptr [[TMP43]], align 4
// CK12-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP42]], ptr [[TMP44]], align 4
// CK12-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS9]], i32 0, i32 0
// CK12-NEXT:    store ptr null, ptr [[TMP45]], align 4
// CK12-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK12-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK12-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 0
// CK12-NEXT:    store i32 2, ptr [[TMP48]], align 4
// CK12-NEXT:    [[TMP49:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 1
// CK12-NEXT:    store i32 1, ptr [[TMP49]], align 4
// CK12-NEXT:    [[TMP50:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 2
// CK12-NEXT:    store ptr [[TMP46]], ptr [[TMP50]], align 4
// CK12-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 3
// CK12-NEXT:    store ptr [[TMP47]], ptr [[TMP51]], align 4
// CK12-NEXT:    [[TMP52:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 4
// CK12-NEXT:    store ptr @.offload_sizes.3, ptr [[TMP52]], align 4
// CK12-NEXT:    [[TMP53:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 5
// CK12-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP53]], align 4
// CK12-NEXT:    [[TMP54:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 6
// CK12-NEXT:    store ptr null, ptr [[TMP54]], align 4
// CK12-NEXT:    [[TMP55:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 7
// CK12-NEXT:    store ptr null, ptr [[TMP55]], align 4
// CK12-NEXT:    [[TMP56:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 8
// CK12-NEXT:    store i64 0, ptr [[TMP56]], align 8
// CK12-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 9
// CK12-NEXT:    store i64 0, ptr [[TMP57]], align 8
// CK12-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 10
// CK12-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP58]], align 4
// CK12-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 11
// CK12-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP59]], align 4
// CK12-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 12
// CK12-NEXT:    store i32 0, ptr [[TMP60]], align 4
// CK12-NEXT:    [[TMP61:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49.region_id, ptr [[KERNEL_ARGS10]])
// CK12-NEXT:    [[TMP62:%.*]] = icmp ne i32 [[TMP61]], 0
// CK12-NEXT:    br i1 [[TMP62]], label [[OMP_OFFLOAD_FAILED11:%.*]], label [[OMP_OFFLOAD_CONT12:%.*]]
// CK12:       omp_offload.failed11:
// CK12-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49(ptr [[TMP42]]) #[[ATTR2]]
// CK12-NEXT:    br label [[OMP_OFFLOAD_CONT12]]
// CK12:       omp_offload.cont12:
// CK12-NEXT:    [[TMP63:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// CK12-NEXT:    store ptr [[TMP63]], ptr [[TMP]], align 4
// CK12-NEXT:    [[TMP64:%.*]] = load ptr, ptr [[TMP]], align 4
// CK12-NEXT:    [[TMP65:%.*]] = load ptr, ptr [[TMP64]], align 4
// CK12-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP65]], ptr [[TMP66]], align 4
// CK12-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP65]], ptr [[TMP67]], align 4
// CK12-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS15]], i32 0, i32 0
// CK12-NEXT:    store ptr null, ptr [[TMP68]], align 4
// CK12-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK12-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK12-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 0
// CK12-NEXT:    store i32 2, ptr [[TMP71]], align 4
// CK12-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 1
// CK12-NEXT:    store i32 1, ptr [[TMP72]], align 4
// CK12-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 2
// CK12-NEXT:    store ptr [[TMP69]], ptr [[TMP73]], align 4
// CK12-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 3
// CK12-NEXT:    store ptr [[TMP70]], ptr [[TMP74]], align 4
// CK12-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 4
// CK12-NEXT:    store ptr @.offload_sizes.5, ptr [[TMP75]], align 4
// CK12-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 5
// CK12-NEXT:    store ptr @.offload_maptypes.6, ptr [[TMP76]], align 4
// CK12-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 6
// CK12-NEXT:    store ptr null, ptr [[TMP77]], align 4
// CK12-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 7
// CK12-NEXT:    store ptr null, ptr [[TMP78]], align 4
// CK12-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 8
// CK12-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK12-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 9
// CK12-NEXT:    store i64 0, ptr [[TMP80]], align 8
// CK12-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 10
// CK12-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP81]], align 4
// CK12-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 11
// CK12-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP82]], align 4
// CK12-NEXT:    [[TMP83:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 12
// CK12-NEXT:    store i32 0, ptr [[TMP83]], align 4
// CK12-NEXT:    [[TMP84:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55.region_id, ptr [[KERNEL_ARGS16]])
// CK12-NEXT:    [[TMP85:%.*]] = icmp ne i32 [[TMP84]], 0
// CK12-NEXT:    br i1 [[TMP85]], label [[OMP_OFFLOAD_FAILED17:%.*]], label [[OMP_OFFLOAD_CONT18:%.*]]
// CK12:       omp_offload.failed17:
// CK12-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55(ptr [[TMP65]]) #[[ATTR2]]
// CK12-NEXT:    br label [[OMP_OFFLOAD_CONT18]]
// CK12:       omp_offload.cont18:
// CK12-NEXT:    [[TMP86:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// CK12-NEXT:    store ptr [[TMP86]], ptr [[_TMP19]], align 4
// CK12-NEXT:    [[TMP87:%.*]] = load ptr, ptr [[_TMP19]], align 4
// CK12-NEXT:    [[TMP88:%.*]] = load ptr, ptr [[TMP87]], align 4
// CK12-NEXT:    [[TMP89:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP88]], ptr [[TMP89]], align 4
// CK12-NEXT:    [[TMP90:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP88]], ptr [[TMP90]], align 4
// CK12-NEXT:    [[TMP91:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS22]], i32 0, i32 0
// CK12-NEXT:    store ptr null, ptr [[TMP91]], align 4
// CK12-NEXT:    [[TMP92:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK12-NEXT:    [[TMP93:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK12-NEXT:    [[TMP94:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 0
// CK12-NEXT:    store i32 2, ptr [[TMP94]], align 4
// CK12-NEXT:    [[TMP95:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 1
// CK12-NEXT:    store i32 1, ptr [[TMP95]], align 4
// CK12-NEXT:    [[TMP96:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 2
// CK12-NEXT:    store ptr [[TMP92]], ptr [[TMP96]], align 4
// CK12-NEXT:    [[TMP97:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 3
// CK12-NEXT:    store ptr [[TMP93]], ptr [[TMP97]], align 4
// CK12-NEXT:    [[TMP98:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 4
// CK12-NEXT:    store ptr @.offload_sizes.7, ptr [[TMP98]], align 4
// CK12-NEXT:    [[TMP99:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 5
// CK12-NEXT:    store ptr @.offload_maptypes.8, ptr [[TMP99]], align 4
// CK12-NEXT:    [[TMP100:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 6
// CK12-NEXT:    store ptr null, ptr [[TMP100]], align 4
// CK12-NEXT:    [[TMP101:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 7
// CK12-NEXT:    store ptr null, ptr [[TMP101]], align 4
// CK12-NEXT:    [[TMP102:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 8
// CK12-NEXT:    store i64 0, ptr [[TMP102]], align 8
// CK12-NEXT:    [[TMP103:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 9
// CK12-NEXT:    store i64 0, ptr [[TMP103]], align 8
// CK12-NEXT:    [[TMP104:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 10
// CK12-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP104]], align 4
// CK12-NEXT:    [[TMP105:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 11
// CK12-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP105]], align 4
// CK12-NEXT:    [[TMP106:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 12
// CK12-NEXT:    store i32 0, ptr [[TMP106]], align 4
// CK12-NEXT:    [[TMP107:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61.region_id, ptr [[KERNEL_ARGS23]])
// CK12-NEXT:    [[TMP108:%.*]] = icmp ne i32 [[TMP107]], 0
// CK12-NEXT:    br i1 [[TMP108]], label [[OMP_OFFLOAD_FAILED24:%.*]], label [[OMP_OFFLOAD_CONT25:%.*]]
// CK12:       omp_offload.failed24:
// CK12-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61(ptr [[TMP88]]) #[[ATTR2]]
// CK12-NEXT:    br label [[OMP_OFFLOAD_CONT25]]
// CK12:       omp_offload.cont25:
// CK12-NEXT:    [[TMP109:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// CK12-NEXT:    store ptr [[TMP109]], ptr [[_TMP26]], align 4
// CK12-NEXT:    [[TMP110:%.*]] = load ptr, ptr [[_TMP26]], align 4
// CK12-NEXT:    [[TMP111:%.*]] = load ptr, ptr [[TMP110]], align 4
// CK12-NEXT:    [[TMP112:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP111]], ptr [[TMP112]], align 4
// CK12-NEXT:    [[TMP113:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP111]], ptr [[TMP113]], align 4
// CK12-NEXT:    [[TMP114:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS29]], i32 0, i32 0
// CK12-NEXT:    store ptr null, ptr [[TMP114]], align 4
// CK12-NEXT:    [[TMP115:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK12-NEXT:    [[TMP116:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK12-NEXT:    [[TMP117:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 0
// CK12-NEXT:    store i32 2, ptr [[TMP117]], align 4
// CK12-NEXT:    [[TMP118:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 1
// CK12-NEXT:    store i32 1, ptr [[TMP118]], align 4
// CK12-NEXT:    [[TMP119:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 2
// CK12-NEXT:    store ptr [[TMP115]], ptr [[TMP119]], align 4
// CK12-NEXT:    [[TMP120:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 3
// CK12-NEXT:    store ptr [[TMP116]], ptr [[TMP120]], align 4
// CK12-NEXT:    [[TMP121:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 4
// CK12-NEXT:    store ptr @.offload_sizes.9, ptr [[TMP121]], align 4
// CK12-NEXT:    [[TMP122:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 5
// CK12-NEXT:    store ptr @.offload_maptypes.10, ptr [[TMP122]], align 4
// CK12-NEXT:    [[TMP123:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 6
// CK12-NEXT:    store ptr null, ptr [[TMP123]], align 4
// CK12-NEXT:    [[TMP124:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 7
// CK12-NEXT:    store ptr null, ptr [[TMP124]], align 4
// CK12-NEXT:    [[TMP125:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 8
// CK12-NEXT:    store i64 0, ptr [[TMP125]], align 8
// CK12-NEXT:    [[TMP126:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 9
// CK12-NEXT:    store i64 0, ptr [[TMP126]], align 8
// CK12-NEXT:    [[TMP127:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 10
// CK12-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP127]], align 4
// CK12-NEXT:    [[TMP128:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 11
// CK12-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP128]], align 4
// CK12-NEXT:    [[TMP129:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 12
// CK12-NEXT:    store i32 0, ptr [[TMP129]], align 4
// CK12-NEXT:    [[TMP130:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67.region_id, ptr [[KERNEL_ARGS30]])
// CK12-NEXT:    [[TMP131:%.*]] = icmp ne i32 [[TMP130]], 0
// CK12-NEXT:    br i1 [[TMP131]], label [[OMP_OFFLOAD_FAILED31:%.*]], label [[OMP_OFFLOAD_CONT32:%.*]]
// CK12:       omp_offload.failed31:
// CK12-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67(ptr [[TMP111]]) #[[ATTR2]]
// CK12-NEXT:    br label [[OMP_OFFLOAD_CONT32]]
// CK12:       omp_offload.cont32:
// CK12-NEXT:    [[TMP132:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// CK12-NEXT:    store ptr [[TMP132]], ptr [[_TMP33]], align 4
// CK12-NEXT:    [[TMP133:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// CK12-NEXT:    store ptr [[TMP133]], ptr [[_TMP34]], align 4
// CK12-NEXT:    [[TMP134:%.*]] = load ptr, ptr [[_TMP33]], align 4
// CK12-NEXT:    [[TMP135:%.*]] = load ptr, ptr [[TMP134]], align 4
// CK12-NEXT:    [[TMP136:%.*]] = load ptr, ptr [[_TMP34]], align 4
// CK12-NEXT:    [[TMP137:%.*]] = load ptr, ptr [[TMP136]], align 4
// CK12-NEXT:    [[TMP138:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP135]], ptr [[TMP138]], align 4
// CK12-NEXT:    [[TMP139:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK12-NEXT:    store ptr [[TMP135]], ptr [[TMP139]], align 4
// CK12-NEXT:    [[TMP140:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i32 0, i32 0
// CK12-NEXT:    store ptr null, ptr [[TMP140]], align 4
// CK12-NEXT:    [[TMP141:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 1
// CK12-NEXT:    store ptr [[TMP137]], ptr [[TMP141]], align 4
// CK12-NEXT:    [[TMP142:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 1
// CK12-NEXT:    store ptr [[TMP137]], ptr [[TMP142]], align 4
// CK12-NEXT:    [[TMP143:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i32 0, i32 1
// CK12-NEXT:    store ptr null, ptr [[TMP143]], align 4
// CK12-NEXT:    [[TMP144:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK12-NEXT:    [[TMP145:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK12-NEXT:    [[TMP146:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 0
// CK12-NEXT:    store i32 2, ptr [[TMP146]], align 4
// CK12-NEXT:    [[TMP147:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 1
// CK12-NEXT:    store i32 2, ptr [[TMP147]], align 4
// CK12-NEXT:    [[TMP148:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 2
// CK12-NEXT:    store ptr [[TMP144]], ptr [[TMP148]], align 4
// CK12-NEXT:    [[TMP149:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 3
// CK12-NEXT:    store ptr [[TMP145]], ptr [[TMP149]], align 4
// CK12-NEXT:    [[TMP150:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 4
// CK12-NEXT:    store ptr @.offload_sizes.11, ptr [[TMP150]], align 4
// CK12-NEXT:    [[TMP151:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 5
// CK12-NEXT:    store ptr @.offload_maptypes.12, ptr [[TMP151]], align 4
// CK12-NEXT:    [[TMP152:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 6
// CK12-NEXT:    store ptr null, ptr [[TMP152]], align 4
// CK12-NEXT:    [[TMP153:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 7
// CK12-NEXT:    store ptr null, ptr [[TMP153]], align 4
// CK12-NEXT:    [[TMP154:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 8
// CK12-NEXT:    store i64 0, ptr [[TMP154]], align 8
// CK12-NEXT:    [[TMP155:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 9
// CK12-NEXT:    store i64 0, ptr [[TMP155]], align 8
// CK12-NEXT:    [[TMP156:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 10
// CK12-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP156]], align 4
// CK12-NEXT:    [[TMP157:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 11
// CK12-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP157]], align 4
// CK12-NEXT:    [[TMP158:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 12
// CK12-NEXT:    store i32 0, ptr [[TMP158]], align 4
// CK12-NEXT:    [[TMP159:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74.region_id, ptr [[KERNEL_ARGS38]])
// CK12-NEXT:    [[TMP160:%.*]] = icmp ne i32 [[TMP159]], 0
// CK12-NEXT:    br i1 [[TMP160]], label [[OMP_OFFLOAD_FAILED39:%.*]], label [[OMP_OFFLOAD_CONT40:%.*]]
// CK12:       omp_offload.failed39:
// CK12-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74(ptr [[TMP135]], ptr [[TMP137]]) #[[ATTR2]]
// CK12-NEXT:    br label [[OMP_OFFLOAD_CONT40]]
// CK12:       omp_offload.cont40:
// CK12-NEXT:    ret void
//
//
// CK12-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37
// CK12-SAME: (ptr noundef [[G:%.*]]) #[[ATTR1:[0-9]+]] {
// CK12-NEXT:  entry:
// CK12-NEXT:    [[G_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    store ptr [[G]], ptr [[G_ADDR]], align 4
// CK12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[G_ADDR]], align 4
// CK12-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK12-NEXT:    store ptr [[INCDEC_PTR]], ptr [[G_ADDR]], align 4
// CK12-NEXT:    ret void
//
//
// CK12-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43
// CK12-SAME: (ptr noundef [[L:%.*]]) #[[ATTR1]] {
// CK12-NEXT:  entry:
// CK12-NEXT:    [[L_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    store ptr [[L]], ptr [[L_ADDR]], align 4
// CK12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[L_ADDR]], align 4
// CK12-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP0]], i32 1
// CK12-NEXT:    store ptr [[INCDEC_PTR]], ptr [[L_ADDR]], align 4
// CK12-NEXT:    ret void
//
//
// CK12-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49
// CK12-SAME: (ptr noundef [[T:%.*]]) #[[ATTR1]] {
// CK12-NEXT:  entry:
// CK12-NEXT:    [[T_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    store ptr [[T]], ptr [[T_ADDR]], align 4
// CK12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[T_ADDR]], align 4
// CK12-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP0]], i32 1
// CK12-NEXT:    store ptr [[INCDEC_PTR]], ptr [[T_ADDR]], align 4
// CK12-NEXT:    ret void
//
//
// CK12-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55
// CK12-SAME: (ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK12-NEXT:  entry:
// CK12-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK12-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 4
// CK12-NEXT:    store ptr [[LR_ADDR]], ptr [[TMP]], align 4
// CK12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK12-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK12-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 1
// CK12-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK12-NEXT:    ret void
//
//
// CK12-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61
// CK12-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK12-NEXT:  entry:
// CK12-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK12-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK12-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 4
// CK12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK12-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK12-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK12-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK12-NEXT:    ret void
//
//
// CK12-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67
// CK12-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK12-NEXT:  entry:
// CK12-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK12-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK12-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 4
// CK12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK12-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK12-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK12-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK12-NEXT:    ret void
//
//
// CK12-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74
// CK12-SAME: (ptr noundef [[TR:%.*]], ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK12-NEXT:  entry:
// CK12-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK12-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 4
// CK12-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK12-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 4
// CK12-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 4
// CK12-NEXT:    store ptr [[LR_ADDR]], ptr [[_TMP1]], align 4
// CK12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK12-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK12-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK12-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK12-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[_TMP1]], align 4
// CK12-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 4
// CK12-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds float, ptr [[TMP3]], i32 1
// CK12-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[TMP2]], align 4
// CK12-NEXT:    ret void
//
//
// CK12-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK12-SAME: () #[[ATTR3:[0-9]+]] {
// CK12-NEXT:  entry:
// CK12-NEXT:    call void @__tgt_register_requires(i64 1)
// CK12-NEXT:    ret void
//
//
// CK13-LABEL: define {{[^@]+}}@_Z3barRPfRPi
// CK13-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[A:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) #[[ATTR0:[0-9]+]] {
// CK13-NEXT:  entry:
// CK13-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 4
// CK13-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// CK13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 4
// CK13-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// CK13-NEXT:    call void @_Z3fooIiEvRPfRPT_(ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP1]])
// CK13-NEXT:    ret void
//
//
// CK13-LABEL: define {{[^@]+}}@_Z3fooIiEvRPfRPT_
// CK13-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[LR:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[TR:%.*]]) #[[ATTR0]] comdat {
// CK13-NEXT:  entry:
// CK13-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[L:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[T:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK13-NEXT:    [[DOTOFFLOAD_BASEPTRS1:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_PTRS2:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_MAPPERS3:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[KERNEL_ARGS4:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK13-NEXT:    [[DOTOFFLOAD_BASEPTRS7:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_PTRS8:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_MAPPERS9:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[KERNEL_ARGS10:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK13-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[DOTOFFLOAD_BASEPTRS13:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_PTRS14:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_MAPPERS15:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[KERNEL_ARGS16:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK13-NEXT:    [[_TMP19:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[DOTOFFLOAD_BASEPTRS20:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_PTRS21:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_MAPPERS22:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[KERNEL_ARGS23:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK13-NEXT:    [[_TMP26:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[DOTOFFLOAD_BASEPTRS27:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_PTRS28:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_MAPPERS29:%.*]] = alloca [1 x ptr], align 4
// CK13-NEXT:    [[KERNEL_ARGS30:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK13-NEXT:    [[_TMP33:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[_TMP34:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[DOTOFFLOAD_BASEPTRS35:%.*]] = alloca [2 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_PTRS36:%.*]] = alloca [2 x ptr], align 4
// CK13-NEXT:    [[DOTOFFLOAD_MAPPERS37:%.*]] = alloca [2 x ptr], align 4
// CK13-NEXT:    [[KERNEL_ARGS38:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK13-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 4
// CK13-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK13-NEXT:    [[TMP0:%.*]] = load ptr, ptr @g, align 4
// CK13-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 4
// CK13-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 4
// CK13-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i32 0, i32 0
// CK13-NEXT:    store ptr null, ptr [[TMP3]], align 4
// CK13-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK13-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK13-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK13-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK13-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK13-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK13-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK13-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 4
// CK13-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK13-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 4
// CK13-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK13-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 4
// CK13-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK13-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 4
// CK13-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK13-NEXT:    store ptr null, ptr [[TMP12]], align 4
// CK13-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK13-NEXT:    store ptr null, ptr [[TMP13]], align 4
// CK13-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK13-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK13-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK13-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK13-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK13-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK13-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK13-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK13-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK13-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK13-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37.region_id, ptr [[KERNEL_ARGS]])
// CK13-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK13-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK13:       omp_offload.failed:
// CK13-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK13-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK13:       omp_offload.cont:
// CK13-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[L]], align 4
// CK13-NEXT:    [[TMP22:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP21]], ptr [[TMP22]], align 4
// CK13-NEXT:    [[TMP23:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP21]], ptr [[TMP23]], align 4
// CK13-NEXT:    [[TMP24:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS3]], i32 0, i32 0
// CK13-NEXT:    store ptr null, ptr [[TMP24]], align 4
// CK13-NEXT:    [[TMP25:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS1]], i32 0, i32 0
// CK13-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS2]], i32 0, i32 0
// CK13-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 0
// CK13-NEXT:    store i32 2, ptr [[TMP27]], align 4
// CK13-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 1
// CK13-NEXT:    store i32 1, ptr [[TMP28]], align 4
// CK13-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 2
// CK13-NEXT:    store ptr [[TMP25]], ptr [[TMP29]], align 4
// CK13-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 3
// CK13-NEXT:    store ptr [[TMP26]], ptr [[TMP30]], align 4
// CK13-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 4
// CK13-NEXT:    store ptr @.offload_sizes.1, ptr [[TMP31]], align 4
// CK13-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 5
// CK13-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP32]], align 4
// CK13-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 6
// CK13-NEXT:    store ptr null, ptr [[TMP33]], align 4
// CK13-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 7
// CK13-NEXT:    store ptr null, ptr [[TMP34]], align 4
// CK13-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 8
// CK13-NEXT:    store i64 0, ptr [[TMP35]], align 8
// CK13-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 9
// CK13-NEXT:    store i64 0, ptr [[TMP36]], align 8
// CK13-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 10
// CK13-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP37]], align 4
// CK13-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 11
// CK13-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP38]], align 4
// CK13-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS4]], i32 0, i32 12
// CK13-NEXT:    store i32 0, ptr [[TMP39]], align 4
// CK13-NEXT:    [[TMP40:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43.region_id, ptr [[KERNEL_ARGS4]])
// CK13-NEXT:    [[TMP41:%.*]] = icmp ne i32 [[TMP40]], 0
// CK13-NEXT:    br i1 [[TMP41]], label [[OMP_OFFLOAD_FAILED5:%.*]], label [[OMP_OFFLOAD_CONT6:%.*]]
// CK13:       omp_offload.failed5:
// CK13-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43(ptr [[TMP21]]) #[[ATTR2]]
// CK13-NEXT:    br label [[OMP_OFFLOAD_CONT6]]
// CK13:       omp_offload.cont6:
// CK13-NEXT:    [[TMP42:%.*]] = load ptr, ptr [[T]], align 4
// CK13-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP42]], ptr [[TMP43]], align 4
// CK13-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP42]], ptr [[TMP44]], align 4
// CK13-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS9]], i32 0, i32 0
// CK13-NEXT:    store ptr null, ptr [[TMP45]], align 4
// CK13-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS7]], i32 0, i32 0
// CK13-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS8]], i32 0, i32 0
// CK13-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 0
// CK13-NEXT:    store i32 2, ptr [[TMP48]], align 4
// CK13-NEXT:    [[TMP49:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 1
// CK13-NEXT:    store i32 1, ptr [[TMP49]], align 4
// CK13-NEXT:    [[TMP50:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 2
// CK13-NEXT:    store ptr [[TMP46]], ptr [[TMP50]], align 4
// CK13-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 3
// CK13-NEXT:    store ptr [[TMP47]], ptr [[TMP51]], align 4
// CK13-NEXT:    [[TMP52:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 4
// CK13-NEXT:    store ptr @.offload_sizes.3, ptr [[TMP52]], align 4
// CK13-NEXT:    [[TMP53:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 5
// CK13-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP53]], align 4
// CK13-NEXT:    [[TMP54:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 6
// CK13-NEXT:    store ptr null, ptr [[TMP54]], align 4
// CK13-NEXT:    [[TMP55:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 7
// CK13-NEXT:    store ptr null, ptr [[TMP55]], align 4
// CK13-NEXT:    [[TMP56:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 8
// CK13-NEXT:    store i64 0, ptr [[TMP56]], align 8
// CK13-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 9
// CK13-NEXT:    store i64 0, ptr [[TMP57]], align 8
// CK13-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 10
// CK13-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP58]], align 4
// CK13-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 11
// CK13-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP59]], align 4
// CK13-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS10]], i32 0, i32 12
// CK13-NEXT:    store i32 0, ptr [[TMP60]], align 4
// CK13-NEXT:    [[TMP61:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49.region_id, ptr [[KERNEL_ARGS10]])
// CK13-NEXT:    [[TMP62:%.*]] = icmp ne i32 [[TMP61]], 0
// CK13-NEXT:    br i1 [[TMP62]], label [[OMP_OFFLOAD_FAILED11:%.*]], label [[OMP_OFFLOAD_CONT12:%.*]]
// CK13:       omp_offload.failed11:
// CK13-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49(ptr [[TMP42]]) #[[ATTR2]]
// CK13-NEXT:    br label [[OMP_OFFLOAD_CONT12]]
// CK13:       omp_offload.cont12:
// CK13-NEXT:    [[TMP63:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// CK13-NEXT:    store ptr [[TMP63]], ptr [[TMP]], align 4
// CK13-NEXT:    [[TMP64:%.*]] = load ptr, ptr [[TMP]], align 4
// CK13-NEXT:    [[TMP65:%.*]] = load ptr, ptr [[TMP64]], align 4
// CK13-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP65]], ptr [[TMP66]], align 4
// CK13-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP65]], ptr [[TMP67]], align 4
// CK13-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS15]], i32 0, i32 0
// CK13-NEXT:    store ptr null, ptr [[TMP68]], align 4
// CK13-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS13]], i32 0, i32 0
// CK13-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS14]], i32 0, i32 0
// CK13-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 0
// CK13-NEXT:    store i32 2, ptr [[TMP71]], align 4
// CK13-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 1
// CK13-NEXT:    store i32 1, ptr [[TMP72]], align 4
// CK13-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 2
// CK13-NEXT:    store ptr [[TMP69]], ptr [[TMP73]], align 4
// CK13-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 3
// CK13-NEXT:    store ptr [[TMP70]], ptr [[TMP74]], align 4
// CK13-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 4
// CK13-NEXT:    store ptr @.offload_sizes.5, ptr [[TMP75]], align 4
// CK13-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 5
// CK13-NEXT:    store ptr @.offload_maptypes.6, ptr [[TMP76]], align 4
// CK13-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 6
// CK13-NEXT:    store ptr null, ptr [[TMP77]], align 4
// CK13-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 7
// CK13-NEXT:    store ptr null, ptr [[TMP78]], align 4
// CK13-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 8
// CK13-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK13-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 9
// CK13-NEXT:    store i64 0, ptr [[TMP80]], align 8
// CK13-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 10
// CK13-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP81]], align 4
// CK13-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 11
// CK13-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP82]], align 4
// CK13-NEXT:    [[TMP83:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS16]], i32 0, i32 12
// CK13-NEXT:    store i32 0, ptr [[TMP83]], align 4
// CK13-NEXT:    [[TMP84:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55.region_id, ptr [[KERNEL_ARGS16]])
// CK13-NEXT:    [[TMP85:%.*]] = icmp ne i32 [[TMP84]], 0
// CK13-NEXT:    br i1 [[TMP85]], label [[OMP_OFFLOAD_FAILED17:%.*]], label [[OMP_OFFLOAD_CONT18:%.*]]
// CK13:       omp_offload.failed17:
// CK13-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55(ptr [[TMP65]]) #[[ATTR2]]
// CK13-NEXT:    br label [[OMP_OFFLOAD_CONT18]]
// CK13:       omp_offload.cont18:
// CK13-NEXT:    [[TMP86:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// CK13-NEXT:    store ptr [[TMP86]], ptr [[_TMP19]], align 4
// CK13-NEXT:    [[TMP87:%.*]] = load ptr, ptr [[_TMP19]], align 4
// CK13-NEXT:    [[TMP88:%.*]] = load ptr, ptr [[TMP87]], align 4
// CK13-NEXT:    [[TMP89:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP88]], ptr [[TMP89]], align 4
// CK13-NEXT:    [[TMP90:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP88]], ptr [[TMP90]], align 4
// CK13-NEXT:    [[TMP91:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS22]], i32 0, i32 0
// CK13-NEXT:    store ptr null, ptr [[TMP91]], align 4
// CK13-NEXT:    [[TMP92:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS20]], i32 0, i32 0
// CK13-NEXT:    [[TMP93:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS21]], i32 0, i32 0
// CK13-NEXT:    [[TMP94:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 0
// CK13-NEXT:    store i32 2, ptr [[TMP94]], align 4
// CK13-NEXT:    [[TMP95:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 1
// CK13-NEXT:    store i32 1, ptr [[TMP95]], align 4
// CK13-NEXT:    [[TMP96:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 2
// CK13-NEXT:    store ptr [[TMP92]], ptr [[TMP96]], align 4
// CK13-NEXT:    [[TMP97:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 3
// CK13-NEXT:    store ptr [[TMP93]], ptr [[TMP97]], align 4
// CK13-NEXT:    [[TMP98:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 4
// CK13-NEXT:    store ptr @.offload_sizes.7, ptr [[TMP98]], align 4
// CK13-NEXT:    [[TMP99:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 5
// CK13-NEXT:    store ptr @.offload_maptypes.8, ptr [[TMP99]], align 4
// CK13-NEXT:    [[TMP100:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 6
// CK13-NEXT:    store ptr null, ptr [[TMP100]], align 4
// CK13-NEXT:    [[TMP101:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 7
// CK13-NEXT:    store ptr null, ptr [[TMP101]], align 4
// CK13-NEXT:    [[TMP102:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 8
// CK13-NEXT:    store i64 0, ptr [[TMP102]], align 8
// CK13-NEXT:    [[TMP103:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 9
// CK13-NEXT:    store i64 0, ptr [[TMP103]], align 8
// CK13-NEXT:    [[TMP104:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 10
// CK13-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP104]], align 4
// CK13-NEXT:    [[TMP105:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 11
// CK13-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP105]], align 4
// CK13-NEXT:    [[TMP106:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS23]], i32 0, i32 12
// CK13-NEXT:    store i32 0, ptr [[TMP106]], align 4
// CK13-NEXT:    [[TMP107:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61.region_id, ptr [[KERNEL_ARGS23]])
// CK13-NEXT:    [[TMP108:%.*]] = icmp ne i32 [[TMP107]], 0
// CK13-NEXT:    br i1 [[TMP108]], label [[OMP_OFFLOAD_FAILED24:%.*]], label [[OMP_OFFLOAD_CONT25:%.*]]
// CK13:       omp_offload.failed24:
// CK13-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61(ptr [[TMP88]]) #[[ATTR2]]
// CK13-NEXT:    br label [[OMP_OFFLOAD_CONT25]]
// CK13:       omp_offload.cont25:
// CK13-NEXT:    [[TMP109:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// CK13-NEXT:    store ptr [[TMP109]], ptr [[_TMP26]], align 4
// CK13-NEXT:    [[TMP110:%.*]] = load ptr, ptr [[_TMP26]], align 4
// CK13-NEXT:    [[TMP111:%.*]] = load ptr, ptr [[TMP110]], align 4
// CK13-NEXT:    [[TMP112:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP111]], ptr [[TMP112]], align 4
// CK13-NEXT:    [[TMP113:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP111]], ptr [[TMP113]], align 4
// CK13-NEXT:    [[TMP114:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS29]], i32 0, i32 0
// CK13-NEXT:    store ptr null, ptr [[TMP114]], align 4
// CK13-NEXT:    [[TMP115:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS27]], i32 0, i32 0
// CK13-NEXT:    [[TMP116:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS28]], i32 0, i32 0
// CK13-NEXT:    [[TMP117:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 0
// CK13-NEXT:    store i32 2, ptr [[TMP117]], align 4
// CK13-NEXT:    [[TMP118:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 1
// CK13-NEXT:    store i32 1, ptr [[TMP118]], align 4
// CK13-NEXT:    [[TMP119:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 2
// CK13-NEXT:    store ptr [[TMP115]], ptr [[TMP119]], align 4
// CK13-NEXT:    [[TMP120:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 3
// CK13-NEXT:    store ptr [[TMP116]], ptr [[TMP120]], align 4
// CK13-NEXT:    [[TMP121:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 4
// CK13-NEXT:    store ptr @.offload_sizes.9, ptr [[TMP121]], align 4
// CK13-NEXT:    [[TMP122:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 5
// CK13-NEXT:    store ptr @.offload_maptypes.10, ptr [[TMP122]], align 4
// CK13-NEXT:    [[TMP123:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 6
// CK13-NEXT:    store ptr null, ptr [[TMP123]], align 4
// CK13-NEXT:    [[TMP124:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 7
// CK13-NEXT:    store ptr null, ptr [[TMP124]], align 4
// CK13-NEXT:    [[TMP125:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 8
// CK13-NEXT:    store i64 0, ptr [[TMP125]], align 8
// CK13-NEXT:    [[TMP126:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 9
// CK13-NEXT:    store i64 0, ptr [[TMP126]], align 8
// CK13-NEXT:    [[TMP127:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 10
// CK13-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP127]], align 4
// CK13-NEXT:    [[TMP128:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 11
// CK13-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP128]], align 4
// CK13-NEXT:    [[TMP129:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS30]], i32 0, i32 12
// CK13-NEXT:    store i32 0, ptr [[TMP129]], align 4
// CK13-NEXT:    [[TMP130:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67.region_id, ptr [[KERNEL_ARGS30]])
// CK13-NEXT:    [[TMP131:%.*]] = icmp ne i32 [[TMP130]], 0
// CK13-NEXT:    br i1 [[TMP131]], label [[OMP_OFFLOAD_FAILED31:%.*]], label [[OMP_OFFLOAD_CONT32:%.*]]
// CK13:       omp_offload.failed31:
// CK13-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67(ptr [[TMP111]]) #[[ATTR2]]
// CK13-NEXT:    br label [[OMP_OFFLOAD_CONT32]]
// CK13:       omp_offload.cont32:
// CK13-NEXT:    [[TMP132:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// CK13-NEXT:    store ptr [[TMP132]], ptr [[_TMP33]], align 4
// CK13-NEXT:    [[TMP133:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// CK13-NEXT:    store ptr [[TMP133]], ptr [[_TMP34]], align 4
// CK13-NEXT:    [[TMP134:%.*]] = load ptr, ptr [[_TMP33]], align 4
// CK13-NEXT:    [[TMP135:%.*]] = load ptr, ptr [[TMP134]], align 4
// CK13-NEXT:    [[TMP136:%.*]] = load ptr, ptr [[_TMP34]], align 4
// CK13-NEXT:    [[TMP137:%.*]] = load ptr, ptr [[TMP136]], align 4
// CK13-NEXT:    [[TMP138:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP135]], ptr [[TMP138]], align 4
// CK13-NEXT:    [[TMP139:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK13-NEXT:    store ptr [[TMP135]], ptr [[TMP139]], align 4
// CK13-NEXT:    [[TMP140:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i32 0, i32 0
// CK13-NEXT:    store ptr null, ptr [[TMP140]], align 4
// CK13-NEXT:    [[TMP141:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 1
// CK13-NEXT:    store ptr [[TMP137]], ptr [[TMP141]], align 4
// CK13-NEXT:    [[TMP142:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 1
// CK13-NEXT:    store ptr [[TMP137]], ptr [[TMP142]], align 4
// CK13-NEXT:    [[TMP143:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS37]], i32 0, i32 1
// CK13-NEXT:    store ptr null, ptr [[TMP143]], align 4
// CK13-NEXT:    [[TMP144:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS35]], i32 0, i32 0
// CK13-NEXT:    [[TMP145:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS36]], i32 0, i32 0
// CK13-NEXT:    [[TMP146:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 0
// CK13-NEXT:    store i32 2, ptr [[TMP146]], align 4
// CK13-NEXT:    [[TMP147:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 1
// CK13-NEXT:    store i32 2, ptr [[TMP147]], align 4
// CK13-NEXT:    [[TMP148:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 2
// CK13-NEXT:    store ptr [[TMP144]], ptr [[TMP148]], align 4
// CK13-NEXT:    [[TMP149:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 3
// CK13-NEXT:    store ptr [[TMP145]], ptr [[TMP149]], align 4
// CK13-NEXT:    [[TMP150:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 4
// CK13-NEXT:    store ptr @.offload_sizes.11, ptr [[TMP150]], align 4
// CK13-NEXT:    [[TMP151:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 5
// CK13-NEXT:    store ptr @.offload_maptypes.12, ptr [[TMP151]], align 4
// CK13-NEXT:    [[TMP152:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 6
// CK13-NEXT:    store ptr null, ptr [[TMP152]], align 4
// CK13-NEXT:    [[TMP153:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 7
// CK13-NEXT:    store ptr null, ptr [[TMP153]], align 4
// CK13-NEXT:    [[TMP154:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 8
// CK13-NEXT:    store i64 0, ptr [[TMP154]], align 8
// CK13-NEXT:    [[TMP155:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 9
// CK13-NEXT:    store i64 0, ptr [[TMP155]], align 8
// CK13-NEXT:    [[TMP156:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 10
// CK13-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP156]], align 4
// CK13-NEXT:    [[TMP157:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 11
// CK13-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP157]], align 4
// CK13-NEXT:    [[TMP158:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS38]], i32 0, i32 12
// CK13-NEXT:    store i32 0, ptr [[TMP158]], align 4
// CK13-NEXT:    [[TMP159:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74.region_id, ptr [[KERNEL_ARGS38]])
// CK13-NEXT:    [[TMP160:%.*]] = icmp ne i32 [[TMP159]], 0
// CK13-NEXT:    br i1 [[TMP160]], label [[OMP_OFFLOAD_FAILED39:%.*]], label [[OMP_OFFLOAD_CONT40:%.*]]
// CK13:       omp_offload.failed39:
// CK13-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74(ptr [[TMP135]], ptr [[TMP137]]) #[[ATTR2]]
// CK13-NEXT:    br label [[OMP_OFFLOAD_CONT40]]
// CK13:       omp_offload.cont40:
// CK13-NEXT:    ret void
//
//
// CK13-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l37
// CK13-SAME: (ptr noundef [[G:%.*]]) #[[ATTR1:[0-9]+]] {
// CK13-NEXT:  entry:
// CK13-NEXT:    [[G_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    store ptr [[G]], ptr [[G_ADDR]], align 4
// CK13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[G_ADDR]], align 4
// CK13-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK13-NEXT:    store ptr [[INCDEC_PTR]], ptr [[G_ADDR]], align 4
// CK13-NEXT:    ret void
//
//
// CK13-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l43
// CK13-SAME: (ptr noundef [[L:%.*]]) #[[ATTR1]] {
// CK13-NEXT:  entry:
// CK13-NEXT:    [[L_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    store ptr [[L]], ptr [[L_ADDR]], align 4
// CK13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[L_ADDR]], align 4
// CK13-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP0]], i32 1
// CK13-NEXT:    store ptr [[INCDEC_PTR]], ptr [[L_ADDR]], align 4
// CK13-NEXT:    ret void
//
//
// CK13-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l49
// CK13-SAME: (ptr noundef [[T:%.*]]) #[[ATTR1]] {
// CK13-NEXT:  entry:
// CK13-NEXT:    [[T_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    store ptr [[T]], ptr [[T_ADDR]], align 4
// CK13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[T_ADDR]], align 4
// CK13-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP0]], i32 1
// CK13-NEXT:    store ptr [[INCDEC_PTR]], ptr [[T_ADDR]], align 4
// CK13-NEXT:    ret void
//
//
// CK13-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l55
// CK13-SAME: (ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK13-NEXT:  entry:
// CK13-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK13-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 4
// CK13-NEXT:    store ptr [[LR_ADDR]], ptr [[TMP]], align 4
// CK13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK13-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK13-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 1
// CK13-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK13-NEXT:    ret void
//
//
// CK13-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l61
// CK13-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK13-NEXT:  entry:
// CK13-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK13-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK13-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 4
// CK13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK13-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK13-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK13-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK13-NEXT:    ret void
//
//
// CK13-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l67
// CK13-SAME: (ptr noundef [[TR:%.*]]) #[[ATTR1]] {
// CK13-NEXT:  entry:
// CK13-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK13-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK13-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 4
// CK13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK13-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK13-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK13-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK13-NEXT:    ret void
//
//
// CK13-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3fooIiEvRPfRPT__l74
// CK13-SAME: (ptr noundef [[TR:%.*]], ptr noundef [[LR:%.*]]) #[[ATTR1]] {
// CK13-NEXT:  entry:
// CK13-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// CK13-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 4
// CK13-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// CK13-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 4
// CK13-NEXT:    store ptr [[TR_ADDR]], ptr [[TMP]], align 4
// CK13-NEXT:    store ptr [[LR_ADDR]], ptr [[_TMP1]], align 4
// CK13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[TMP]], align 4
// CK13-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP0]], align 4
// CK13-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[TMP1]], i32 1
// CK13-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP0]], align 4
// CK13-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[_TMP1]], align 4
// CK13-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 4
// CK13-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds float, ptr [[TMP3]], i32 1
// CK13-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[TMP2]], align 4
// CK13-NEXT:    ret void
//
//
// CK13-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK13-SAME: () #[[ATTR3:[0-9]+]] {
// CK13-NEXT:  entry:
// CK13-NEXT:    call void @__tgt_register_requires(i64 1)
// CK13-NEXT:    ret void
//
//
// SIMD-ONLY00-LABEL: define {{[^@]+}}@_Z3barRPfRPi
// SIMD-ONLY00-SAME: (ptr noundef nonnull align 8 dereferenceable(8) [[A:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) #[[ATTR0:[0-9]+]] {
// SIMD-ONLY00-NEXT:  entry:
// SIMD-ONLY00-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY00-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY00-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 8
// SIMD-ONLY00-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// SIMD-ONLY00-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
// SIMD-ONLY00-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// SIMD-ONLY00-NEXT:    call void @_Z3fooIiEvRPfRPT_(ptr noundef nonnull align 8 dereferenceable(8) [[TMP0]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP1]])
// SIMD-ONLY00-NEXT:    ret void
//
//
// SIMD-ONLY00-LABEL: define {{[^@]+}}@_Z3fooIiEvRPfRPT_
// SIMD-ONLY00-SAME: (ptr noundef nonnull align 8 dereferenceable(8) [[LR:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[TR:%.*]]) #[[ATTR0]] comdat {
// SIMD-ONLY00-NEXT:  entry:
// SIMD-ONLY00-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY00-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY00-NEXT:    [[L:%.*]] = alloca ptr, align 8
// SIMD-ONLY00-NEXT:    [[T:%.*]] = alloca ptr, align 8
// SIMD-ONLY00-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// SIMD-ONLY00-NEXT:    [[_TMP4:%.*]] = alloca ptr, align 8
// SIMD-ONLY00-NEXT:    [[_TMP6:%.*]] = alloca ptr, align 8
// SIMD-ONLY00-NEXT:    [[_TMP8:%.*]] = alloca ptr, align 8
// SIMD-ONLY00-NEXT:    [[_TMP9:%.*]] = alloca ptr, align 8
// SIMD-ONLY00-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    [[TMP0:%.*]] = load ptr, ptr @g, align 8
// SIMD-ONLY00-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY00-NEXT:    store ptr [[INCDEC_PTR]], ptr @g, align 8
// SIMD-ONLY00-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[L]], align 8
// SIMD-ONLY00-NEXT:    [[INCDEC_PTR1:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 1
// SIMD-ONLY00-NEXT:    store ptr [[INCDEC_PTR1]], ptr [[L]], align 8
// SIMD-ONLY00-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[T]], align 8
// SIMD-ONLY00-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds i32, ptr [[TMP2]], i32 1
// SIMD-ONLY00-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[T]], align 8
// SIMD-ONLY00-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    store ptr [[TMP3]], ptr [[TMP]], align 8
// SIMD-ONLY00-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP]], align 8
// SIMD-ONLY00-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP5]], align 8
// SIMD-ONLY00-NEXT:    [[INCDEC_PTR3:%.*]] = getelementptr inbounds float, ptr [[TMP6]], i32 1
// SIMD-ONLY00-NEXT:    store ptr [[INCDEC_PTR3]], ptr [[TMP5]], align 8
// SIMD-ONLY00-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    store ptr [[TMP7]], ptr [[_TMP4]], align 8
// SIMD-ONLY00-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[_TMP4]], align 8
// SIMD-ONLY00-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[TMP9]], align 8
// SIMD-ONLY00-NEXT:    [[INCDEC_PTR5:%.*]] = getelementptr inbounds i32, ptr [[TMP10]], i32 1
// SIMD-ONLY00-NEXT:    store ptr [[INCDEC_PTR5]], ptr [[TMP9]], align 8
// SIMD-ONLY00-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    store ptr [[TMP11]], ptr [[_TMP6]], align 8
// SIMD-ONLY00-NEXT:    [[TMP12:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[_TMP6]], align 8
// SIMD-ONLY00-NEXT:    [[TMP14:%.*]] = load ptr, ptr [[TMP13]], align 8
// SIMD-ONLY00-NEXT:    [[INCDEC_PTR7:%.*]] = getelementptr inbounds i32, ptr [[TMP14]], i32 1
// SIMD-ONLY00-NEXT:    store ptr [[INCDEC_PTR7]], ptr [[TMP13]], align 8
// SIMD-ONLY00-NEXT:    [[TMP15:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    store ptr [[TMP15]], ptr [[_TMP8]], align 8
// SIMD-ONLY00-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    store ptr [[TMP16]], ptr [[_TMP9]], align 8
// SIMD-ONLY00-NEXT:    [[TMP17:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    [[TMP18:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// SIMD-ONLY00-NEXT:    [[TMP19:%.*]] = load ptr, ptr [[_TMP8]], align 8
// SIMD-ONLY00-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[TMP19]], align 8
// SIMD-ONLY00-NEXT:    [[INCDEC_PTR10:%.*]] = getelementptr inbounds i32, ptr [[TMP20]], i32 1
// SIMD-ONLY00-NEXT:    store ptr [[INCDEC_PTR10]], ptr [[TMP19]], align 8
// SIMD-ONLY00-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[_TMP9]], align 8
// SIMD-ONLY00-NEXT:    [[TMP22:%.*]] = load ptr, ptr [[TMP21]], align 8
// SIMD-ONLY00-NEXT:    [[INCDEC_PTR11:%.*]] = getelementptr inbounds float, ptr [[TMP22]], i32 1
// SIMD-ONLY00-NEXT:    store ptr [[INCDEC_PTR11]], ptr [[TMP21]], align 8
// SIMD-ONLY00-NEXT:    ret void
//
//
// SIMD-ONLY01-LABEL: define {{[^@]+}}@_Z3barRPfRPi
// SIMD-ONLY01-SAME: (ptr noundef nonnull align 8 dereferenceable(8) [[A:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) #[[ATTR0:[0-9]+]] {
// SIMD-ONLY01-NEXT:  entry:
// SIMD-ONLY01-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY01-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY01-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 8
// SIMD-ONLY01-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// SIMD-ONLY01-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
// SIMD-ONLY01-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// SIMD-ONLY01-NEXT:    call void @_Z3fooIiEvRPfRPT_(ptr noundef nonnull align 8 dereferenceable(8) [[TMP0]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP1]])
// SIMD-ONLY01-NEXT:    ret void
//
//
// SIMD-ONLY01-LABEL: define {{[^@]+}}@_Z3fooIiEvRPfRPT_
// SIMD-ONLY01-SAME: (ptr noundef nonnull align 8 dereferenceable(8) [[LR:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[TR:%.*]]) #[[ATTR0]] comdat {
// SIMD-ONLY01-NEXT:  entry:
// SIMD-ONLY01-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY01-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY01-NEXT:    [[L:%.*]] = alloca ptr, align 8
// SIMD-ONLY01-NEXT:    [[T:%.*]] = alloca ptr, align 8
// SIMD-ONLY01-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
// SIMD-ONLY01-NEXT:    [[_TMP4:%.*]] = alloca ptr, align 8
// SIMD-ONLY01-NEXT:    [[_TMP6:%.*]] = alloca ptr, align 8
// SIMD-ONLY01-NEXT:    [[_TMP8:%.*]] = alloca ptr, align 8
// SIMD-ONLY01-NEXT:    [[_TMP9:%.*]] = alloca ptr, align 8
// SIMD-ONLY01-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    [[TMP0:%.*]] = load ptr, ptr @g, align 8
// SIMD-ONLY01-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY01-NEXT:    store ptr [[INCDEC_PTR]], ptr @g, align 8
// SIMD-ONLY01-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[L]], align 8
// SIMD-ONLY01-NEXT:    [[INCDEC_PTR1:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 1
// SIMD-ONLY01-NEXT:    store ptr [[INCDEC_PTR1]], ptr [[L]], align 8
// SIMD-ONLY01-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[T]], align 8
// SIMD-ONLY01-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds i32, ptr [[TMP2]], i32 1
// SIMD-ONLY01-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[T]], align 8
// SIMD-ONLY01-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    store ptr [[TMP3]], ptr [[TMP]], align 8
// SIMD-ONLY01-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP]], align 8
// SIMD-ONLY01-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP5]], align 8
// SIMD-ONLY01-NEXT:    [[INCDEC_PTR3:%.*]] = getelementptr inbounds float, ptr [[TMP6]], i32 1
// SIMD-ONLY01-NEXT:    store ptr [[INCDEC_PTR3]], ptr [[TMP5]], align 8
// SIMD-ONLY01-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    store ptr [[TMP7]], ptr [[_TMP4]], align 8
// SIMD-ONLY01-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[_TMP4]], align 8
// SIMD-ONLY01-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[TMP9]], align 8
// SIMD-ONLY01-NEXT:    [[INCDEC_PTR5:%.*]] = getelementptr inbounds i32, ptr [[TMP10]], i32 1
// SIMD-ONLY01-NEXT:    store ptr [[INCDEC_PTR5]], ptr [[TMP9]], align 8
// SIMD-ONLY01-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    store ptr [[TMP11]], ptr [[_TMP6]], align 8
// SIMD-ONLY01-NEXT:    [[TMP12:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[_TMP6]], align 8
// SIMD-ONLY01-NEXT:    [[TMP14:%.*]] = load ptr, ptr [[TMP13]], align 8
// SIMD-ONLY01-NEXT:    [[INCDEC_PTR7:%.*]] = getelementptr inbounds i32, ptr [[TMP14]], i32 1
// SIMD-ONLY01-NEXT:    store ptr [[INCDEC_PTR7]], ptr [[TMP13]], align 8
// SIMD-ONLY01-NEXT:    [[TMP15:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    store ptr [[TMP15]], ptr [[_TMP8]], align 8
// SIMD-ONLY01-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    store ptr [[TMP16]], ptr [[_TMP9]], align 8
// SIMD-ONLY01-NEXT:    [[TMP17:%.*]] = load ptr, ptr [[TR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    [[TMP18:%.*]] = load ptr, ptr [[LR_ADDR]], align 8
// SIMD-ONLY01-NEXT:    [[TMP19:%.*]] = load ptr, ptr [[_TMP8]], align 8
// SIMD-ONLY01-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[TMP19]], align 8
// SIMD-ONLY01-NEXT:    [[INCDEC_PTR10:%.*]] = getelementptr inbounds i32, ptr [[TMP20]], i32 1
// SIMD-ONLY01-NEXT:    store ptr [[INCDEC_PTR10]], ptr [[TMP19]], align 8
// SIMD-ONLY01-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[_TMP9]], align 8
// SIMD-ONLY01-NEXT:    [[TMP22:%.*]] = load ptr, ptr [[TMP21]], align 8
// SIMD-ONLY01-NEXT:    [[INCDEC_PTR11:%.*]] = getelementptr inbounds float, ptr [[TMP22]], i32 1
// SIMD-ONLY01-NEXT:    store ptr [[INCDEC_PTR11]], ptr [[TMP21]], align 8
// SIMD-ONLY01-NEXT:    ret void
//
//
// SIMD-ONLY02-LABEL: define {{[^@]+}}@_Z3barRPfRPi
// SIMD-ONLY02-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[A:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) #[[ATTR0:[0-9]+]] {
// SIMD-ONLY02-NEXT:  entry:
// SIMD-ONLY02-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY02-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY02-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 4
// SIMD-ONLY02-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// SIMD-ONLY02-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 4
// SIMD-ONLY02-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// SIMD-ONLY02-NEXT:    call void @_Z3fooIiEvRPfRPT_(ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP1]])
// SIMD-ONLY02-NEXT:    ret void
//
//
// SIMD-ONLY02-LABEL: define {{[^@]+}}@_Z3fooIiEvRPfRPT_
// SIMD-ONLY02-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[LR:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[TR:%.*]]) #[[ATTR0]] comdat {
// SIMD-ONLY02-NEXT:  entry:
// SIMD-ONLY02-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY02-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY02-NEXT:    [[L:%.*]] = alloca ptr, align 4
// SIMD-ONLY02-NEXT:    [[T:%.*]] = alloca ptr, align 4
// SIMD-ONLY02-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// SIMD-ONLY02-NEXT:    [[_TMP4:%.*]] = alloca ptr, align 4
// SIMD-ONLY02-NEXT:    [[_TMP6:%.*]] = alloca ptr, align 4
// SIMD-ONLY02-NEXT:    [[_TMP8:%.*]] = alloca ptr, align 4
// SIMD-ONLY02-NEXT:    [[_TMP9:%.*]] = alloca ptr, align 4
// SIMD-ONLY02-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    [[TMP0:%.*]] = load ptr, ptr @g, align 4
// SIMD-ONLY02-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY02-NEXT:    store ptr [[INCDEC_PTR]], ptr @g, align 4
// SIMD-ONLY02-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[L]], align 4
// SIMD-ONLY02-NEXT:    [[INCDEC_PTR1:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 1
// SIMD-ONLY02-NEXT:    store ptr [[INCDEC_PTR1]], ptr [[L]], align 4
// SIMD-ONLY02-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[T]], align 4
// SIMD-ONLY02-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds i32, ptr [[TMP2]], i32 1
// SIMD-ONLY02-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[T]], align 4
// SIMD-ONLY02-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    store ptr [[TMP3]], ptr [[TMP]], align 4
// SIMD-ONLY02-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP]], align 4
// SIMD-ONLY02-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP5]], align 4
// SIMD-ONLY02-NEXT:    [[INCDEC_PTR3:%.*]] = getelementptr inbounds float, ptr [[TMP6]], i32 1
// SIMD-ONLY02-NEXT:    store ptr [[INCDEC_PTR3]], ptr [[TMP5]], align 4
// SIMD-ONLY02-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    store ptr [[TMP7]], ptr [[_TMP4]], align 4
// SIMD-ONLY02-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[_TMP4]], align 4
// SIMD-ONLY02-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[TMP9]], align 4
// SIMD-ONLY02-NEXT:    [[INCDEC_PTR5:%.*]] = getelementptr inbounds i32, ptr [[TMP10]], i32 1
// SIMD-ONLY02-NEXT:    store ptr [[INCDEC_PTR5]], ptr [[TMP9]], align 4
// SIMD-ONLY02-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    store ptr [[TMP11]], ptr [[_TMP6]], align 4
// SIMD-ONLY02-NEXT:    [[TMP12:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[_TMP6]], align 4
// SIMD-ONLY02-NEXT:    [[TMP14:%.*]] = load ptr, ptr [[TMP13]], align 4
// SIMD-ONLY02-NEXT:    [[INCDEC_PTR7:%.*]] = getelementptr inbounds i32, ptr [[TMP14]], i32 1
// SIMD-ONLY02-NEXT:    store ptr [[INCDEC_PTR7]], ptr [[TMP13]], align 4
// SIMD-ONLY02-NEXT:    [[TMP15:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    store ptr [[TMP15]], ptr [[_TMP8]], align 4
// SIMD-ONLY02-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    store ptr [[TMP16]], ptr [[_TMP9]], align 4
// SIMD-ONLY02-NEXT:    [[TMP17:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    [[TMP18:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// SIMD-ONLY02-NEXT:    [[TMP19:%.*]] = load ptr, ptr [[_TMP8]], align 4
// SIMD-ONLY02-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[TMP19]], align 4
// SIMD-ONLY02-NEXT:    [[INCDEC_PTR10:%.*]] = getelementptr inbounds i32, ptr [[TMP20]], i32 1
// SIMD-ONLY02-NEXT:    store ptr [[INCDEC_PTR10]], ptr [[TMP19]], align 4
// SIMD-ONLY02-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[_TMP9]], align 4
// SIMD-ONLY02-NEXT:    [[TMP22:%.*]] = load ptr, ptr [[TMP21]], align 4
// SIMD-ONLY02-NEXT:    [[INCDEC_PTR11:%.*]] = getelementptr inbounds float, ptr [[TMP22]], i32 1
// SIMD-ONLY02-NEXT:    store ptr [[INCDEC_PTR11]], ptr [[TMP21]], align 4
// SIMD-ONLY02-NEXT:    ret void
//
//
// SIMD-ONLY03-LABEL: define {{[^@]+}}@_Z3barRPfRPi
// SIMD-ONLY03-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[A:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) #[[ATTR0:[0-9]+]] {
// SIMD-ONLY03-NEXT:  entry:
// SIMD-ONLY03-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY03-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY03-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 4
// SIMD-ONLY03-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// SIMD-ONLY03-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 4
// SIMD-ONLY03-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// SIMD-ONLY03-NEXT:    call void @_Z3fooIiEvRPfRPT_(ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP1]])
// SIMD-ONLY03-NEXT:    ret void
//
//
// SIMD-ONLY03-LABEL: define {{[^@]+}}@_Z3fooIiEvRPfRPT_
// SIMD-ONLY03-SAME: (ptr noundef nonnull align 4 dereferenceable(4) [[LR:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[TR:%.*]]) #[[ATTR0]] comdat {
// SIMD-ONLY03-NEXT:  entry:
// SIMD-ONLY03-NEXT:    [[LR_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY03-NEXT:    [[TR_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY03-NEXT:    [[L:%.*]] = alloca ptr, align 4
// SIMD-ONLY03-NEXT:    [[T:%.*]] = alloca ptr, align 4
// SIMD-ONLY03-NEXT:    [[TMP:%.*]] = alloca ptr, align 4
// SIMD-ONLY03-NEXT:    [[_TMP4:%.*]] = alloca ptr, align 4
// SIMD-ONLY03-NEXT:    [[_TMP6:%.*]] = alloca ptr, align 4
// SIMD-ONLY03-NEXT:    [[_TMP8:%.*]] = alloca ptr, align 4
// SIMD-ONLY03-NEXT:    [[_TMP9:%.*]] = alloca ptr, align 4
// SIMD-ONLY03-NEXT:    store ptr [[LR]], ptr [[LR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    store ptr [[TR]], ptr [[TR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    [[TMP0:%.*]] = load ptr, ptr @g, align 4
// SIMD-ONLY03-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY03-NEXT:    store ptr [[INCDEC_PTR]], ptr @g, align 4
// SIMD-ONLY03-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[L]], align 4
// SIMD-ONLY03-NEXT:    [[INCDEC_PTR1:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 1
// SIMD-ONLY03-NEXT:    store ptr [[INCDEC_PTR1]], ptr [[L]], align 4
// SIMD-ONLY03-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[T]], align 4
// SIMD-ONLY03-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds i32, ptr [[TMP2]], i32 1
// SIMD-ONLY03-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[T]], align 4
// SIMD-ONLY03-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    store ptr [[TMP3]], ptr [[TMP]], align 4
// SIMD-ONLY03-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP]], align 4
// SIMD-ONLY03-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP5]], align 4
// SIMD-ONLY03-NEXT:    [[INCDEC_PTR3:%.*]] = getelementptr inbounds float, ptr [[TMP6]], i32 1
// SIMD-ONLY03-NEXT:    store ptr [[INCDEC_PTR3]], ptr [[TMP5]], align 4
// SIMD-ONLY03-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    store ptr [[TMP7]], ptr [[_TMP4]], align 4
// SIMD-ONLY03-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[_TMP4]], align 4
// SIMD-ONLY03-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[TMP9]], align 4
// SIMD-ONLY03-NEXT:    [[INCDEC_PTR5:%.*]] = getelementptr inbounds i32, ptr [[TMP10]], i32 1
// SIMD-ONLY03-NEXT:    store ptr [[INCDEC_PTR5]], ptr [[TMP9]], align 4
// SIMD-ONLY03-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    store ptr [[TMP11]], ptr [[_TMP6]], align 4
// SIMD-ONLY03-NEXT:    [[TMP12:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[_TMP6]], align 4
// SIMD-ONLY03-NEXT:    [[TMP14:%.*]] = load ptr, ptr [[TMP13]], align 4
// SIMD-ONLY03-NEXT:    [[INCDEC_PTR7:%.*]] = getelementptr inbounds i32, ptr [[TMP14]], i32 1
// SIMD-ONLY03-NEXT:    store ptr [[INCDEC_PTR7]], ptr [[TMP13]], align 4
// SIMD-ONLY03-NEXT:    [[TMP15:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    store ptr [[TMP15]], ptr [[_TMP8]], align 4
// SIMD-ONLY03-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    store ptr [[TMP16]], ptr [[_TMP9]], align 4
// SIMD-ONLY03-NEXT:    [[TMP17:%.*]] = load ptr, ptr [[TR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    [[TMP18:%.*]] = load ptr, ptr [[LR_ADDR]], align 4
// SIMD-ONLY03-NEXT:    [[TMP19:%.*]] = load ptr, ptr [[_TMP8]], align 4
// SIMD-ONLY03-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[TMP19]], align 4
// SIMD-ONLY03-NEXT:    [[INCDEC_PTR10:%.*]] = getelementptr inbounds i32, ptr [[TMP20]], i32 1
// SIMD-ONLY03-NEXT:    store ptr [[INCDEC_PTR10]], ptr [[TMP19]], align 4
// SIMD-ONLY03-NEXT:    [[TMP21:%.*]] = load ptr, ptr [[_TMP9]], align 4
// SIMD-ONLY03-NEXT:    [[TMP22:%.*]] = load ptr, ptr [[TMP21]], align 4
// SIMD-ONLY03-NEXT:    [[INCDEC_PTR11:%.*]] = getelementptr inbounds float, ptr [[TMP22]], i32 1
// SIMD-ONLY03-NEXT:    store ptr [[INCDEC_PTR11]], ptr [[TMP21]], align 4
// SIMD-ONLY03-NEXT:    ret void
//
//
// CK20-LABEL: define {{[^@]+}}@_Z3barPd
// CK20-SAME: (ptr noundef [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
// CK20-NEXT:  entry:
// CK20-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 8
// CK20-NEXT:    [[A:%.*]] = alloca [[STRUCT_ST:%.*]], align 8
// CK20-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 8
// CK20-NEXT:    call void @_ZN2STIdEC1ERPd(ptr noundef nonnull align 8 dereferenceable(16) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG_ADDR]])
// CK20-NEXT:    call void @_ZN2STIdE3fooERPd(ptr noundef nonnull align 8 dereferenceable(16) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG_ADDR]])
// CK20-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARG_ADDR]], align 8
// CK20-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK20-NEXT:    store ptr [[INCDEC_PTR]], ptr [[ARG_ADDR]], align 8
// CK20-NEXT:    ret void
//
//
// CK20-LABEL: define {{[^@]+}}@_ZN2STIdEC1ERPd
// CK20-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) unnamed_addr #[[ATTR1:[0-9]+]] comdat align 2 {
// CK20-NEXT:  entry:
// CK20-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK20-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// CK20-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// CK20-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// CK20-NEXT:    call void @_ZN2STIdEC2ERPd(ptr noundef nonnull align 8 dereferenceable(16) [[THIS1]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP0]])
// CK20-NEXT:    ret void
//
//
// CK20-LABEL: define {{[^@]+}}@_ZN2STIdE3fooERPd
// CK20-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG:%.*]]) #[[ATTR0]] comdat align 2 {
// CK20-NEXT:  entry:
// CK20-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK20-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 8
// CK20-NEXT:    [[LA:%.*]] = alloca ptr, align 8
// CK20-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 8
// CK20-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 8
// CK20-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 8
// CK20-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK20-NEXT:    [[DOTOFFLOAD_BASEPTRS2:%.*]] = alloca [2 x ptr], align 8
// CK20-NEXT:    [[DOTOFFLOAD_PTRS3:%.*]] = alloca [2 x ptr], align 8
// CK20-NEXT:    [[DOTOFFLOAD_MAPPERS4:%.*]] = alloca [2 x ptr], align 8
// CK20-NEXT:    [[DOTOFFLOAD_SIZES:%.*]] = alloca [2 x i64], align 8
// CK20-NEXT:    [[KERNEL_ARGS5:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK20-NEXT:    [[DOTOFFLOAD_BASEPTRS10:%.*]] = alloca [3 x ptr], align 8
// CK20-NEXT:    [[DOTOFFLOAD_PTRS11:%.*]] = alloca [3 x ptr], align 8
// CK20-NEXT:    [[DOTOFFLOAD_MAPPERS12:%.*]] = alloca [3 x ptr], align 8
// CK20-NEXT:    [[DOTOFFLOAD_SIZES13:%.*]] = alloca [3 x i64], align 8
// CK20-NEXT:    [[KERNEL_ARGS14:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK20-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 8
// CK20-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    store ptr null, ptr [[LA]], align 8
// CK20-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK20-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK20-NEXT:    store ptr [[THIS1]], ptr [[TMP0]], align 8
// CK20-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK20-NEXT:    store ptr [[A]], ptr [[TMP1]], align 8
// CK20-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i64 0, i64 0
// CK20-NEXT:    store ptr null, ptr [[TMP2]], align 8
// CK20-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK20-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK20-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK20-NEXT:    store i32 2, ptr [[TMP5]], align 4
// CK20-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK20-NEXT:    store i32 1, ptr [[TMP6]], align 4
// CK20-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK20-NEXT:    store ptr [[TMP3]], ptr [[TMP7]], align 8
// CK20-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK20-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 8
// CK20-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK20-NEXT:    store ptr @.offload_sizes, ptr [[TMP9]], align 8
// CK20-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK20-NEXT:    store ptr @.offload_maptypes, ptr [[TMP10]], align 8
// CK20-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK20-NEXT:    store ptr null, ptr [[TMP11]], align 8
// CK20-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK20-NEXT:    store ptr null, ptr [[TMP12]], align 8
// CK20-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK20-NEXT:    store i64 0, ptr [[TMP13]], align 8
// CK20-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK20-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK20-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK20-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP15]], align 4
// CK20-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK20-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP16]], align 4
// CK20-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK20-NEXT:    store i32 0, ptr [[TMP17]], align 4
// CK20-NEXT:    [[TMP18:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112.region_id, ptr [[KERNEL_ARGS]])
// CK20-NEXT:    [[TMP19:%.*]] = icmp ne i32 [[TMP18]], 0
// CK20-NEXT:    br i1 [[TMP19]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK20:       omp_offload.failed:
// CK20-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112(ptr [[THIS1]]) #[[ATTR3:[0-9]+]]
// CK20-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK20:       omp_offload.cont:
// CK20-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK20-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[B]], align 8
// CK20-NEXT:    [[TMP21:%.*]] = getelementptr ptr, ptr [[B]], i32 1
// CK20-NEXT:    [[TMP22:%.*]] = ptrtoint ptr [[TMP21]] to i64
// CK20-NEXT:    [[TMP23:%.*]] = ptrtoint ptr [[B]] to i64
// CK20-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP22]], [[TMP23]]
// CK20-NEXT:    [[TMP25:%.*]] = sdiv exact i64 [[TMP24]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK20-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 8 [[DOTOFFLOAD_SIZES]], ptr align 8 @.offload_sizes.1, i64 16, i1 false)
// CK20-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK20-NEXT:    store ptr [[THIS1]], ptr [[TMP26]], align 8
// CK20-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK20-NEXT:    store ptr [[B]], ptr [[TMP27]], align 8
// CK20-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK20-NEXT:    store i64 [[TMP25]], ptr [[TMP28]], align 8
// CK20-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i64 0, i64 0
// CK20-NEXT:    store ptr null, ptr [[TMP29]], align 8
// CK20-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 1
// CK20-NEXT:    store ptr [[THIS1]], ptr [[TMP30]], align 8
// CK20-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 1
// CK20-NEXT:    store ptr [[TMP20]], ptr [[TMP31]], align 8
// CK20-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i64 0, i64 1
// CK20-NEXT:    store ptr null, ptr [[TMP32]], align 8
// CK20-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK20-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK20-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK20-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 0
// CK20-NEXT:    store i32 2, ptr [[TMP36]], align 4
// CK20-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 1
// CK20-NEXT:    store i32 2, ptr [[TMP37]], align 4
// CK20-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 2
// CK20-NEXT:    store ptr [[TMP33]], ptr [[TMP38]], align 8
// CK20-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 3
// CK20-NEXT:    store ptr [[TMP34]], ptr [[TMP39]], align 8
// CK20-NEXT:    [[TMP40:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 4
// CK20-NEXT:    store ptr [[TMP35]], ptr [[TMP40]], align 8
// CK20-NEXT:    [[TMP41:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 5
// CK20-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP41]], align 8
// CK20-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 6
// CK20-NEXT:    store ptr null, ptr [[TMP42]], align 8
// CK20-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 7
// CK20-NEXT:    store ptr null, ptr [[TMP43]], align 8
// CK20-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 8
// CK20-NEXT:    store i64 0, ptr [[TMP44]], align 8
// CK20-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 9
// CK20-NEXT:    store i64 0, ptr [[TMP45]], align 8
// CK20-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 10
// CK20-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP46]], align 4
// CK20-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 11
// CK20-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP47]], align 4
// CK20-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 12
// CK20-NEXT:    store i32 0, ptr [[TMP48]], align 4
// CK20-NEXT:    [[TMP49:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118.region_id, ptr [[KERNEL_ARGS5]])
// CK20-NEXT:    [[TMP50:%.*]] = icmp ne i32 [[TMP49]], 0
// CK20-NEXT:    br i1 [[TMP50]], label [[OMP_OFFLOAD_FAILED6:%.*]], label [[OMP_OFFLOAD_CONT7:%.*]]
// CK20:       omp_offload.failed6:
// CK20-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118(ptr [[THIS1]]) #[[ATTR3]]
// CK20-NEXT:    br label [[OMP_OFFLOAD_CONT7]]
// CK20:       omp_offload.cont7:
// CK20-NEXT:    [[A8:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 0
// CK20-NEXT:    [[B9:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK20-NEXT:    [[TMP51:%.*]] = load ptr, ptr [[B9]], align 8
// CK20-NEXT:    [[TMP52:%.*]] = getelementptr ptr, ptr [[B9]], i32 1
// CK20-NEXT:    [[TMP53:%.*]] = ptrtoint ptr [[TMP52]] to i64
// CK20-NEXT:    [[TMP54:%.*]] = ptrtoint ptr [[A8]] to i64
// CK20-NEXT:    [[TMP55:%.*]] = sub i64 [[TMP53]], [[TMP54]]
// CK20-NEXT:    [[TMP56:%.*]] = sdiv exact i64 [[TMP55]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK20-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 8 [[DOTOFFLOAD_SIZES13]], ptr align 8 @.offload_sizes.3, i64 24, i1 false)
// CK20-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK20-NEXT:    store ptr [[THIS1]], ptr [[TMP57]], align 8
// CK20-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK20-NEXT:    store ptr [[A8]], ptr [[TMP58]], align 8
// CK20-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK20-NEXT:    store i64 [[TMP56]], ptr [[TMP59]], align 8
// CK20-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i64 0, i64 0
// CK20-NEXT:    store ptr null, ptr [[TMP60]], align 8
// CK20-NEXT:    [[TMP61:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 1
// CK20-NEXT:    store ptr [[THIS1]], ptr [[TMP61]], align 8
// CK20-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 1
// CK20-NEXT:    store ptr [[A8]], ptr [[TMP62]], align 8
// CK20-NEXT:    [[TMP63:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i64 0, i64 1
// CK20-NEXT:    store ptr null, ptr [[TMP63]], align 8
// CK20-NEXT:    [[TMP64:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 2
// CK20-NEXT:    store ptr [[THIS1]], ptr [[TMP64]], align 8
// CK20-NEXT:    [[TMP65:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 2
// CK20-NEXT:    store ptr [[TMP51]], ptr [[TMP65]], align 8
// CK20-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i64 0, i64 2
// CK20-NEXT:    store ptr null, ptr [[TMP66]], align 8
// CK20-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK20-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK20-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK20-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 0
// CK20-NEXT:    store i32 2, ptr [[TMP70]], align 4
// CK20-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 1
// CK20-NEXT:    store i32 3, ptr [[TMP71]], align 4
// CK20-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 2
// CK20-NEXT:    store ptr [[TMP67]], ptr [[TMP72]], align 8
// CK20-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 3
// CK20-NEXT:    store ptr [[TMP68]], ptr [[TMP73]], align 8
// CK20-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 4
// CK20-NEXT:    store ptr [[TMP69]], ptr [[TMP74]], align 8
// CK20-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 5
// CK20-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP75]], align 8
// CK20-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 6
// CK20-NEXT:    store ptr null, ptr [[TMP76]], align 8
// CK20-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 7
// CK20-NEXT:    store ptr null, ptr [[TMP77]], align 8
// CK20-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 8
// CK20-NEXT:    store i64 0, ptr [[TMP78]], align 8
// CK20-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 9
// CK20-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK20-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 10
// CK20-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP80]], align 4
// CK20-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 11
// CK20-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP81]], align 4
// CK20-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 12
// CK20-NEXT:    store i32 0, ptr [[TMP82]], align 4
// CK20-NEXT:    [[TMP83:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125.region_id, ptr [[KERNEL_ARGS14]])
// CK20-NEXT:    [[TMP84:%.*]] = icmp ne i32 [[TMP83]], 0
// CK20-NEXT:    br i1 [[TMP84]], label [[OMP_OFFLOAD_FAILED15:%.*]], label [[OMP_OFFLOAD_CONT16:%.*]]
// CK20:       omp_offload.failed15:
// CK20-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125(ptr [[THIS1]]) #[[ATTR3]]
// CK20-NEXT:    br label [[OMP_OFFLOAD_CONT16]]
// CK20:       omp_offload.cont16:
// CK20-NEXT:    ret void
//
//
// CK20-LABEL: define {{[^@]+}}@_ZN2STIdEC2ERPd
// CK20-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) unnamed_addr #[[ATTR1]] comdat align 2 {
// CK20-NEXT:  entry:
// CK20-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK20-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// CK20-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// CK20-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK20-NEXT:    store ptr null, ptr [[A]], align 8
// CK20-NEXT:    [[B2:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK20-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// CK20-NEXT:    store ptr [[TMP0]], ptr [[B2]], align 8
// CK20-NEXT:    ret void
//
//
// CK20-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112
// CK20-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2:[0-9]+]] {
// CK20-NEXT:  entry:
// CK20-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK20-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK20-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 8
// CK20-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK20-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 8
// CK20-NEXT:    ret void
//
//
// CK20-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118
// CK20-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK20-NEXT:  entry:
// CK20-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK20-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 1
// CK20-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B]], align 8
// CK20-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 8
// CK20-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i32 1
// CK20-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP1]], align 8
// CK20-NEXT:    ret void
//
//
// CK20-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125
// CK20-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK20-NEXT:  entry:
// CK20-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK20-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK20-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK20-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 8
// CK20-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK20-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 8
// CK20-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[TMP0]], i32 0, i32 1
// CK20-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[B]], align 8
// CK20-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
// CK20-NEXT:    [[INCDEC_PTR1:%.*]] = getelementptr inbounds double, ptr [[TMP3]], i32 1
// CK20-NEXT:    store ptr [[INCDEC_PTR1]], ptr [[TMP2]], align 8
// CK20-NEXT:    ret void
//
//
// CK20-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK20-SAME: () #[[ATTR5:[0-9]+]] {
// CK20-NEXT:  entry:
// CK20-NEXT:    call void @__tgt_register_requires(i64 1)
// CK20-NEXT:    ret void
//
//
// CK21-LABEL: define {{[^@]+}}@_Z3barPd
// CK21-SAME: (ptr noundef [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
// CK21-NEXT:  entry:
// CK21-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 8
// CK21-NEXT:    [[A:%.*]] = alloca [[STRUCT_ST:%.*]], align 8
// CK21-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 8
// CK21-NEXT:    call void @_ZN2STIdEC1ERPd(ptr noundef nonnull align 8 dereferenceable(16) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG_ADDR]])
// CK21-NEXT:    call void @_ZN2STIdE3fooERPd(ptr noundef nonnull align 8 dereferenceable(16) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG_ADDR]])
// CK21-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARG_ADDR]], align 8
// CK21-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK21-NEXT:    store ptr [[INCDEC_PTR]], ptr [[ARG_ADDR]], align 8
// CK21-NEXT:    ret void
//
//
// CK21-LABEL: define {{[^@]+}}@_ZN2STIdEC1ERPd
// CK21-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) unnamed_addr #[[ATTR1:[0-9]+]] comdat align 2 {
// CK21-NEXT:  entry:
// CK21-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK21-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// CK21-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// CK21-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// CK21-NEXT:    call void @_ZN2STIdEC2ERPd(ptr noundef nonnull align 8 dereferenceable(16) [[THIS1]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP0]])
// CK21-NEXT:    ret void
//
//
// CK21-LABEL: define {{[^@]+}}@_ZN2STIdE3fooERPd
// CK21-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG:%.*]]) #[[ATTR0]] comdat align 2 {
// CK21-NEXT:  entry:
// CK21-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK21-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 8
// CK21-NEXT:    [[LA:%.*]] = alloca ptr, align 8
// CK21-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 8
// CK21-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 8
// CK21-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 8
// CK21-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK21-NEXT:    [[DOTOFFLOAD_BASEPTRS2:%.*]] = alloca [2 x ptr], align 8
// CK21-NEXT:    [[DOTOFFLOAD_PTRS3:%.*]] = alloca [2 x ptr], align 8
// CK21-NEXT:    [[DOTOFFLOAD_MAPPERS4:%.*]] = alloca [2 x ptr], align 8
// CK21-NEXT:    [[DOTOFFLOAD_SIZES:%.*]] = alloca [2 x i64], align 8
// CK21-NEXT:    [[KERNEL_ARGS5:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK21-NEXT:    [[DOTOFFLOAD_BASEPTRS10:%.*]] = alloca [3 x ptr], align 8
// CK21-NEXT:    [[DOTOFFLOAD_PTRS11:%.*]] = alloca [3 x ptr], align 8
// CK21-NEXT:    [[DOTOFFLOAD_MAPPERS12:%.*]] = alloca [3 x ptr], align 8
// CK21-NEXT:    [[DOTOFFLOAD_SIZES13:%.*]] = alloca [3 x i64], align 8
// CK21-NEXT:    [[KERNEL_ARGS14:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK21-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 8
// CK21-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    store ptr null, ptr [[LA]], align 8
// CK21-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK21-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK21-NEXT:    store ptr [[THIS1]], ptr [[TMP0]], align 8
// CK21-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK21-NEXT:    store ptr [[A]], ptr [[TMP1]], align 8
// CK21-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i64 0, i64 0
// CK21-NEXT:    store ptr null, ptr [[TMP2]], align 8
// CK21-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK21-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK21-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK21-NEXT:    store i32 2, ptr [[TMP5]], align 4
// CK21-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK21-NEXT:    store i32 1, ptr [[TMP6]], align 4
// CK21-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK21-NEXT:    store ptr [[TMP3]], ptr [[TMP7]], align 8
// CK21-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK21-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 8
// CK21-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK21-NEXT:    store ptr @.offload_sizes, ptr [[TMP9]], align 8
// CK21-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK21-NEXT:    store ptr @.offload_maptypes, ptr [[TMP10]], align 8
// CK21-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK21-NEXT:    store ptr null, ptr [[TMP11]], align 8
// CK21-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK21-NEXT:    store ptr null, ptr [[TMP12]], align 8
// CK21-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK21-NEXT:    store i64 0, ptr [[TMP13]], align 8
// CK21-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK21-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK21-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK21-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP15]], align 4
// CK21-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK21-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP16]], align 4
// CK21-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK21-NEXT:    store i32 0, ptr [[TMP17]], align 4
// CK21-NEXT:    [[TMP18:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112.region_id, ptr [[KERNEL_ARGS]])
// CK21-NEXT:    [[TMP19:%.*]] = icmp ne i32 [[TMP18]], 0
// CK21-NEXT:    br i1 [[TMP19]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK21:       omp_offload.failed:
// CK21-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112(ptr [[THIS1]]) #[[ATTR3:[0-9]+]]
// CK21-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK21:       omp_offload.cont:
// CK21-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK21-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[B]], align 8
// CK21-NEXT:    [[TMP21:%.*]] = getelementptr ptr, ptr [[B]], i32 1
// CK21-NEXT:    [[TMP22:%.*]] = ptrtoint ptr [[TMP21]] to i64
// CK21-NEXT:    [[TMP23:%.*]] = ptrtoint ptr [[B]] to i64
// CK21-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP22]], [[TMP23]]
// CK21-NEXT:    [[TMP25:%.*]] = sdiv exact i64 [[TMP24]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK21-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 8 [[DOTOFFLOAD_SIZES]], ptr align 8 @.offload_sizes.1, i64 16, i1 false)
// CK21-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK21-NEXT:    store ptr [[THIS1]], ptr [[TMP26]], align 8
// CK21-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK21-NEXT:    store ptr [[B]], ptr [[TMP27]], align 8
// CK21-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK21-NEXT:    store i64 [[TMP25]], ptr [[TMP28]], align 8
// CK21-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i64 0, i64 0
// CK21-NEXT:    store ptr null, ptr [[TMP29]], align 8
// CK21-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 1
// CK21-NEXT:    store ptr [[THIS1]], ptr [[TMP30]], align 8
// CK21-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 1
// CK21-NEXT:    store ptr [[TMP20]], ptr [[TMP31]], align 8
// CK21-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i64 0, i64 1
// CK21-NEXT:    store ptr null, ptr [[TMP32]], align 8
// CK21-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK21-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK21-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK21-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 0
// CK21-NEXT:    store i32 2, ptr [[TMP36]], align 4
// CK21-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 1
// CK21-NEXT:    store i32 2, ptr [[TMP37]], align 4
// CK21-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 2
// CK21-NEXT:    store ptr [[TMP33]], ptr [[TMP38]], align 8
// CK21-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 3
// CK21-NEXT:    store ptr [[TMP34]], ptr [[TMP39]], align 8
// CK21-NEXT:    [[TMP40:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 4
// CK21-NEXT:    store ptr [[TMP35]], ptr [[TMP40]], align 8
// CK21-NEXT:    [[TMP41:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 5
// CK21-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP41]], align 8
// CK21-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 6
// CK21-NEXT:    store ptr null, ptr [[TMP42]], align 8
// CK21-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 7
// CK21-NEXT:    store ptr null, ptr [[TMP43]], align 8
// CK21-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 8
// CK21-NEXT:    store i64 0, ptr [[TMP44]], align 8
// CK21-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 9
// CK21-NEXT:    store i64 0, ptr [[TMP45]], align 8
// CK21-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 10
// CK21-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP46]], align 4
// CK21-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 11
// CK21-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP47]], align 4
// CK21-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 12
// CK21-NEXT:    store i32 0, ptr [[TMP48]], align 4
// CK21-NEXT:    [[TMP49:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118.region_id, ptr [[KERNEL_ARGS5]])
// CK21-NEXT:    [[TMP50:%.*]] = icmp ne i32 [[TMP49]], 0
// CK21-NEXT:    br i1 [[TMP50]], label [[OMP_OFFLOAD_FAILED6:%.*]], label [[OMP_OFFLOAD_CONT7:%.*]]
// CK21:       omp_offload.failed6:
// CK21-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118(ptr [[THIS1]]) #[[ATTR3]]
// CK21-NEXT:    br label [[OMP_OFFLOAD_CONT7]]
// CK21:       omp_offload.cont7:
// CK21-NEXT:    [[A8:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 0
// CK21-NEXT:    [[B9:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK21-NEXT:    [[TMP51:%.*]] = load ptr, ptr [[B9]], align 8
// CK21-NEXT:    [[TMP52:%.*]] = getelementptr ptr, ptr [[B9]], i32 1
// CK21-NEXT:    [[TMP53:%.*]] = ptrtoint ptr [[TMP52]] to i64
// CK21-NEXT:    [[TMP54:%.*]] = ptrtoint ptr [[A8]] to i64
// CK21-NEXT:    [[TMP55:%.*]] = sub i64 [[TMP53]], [[TMP54]]
// CK21-NEXT:    [[TMP56:%.*]] = sdiv exact i64 [[TMP55]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK21-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 8 [[DOTOFFLOAD_SIZES13]], ptr align 8 @.offload_sizes.3, i64 24, i1 false)
// CK21-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK21-NEXT:    store ptr [[THIS1]], ptr [[TMP57]], align 8
// CK21-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK21-NEXT:    store ptr [[A8]], ptr [[TMP58]], align 8
// CK21-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK21-NEXT:    store i64 [[TMP56]], ptr [[TMP59]], align 8
// CK21-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i64 0, i64 0
// CK21-NEXT:    store ptr null, ptr [[TMP60]], align 8
// CK21-NEXT:    [[TMP61:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 1
// CK21-NEXT:    store ptr [[THIS1]], ptr [[TMP61]], align 8
// CK21-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 1
// CK21-NEXT:    store ptr [[A8]], ptr [[TMP62]], align 8
// CK21-NEXT:    [[TMP63:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i64 0, i64 1
// CK21-NEXT:    store ptr null, ptr [[TMP63]], align 8
// CK21-NEXT:    [[TMP64:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 2
// CK21-NEXT:    store ptr [[THIS1]], ptr [[TMP64]], align 8
// CK21-NEXT:    [[TMP65:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 2
// CK21-NEXT:    store ptr [[TMP51]], ptr [[TMP65]], align 8
// CK21-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i64 0, i64 2
// CK21-NEXT:    store ptr null, ptr [[TMP66]], align 8
// CK21-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK21-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK21-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK21-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 0
// CK21-NEXT:    store i32 2, ptr [[TMP70]], align 4
// CK21-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 1
// CK21-NEXT:    store i32 3, ptr [[TMP71]], align 4
// CK21-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 2
// CK21-NEXT:    store ptr [[TMP67]], ptr [[TMP72]], align 8
// CK21-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 3
// CK21-NEXT:    store ptr [[TMP68]], ptr [[TMP73]], align 8
// CK21-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 4
// CK21-NEXT:    store ptr [[TMP69]], ptr [[TMP74]], align 8
// CK21-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 5
// CK21-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP75]], align 8
// CK21-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 6
// CK21-NEXT:    store ptr null, ptr [[TMP76]], align 8
// CK21-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 7
// CK21-NEXT:    store ptr null, ptr [[TMP77]], align 8
// CK21-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 8
// CK21-NEXT:    store i64 0, ptr [[TMP78]], align 8
// CK21-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 9
// CK21-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK21-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 10
// CK21-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP80]], align 4
// CK21-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 11
// CK21-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP81]], align 4
// CK21-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 12
// CK21-NEXT:    store i32 0, ptr [[TMP82]], align 4
// CK21-NEXT:    [[TMP83:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125.region_id, ptr [[KERNEL_ARGS14]])
// CK21-NEXT:    [[TMP84:%.*]] = icmp ne i32 [[TMP83]], 0
// CK21-NEXT:    br i1 [[TMP84]], label [[OMP_OFFLOAD_FAILED15:%.*]], label [[OMP_OFFLOAD_CONT16:%.*]]
// CK21:       omp_offload.failed15:
// CK21-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125(ptr [[THIS1]]) #[[ATTR3]]
// CK21-NEXT:    br label [[OMP_OFFLOAD_CONT16]]
// CK21:       omp_offload.cont16:
// CK21-NEXT:    ret void
//
//
// CK21-LABEL: define {{[^@]+}}@_ZN2STIdEC2ERPd
// CK21-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) unnamed_addr #[[ATTR1]] comdat align 2 {
// CK21-NEXT:  entry:
// CK21-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK21-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// CK21-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// CK21-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK21-NEXT:    store ptr null, ptr [[A]], align 8
// CK21-NEXT:    [[B2:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK21-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// CK21-NEXT:    store ptr [[TMP0]], ptr [[B2]], align 8
// CK21-NEXT:    ret void
//
//
// CK21-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112
// CK21-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2:[0-9]+]] {
// CK21-NEXT:  entry:
// CK21-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK21-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK21-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 8
// CK21-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK21-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 8
// CK21-NEXT:    ret void
//
//
// CK21-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118
// CK21-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK21-NEXT:  entry:
// CK21-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK21-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 1
// CK21-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B]], align 8
// CK21-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 8
// CK21-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i32 1
// CK21-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP1]], align 8
// CK21-NEXT:    ret void
//
//
// CK21-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125
// CK21-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK21-NEXT:  entry:
// CK21-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CK21-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CK21-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK21-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 8
// CK21-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK21-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 8
// CK21-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[TMP0]], i32 0, i32 1
// CK21-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[B]], align 8
// CK21-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 8
// CK21-NEXT:    [[INCDEC_PTR1:%.*]] = getelementptr inbounds double, ptr [[TMP3]], i32 1
// CK21-NEXT:    store ptr [[INCDEC_PTR1]], ptr [[TMP2]], align 8
// CK21-NEXT:    ret void
//
//
// CK21-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK21-SAME: () #[[ATTR5:[0-9]+]] {
// CK21-NEXT:  entry:
// CK21-NEXT:    call void @__tgt_register_requires(i64 1)
// CK21-NEXT:    ret void
//
//
// CK22-LABEL: define {{[^@]+}}@_Z3barPd
// CK22-SAME: (ptr noundef [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
// CK22-NEXT:  entry:
// CK22-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 4
// CK22-NEXT:    [[A:%.*]] = alloca [[STRUCT_ST:%.*]], align 4
// CK22-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 4
// CK22-NEXT:    call void @_ZN2STIdEC1ERPd(ptr noundef nonnull align 4 dereferenceable(8) [[A]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG_ADDR]])
// CK22-NEXT:    call void @_ZN2STIdE3fooERPd(ptr noundef nonnull align 4 dereferenceable(8) [[A]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG_ADDR]])
// CK22-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARG_ADDR]], align 4
// CK22-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK22-NEXT:    store ptr [[INCDEC_PTR]], ptr [[ARG_ADDR]], align 4
// CK22-NEXT:    ret void
//
//
// CK22-LABEL: define {{[^@]+}}@_ZN2STIdEC1ERPd
// CK22-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) unnamed_addr #[[ATTR1:[0-9]+]] comdat align 2 {
// CK22-NEXT:  entry:
// CK22-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK22-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// CK22-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// CK22-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// CK22-NEXT:    call void @_ZN2STIdEC2ERPd(ptr noundef nonnull align 4 dereferenceable(8) [[THIS1]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]])
// CK22-NEXT:    ret void
//
//
// CK22-LABEL: define {{[^@]+}}@_ZN2STIdE3fooERPd
// CK22-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR0]] comdat align 2 {
// CK22-NEXT:  entry:
// CK22-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK22-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 4
// CK22-NEXT:    [[LA:%.*]] = alloca ptr, align 4
// CK22-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 4
// CK22-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 4
// CK22-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 4
// CK22-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK22-NEXT:    [[DOTOFFLOAD_BASEPTRS2:%.*]] = alloca [2 x ptr], align 4
// CK22-NEXT:    [[DOTOFFLOAD_PTRS3:%.*]] = alloca [2 x ptr], align 4
// CK22-NEXT:    [[DOTOFFLOAD_MAPPERS4:%.*]] = alloca [2 x ptr], align 4
// CK22-NEXT:    [[DOTOFFLOAD_SIZES:%.*]] = alloca [2 x i64], align 4
// CK22-NEXT:    [[KERNEL_ARGS5:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK22-NEXT:    [[DOTOFFLOAD_BASEPTRS10:%.*]] = alloca [3 x ptr], align 4
// CK22-NEXT:    [[DOTOFFLOAD_PTRS11:%.*]] = alloca [3 x ptr], align 4
// CK22-NEXT:    [[DOTOFFLOAD_MAPPERS12:%.*]] = alloca [3 x ptr], align 4
// CK22-NEXT:    [[DOTOFFLOAD_SIZES13:%.*]] = alloca [3 x i64], align 4
// CK22-NEXT:    [[KERNEL_ARGS14:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK22-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 4
// CK22-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    store ptr null, ptr [[LA]], align 4
// CK22-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK22-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK22-NEXT:    store ptr [[THIS1]], ptr [[TMP0]], align 4
// CK22-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK22-NEXT:    store ptr [[A]], ptr [[TMP1]], align 4
// CK22-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i32 0, i32 0
// CK22-NEXT:    store ptr null, ptr [[TMP2]], align 4
// CK22-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK22-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK22-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK22-NEXT:    store i32 2, ptr [[TMP5]], align 4
// CK22-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK22-NEXT:    store i32 1, ptr [[TMP6]], align 4
// CK22-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK22-NEXT:    store ptr [[TMP3]], ptr [[TMP7]], align 4
// CK22-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK22-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 4
// CK22-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK22-NEXT:    store ptr @.offload_sizes, ptr [[TMP9]], align 4
// CK22-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK22-NEXT:    store ptr @.offload_maptypes, ptr [[TMP10]], align 4
// CK22-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK22-NEXT:    store ptr null, ptr [[TMP11]], align 4
// CK22-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK22-NEXT:    store ptr null, ptr [[TMP12]], align 4
// CK22-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK22-NEXT:    store i64 0, ptr [[TMP13]], align 8
// CK22-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK22-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK22-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK22-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP15]], align 4
// CK22-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK22-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP16]], align 4
// CK22-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK22-NEXT:    store i32 0, ptr [[TMP17]], align 4
// CK22-NEXT:    [[TMP18:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112.region_id, ptr [[KERNEL_ARGS]])
// CK22-NEXT:    [[TMP19:%.*]] = icmp ne i32 [[TMP18]], 0
// CK22-NEXT:    br i1 [[TMP19]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK22:       omp_offload.failed:
// CK22-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112(ptr [[THIS1]]) #[[ATTR3:[0-9]+]]
// CK22-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK22:       omp_offload.cont:
// CK22-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK22-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[B]], align 4
// CK22-NEXT:    [[TMP21:%.*]] = getelementptr ptr, ptr [[B]], i32 1
// CK22-NEXT:    [[TMP22:%.*]] = ptrtoint ptr [[TMP21]] to i64
// CK22-NEXT:    [[TMP23:%.*]] = ptrtoint ptr [[B]] to i64
// CK22-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP22]], [[TMP23]]
// CK22-NEXT:    [[TMP25:%.*]] = sdiv exact i64 [[TMP24]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK22-NEXT:    call void @llvm.memcpy.p0.p0.i32(ptr align 4 [[DOTOFFLOAD_SIZES]], ptr align 4 @.offload_sizes.1, i32 16, i1 false)
// CK22-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK22-NEXT:    store ptr [[THIS1]], ptr [[TMP26]], align 4
// CK22-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK22-NEXT:    store ptr [[B]], ptr [[TMP27]], align 4
// CK22-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK22-NEXT:    store i64 [[TMP25]], ptr [[TMP28]], align 4
// CK22-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i32 0, i32 0
// CK22-NEXT:    store ptr null, ptr [[TMP29]], align 4
// CK22-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 1
// CK22-NEXT:    store ptr [[THIS1]], ptr [[TMP30]], align 4
// CK22-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 1
// CK22-NEXT:    store ptr [[TMP20]], ptr [[TMP31]], align 4
// CK22-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i32 0, i32 1
// CK22-NEXT:    store ptr null, ptr [[TMP32]], align 4
// CK22-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK22-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK22-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK22-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 0
// CK22-NEXT:    store i32 2, ptr [[TMP36]], align 4
// CK22-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 1
// CK22-NEXT:    store i32 2, ptr [[TMP37]], align 4
// CK22-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 2
// CK22-NEXT:    store ptr [[TMP33]], ptr [[TMP38]], align 4
// CK22-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 3
// CK22-NEXT:    store ptr [[TMP34]], ptr [[TMP39]], align 4
// CK22-NEXT:    [[TMP40:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 4
// CK22-NEXT:    store ptr [[TMP35]], ptr [[TMP40]], align 4
// CK22-NEXT:    [[TMP41:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 5
// CK22-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP41]], align 4
// CK22-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 6
// CK22-NEXT:    store ptr null, ptr [[TMP42]], align 4
// CK22-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 7
// CK22-NEXT:    store ptr null, ptr [[TMP43]], align 4
// CK22-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 8
// CK22-NEXT:    store i64 0, ptr [[TMP44]], align 8
// CK22-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 9
// CK22-NEXT:    store i64 0, ptr [[TMP45]], align 8
// CK22-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 10
// CK22-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP46]], align 4
// CK22-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 11
// CK22-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP47]], align 4
// CK22-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 12
// CK22-NEXT:    store i32 0, ptr [[TMP48]], align 4
// CK22-NEXT:    [[TMP49:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118.region_id, ptr [[KERNEL_ARGS5]])
// CK22-NEXT:    [[TMP50:%.*]] = icmp ne i32 [[TMP49]], 0
// CK22-NEXT:    br i1 [[TMP50]], label [[OMP_OFFLOAD_FAILED6:%.*]], label [[OMP_OFFLOAD_CONT7:%.*]]
// CK22:       omp_offload.failed6:
// CK22-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118(ptr [[THIS1]]) #[[ATTR3]]
// CK22-NEXT:    br label [[OMP_OFFLOAD_CONT7]]
// CK22:       omp_offload.cont7:
// CK22-NEXT:    [[A8:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 0
// CK22-NEXT:    [[B9:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK22-NEXT:    [[TMP51:%.*]] = load ptr, ptr [[B9]], align 4
// CK22-NEXT:    [[TMP52:%.*]] = getelementptr ptr, ptr [[B9]], i32 1
// CK22-NEXT:    [[TMP53:%.*]] = ptrtoint ptr [[TMP52]] to i64
// CK22-NEXT:    [[TMP54:%.*]] = ptrtoint ptr [[A8]] to i64
// CK22-NEXT:    [[TMP55:%.*]] = sub i64 [[TMP53]], [[TMP54]]
// CK22-NEXT:    [[TMP56:%.*]] = sdiv exact i64 [[TMP55]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK22-NEXT:    call void @llvm.memcpy.p0.p0.i32(ptr align 4 [[DOTOFFLOAD_SIZES13]], ptr align 4 @.offload_sizes.3, i32 24, i1 false)
// CK22-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK22-NEXT:    store ptr [[THIS1]], ptr [[TMP57]], align 4
// CK22-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK22-NEXT:    store ptr [[A8]], ptr [[TMP58]], align 4
// CK22-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK22-NEXT:    store i64 [[TMP56]], ptr [[TMP59]], align 4
// CK22-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i32 0, i32 0
// CK22-NEXT:    store ptr null, ptr [[TMP60]], align 4
// CK22-NEXT:    [[TMP61:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 1
// CK22-NEXT:    store ptr [[THIS1]], ptr [[TMP61]], align 4
// CK22-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 1
// CK22-NEXT:    store ptr [[A8]], ptr [[TMP62]], align 4
// CK22-NEXT:    [[TMP63:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i32 0, i32 1
// CK22-NEXT:    store ptr null, ptr [[TMP63]], align 4
// CK22-NEXT:    [[TMP64:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 2
// CK22-NEXT:    store ptr [[THIS1]], ptr [[TMP64]], align 4
// CK22-NEXT:    [[TMP65:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 2
// CK22-NEXT:    store ptr [[TMP51]], ptr [[TMP65]], align 4
// CK22-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i32 0, i32 2
// CK22-NEXT:    store ptr null, ptr [[TMP66]], align 4
// CK22-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK22-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK22-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK22-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 0
// CK22-NEXT:    store i32 2, ptr [[TMP70]], align 4
// CK22-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 1
// CK22-NEXT:    store i32 3, ptr [[TMP71]], align 4
// CK22-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 2
// CK22-NEXT:    store ptr [[TMP67]], ptr [[TMP72]], align 4
// CK22-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 3
// CK22-NEXT:    store ptr [[TMP68]], ptr [[TMP73]], align 4
// CK22-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 4
// CK22-NEXT:    store ptr [[TMP69]], ptr [[TMP74]], align 4
// CK22-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 5
// CK22-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP75]], align 4
// CK22-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 6
// CK22-NEXT:    store ptr null, ptr [[TMP76]], align 4
// CK22-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 7
// CK22-NEXT:    store ptr null, ptr [[TMP77]], align 4
// CK22-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 8
// CK22-NEXT:    store i64 0, ptr [[TMP78]], align 8
// CK22-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 9
// CK22-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK22-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 10
// CK22-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP80]], align 4
// CK22-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 11
// CK22-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP81]], align 4
// CK22-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 12
// CK22-NEXT:    store i32 0, ptr [[TMP82]], align 4
// CK22-NEXT:    [[TMP83:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125.region_id, ptr [[KERNEL_ARGS14]])
// CK22-NEXT:    [[TMP84:%.*]] = icmp ne i32 [[TMP83]], 0
// CK22-NEXT:    br i1 [[TMP84]], label [[OMP_OFFLOAD_FAILED15:%.*]], label [[OMP_OFFLOAD_CONT16:%.*]]
// CK22:       omp_offload.failed15:
// CK22-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125(ptr [[THIS1]]) #[[ATTR3]]
// CK22-NEXT:    br label [[OMP_OFFLOAD_CONT16]]
// CK22:       omp_offload.cont16:
// CK22-NEXT:    ret void
//
//
// CK22-LABEL: define {{[^@]+}}@_ZN2STIdEC2ERPd
// CK22-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) unnamed_addr #[[ATTR1]] comdat align 2 {
// CK22-NEXT:  entry:
// CK22-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK22-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// CK22-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// CK22-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK22-NEXT:    store ptr null, ptr [[A]], align 4
// CK22-NEXT:    [[B2:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK22-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// CK22-NEXT:    store ptr [[TMP0]], ptr [[B2]], align 4
// CK22-NEXT:    ret void
//
//
// CK22-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112
// CK22-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2:[0-9]+]] {
// CK22-NEXT:  entry:
// CK22-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK22-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK22-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 4
// CK22-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK22-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 4
// CK22-NEXT:    ret void
//
//
// CK22-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118
// CK22-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK22-NEXT:  entry:
// CK22-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK22-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 1
// CK22-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B]], align 4
// CK22-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 4
// CK22-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i32 1
// CK22-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP1]], align 4
// CK22-NEXT:    ret void
//
//
// CK22-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125
// CK22-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK22-NEXT:  entry:
// CK22-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK22-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK22-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK22-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 4
// CK22-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK22-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 4
// CK22-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[TMP0]], i32 0, i32 1
// CK22-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[B]], align 4
// CK22-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 4
// CK22-NEXT:    [[INCDEC_PTR1:%.*]] = getelementptr inbounds double, ptr [[TMP3]], i32 1
// CK22-NEXT:    store ptr [[INCDEC_PTR1]], ptr [[TMP2]], align 4
// CK22-NEXT:    ret void
//
//
// CK22-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK22-SAME: () #[[ATTR5:[0-9]+]] {
// CK22-NEXT:  entry:
// CK22-NEXT:    call void @__tgt_register_requires(i64 1)
// CK22-NEXT:    ret void
//
//
// CK23-LABEL: define {{[^@]+}}@_Z3barPd
// CK23-SAME: (ptr noundef [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
// CK23-NEXT:  entry:
// CK23-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 4
// CK23-NEXT:    [[A:%.*]] = alloca [[STRUCT_ST:%.*]], align 4
// CK23-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 4
// CK23-NEXT:    call void @_ZN2STIdEC1ERPd(ptr noundef nonnull align 4 dereferenceable(8) [[A]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG_ADDR]])
// CK23-NEXT:    call void @_ZN2STIdE3fooERPd(ptr noundef nonnull align 4 dereferenceable(8) [[A]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG_ADDR]])
// CK23-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARG_ADDR]], align 4
// CK23-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// CK23-NEXT:    store ptr [[INCDEC_PTR]], ptr [[ARG_ADDR]], align 4
// CK23-NEXT:    ret void
//
//
// CK23-LABEL: define {{[^@]+}}@_ZN2STIdEC1ERPd
// CK23-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) unnamed_addr #[[ATTR1:[0-9]+]] comdat align 2 {
// CK23-NEXT:  entry:
// CK23-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK23-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// CK23-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// CK23-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// CK23-NEXT:    call void @_ZN2STIdEC2ERPd(ptr noundef nonnull align 4 dereferenceable(8) [[THIS1]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]])
// CK23-NEXT:    ret void
//
//
// CK23-LABEL: define {{[^@]+}}@_ZN2STIdE3fooERPd
// CK23-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR0]] comdat align 2 {
// CK23-NEXT:  entry:
// CK23-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK23-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 4
// CK23-NEXT:    [[LA:%.*]] = alloca ptr, align 4
// CK23-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 4
// CK23-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 4
// CK23-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 4
// CK23-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK23-NEXT:    [[DOTOFFLOAD_BASEPTRS2:%.*]] = alloca [2 x ptr], align 4
// CK23-NEXT:    [[DOTOFFLOAD_PTRS3:%.*]] = alloca [2 x ptr], align 4
// CK23-NEXT:    [[DOTOFFLOAD_MAPPERS4:%.*]] = alloca [2 x ptr], align 4
// CK23-NEXT:    [[DOTOFFLOAD_SIZES:%.*]] = alloca [2 x i64], align 4
// CK23-NEXT:    [[KERNEL_ARGS5:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK23-NEXT:    [[DOTOFFLOAD_BASEPTRS10:%.*]] = alloca [3 x ptr], align 4
// CK23-NEXT:    [[DOTOFFLOAD_PTRS11:%.*]] = alloca [3 x ptr], align 4
// CK23-NEXT:    [[DOTOFFLOAD_MAPPERS12:%.*]] = alloca [3 x ptr], align 4
// CK23-NEXT:    [[DOTOFFLOAD_SIZES13:%.*]] = alloca [3 x i64], align 4
// CK23-NEXT:    [[KERNEL_ARGS14:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS]], align 8
// CK23-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 4
// CK23-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    store ptr null, ptr [[LA]], align 4
// CK23-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK23-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK23-NEXT:    store ptr [[THIS1]], ptr [[TMP0]], align 4
// CK23-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK23-NEXT:    store ptr [[A]], ptr [[TMP1]], align 4
// CK23-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i32 0, i32 0
// CK23-NEXT:    store ptr null, ptr [[TMP2]], align 4
// CK23-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK23-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK23-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK23-NEXT:    store i32 2, ptr [[TMP5]], align 4
// CK23-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK23-NEXT:    store i32 1, ptr [[TMP6]], align 4
// CK23-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK23-NEXT:    store ptr [[TMP3]], ptr [[TMP7]], align 4
// CK23-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK23-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 4
// CK23-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK23-NEXT:    store ptr @.offload_sizes, ptr [[TMP9]], align 4
// CK23-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK23-NEXT:    store ptr @.offload_maptypes, ptr [[TMP10]], align 4
// CK23-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK23-NEXT:    store ptr null, ptr [[TMP11]], align 4
// CK23-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK23-NEXT:    store ptr null, ptr [[TMP12]], align 4
// CK23-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK23-NEXT:    store i64 0, ptr [[TMP13]], align 8
// CK23-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK23-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK23-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK23-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP15]], align 4
// CK23-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK23-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP16]], align 4
// CK23-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK23-NEXT:    store i32 0, ptr [[TMP17]], align 4
// CK23-NEXT:    [[TMP18:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112.region_id, ptr [[KERNEL_ARGS]])
// CK23-NEXT:    [[TMP19:%.*]] = icmp ne i32 [[TMP18]], 0
// CK23-NEXT:    br i1 [[TMP19]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK23:       omp_offload.failed:
// CK23-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112(ptr [[THIS1]]) #[[ATTR3:[0-9]+]]
// CK23-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK23:       omp_offload.cont:
// CK23-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK23-NEXT:    [[TMP20:%.*]] = load ptr, ptr [[B]], align 4
// CK23-NEXT:    [[TMP21:%.*]] = getelementptr ptr, ptr [[B]], i32 1
// CK23-NEXT:    [[TMP22:%.*]] = ptrtoint ptr [[TMP21]] to i64
// CK23-NEXT:    [[TMP23:%.*]] = ptrtoint ptr [[B]] to i64
// CK23-NEXT:    [[TMP24:%.*]] = sub i64 [[TMP22]], [[TMP23]]
// CK23-NEXT:    [[TMP25:%.*]] = sdiv exact i64 [[TMP24]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK23-NEXT:    call void @llvm.memcpy.p0.p0.i32(ptr align 4 [[DOTOFFLOAD_SIZES]], ptr align 4 @.offload_sizes.1, i32 16, i1 false)
// CK23-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK23-NEXT:    store ptr [[THIS1]], ptr [[TMP26]], align 4
// CK23-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK23-NEXT:    store ptr [[B]], ptr [[TMP27]], align 4
// CK23-NEXT:    [[TMP28:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK23-NEXT:    store i64 [[TMP25]], ptr [[TMP28]], align 4
// CK23-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i32 0, i32 0
// CK23-NEXT:    store ptr null, ptr [[TMP29]], align 4
// CK23-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 1
// CK23-NEXT:    store ptr [[THIS1]], ptr [[TMP30]], align 4
// CK23-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 1
// CK23-NEXT:    store ptr [[TMP20]], ptr [[TMP31]], align 4
// CK23-NEXT:    [[TMP32:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_MAPPERS4]], i32 0, i32 1
// CK23-NEXT:    store ptr null, ptr [[TMP32]], align 4
// CK23-NEXT:    [[TMP33:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_BASEPTRS2]], i32 0, i32 0
// CK23-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [2 x ptr], ptr [[DOTOFFLOAD_PTRS3]], i32 0, i32 0
// CK23-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [2 x i64], ptr [[DOTOFFLOAD_SIZES]], i32 0, i32 0
// CK23-NEXT:    [[TMP36:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 0
// CK23-NEXT:    store i32 2, ptr [[TMP36]], align 4
// CK23-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 1
// CK23-NEXT:    store i32 2, ptr [[TMP37]], align 4
// CK23-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 2
// CK23-NEXT:    store ptr [[TMP33]], ptr [[TMP38]], align 4
// CK23-NEXT:    [[TMP39:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 3
// CK23-NEXT:    store ptr [[TMP34]], ptr [[TMP39]], align 4
// CK23-NEXT:    [[TMP40:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 4
// CK23-NEXT:    store ptr [[TMP35]], ptr [[TMP40]], align 4
// CK23-NEXT:    [[TMP41:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 5
// CK23-NEXT:    store ptr @.offload_maptypes.2, ptr [[TMP41]], align 4
// CK23-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 6
// CK23-NEXT:    store ptr null, ptr [[TMP42]], align 4
// CK23-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 7
// CK23-NEXT:    store ptr null, ptr [[TMP43]], align 4
// CK23-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 8
// CK23-NEXT:    store i64 0, ptr [[TMP44]], align 8
// CK23-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 9
// CK23-NEXT:    store i64 0, ptr [[TMP45]], align 8
// CK23-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 10
// CK23-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP46]], align 4
// CK23-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 11
// CK23-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP47]], align 4
// CK23-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS5]], i32 0, i32 12
// CK23-NEXT:    store i32 0, ptr [[TMP48]], align 4
// CK23-NEXT:    [[TMP49:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118.region_id, ptr [[KERNEL_ARGS5]])
// CK23-NEXT:    [[TMP50:%.*]] = icmp ne i32 [[TMP49]], 0
// CK23-NEXT:    br i1 [[TMP50]], label [[OMP_OFFLOAD_FAILED6:%.*]], label [[OMP_OFFLOAD_CONT7:%.*]]
// CK23:       omp_offload.failed6:
// CK23-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118(ptr [[THIS1]]) #[[ATTR3]]
// CK23-NEXT:    br label [[OMP_OFFLOAD_CONT7]]
// CK23:       omp_offload.cont7:
// CK23-NEXT:    [[A8:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 0
// CK23-NEXT:    [[B9:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK23-NEXT:    [[TMP51:%.*]] = load ptr, ptr [[B9]], align 4
// CK23-NEXT:    [[TMP52:%.*]] = getelementptr ptr, ptr [[B9]], i32 1
// CK23-NEXT:    [[TMP53:%.*]] = ptrtoint ptr [[TMP52]] to i64
// CK23-NEXT:    [[TMP54:%.*]] = ptrtoint ptr [[A8]] to i64
// CK23-NEXT:    [[TMP55:%.*]] = sub i64 [[TMP53]], [[TMP54]]
// CK23-NEXT:    [[TMP56:%.*]] = sdiv exact i64 [[TMP55]], ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64)
// CK23-NEXT:    call void @llvm.memcpy.p0.p0.i32(ptr align 4 [[DOTOFFLOAD_SIZES13]], ptr align 4 @.offload_sizes.3, i32 24, i1 false)
// CK23-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK23-NEXT:    store ptr [[THIS1]], ptr [[TMP57]], align 4
// CK23-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK23-NEXT:    store ptr [[A8]], ptr [[TMP58]], align 4
// CK23-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK23-NEXT:    store i64 [[TMP56]], ptr [[TMP59]], align 4
// CK23-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i32 0, i32 0
// CK23-NEXT:    store ptr null, ptr [[TMP60]], align 4
// CK23-NEXT:    [[TMP61:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 1
// CK23-NEXT:    store ptr [[THIS1]], ptr [[TMP61]], align 4
// CK23-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 1
// CK23-NEXT:    store ptr [[A8]], ptr [[TMP62]], align 4
// CK23-NEXT:    [[TMP63:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i32 0, i32 1
// CK23-NEXT:    store ptr null, ptr [[TMP63]], align 4
// CK23-NEXT:    [[TMP64:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 2
// CK23-NEXT:    store ptr [[THIS1]], ptr [[TMP64]], align 4
// CK23-NEXT:    [[TMP65:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 2
// CK23-NEXT:    store ptr [[TMP51]], ptr [[TMP65]], align 4
// CK23-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_MAPPERS12]], i32 0, i32 2
// CK23-NEXT:    store ptr null, ptr [[TMP66]], align 4
// CK23-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_BASEPTRS10]], i32 0, i32 0
// CK23-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [3 x ptr], ptr [[DOTOFFLOAD_PTRS11]], i32 0, i32 0
// CK23-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [3 x i64], ptr [[DOTOFFLOAD_SIZES13]], i32 0, i32 0
// CK23-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 0
// CK23-NEXT:    store i32 2, ptr [[TMP70]], align 4
// CK23-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 1
// CK23-NEXT:    store i32 3, ptr [[TMP71]], align 4
// CK23-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 2
// CK23-NEXT:    store ptr [[TMP67]], ptr [[TMP72]], align 4
// CK23-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 3
// CK23-NEXT:    store ptr [[TMP68]], ptr [[TMP73]], align 4
// CK23-NEXT:    [[TMP74:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 4
// CK23-NEXT:    store ptr [[TMP69]], ptr [[TMP74]], align 4
// CK23-NEXT:    [[TMP75:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 5
// CK23-NEXT:    store ptr @.offload_maptypes.4, ptr [[TMP75]], align 4
// CK23-NEXT:    [[TMP76:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 6
// CK23-NEXT:    store ptr null, ptr [[TMP76]], align 4
// CK23-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 7
// CK23-NEXT:    store ptr null, ptr [[TMP77]], align 4
// CK23-NEXT:    [[TMP78:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 8
// CK23-NEXT:    store i64 0, ptr [[TMP78]], align 8
// CK23-NEXT:    [[TMP79:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 9
// CK23-NEXT:    store i64 0, ptr [[TMP79]], align 8
// CK23-NEXT:    [[TMP80:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 10
// CK23-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP80]], align 4
// CK23-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 11
// CK23-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP81]], align 4
// CK23-NEXT:    [[TMP82:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS14]], i32 0, i32 12
// CK23-NEXT:    store i32 0, ptr [[TMP82]], align 4
// CK23-NEXT:    [[TMP83:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125.region_id, ptr [[KERNEL_ARGS14]])
// CK23-NEXT:    [[TMP84:%.*]] = icmp ne i32 [[TMP83]], 0
// CK23-NEXT:    br i1 [[TMP84]], label [[OMP_OFFLOAD_FAILED15:%.*]], label [[OMP_OFFLOAD_CONT16:%.*]]
// CK23:       omp_offload.failed15:
// CK23-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125(ptr [[THIS1]]) #[[ATTR3]]
// CK23-NEXT:    br label [[OMP_OFFLOAD_CONT16]]
// CK23:       omp_offload.cont16:
// CK23-NEXT:    ret void
//
//
// CK23-LABEL: define {{[^@]+}}@_ZN2STIdEC2ERPd
// CK23-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) unnamed_addr #[[ATTR1]] comdat align 2 {
// CK23-NEXT:  entry:
// CK23-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK23-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// CK23-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// CK23-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// CK23-NEXT:    store ptr null, ptr [[A]], align 4
// CK23-NEXT:    [[B2:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// CK23-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// CK23-NEXT:    store ptr [[TMP0]], ptr [[B2]], align 4
// CK23-NEXT:    ret void
//
//
// CK23-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l112
// CK23-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2:[0-9]+]] {
// CK23-NEXT:  entry:
// CK23-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK23-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK23-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 4
// CK23-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK23-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 4
// CK23-NEXT:    ret void
//
//
// CK23-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l118
// CK23-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK23-NEXT:  entry:
// CK23-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK23-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 1
// CK23-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B]], align 4
// CK23-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 4
// CK23-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i32 1
// CK23-NEXT:    store ptr [[INCDEC_PTR]], ptr [[TMP1]], align 4
// CK23-NEXT:    ret void
//
//
// CK23-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__ZN2STIdE3fooERPd_l125
// CK23-SAME: (ptr noundef [[THIS:%.*]]) #[[ATTR2]] {
// CK23-NEXT:  entry:
// CK23-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// CK23-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// CK23-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[TMP0]], i32 0, i32 0
// CK23-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A]], align 4
// CK23-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i32 1
// CK23-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 4
// CK23-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[TMP0]], i32 0, i32 1
// CK23-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[B]], align 4
// CK23-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[TMP2]], align 4
// CK23-NEXT:    [[INCDEC_PTR1:%.*]] = getelementptr inbounds double, ptr [[TMP3]], i32 1
// CK23-NEXT:    store ptr [[INCDEC_PTR1]], ptr [[TMP2]], align 4
// CK23-NEXT:    ret void
//
//
// CK23-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK23-SAME: () #[[ATTR5:[0-9]+]] {
// CK23-NEXT:  entry:
// CK23-NEXT:    call void @__tgt_register_requires(i64 1)
// CK23-NEXT:    ret void
//
//
// SIMD-ONLY10-LABEL: define {{[^@]+}}@_Z3barPd
// SIMD-ONLY10-SAME: (ptr noundef [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
// SIMD-ONLY10-NEXT:  entry:
// SIMD-ONLY10-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY10-NEXT:    [[A:%.*]] = alloca [[STRUCT_ST:%.*]], align 8
// SIMD-ONLY10-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 8
// SIMD-ONLY10-NEXT:    call void @_ZN2STIdEC1ERPd(ptr noundef nonnull align 8 dereferenceable(16) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG_ADDR]])
// SIMD-ONLY10-NEXT:    call void @_ZN2STIdE3fooERPd(ptr noundef nonnull align 8 dereferenceable(16) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG_ADDR]])
// SIMD-ONLY10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARG_ADDR]], align 8
// SIMD-ONLY10-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY10-NEXT:    store ptr [[INCDEC_PTR]], ptr [[ARG_ADDR]], align 8
// SIMD-ONLY10-NEXT:    ret void
//
//
// SIMD-ONLY10-LABEL: define {{[^@]+}}@_ZN2STIdEC1ERPd
// SIMD-ONLY10-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) unnamed_addr #[[ATTR1:[0-9]+]] comdat align 2 {
// SIMD-ONLY10-NEXT:  entry:
// SIMD-ONLY10-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY10-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY10-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// SIMD-ONLY10-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// SIMD-ONLY10-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// SIMD-ONLY10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// SIMD-ONLY10-NEXT:    call void @_ZN2STIdEC2ERPd(ptr noundef nonnull align 8 dereferenceable(16) [[THIS1]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP0]])
// SIMD-ONLY10-NEXT:    ret void
//
//
// SIMD-ONLY10-LABEL: define {{[^@]+}}@_ZN2STIdE3fooERPd
// SIMD-ONLY10-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG:%.*]]) #[[ATTR0]] comdat align 2 {
// SIMD-ONLY10-NEXT:  entry:
// SIMD-ONLY10-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY10-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY10-NEXT:    [[LA:%.*]] = alloca ptr, align 8
// SIMD-ONLY10-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// SIMD-ONLY10-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 8
// SIMD-ONLY10-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// SIMD-ONLY10-NEXT:    store ptr null, ptr [[LA]], align 8
// SIMD-ONLY10-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A]], align 8
// SIMD-ONLY10-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY10-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 8
// SIMD-ONLY10-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY10-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B]], align 8
// SIMD-ONLY10-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 8
// SIMD-ONLY10-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i32 1
// SIMD-ONLY10-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[TMP1]], align 8
// SIMD-ONLY10-NEXT:    [[A3:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY10-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[A3]], align 8
// SIMD-ONLY10-NEXT:    [[INCDEC_PTR4:%.*]] = getelementptr inbounds double, ptr [[TMP3]], i32 1
// SIMD-ONLY10-NEXT:    store ptr [[INCDEC_PTR4]], ptr [[A3]], align 8
// SIMD-ONLY10-NEXT:    [[B5:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY10-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[B5]], align 8
// SIMD-ONLY10-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 8
// SIMD-ONLY10-NEXT:    [[INCDEC_PTR6:%.*]] = getelementptr inbounds double, ptr [[TMP5]], i32 1
// SIMD-ONLY10-NEXT:    store ptr [[INCDEC_PTR6]], ptr [[TMP4]], align 8
// SIMD-ONLY10-NEXT:    ret void
//
//
// SIMD-ONLY10-LABEL: define {{[^@]+}}@_ZN2STIdEC2ERPd
// SIMD-ONLY10-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) unnamed_addr #[[ATTR1]] comdat align 2 {
// SIMD-ONLY10-NEXT:  entry:
// SIMD-ONLY10-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY10-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY10-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// SIMD-ONLY10-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// SIMD-ONLY10-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// SIMD-ONLY10-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY10-NEXT:    store ptr null, ptr [[A]], align 8
// SIMD-ONLY10-NEXT:    [[B2:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY10-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// SIMD-ONLY10-NEXT:    store ptr [[TMP0]], ptr [[B2]], align 8
// SIMD-ONLY10-NEXT:    ret void
//
//
// SIMD-ONLY11-LABEL: define {{[^@]+}}@_Z3barPd
// SIMD-ONLY11-SAME: (ptr noundef [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
// SIMD-ONLY11-NEXT:  entry:
// SIMD-ONLY11-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY11-NEXT:    [[A:%.*]] = alloca [[STRUCT_ST:%.*]], align 8
// SIMD-ONLY11-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 8
// SIMD-ONLY11-NEXT:    call void @_ZN2STIdEC1ERPd(ptr noundef nonnull align 8 dereferenceable(16) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG_ADDR]])
// SIMD-ONLY11-NEXT:    call void @_ZN2STIdE3fooERPd(ptr noundef nonnull align 8 dereferenceable(16) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG_ADDR]])
// SIMD-ONLY11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARG_ADDR]], align 8
// SIMD-ONLY11-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY11-NEXT:    store ptr [[INCDEC_PTR]], ptr [[ARG_ADDR]], align 8
// SIMD-ONLY11-NEXT:    ret void
//
//
// SIMD-ONLY11-LABEL: define {{[^@]+}}@_ZN2STIdEC1ERPd
// SIMD-ONLY11-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) unnamed_addr #[[ATTR1:[0-9]+]] comdat align 2 {
// SIMD-ONLY11-NEXT:  entry:
// SIMD-ONLY11-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY11-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY11-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// SIMD-ONLY11-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// SIMD-ONLY11-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// SIMD-ONLY11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// SIMD-ONLY11-NEXT:    call void @_ZN2STIdEC2ERPd(ptr noundef nonnull align 8 dereferenceable(16) [[THIS1]], ptr noundef nonnull align 8 dereferenceable(8) [[TMP0]])
// SIMD-ONLY11-NEXT:    ret void
//
//
// SIMD-ONLY11-LABEL: define {{[^@]+}}@_ZN2STIdE3fooERPd
// SIMD-ONLY11-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[ARG:%.*]]) #[[ATTR0]] comdat align 2 {
// SIMD-ONLY11-NEXT:  entry:
// SIMD-ONLY11-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY11-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY11-NEXT:    [[LA:%.*]] = alloca ptr, align 8
// SIMD-ONLY11-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// SIMD-ONLY11-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 8
// SIMD-ONLY11-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// SIMD-ONLY11-NEXT:    store ptr null, ptr [[LA]], align 8
// SIMD-ONLY11-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A]], align 8
// SIMD-ONLY11-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY11-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 8
// SIMD-ONLY11-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY11-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B]], align 8
// SIMD-ONLY11-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 8
// SIMD-ONLY11-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i32 1
// SIMD-ONLY11-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[TMP1]], align 8
// SIMD-ONLY11-NEXT:    [[A3:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY11-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[A3]], align 8
// SIMD-ONLY11-NEXT:    [[INCDEC_PTR4:%.*]] = getelementptr inbounds double, ptr [[TMP3]], i32 1
// SIMD-ONLY11-NEXT:    store ptr [[INCDEC_PTR4]], ptr [[A3]], align 8
// SIMD-ONLY11-NEXT:    [[B5:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY11-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[B5]], align 8
// SIMD-ONLY11-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 8
// SIMD-ONLY11-NEXT:    [[INCDEC_PTR6:%.*]] = getelementptr inbounds double, ptr [[TMP5]], i32 1
// SIMD-ONLY11-NEXT:    store ptr [[INCDEC_PTR6]], ptr [[TMP4]], align 8
// SIMD-ONLY11-NEXT:    ret void
//
//
// SIMD-ONLY11-LABEL: define {{[^@]+}}@_ZN2STIdEC2ERPd
// SIMD-ONLY11-SAME: (ptr noundef nonnull align 8 dereferenceable(16) [[THIS:%.*]], ptr noundef nonnull align 8 dereferenceable(8) [[B:%.*]]) unnamed_addr #[[ATTR1]] comdat align 2 {
// SIMD-ONLY11-NEXT:  entry:
// SIMD-ONLY11-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY11-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8
// SIMD-ONLY11-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// SIMD-ONLY11-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 8
// SIMD-ONLY11-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// SIMD-ONLY11-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY11-NEXT:    store ptr null, ptr [[A]], align 8
// SIMD-ONLY11-NEXT:    [[B2:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY11-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 8
// SIMD-ONLY11-NEXT:    store ptr [[TMP0]], ptr [[B2]], align 8
// SIMD-ONLY11-NEXT:    ret void
//
//
// SIMD-ONLY12-LABEL: define {{[^@]+}}@_Z3barPd
// SIMD-ONLY12-SAME: (ptr noundef [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
// SIMD-ONLY12-NEXT:  entry:
// SIMD-ONLY12-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY12-NEXT:    [[A:%.*]] = alloca [[STRUCT_ST:%.*]], align 4
// SIMD-ONLY12-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 4
// SIMD-ONLY12-NEXT:    call void @_ZN2STIdEC1ERPd(ptr noundef nonnull align 4 dereferenceable(8) [[A]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG_ADDR]])
// SIMD-ONLY12-NEXT:    call void @_ZN2STIdE3fooERPd(ptr noundef nonnull align 4 dereferenceable(8) [[A]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG_ADDR]])
// SIMD-ONLY12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARG_ADDR]], align 4
// SIMD-ONLY12-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY12-NEXT:    store ptr [[INCDEC_PTR]], ptr [[ARG_ADDR]], align 4
// SIMD-ONLY12-NEXT:    ret void
//
//
// SIMD-ONLY12-LABEL: define {{[^@]+}}@_ZN2STIdEC1ERPd
// SIMD-ONLY12-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) unnamed_addr #[[ATTR1:[0-9]+]] comdat align 2 {
// SIMD-ONLY12-NEXT:  entry:
// SIMD-ONLY12-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY12-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY12-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// SIMD-ONLY12-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// SIMD-ONLY12-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// SIMD-ONLY12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// SIMD-ONLY12-NEXT:    call void @_ZN2STIdEC2ERPd(ptr noundef nonnull align 4 dereferenceable(8) [[THIS1]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]])
// SIMD-ONLY12-NEXT:    ret void
//
//
// SIMD-ONLY12-LABEL: define {{[^@]+}}@_ZN2STIdE3fooERPd
// SIMD-ONLY12-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR0]] comdat align 2 {
// SIMD-ONLY12-NEXT:  entry:
// SIMD-ONLY12-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY12-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY12-NEXT:    [[LA:%.*]] = alloca ptr, align 4
// SIMD-ONLY12-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// SIMD-ONLY12-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 4
// SIMD-ONLY12-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// SIMD-ONLY12-NEXT:    store ptr null, ptr [[LA]], align 4
// SIMD-ONLY12-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A]], align 4
// SIMD-ONLY12-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY12-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 4
// SIMD-ONLY12-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY12-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B]], align 4
// SIMD-ONLY12-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 4
// SIMD-ONLY12-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i32 1
// SIMD-ONLY12-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[TMP1]], align 4
// SIMD-ONLY12-NEXT:    [[A3:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY12-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[A3]], align 4
// SIMD-ONLY12-NEXT:    [[INCDEC_PTR4:%.*]] = getelementptr inbounds double, ptr [[TMP3]], i32 1
// SIMD-ONLY12-NEXT:    store ptr [[INCDEC_PTR4]], ptr [[A3]], align 4
// SIMD-ONLY12-NEXT:    [[B5:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY12-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[B5]], align 4
// SIMD-ONLY12-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 4
// SIMD-ONLY12-NEXT:    [[INCDEC_PTR6:%.*]] = getelementptr inbounds double, ptr [[TMP5]], i32 1
// SIMD-ONLY12-NEXT:    store ptr [[INCDEC_PTR6]], ptr [[TMP4]], align 4
// SIMD-ONLY12-NEXT:    ret void
//
//
// SIMD-ONLY12-LABEL: define {{[^@]+}}@_ZN2STIdEC2ERPd
// SIMD-ONLY12-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) unnamed_addr #[[ATTR1]] comdat align 2 {
// SIMD-ONLY12-NEXT:  entry:
// SIMD-ONLY12-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY12-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY12-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// SIMD-ONLY12-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// SIMD-ONLY12-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// SIMD-ONLY12-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY12-NEXT:    store ptr null, ptr [[A]], align 4
// SIMD-ONLY12-NEXT:    [[B2:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY12-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// SIMD-ONLY12-NEXT:    store ptr [[TMP0]], ptr [[B2]], align 4
// SIMD-ONLY12-NEXT:    ret void
//
//
// SIMD-ONLY13-LABEL: define {{[^@]+}}@_Z3barPd
// SIMD-ONLY13-SAME: (ptr noundef [[ARG:%.*]]) #[[ATTR0:[0-9]+]] {
// SIMD-ONLY13-NEXT:  entry:
// SIMD-ONLY13-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY13-NEXT:    [[A:%.*]] = alloca [[STRUCT_ST:%.*]], align 4
// SIMD-ONLY13-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 4
// SIMD-ONLY13-NEXT:    call void @_ZN2STIdEC1ERPd(ptr noundef nonnull align 4 dereferenceable(8) [[A]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG_ADDR]])
// SIMD-ONLY13-NEXT:    call void @_ZN2STIdE3fooERPd(ptr noundef nonnull align 4 dereferenceable(8) [[A]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG_ADDR]])
// SIMD-ONLY13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[ARG_ADDR]], align 4
// SIMD-ONLY13-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY13-NEXT:    store ptr [[INCDEC_PTR]], ptr [[ARG_ADDR]], align 4
// SIMD-ONLY13-NEXT:    ret void
//
//
// SIMD-ONLY13-LABEL: define {{[^@]+}}@_ZN2STIdEC1ERPd
// SIMD-ONLY13-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) unnamed_addr #[[ATTR1:[0-9]+]] comdat align 2 {
// SIMD-ONLY13-NEXT:  entry:
// SIMD-ONLY13-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY13-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY13-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// SIMD-ONLY13-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// SIMD-ONLY13-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// SIMD-ONLY13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// SIMD-ONLY13-NEXT:    call void @_ZN2STIdEC2ERPd(ptr noundef nonnull align 4 dereferenceable(8) [[THIS1]], ptr noundef nonnull align 4 dereferenceable(4) [[TMP0]])
// SIMD-ONLY13-NEXT:    ret void
//
//
// SIMD-ONLY13-LABEL: define {{[^@]+}}@_ZN2STIdE3fooERPd
// SIMD-ONLY13-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[ARG:%.*]]) #[[ATTR0]] comdat align 2 {
// SIMD-ONLY13-NEXT:  entry:
// SIMD-ONLY13-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY13-NEXT:    [[ARG_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY13-NEXT:    [[LA:%.*]] = alloca ptr, align 4
// SIMD-ONLY13-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// SIMD-ONLY13-NEXT:    store ptr [[ARG]], ptr [[ARG_ADDR]], align 4
// SIMD-ONLY13-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// SIMD-ONLY13-NEXT:    store ptr null, ptr [[LA]], align 4
// SIMD-ONLY13-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A]], align 4
// SIMD-ONLY13-NEXT:    [[INCDEC_PTR:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i32 1
// SIMD-ONLY13-NEXT:    store ptr [[INCDEC_PTR]], ptr [[A]], align 4
// SIMD-ONLY13-NEXT:    [[B:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY13-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B]], align 4
// SIMD-ONLY13-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP1]], align 4
// SIMD-ONLY13-NEXT:    [[INCDEC_PTR2:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i32 1
// SIMD-ONLY13-NEXT:    store ptr [[INCDEC_PTR2]], ptr [[TMP1]], align 4
// SIMD-ONLY13-NEXT:    [[A3:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY13-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[A3]], align 4
// SIMD-ONLY13-NEXT:    [[INCDEC_PTR4:%.*]] = getelementptr inbounds double, ptr [[TMP3]], i32 1
// SIMD-ONLY13-NEXT:    store ptr [[INCDEC_PTR4]], ptr [[A3]], align 4
// SIMD-ONLY13-NEXT:    [[B5:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY13-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[B5]], align 4
// SIMD-ONLY13-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP4]], align 4
// SIMD-ONLY13-NEXT:    [[INCDEC_PTR6:%.*]] = getelementptr inbounds double, ptr [[TMP5]], i32 1
// SIMD-ONLY13-NEXT:    store ptr [[INCDEC_PTR6]], ptr [[TMP4]], align 4
// SIMD-ONLY13-NEXT:    ret void
//
//
// SIMD-ONLY13-LABEL: define {{[^@]+}}@_ZN2STIdEC2ERPd
// SIMD-ONLY13-SAME: (ptr noundef nonnull align 4 dereferenceable(8) [[THIS:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[B:%.*]]) unnamed_addr #[[ATTR1]] comdat align 2 {
// SIMD-ONLY13-NEXT:  entry:
// SIMD-ONLY13-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY13-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 4
// SIMD-ONLY13-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 4
// SIMD-ONLY13-NEXT:    store ptr [[B]], ptr [[B_ADDR]], align 4
// SIMD-ONLY13-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 4
// SIMD-ONLY13-NEXT:    [[A:%.*]] = getelementptr inbounds [[STRUCT_ST:%.*]], ptr [[THIS1]], i32 0, i32 0
// SIMD-ONLY13-NEXT:    store ptr null, ptr [[A]], align 4
// SIMD-ONLY13-NEXT:    [[B2:%.*]] = getelementptr inbounds [[STRUCT_ST]], ptr [[THIS1]], i32 0, i32 1
// SIMD-ONLY13-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[B_ADDR]], align 4
// SIMD-ONLY13-NEXT:    store ptr [[TMP0]], ptr [[B2]], align 4
// SIMD-ONLY13-NEXT:    ret void
//
//
// CK30-LABEL: define {{[^@]+}}@_Z3barv
// CK30-SAME: () #[[ATTR0:[0-9]+]] {
// CK30-NEXT:  entry:
// CK30-NEXT:    [[PTR:%.*]] = alloca ptr, align 64
// CK30-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 8
// CK30-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 8
// CK30-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 8
// CK30-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK30-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR]], align 64
// CK30-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK30-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 8
// CK30-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK30-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 8
// CK30-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i64 0, i64 0
// CK30-NEXT:    store ptr null, ptr [[TMP3]], align 8
// CK30-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK30-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK30-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK30-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK30-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK30-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK30-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK30-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 8
// CK30-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK30-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 8
// CK30-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK30-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 8
// CK30-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK30-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 8
// CK30-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK30-NEXT:    store ptr null, ptr [[TMP12]], align 8
// CK30-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK30-NEXT:    store ptr null, ptr [[TMP13]], align 8
// CK30-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK30-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK30-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK30-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK30-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK30-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK30-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK30-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK30-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK30-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK30-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159.region_id, ptr [[KERNEL_ARGS]])
// CK30-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK30-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK30:       omp_offload.failed:
// CK30-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK30-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK30:       omp_offload.cont:
// CK30-NEXT:    ret void
//
//
// CK30-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159
// CK30-SAME: (ptr noundef [[PTR:%.*]]) #[[ATTR1:[0-9]+]] {
// CK30-NEXT:  entry:
// CK30-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8
// CK30-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR]], align 8
// CK30-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR]], align 8
// CK30-NEXT:    store double 0.000000e+00, ptr [[TMP0]], align 8
// CK30-NEXT:    ret void
//
//
// CK30-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK30-SAME: () #[[ATTR3:[0-9]+]] {
// CK30-NEXT:  entry:
// CK30-NEXT:    call void @__tgt_register_requires(i64 1)
// CK30-NEXT:    ret void
//
//
// CK31-LABEL: define {{[^@]+}}@_Z3barv
// CK31-SAME: () #[[ATTR0:[0-9]+]] {
// CK31-NEXT:  entry:
// CK31-NEXT:    [[PTR:%.*]] = alloca ptr, align 64
// CK31-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 8
// CK31-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 8
// CK31-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 8
// CK31-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK31-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR]], align 64
// CK31-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK31-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 8
// CK31-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK31-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 8
// CK31-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i64 0, i64 0
// CK31-NEXT:    store ptr null, ptr [[TMP3]], align 8
// CK31-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK31-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK31-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK31-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK31-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK31-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK31-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK31-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 8
// CK31-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK31-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 8
// CK31-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK31-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 8
// CK31-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK31-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 8
// CK31-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK31-NEXT:    store ptr null, ptr [[TMP12]], align 8
// CK31-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK31-NEXT:    store ptr null, ptr [[TMP13]], align 8
// CK31-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK31-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK31-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK31-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK31-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK31-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK31-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK31-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK31-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK31-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK31-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159.region_id, ptr [[KERNEL_ARGS]])
// CK31-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK31-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK31:       omp_offload.failed:
// CK31-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK31-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK31:       omp_offload.cont:
// CK31-NEXT:    ret void
//
//
// CK31-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159
// CK31-SAME: (ptr noundef [[PTR:%.*]]) #[[ATTR1:[0-9]+]] {
// CK31-NEXT:  entry:
// CK31-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 8
// CK31-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR]], align 8
// CK31-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR]], align 8
// CK31-NEXT:    store double 0.000000e+00, ptr [[TMP0]], align 8
// CK31-NEXT:    ret void
//
//
// CK31-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK31-SAME: () #[[ATTR3:[0-9]+]] {
// CK31-NEXT:  entry:
// CK31-NEXT:    call void @__tgt_register_requires(i64 1)
// CK31-NEXT:    ret void
//
//
// CK32-LABEL: define {{[^@]+}}@_Z3barv
// CK32-SAME: () #[[ATTR0:[0-9]+]] {
// CK32-NEXT:  entry:
// CK32-NEXT:    [[PTR:%.*]] = alloca ptr, align 64
// CK32-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 4
// CK32-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 4
// CK32-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 4
// CK32-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR]], align 64
// CK32-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK32-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 4
// CK32-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK32-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 4
// CK32-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i32 0, i32 0
// CK32-NEXT:    store ptr null, ptr [[TMP3]], align 4
// CK32-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK32-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK32-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK32-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK32-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK32-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK32-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK32-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 4
// CK32-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK32-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 4
// CK32-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK32-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 4
// CK32-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK32-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 4
// CK32-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK32-NEXT:    store ptr null, ptr [[TMP12]], align 4
// CK32-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK32-NEXT:    store ptr null, ptr [[TMP13]], align 4
// CK32-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK32-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK32-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK32-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK32-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK32-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK32-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK32-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK32-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK32-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK32-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159.region_id, ptr [[KERNEL_ARGS]])
// CK32-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK32-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK32:       omp_offload.failed:
// CK32-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK32-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK32:       omp_offload.cont:
// CK32-NEXT:    ret void
//
//
// CK32-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159
// CK32-SAME: (ptr noundef [[PTR:%.*]]) #[[ATTR1:[0-9]+]] {
// CK32-NEXT:  entry:
// CK32-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 4
// CK32-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR]], align 4
// CK32-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR]], align 4
// CK32-NEXT:    store double 0.000000e+00, ptr [[TMP0]], align 4
// CK32-NEXT:    ret void
//
//
// CK32-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK32-SAME: () #[[ATTR3:[0-9]+]] {
// CK32-NEXT:  entry:
// CK32-NEXT:    call void @__tgt_register_requires(i64 1)
// CK32-NEXT:    ret void
//
//
// CK33-LABEL: define {{[^@]+}}@_Z3barv
// CK33-SAME: () #[[ATTR0:[0-9]+]] {
// CK33-NEXT:  entry:
// CK33-NEXT:    [[PTR:%.*]] = alloca ptr, align 64
// CK33-NEXT:    [[DOTOFFLOAD_BASEPTRS:%.*]] = alloca [1 x ptr], align 4
// CK33-NEXT:    [[DOTOFFLOAD_PTRS:%.*]] = alloca [1 x ptr], align 4
// CK33-NEXT:    [[DOTOFFLOAD_MAPPERS:%.*]] = alloca [1 x ptr], align 4
// CK33-NEXT:    [[KERNEL_ARGS:%.*]] = alloca [[STRUCT___TGT_KERNEL_ARGUMENTS:%.*]], align 8
// CK33-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR]], align 64
// CK33-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK33-NEXT:    store ptr [[TMP0]], ptr [[TMP1]], align 4
// CK33-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK33-NEXT:    store ptr [[TMP0]], ptr [[TMP2]], align 4
// CK33-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_MAPPERS]], i32 0, i32 0
// CK33-NEXT:    store ptr null, ptr [[TMP3]], align 4
// CK33-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_BASEPTRS]], i32 0, i32 0
// CK33-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [1 x ptr], ptr [[DOTOFFLOAD_PTRS]], i32 0, i32 0
// CK33-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 0
// CK33-NEXT:    store i32 2, ptr [[TMP6]], align 4
// CK33-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 1
// CK33-NEXT:    store i32 1, ptr [[TMP7]], align 4
// CK33-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 2
// CK33-NEXT:    store ptr [[TMP4]], ptr [[TMP8]], align 4
// CK33-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 3
// CK33-NEXT:    store ptr [[TMP5]], ptr [[TMP9]], align 4
// CK33-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 4
// CK33-NEXT:    store ptr @.offload_sizes, ptr [[TMP10]], align 4
// CK33-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 5
// CK33-NEXT:    store ptr @.offload_maptypes, ptr [[TMP11]], align 4
// CK33-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 6
// CK33-NEXT:    store ptr null, ptr [[TMP12]], align 4
// CK33-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 7
// CK33-NEXT:    store ptr null, ptr [[TMP13]], align 4
// CK33-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 8
// CK33-NEXT:    store i64 0, ptr [[TMP14]], align 8
// CK33-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 9
// CK33-NEXT:    store i64 0, ptr [[TMP15]], align 8
// CK33-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 10
// CK33-NEXT:    store [3 x i32] [i32 -1, i32 0, i32 0], ptr [[TMP16]], align 4
// CK33-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 11
// CK33-NEXT:    store [3 x i32] zeroinitializer, ptr [[TMP17]], align 4
// CK33-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT___TGT_KERNEL_ARGUMENTS]], ptr [[KERNEL_ARGS]], i32 0, i32 12
// CK33-NEXT:    store i32 0, ptr [[TMP18]], align 4
// CK33-NEXT:    [[TMP19:%.*]] = call i32 @__tgt_target_kernel(ptr @[[GLOB1:[0-9]+]], i64 -1, i32 -1, i32 0, ptr @.{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159.region_id, ptr [[KERNEL_ARGS]])
// CK33-NEXT:    [[TMP20:%.*]] = icmp ne i32 [[TMP19]], 0
// CK33-NEXT:    br i1 [[TMP20]], label [[OMP_OFFLOAD_FAILED:%.*]], label [[OMP_OFFLOAD_CONT:%.*]]
// CK33:       omp_offload.failed:
// CK33-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159(ptr [[TMP0]]) #[[ATTR2:[0-9]+]]
// CK33-NEXT:    br label [[OMP_OFFLOAD_CONT]]
// CK33:       omp_offload.cont:
// CK33-NEXT:    ret void
//
//
// CK33-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}__Z3barv_l159
// CK33-SAME: (ptr noundef [[PTR:%.*]]) #[[ATTR1:[0-9]+]] {
// CK33-NEXT:  entry:
// CK33-NEXT:    [[PTR_ADDR:%.*]] = alloca ptr, align 4
// CK33-NEXT:    store ptr [[PTR]], ptr [[PTR_ADDR]], align 4
// CK33-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR_ADDR]], align 4
// CK33-NEXT:    store double 0.000000e+00, ptr [[TMP0]], align 4
// CK33-NEXT:    ret void
//
//
// CK33-LABEL: define {{[^@]+}}@.omp_offloading.requires_reg
// CK33-SAME: () #[[ATTR3:[0-9]+]] {
// CK33-NEXT:  entry:
// CK33-NEXT:    call void @__tgt_register_requires(i64 1)
// CK33-NEXT:    ret void
//
//
// SIMD-ONLY20-LABEL: define {{[^@]+}}@_Z3barv
// SIMD-ONLY20-SAME: () #[[ATTR0:[0-9]+]] {
// SIMD-ONLY20-NEXT:  entry:
// SIMD-ONLY20-NEXT:    [[PTR:%.*]] = alloca ptr, align 64
// SIMD-ONLY20-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR]], align 64
// SIMD-ONLY20-NEXT:    store double 0.000000e+00, ptr [[TMP0]], align 8
// SIMD-ONLY20-NEXT:    ret void
//
//
// SIMD-ONLY21-LABEL: define {{[^@]+}}@_Z3barv
// SIMD-ONLY21-SAME: () #[[ATTR0:[0-9]+]] {
// SIMD-ONLY21-NEXT:  entry:
// SIMD-ONLY21-NEXT:    [[PTR:%.*]] = alloca ptr, align 64
// SIMD-ONLY21-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR]], align 64
// SIMD-ONLY21-NEXT:    store double 0.000000e+00, ptr [[TMP0]], align 8
// SIMD-ONLY21-NEXT:    ret void
//
//
// SIMD-ONLY22-LABEL: define {{[^@]+}}@_Z3barv
// SIMD-ONLY22-SAME: () #[[ATTR0:[0-9]+]] {
// SIMD-ONLY22-NEXT:  entry:
// SIMD-ONLY22-NEXT:    [[PTR:%.*]] = alloca ptr, align 64
// SIMD-ONLY22-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR]], align 64
// SIMD-ONLY22-NEXT:    store double 0.000000e+00, ptr [[TMP0]], align 4
// SIMD-ONLY22-NEXT:    ret void
//
//
// SIMD-ONLY23-LABEL: define {{[^@]+}}@_Z3barv
// SIMD-ONLY23-SAME: () #[[ATTR0:[0-9]+]] {
// SIMD-ONLY23-NEXT:  entry:
// SIMD-ONLY23-NEXT:    [[PTR:%.*]] = alloca ptr, align 64
// SIMD-ONLY23-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[PTR]], align 64
// SIMD-ONLY23-NEXT:    store double 0.000000e+00, ptr [[TMP0]], align 4
// SIMD-ONLY23-NEXT:    ret void
//
