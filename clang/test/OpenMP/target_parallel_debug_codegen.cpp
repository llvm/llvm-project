// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature --include-generated-funcs --replace-value-regex "__omp_offloading_[0-9a-z]+_[0-9a-z]+" "reduction_size[.].+[.]" "pl_cond[.].+[.|,]" --prefix-filecheck-ir-name _
// RUN: %clang_cc1 -DCK1 -verify -fopenmp -x c++ -triple powerpc64le-unknown-unknown -fopenmp-targets=nvptx64-nvidia-cuda -fopenmp-cuda-mode -emit-llvm-bc %s -o %t-ppc-host.bc -fopenmp-version=45
// RUN: %clang_cc1 -DCK1 -verify -fopenmp -x c++ -triple nvptx64-unknown-unknown -fopenmp-targets=nvptx64-nvidia-cuda -fopenmp-cuda-mode -emit-llvm %s -fopenmp-is-target-device -fopenmp-host-ir-file-path %t-ppc-host.bc -o - -debug-info-kind=limited -fopenmp-version=45 | FileCheck %s --check-prefix=CHECK1
// expected-no-diagnostics

template <unsigned *ddd>
struct S {
  static int a;
};

extern unsigned aaa;
template<> int S<&aaa>::a;

template struct S<&aaa>;

int main() {
  /* int(*b)[a]; */
  /* int *(**c)[a]; */
  bool bb;
  int a;
  int b[10][10];
  int c[10][10][10];
#pragma omp target parallel firstprivate(a, b) map(tofrom          \
                                                   : c) map(tofrom \
                                                            : bb) if (target:a)
  {
    int &f = c[1][1][1];
    int &g = a;
    int &h = b[1][1];
    int d = 15;
    a = 5;
    b[0][a] = 10;
    c[0][0][a] = 11;
    b[0][a] = c[0][0][a];
    bb |= b[0][a];
  }
#pragma omp target parallel firstprivate(a) map(tofrom         \
                                                : c, b) map(to \
                                                            : bb)
  {
    int &f = c[1][1][1];
    int &g = a;
    int &h = b[1][1];
    int d = 15;
    a = 5;
    b[0][a] = 10;
    c[0][0][a] = 11;
    b[0][a] = c[0][0][a];
    d = bb;
  }
#pragma omp target parallel map(tofrom              \
                                : a, c, b) map(from \
                                               : bb)
  {
    int &f = c[1][1][1];
    int &g = a;
    int &h = b[1][1];
    int d = 15;
    a = 5;
    b[0][a] = 10;
    c[0][0][a] = 11;
    b[0][a] = c[0][0][a];
    bb = b[0][a];
  }
  return 0;
}
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l23_debug__
// CHECK1-SAME: (ptr noalias noundef [[DYN_PTR:%.*]], ptr addrspace(1) noalias noundef [[C:%.*]], i32 noundef [[A:%.*]], ptr noalias noundef [[B:%.*]], ptr addrspace(1) noalias noundef [[BB:%.*]]) #[[ATTR0:[0-9]+]] !dbg [[DBG20:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DYN_PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[TMP:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP2:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[A_CASTED:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK1-NEXT:    [[CAPTURED_VARS_ADDRS:%.*]] = alloca [4 x ptr], align 8, addrspace(5)
// CHECK1-NEXT:    [[DYN_PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DYN_PTR_ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    [[TMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[TMP]] to ptr
// CHECK1-NEXT:    [[TMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP1]] to ptr
// CHECK1-NEXT:    [[TMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP2]] to ptr
// CHECK1-NEXT:    [[A_CASTED_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_CASTED]] to ptr
// CHECK1-NEXT:    [[CAPTURED_VARS_ADDRS_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CAPTURED_VARS_ADDRS]] to ptr
// CHECK1-NEXT:    store ptr [[DYN_PTR]], ptr [[DYN_PTR_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DYN_PTR_ADDR]], [[META39:![0-9]+]], !DIExpression(), [[META40:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META41:![0-9]+]], !DIExpression(), [[META42:![0-9]+]])
// CHECK1-NEXT:    store i32 [[A]], ptr [[A_ADDR_ASCAST]], align 4
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META43:![0-9]+]], !DIExpression(), [[META44:![0-9]+]])
// CHECK1-NEXT:    store ptr [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META45:![0-9]+]], !DIExpression(), [[META46:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META47:![0-9]+]], !DIExpression(), [[META48:![0-9]+]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr addrspace(1), ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG49:![0-9]+]]
// CHECK1-NEXT:    [[TMP1:%.*]] = addrspacecast ptr addrspace(1) [[TMP0]] to ptr, !dbg [[DBG49]]
// CHECK1-NEXT:    store ptr [[TMP1]], ptr [[TMP_ASCAST]], align 8, !dbg [[DBG49]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP_ASCAST]], align 8, !dbg [[DBG49]], !nonnull [[META38:![0-9]+]], !align [[META50:![0-9]+]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG49]]
// CHECK1-NEXT:    store ptr [[TMP3]], ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG49]]
// CHECK1-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG49]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load ptr addrspace(1), ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG49]]
// CHECK1-NEXT:    [[TMP6:%.*]] = addrspacecast ptr addrspace(1) [[TMP5]] to ptr, !dbg [[DBG49]]
// CHECK1-NEXT:    store ptr [[TMP6]], ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG49]]
// CHECK1-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG49]], !nonnull [[META38]]
// CHECK1-NEXT:    [[TMP8:%.*]] = call i32 @__kmpc_target_init(ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l23_kernel_environment, ptr [[DYN_PTR]]), !dbg [[DBG49]]
// CHECK1-NEXT:    [[EXEC_USER_CODE:%.*]] = icmp eq i32 [[TMP8]], -1, !dbg [[DBG49]]
// CHECK1-NEXT:    br i1 [[EXEC_USER_CODE]], label [[USER_CODE_ENTRY:%.*]], label [[WORKER_EXIT:%.*]], !dbg [[DBG49]]
// CHECK1:       user_code.entry:
// CHECK1-NEXT:    [[TMP9:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB3:[0-9]+]]), !dbg [[DBG51:![0-9]+]]
// CHECK1-NEXT:    [[TMP10:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG53:![0-9]+]]
// CHECK1-NEXT:    store i32 [[TMP10]], ptr [[A_CASTED_ASCAST]], align 4, !dbg [[DBG53]]
// CHECK1-NEXT:    [[TMP11:%.*]] = load i64, ptr [[A_CASTED_ASCAST]], align 8, !dbg [[DBG53]]
// CHECK1-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 0, !dbg [[DBG53]]
// CHECK1-NEXT:    store ptr [[TMP2]], ptr [[TMP12]], align 8, !dbg [[DBG53]]
// CHECK1-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 1, !dbg [[DBG53]]
// CHECK1-NEXT:    [[TMP14:%.*]] = inttoptr i64 [[TMP11]] to ptr, !dbg [[DBG53]]
// CHECK1-NEXT:    store ptr [[TMP14]], ptr [[TMP13]], align 8, !dbg [[DBG53]]
// CHECK1-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 2, !dbg [[DBG53]]
// CHECK1-NEXT:    store ptr [[TMP4]], ptr [[TMP15]], align 8, !dbg [[DBG53]]
// CHECK1-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 3, !dbg [[DBG53]]
// CHECK1-NEXT:    store ptr [[TMP7]], ptr [[TMP16]], align 8, !dbg [[DBG53]]
// CHECK1-NEXT:    call void @__kmpc_parallel_51(ptr @[[GLOB3]], i32 [[TMP9]], i32 1, i32 -1, i32 -1, ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l23_debug___omp_outlined, ptr null, ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 4), !dbg [[DBG53]]
// CHECK1-NEXT:    call void @__kmpc_target_deinit(), !dbg [[DBG54:![0-9]+]]
// CHECK1-NEXT:    ret void, !dbg [[DBG55:![0-9]+]]
// CHECK1:       worker.exit:
// CHECK1-NEXT:    ret void, !dbg [[DBG49]]
//
//
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l23
// CHECK1-SAME: (ptr noalias noundef [[DYN_PTR:%.*]], ptr noundef nonnull align 4 dereferenceable(4000) [[C:%.*]], i64 noundef [[A:%.*]], ptr noundef nonnull align 4 dereferenceable(400) [[B:%.*]], ptr noundef nonnull align 1 dereferenceable(1) [[BB:%.*]]) #[[ATTR1:[0-9]+]] !dbg [[DBG56:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DYN_PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DYN_PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DYN_PTR_ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    store ptr [[DYN_PTR]], ptr [[DYN_PTR_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DYN_PTR_ADDR]], [[META63:![0-9]+]], !DIExpression(), [[META64:![0-9]+]])
// CHECK1-NEXT:    store ptr [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META65:![0-9]+]], !DIExpression(), [[META64]])
// CHECK1-NEXT:    store i64 [[A]], ptr [[A_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META66:![0-9]+]], !DIExpression(), [[META64]])
// CHECK1-NEXT:    store ptr [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META67:![0-9]+]], !DIExpression(), [[META64]])
// CHECK1-NEXT:    store ptr [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META68:![0-9]+]], !DIExpression(), [[META64]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG69:![0-9]+]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG69]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG69]], !nonnull [[META38]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DYN_PTR_ADDR_ASCAST]], align 8, !dbg [[DBG69]]
// CHECK1-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG69]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG69]]
// CHECK1-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG69]]
// CHECK1-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG69]]
// CHECK1-NEXT:    [[TMP8:%.*]] = addrspacecast ptr [[TMP4]] to ptr addrspace(1), !dbg [[DBG69]]
// CHECK1-NEXT:    [[TMP9:%.*]] = addrspacecast ptr [[TMP7]] to ptr addrspace(1), !dbg [[DBG69]]
// CHECK1-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l23_debug__(ptr [[TMP3]], ptr addrspace(1) [[TMP8]], i32 [[TMP5]], ptr [[TMP6]], ptr addrspace(1) [[TMP9]]) #[[ATTR3:[0-9]+]], !dbg [[DBG69]]
// CHECK1-NEXT:    ret void, !dbg [[DBG69]]
//
//
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l23_debug___omp_outlined_debug__
// CHECK1-SAME: (ptr noalias noundef [[DOTGLOBAL_TID_:%.*]], ptr noalias noundef [[DOTBOUND_TID_:%.*]], ptr addrspace(1) noalias noundef [[C:%.*]], i32 noundef [[A:%.*]], ptr noalias noundef [[B:%.*]], ptr addrspace(1) noalias noundef [[BB:%.*]]) #[[ATTR0]] !dbg [[DBG70:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[TMP:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP2:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[B3:%.*]] = alloca [10 x [10 x i32]], align 4, addrspace(5)
// CHECK1-NEXT:    [[F:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[G:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[H:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[D:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTBOUND_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    [[TMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[TMP]] to ptr
// CHECK1-NEXT:    [[TMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP1]] to ptr
// CHECK1-NEXT:    [[TMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP2]] to ptr
// CHECK1-NEXT:    [[B3_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B3]] to ptr
// CHECK1-NEXT:    [[F_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[F]] to ptr
// CHECK1-NEXT:    [[G_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[G]] to ptr
// CHECK1-NEXT:    [[H_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[H]] to ptr
// CHECK1-NEXT:    [[D_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[D]] to ptr
// CHECK1-NEXT:    store ptr [[DOTGLOBAL_TID_]], ptr [[DOTGLOBAL_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]], [[META77:![0-9]+]], !DIExpression(), [[META78:![0-9]+]])
// CHECK1-NEXT:    store ptr [[DOTBOUND_TID_]], ptr [[DOTBOUND_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTBOUND_TID__ADDR]], [[META79:![0-9]+]], !DIExpression(), [[META78]])
// CHECK1-NEXT:    store ptr addrspace(1) [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META80:![0-9]+]], !DIExpression(), [[META81:![0-9]+]])
// CHECK1-NEXT:    store i32 [[A]], ptr [[A_ADDR_ASCAST]], align 4
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META82:![0-9]+]], !DIExpression(), [[META83:![0-9]+]])
// CHECK1-NEXT:    store ptr [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META84:![0-9]+]], !DIExpression(), [[META85:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META86:![0-9]+]], !DIExpression(), [[META87:![0-9]+]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr addrspace(1), ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG88:![0-9]+]]
// CHECK1-NEXT:    [[TMP1:%.*]] = addrspacecast ptr addrspace(1) [[TMP0]] to ptr, !dbg [[DBG88]]
// CHECK1-NEXT:    store ptr [[TMP1]], ptr [[TMP_ASCAST]], align 8, !dbg [[DBG88]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP_ASCAST]], align 8, !dbg [[DBG88]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG88]]
// CHECK1-NEXT:    store ptr [[TMP3]], ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG88]]
// CHECK1-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG88]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load ptr addrspace(1), ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG88]]
// CHECK1-NEXT:    [[TMP6:%.*]] = addrspacecast ptr addrspace(1) [[TMP5]] to ptr, !dbg [[DBG88]]
// CHECK1-NEXT:    store ptr [[TMP6]], ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG88]]
// CHECK1-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG88]], !nonnull [[META38]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B3]], [[META89:![0-9]+]], !DIExpression(), [[META78]])
// CHECK1-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[B3_ASCAST]], ptr align 4 [[TMP4]], i64 400, i1 false), !dbg [[DBG88]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[F]], [[META90:![0-9]+]], !DIExpression(), [[META93:![0-9]+]])
// CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [10 x [10 x [10 x i32]]], ptr [[TMP2]], i64 0, i64 1, !dbg [[DBG94:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[ARRAYIDX]], i64 0, i64 1, !dbg [[DBG94]]
// CHECK1-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX4]], i64 0, i64 1, !dbg [[DBG94]]
// CHECK1-NEXT:    store ptr [[ARRAYIDX5]], ptr [[F_ASCAST]], align 8, !dbg [[META93]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[G]], [[META95:![0-9]+]], !DIExpression(), [[META96:![0-9]+]])
// CHECK1-NEXT:    store ptr [[A_ADDR_ASCAST]], ptr [[G_ASCAST]], align 8, !dbg [[META96]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[H]], [[META97:![0-9]+]], !DIExpression(), [[META98:![0-9]+]])
// CHECK1-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[B3_ASCAST]], i64 0, i64 1, !dbg [[DBG99:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX6]], i64 0, i64 1, !dbg [[DBG99]]
// CHECK1-NEXT:    store ptr [[ARRAYIDX7]], ptr [[H_ASCAST]], align 8, !dbg [[META98]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[D]], [[META100:![0-9]+]], !DIExpression(), [[META101:![0-9]+]])
// CHECK1-NEXT:    store i32 15, ptr [[D_ASCAST]], align 4, !dbg [[META101]]
// CHECK1-NEXT:    store i32 5, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG102:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[B3_ASCAST]], i64 0, i64 0, !dbg [[DBG103:![0-9]+]]
// CHECK1-NEXT:    [[TMP8:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG104:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM:%.*]] = sext i32 [[TMP8]] to i64, !dbg [[DBG103]]
// CHECK1-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX8]], i64 0, i64 [[IDXPROM]], !dbg [[DBG103]]
// CHECK1-NEXT:    store i32 10, ptr [[ARRAYIDX9]], align 4, !dbg [[DBG105:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX10:%.*]] = getelementptr inbounds [10 x [10 x [10 x i32]]], ptr [[TMP2]], i64 0, i64 0, !dbg [[DBG106:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX11:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[ARRAYIDX10]], i64 0, i64 0, !dbg [[DBG106]]
// CHECK1-NEXT:    [[TMP9:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG107:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM12:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG106]]
// CHECK1-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX11]], i64 0, i64 [[IDXPROM12]], !dbg [[DBG106]]
// CHECK1-NEXT:    store i32 11, ptr [[ARRAYIDX13]], align 4, !dbg [[DBG108:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX14:%.*]] = getelementptr inbounds [10 x [10 x [10 x i32]]], ptr [[TMP2]], i64 0, i64 0, !dbg [[DBG109:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[ARRAYIDX14]], i64 0, i64 0, !dbg [[DBG109]]
// CHECK1-NEXT:    [[TMP10:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG110:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM16:%.*]] = sext i32 [[TMP10]] to i64, !dbg [[DBG109]]
// CHECK1-NEXT:    [[ARRAYIDX17:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX15]], i64 0, i64 [[IDXPROM16]], !dbg [[DBG109]]
// CHECK1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[ARRAYIDX17]], align 4, !dbg [[DBG109]]
// CHECK1-NEXT:    [[ARRAYIDX18:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[B3_ASCAST]], i64 0, i64 0, !dbg [[DBG111:![0-9]+]]
// CHECK1-NEXT:    [[TMP12:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG112:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM19:%.*]] = sext i32 [[TMP12]] to i64, !dbg [[DBG111]]
// CHECK1-NEXT:    [[ARRAYIDX20:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX18]], i64 0, i64 [[IDXPROM19]], !dbg [[DBG111]]
// CHECK1-NEXT:    store i32 [[TMP11]], ptr [[ARRAYIDX20]], align 4, !dbg [[DBG113:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX21:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[B3_ASCAST]], i64 0, i64 0, !dbg [[DBG114:![0-9]+]]
// CHECK1-NEXT:    [[TMP13:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG115:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM22:%.*]] = sext i32 [[TMP13]] to i64, !dbg [[DBG114]]
// CHECK1-NEXT:    [[ARRAYIDX23:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX21]], i64 0, i64 [[IDXPROM22]], !dbg [[DBG114]]
// CHECK1-NEXT:    [[TMP14:%.*]] = load i32, ptr [[ARRAYIDX23]], align 4, !dbg [[DBG114]]
// CHECK1-NEXT:    [[TMP15:%.*]] = load i8, ptr [[TMP7]], align 1, !dbg [[DBG116:![0-9]+]]
// CHECK1-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP15]] to i1, !dbg [[DBG116]]
// CHECK1-NEXT:    [[CONV:%.*]] = zext i1 [[LOADEDV]] to i32, !dbg [[DBG116]]
// CHECK1-NEXT:    [[OR:%.*]] = or i32 [[CONV]], [[TMP14]], !dbg [[DBG116]]
// CHECK1-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[OR]], 0, !dbg [[DBG116]]
// CHECK1-NEXT:    [[STOREDV:%.*]] = zext i1 [[TOBOOL]] to i8, !dbg [[DBG116]]
// CHECK1-NEXT:    store i8 [[STOREDV]], ptr [[TMP7]], align 1, !dbg [[DBG116]]
// CHECK1-NEXT:    ret void, !dbg [[DBG117:![0-9]+]]
//
//
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l23_debug___omp_outlined
// CHECK1-SAME: (ptr noalias noundef [[DOTGLOBAL_TID_:%.*]], ptr noalias noundef [[DOTBOUND_TID_:%.*]], ptr noundef nonnull align 4 dereferenceable(4000) [[C:%.*]], i64 noundef [[A:%.*]], ptr noundef nonnull align 4 dereferenceable(400) [[B:%.*]], ptr noundef nonnull align 1 dereferenceable(1) [[BB:%.*]]) #[[ATTR0]] !dbg [[DBG118:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTBOUND_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    store ptr [[DOTGLOBAL_TID_]], ptr [[DOTGLOBAL_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]], [[META121:![0-9]+]], !DIExpression(), [[META122:![0-9]+]])
// CHECK1-NEXT:    store ptr [[DOTBOUND_TID_]], ptr [[DOTBOUND_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTBOUND_TID__ADDR]], [[META123:![0-9]+]], !DIExpression(), [[META122]])
// CHECK1-NEXT:    store ptr [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META124:![0-9]+]], !DIExpression(), [[META122]])
// CHECK1-NEXT:    store i64 [[A]], ptr [[A_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META125:![0-9]+]], !DIExpression(), [[META122]])
// CHECK1-NEXT:    store ptr [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META126:![0-9]+]], !DIExpression(), [[META122]])
// CHECK1-NEXT:    store ptr [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META127:![0-9]+]], !DIExpression(), [[META122]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG128:![0-9]+]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG128]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG128]], !nonnull [[META38]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTGLOBAL_TID__ADDR_ASCAST]], align 8, !dbg [[DBG128]]
// CHECK1-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTBOUND_TID__ADDR_ASCAST]], align 8, !dbg [[DBG128]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG128]]
// CHECK1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG128]]
// CHECK1-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG128]]
// CHECK1-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG128]]
// CHECK1-NEXT:    [[TMP9:%.*]] = addrspacecast ptr [[TMP5]] to ptr addrspace(1), !dbg [[DBG128]]
// CHECK1-NEXT:    [[TMP10:%.*]] = addrspacecast ptr [[TMP8]] to ptr addrspace(1), !dbg [[DBG128]]
// CHECK1-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l23_debug___omp_outlined_debug__(ptr [[TMP3]], ptr [[TMP4]], ptr addrspace(1) [[TMP9]], i32 [[TMP6]], ptr [[TMP7]], ptr addrspace(1) [[TMP10]]) #[[ATTR3]], !dbg [[DBG128]]
// CHECK1-NEXT:    ret void, !dbg [[DBG128]]
//
//
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l37_debug__
// CHECK1-SAME: (ptr noalias noundef [[DYN_PTR:%.*]], ptr addrspace(1) noalias noundef [[C:%.*]], i32 noundef [[A:%.*]], ptr addrspace(1) noalias noundef [[B:%.*]], ptr addrspace(1) noalias noundef [[BB:%.*]]) #[[ATTR0]] !dbg [[DBG129:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DYN_PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[TMP:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP2:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[A_CASTED:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK1-NEXT:    [[CAPTURED_VARS_ADDRS:%.*]] = alloca [4 x ptr], align 8, addrspace(5)
// CHECK1-NEXT:    [[DYN_PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DYN_PTR_ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    [[TMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[TMP]] to ptr
// CHECK1-NEXT:    [[TMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP1]] to ptr
// CHECK1-NEXT:    [[TMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP2]] to ptr
// CHECK1-NEXT:    [[A_CASTED_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_CASTED]] to ptr
// CHECK1-NEXT:    [[CAPTURED_VARS_ADDRS_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CAPTURED_VARS_ADDRS]] to ptr
// CHECK1-NEXT:    store ptr [[DYN_PTR]], ptr [[DYN_PTR_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DYN_PTR_ADDR]], [[META134:![0-9]+]], !DIExpression(), [[META135:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META136:![0-9]+]], !DIExpression(), [[META137:![0-9]+]])
// CHECK1-NEXT:    store i32 [[A]], ptr [[A_ADDR_ASCAST]], align 4
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META138:![0-9]+]], !DIExpression(), [[META139:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META140:![0-9]+]], !DIExpression(), [[META141:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META142:![0-9]+]], !DIExpression(), [[META143:![0-9]+]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr addrspace(1), ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG144:![0-9]+]]
// CHECK1-NEXT:    [[TMP1:%.*]] = addrspacecast ptr addrspace(1) [[TMP0]] to ptr, !dbg [[DBG144]]
// CHECK1-NEXT:    store ptr [[TMP1]], ptr [[TMP_ASCAST]], align 8, !dbg [[DBG144]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP_ASCAST]], align 8, !dbg [[DBG144]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr addrspace(1), ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG144]]
// CHECK1-NEXT:    [[TMP4:%.*]] = addrspacecast ptr addrspace(1) [[TMP3]] to ptr, !dbg [[DBG144]]
// CHECK1-NEXT:    store ptr [[TMP4]], ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG144]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG144]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP6:%.*]] = load ptr addrspace(1), ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG144]]
// CHECK1-NEXT:    [[TMP7:%.*]] = addrspacecast ptr addrspace(1) [[TMP6]] to ptr, !dbg [[DBG144]]
// CHECK1-NEXT:    store ptr [[TMP7]], ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG144]]
// CHECK1-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG144]], !nonnull [[META38]]
// CHECK1-NEXT:    [[TMP9:%.*]] = call i32 @__kmpc_target_init(ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l37_kernel_environment, ptr [[DYN_PTR]]), !dbg [[DBG144]]
// CHECK1-NEXT:    [[EXEC_USER_CODE:%.*]] = icmp eq i32 [[TMP9]], -1, !dbg [[DBG144]]
// CHECK1-NEXT:    br i1 [[EXEC_USER_CODE]], label [[USER_CODE_ENTRY:%.*]], label [[WORKER_EXIT:%.*]], !dbg [[DBG144]]
// CHECK1:       user_code.entry:
// CHECK1-NEXT:    [[TMP10:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB7:[0-9]+]]), !dbg [[DBG145:![0-9]+]]
// CHECK1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG147:![0-9]+]]
// CHECK1-NEXT:    store i32 [[TMP11]], ptr [[A_CASTED_ASCAST]], align 4, !dbg [[DBG147]]
// CHECK1-NEXT:    [[TMP12:%.*]] = load i64, ptr [[A_CASTED_ASCAST]], align 8, !dbg [[DBG147]]
// CHECK1-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 0, !dbg [[DBG147]]
// CHECK1-NEXT:    store ptr [[TMP2]], ptr [[TMP13]], align 8, !dbg [[DBG147]]
// CHECK1-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 1, !dbg [[DBG147]]
// CHECK1-NEXT:    [[TMP15:%.*]] = inttoptr i64 [[TMP12]] to ptr, !dbg [[DBG147]]
// CHECK1-NEXT:    store ptr [[TMP15]], ptr [[TMP14]], align 8, !dbg [[DBG147]]
// CHECK1-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 2, !dbg [[DBG147]]
// CHECK1-NEXT:    store ptr [[TMP5]], ptr [[TMP16]], align 8, !dbg [[DBG147]]
// CHECK1-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 3, !dbg [[DBG147]]
// CHECK1-NEXT:    store ptr [[TMP8]], ptr [[TMP17]], align 8, !dbg [[DBG147]]
// CHECK1-NEXT:    call void @__kmpc_parallel_51(ptr @[[GLOB7]], i32 [[TMP10]], i32 1, i32 -1, i32 -1, ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l37_debug___omp_outlined, ptr null, ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 4), !dbg [[DBG147]]
// CHECK1-NEXT:    call void @__kmpc_target_deinit(), !dbg [[DBG148:![0-9]+]]
// CHECK1-NEXT:    ret void, !dbg [[DBG149:![0-9]+]]
// CHECK1:       worker.exit:
// CHECK1-NEXT:    ret void, !dbg [[DBG144]]
//
//
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l37
// CHECK1-SAME: (ptr noalias noundef [[DYN_PTR:%.*]], ptr noundef nonnull align 4 dereferenceable(4000) [[C:%.*]], i64 noundef [[A:%.*]], ptr noundef nonnull align 4 dereferenceable(400) [[B:%.*]], ptr noundef nonnull align 1 dereferenceable(1) [[BB:%.*]]) #[[ATTR1]] !dbg [[DBG150:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DYN_PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DYN_PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DYN_PTR_ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    store ptr [[DYN_PTR]], ptr [[DYN_PTR_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DYN_PTR_ADDR]], [[META151:![0-9]+]], !DIExpression(), [[META152:![0-9]+]])
// CHECK1-NEXT:    store ptr [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META153:![0-9]+]], !DIExpression(), [[META152]])
// CHECK1-NEXT:    store i64 [[A]], ptr [[A_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META154:![0-9]+]], !DIExpression(), [[META152]])
// CHECK1-NEXT:    store ptr [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META155:![0-9]+]], !DIExpression(), [[META152]])
// CHECK1-NEXT:    store ptr [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META156:![0-9]+]], !DIExpression(), [[META152]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG157:![0-9]+]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG157]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG157]], !nonnull [[META38]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DYN_PTR_ADDR_ASCAST]], align 8, !dbg [[DBG157]]
// CHECK1-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG157]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG157]]
// CHECK1-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG157]]
// CHECK1-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG157]]
// CHECK1-NEXT:    [[TMP8:%.*]] = addrspacecast ptr [[TMP4]] to ptr addrspace(1), !dbg [[DBG157]]
// CHECK1-NEXT:    [[TMP9:%.*]] = addrspacecast ptr [[TMP6]] to ptr addrspace(1), !dbg [[DBG157]]
// CHECK1-NEXT:    [[TMP10:%.*]] = addrspacecast ptr [[TMP7]] to ptr addrspace(1), !dbg [[DBG157]]
// CHECK1-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l37_debug__(ptr [[TMP3]], ptr addrspace(1) [[TMP8]], i32 [[TMP5]], ptr addrspace(1) [[TMP9]], ptr addrspace(1) [[TMP10]]) #[[ATTR3]], !dbg [[DBG157]]
// CHECK1-NEXT:    ret void, !dbg [[DBG157]]
//
//
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l37_debug___omp_outlined_debug__
// CHECK1-SAME: (ptr noalias noundef [[DOTGLOBAL_TID_:%.*]], ptr noalias noundef [[DOTBOUND_TID_:%.*]], ptr addrspace(1) noalias noundef [[C:%.*]], i32 noundef [[A:%.*]], ptr addrspace(1) noalias noundef [[B:%.*]], ptr addrspace(1) noalias noundef [[BB:%.*]]) #[[ATTR0]] !dbg [[DBG158:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[TMP:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP2:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[F:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[G:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[H:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[D:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTBOUND_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    [[TMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[TMP]] to ptr
// CHECK1-NEXT:    [[TMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP1]] to ptr
// CHECK1-NEXT:    [[TMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP2]] to ptr
// CHECK1-NEXT:    [[F_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[F]] to ptr
// CHECK1-NEXT:    [[G_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[G]] to ptr
// CHECK1-NEXT:    [[H_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[H]] to ptr
// CHECK1-NEXT:    [[D_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[D]] to ptr
// CHECK1-NEXT:    store ptr [[DOTGLOBAL_TID_]], ptr [[DOTGLOBAL_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]], [[META161:![0-9]+]], !DIExpression(), [[META162:![0-9]+]])
// CHECK1-NEXT:    store ptr [[DOTBOUND_TID_]], ptr [[DOTBOUND_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTBOUND_TID__ADDR]], [[META163:![0-9]+]], !DIExpression(), [[META162]])
// CHECK1-NEXT:    store ptr addrspace(1) [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META164:![0-9]+]], !DIExpression(), [[META165:![0-9]+]])
// CHECK1-NEXT:    store i32 [[A]], ptr [[A_ADDR_ASCAST]], align 4
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META166:![0-9]+]], !DIExpression(), [[META167:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META168:![0-9]+]], !DIExpression(), [[META169:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META170:![0-9]+]], !DIExpression(), [[META171:![0-9]+]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr addrspace(1), ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG172:![0-9]+]]
// CHECK1-NEXT:    [[TMP1:%.*]] = addrspacecast ptr addrspace(1) [[TMP0]] to ptr, !dbg [[DBG172]]
// CHECK1-NEXT:    store ptr [[TMP1]], ptr [[TMP_ASCAST]], align 8, !dbg [[DBG172]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP_ASCAST]], align 8, !dbg [[DBG172]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr addrspace(1), ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG172]]
// CHECK1-NEXT:    [[TMP4:%.*]] = addrspacecast ptr addrspace(1) [[TMP3]] to ptr, !dbg [[DBG172]]
// CHECK1-NEXT:    store ptr [[TMP4]], ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG172]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG172]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP6:%.*]] = load ptr addrspace(1), ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG172]]
// CHECK1-NEXT:    [[TMP7:%.*]] = addrspacecast ptr addrspace(1) [[TMP6]] to ptr, !dbg [[DBG172]]
// CHECK1-NEXT:    store ptr [[TMP7]], ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG172]]
// CHECK1-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG172]], !nonnull [[META38]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[F]], [[META173:![0-9]+]], !DIExpression(), [[META175:![0-9]+]])
// CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [10 x [10 x [10 x i32]]], ptr [[TMP2]], i64 0, i64 1, !dbg [[DBG176:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[ARRAYIDX]], i64 0, i64 1, !dbg [[DBG176]]
// CHECK1-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX3]], i64 0, i64 1, !dbg [[DBG176]]
// CHECK1-NEXT:    store ptr [[ARRAYIDX4]], ptr [[F_ASCAST]], align 8, !dbg [[META175]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[G]], [[META177:![0-9]+]], !DIExpression(), [[META178:![0-9]+]])
// CHECK1-NEXT:    store ptr [[A_ADDR_ASCAST]], ptr [[G_ASCAST]], align 8, !dbg [[META178]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[H]], [[META179:![0-9]+]], !DIExpression(), [[META180:![0-9]+]])
// CHECK1-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[TMP5]], i64 0, i64 1, !dbg [[DBG181:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX5]], i64 0, i64 1, !dbg [[DBG181]]
// CHECK1-NEXT:    store ptr [[ARRAYIDX6]], ptr [[H_ASCAST]], align 8, !dbg [[META180]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[D]], [[META182:![0-9]+]], !DIExpression(), [[META183:![0-9]+]])
// CHECK1-NEXT:    store i32 15, ptr [[D_ASCAST]], align 4, !dbg [[META183]]
// CHECK1-NEXT:    store i32 5, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG184:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[TMP5]], i64 0, i64 0, !dbg [[DBG185:![0-9]+]]
// CHECK1-NEXT:    [[TMP9:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG186:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM:%.*]] = sext i32 [[TMP9]] to i64, !dbg [[DBG185]]
// CHECK1-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX7]], i64 0, i64 [[IDXPROM]], !dbg [[DBG185]]
// CHECK1-NEXT:    store i32 10, ptr [[ARRAYIDX8]], align 4, !dbg [[DBG187:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds [10 x [10 x [10 x i32]]], ptr [[TMP2]], i64 0, i64 0, !dbg [[DBG188:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX10:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[ARRAYIDX9]], i64 0, i64 0, !dbg [[DBG188]]
// CHECK1-NEXT:    [[TMP10:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG189:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM11:%.*]] = sext i32 [[TMP10]] to i64, !dbg [[DBG188]]
// CHECK1-NEXT:    [[ARRAYIDX12:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX10]], i64 0, i64 [[IDXPROM11]], !dbg [[DBG188]]
// CHECK1-NEXT:    store i32 11, ptr [[ARRAYIDX12]], align 4, !dbg [[DBG190:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds [10 x [10 x [10 x i32]]], ptr [[TMP2]], i64 0, i64 0, !dbg [[DBG191:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX14:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[ARRAYIDX13]], i64 0, i64 0, !dbg [[DBG191]]
// CHECK1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG192:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM15:%.*]] = sext i32 [[TMP11]] to i64, !dbg [[DBG191]]
// CHECK1-NEXT:    [[ARRAYIDX16:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX14]], i64 0, i64 [[IDXPROM15]], !dbg [[DBG191]]
// CHECK1-NEXT:    [[TMP12:%.*]] = load i32, ptr [[ARRAYIDX16]], align 4, !dbg [[DBG191]]
// CHECK1-NEXT:    [[ARRAYIDX17:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[TMP5]], i64 0, i64 0, !dbg [[DBG193:![0-9]+]]
// CHECK1-NEXT:    [[TMP13:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG194:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM18:%.*]] = sext i32 [[TMP13]] to i64, !dbg [[DBG193]]
// CHECK1-NEXT:    [[ARRAYIDX19:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX17]], i64 0, i64 [[IDXPROM18]], !dbg [[DBG193]]
// CHECK1-NEXT:    store i32 [[TMP12]], ptr [[ARRAYIDX19]], align 4, !dbg [[DBG195:![0-9]+]]
// CHECK1-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP8]], align 1, !dbg [[DBG196:![0-9]+]]
// CHECK1-NEXT:    [[LOADEDV:%.*]] = trunc i8 [[TMP14]] to i1, !dbg [[DBG196]]
// CHECK1-NEXT:    [[CONV:%.*]] = zext i1 [[LOADEDV]] to i32, !dbg [[DBG196]]
// CHECK1-NEXT:    store i32 [[CONV]], ptr [[D_ASCAST]], align 4, !dbg [[DBG197:![0-9]+]]
// CHECK1-NEXT:    ret void, !dbg [[DBG198:![0-9]+]]
//
//
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l37_debug___omp_outlined
// CHECK1-SAME: (ptr noalias noundef [[DOTGLOBAL_TID_:%.*]], ptr noalias noundef [[DOTBOUND_TID_:%.*]], ptr noundef nonnull align 4 dereferenceable(4000) [[C:%.*]], i64 noundef [[A:%.*]], ptr noundef nonnull align 4 dereferenceable(400) [[B:%.*]], ptr noundef nonnull align 1 dereferenceable(1) [[BB:%.*]]) #[[ATTR0]] !dbg [[DBG199:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca i64, align 8, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTBOUND_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    store ptr [[DOTGLOBAL_TID_]], ptr [[DOTGLOBAL_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]], [[META200:![0-9]+]], !DIExpression(), [[META201:![0-9]+]])
// CHECK1-NEXT:    store ptr [[DOTBOUND_TID_]], ptr [[DOTBOUND_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTBOUND_TID__ADDR]], [[META202:![0-9]+]], !DIExpression(), [[META201]])
// CHECK1-NEXT:    store ptr [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META203:![0-9]+]], !DIExpression(), [[META201]])
// CHECK1-NEXT:    store i64 [[A]], ptr [[A_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META204:![0-9]+]], !DIExpression(), [[META201]])
// CHECK1-NEXT:    store ptr [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META205:![0-9]+]], !DIExpression(), [[META201]])
// CHECK1-NEXT:    store ptr [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META206:![0-9]+]], !DIExpression(), [[META201]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG207:![0-9]+]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG207]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG207]], !nonnull [[META38]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTGLOBAL_TID__ADDR_ASCAST]], align 8, !dbg [[DBG207]]
// CHECK1-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTBOUND_TID__ADDR_ASCAST]], align 8, !dbg [[DBG207]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG207]]
// CHECK1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[A_ADDR_ASCAST]], align 4, !dbg [[DBG207]]
// CHECK1-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG207]]
// CHECK1-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG207]]
// CHECK1-NEXT:    [[TMP9:%.*]] = addrspacecast ptr [[TMP5]] to ptr addrspace(1), !dbg [[DBG207]]
// CHECK1-NEXT:    [[TMP10:%.*]] = addrspacecast ptr [[TMP7]] to ptr addrspace(1), !dbg [[DBG207]]
// CHECK1-NEXT:    [[TMP11:%.*]] = addrspacecast ptr [[TMP8]] to ptr addrspace(1), !dbg [[DBG207]]
// CHECK1-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l37_debug___omp_outlined_debug__(ptr [[TMP3]], ptr [[TMP4]], ptr addrspace(1) [[TMP9]], i32 [[TMP6]], ptr addrspace(1) [[TMP10]], ptr addrspace(1) [[TMP11]]) #[[ATTR3]], !dbg [[DBG207]]
// CHECK1-NEXT:    ret void, !dbg [[DBG207]]
//
//
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l51_debug__
// CHECK1-SAME: (ptr noalias noundef [[DYN_PTR:%.*]], ptr addrspace(1) noalias noundef [[C:%.*]], ptr addrspace(1) noalias noundef [[A:%.*]], ptr addrspace(1) noalias noundef [[B:%.*]], ptr addrspace(1) noalias noundef [[BB:%.*]]) #[[ATTR0]] !dbg [[DBG208:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DYN_PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[TMP:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP2:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP3:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[CAPTURED_VARS_ADDRS:%.*]] = alloca [4 x ptr], align 8, addrspace(5)
// CHECK1-NEXT:    [[DYN_PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DYN_PTR_ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    [[TMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[TMP]] to ptr
// CHECK1-NEXT:    [[TMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP1]] to ptr
// CHECK1-NEXT:    [[TMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP2]] to ptr
// CHECK1-NEXT:    [[TMP3_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP3]] to ptr
// CHECK1-NEXT:    [[CAPTURED_VARS_ADDRS_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[CAPTURED_VARS_ADDRS]] to ptr
// CHECK1-NEXT:    store ptr [[DYN_PTR]], ptr [[DYN_PTR_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DYN_PTR_ADDR]], [[META213:![0-9]+]], !DIExpression(), [[META214:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META215:![0-9]+]], !DIExpression(), [[META216:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[A]], ptr [[A_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META217:![0-9]+]], !DIExpression(), [[META218:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META219:![0-9]+]], !DIExpression(), [[META220:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META221:![0-9]+]], !DIExpression(), [[META222:![0-9]+]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr addrspace(1), ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG223:![0-9]+]]
// CHECK1-NEXT:    [[TMP1:%.*]] = addrspacecast ptr addrspace(1) [[TMP0]] to ptr, !dbg [[DBG223]]
// CHECK1-NEXT:    store ptr [[TMP1]], ptr [[TMP_ASCAST]], align 8, !dbg [[DBG223]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP_ASCAST]], align 8, !dbg [[DBG223]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr addrspace(1), ptr [[A_ADDR_ASCAST]], align 8, !dbg [[DBG223]]
// CHECK1-NEXT:    [[TMP4:%.*]] = addrspacecast ptr addrspace(1) [[TMP3]] to ptr, !dbg [[DBG223]]
// CHECK1-NEXT:    store ptr [[TMP4]], ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG223]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG223]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP6:%.*]] = load ptr addrspace(1), ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG223]]
// CHECK1-NEXT:    [[TMP7:%.*]] = addrspacecast ptr addrspace(1) [[TMP6]] to ptr, !dbg [[DBG223]]
// CHECK1-NEXT:    store ptr [[TMP7]], ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG223]]
// CHECK1-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG223]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP9:%.*]] = load ptr addrspace(1), ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG223]]
// CHECK1-NEXT:    [[TMP10:%.*]] = addrspacecast ptr addrspace(1) [[TMP9]] to ptr, !dbg [[DBG223]]
// CHECK1-NEXT:    store ptr [[TMP10]], ptr [[TMP3_ASCAST]], align 8, !dbg [[DBG223]]
// CHECK1-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TMP3_ASCAST]], align 8, !dbg [[DBG223]], !nonnull [[META38]]
// CHECK1-NEXT:    [[TMP12:%.*]] = call i32 @__kmpc_target_init(ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l51_kernel_environment, ptr [[DYN_PTR]]), !dbg [[DBG223]]
// CHECK1-NEXT:    [[EXEC_USER_CODE:%.*]] = icmp eq i32 [[TMP12]], -1, !dbg [[DBG223]]
// CHECK1-NEXT:    br i1 [[EXEC_USER_CODE]], label [[USER_CODE_ENTRY:%.*]], label [[WORKER_EXIT:%.*]], !dbg [[DBG223]]
// CHECK1:       user_code.entry:
// CHECK1-NEXT:    [[TMP13:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB11:[0-9]+]]), !dbg [[DBG224:![0-9]+]]
// CHECK1-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 0, !dbg [[DBG226:![0-9]+]]
// CHECK1-NEXT:    store ptr [[TMP2]], ptr [[TMP14]], align 8, !dbg [[DBG226]]
// CHECK1-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 1, !dbg [[DBG226]]
// CHECK1-NEXT:    store ptr [[TMP5]], ptr [[TMP15]], align 8, !dbg [[DBG226]]
// CHECK1-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 2, !dbg [[DBG226]]
// CHECK1-NEXT:    store ptr [[TMP8]], ptr [[TMP16]], align 8, !dbg [[DBG226]]
// CHECK1-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [4 x ptr], ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 0, i64 3, !dbg [[DBG226]]
// CHECK1-NEXT:    store ptr [[TMP11]], ptr [[TMP17]], align 8, !dbg [[DBG226]]
// CHECK1-NEXT:    call void @__kmpc_parallel_51(ptr @[[GLOB11]], i32 [[TMP13]], i32 1, i32 -1, i32 -1, ptr @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l51_debug___omp_outlined, ptr null, ptr [[CAPTURED_VARS_ADDRS_ASCAST]], i64 4), !dbg [[DBG226]]
// CHECK1-NEXT:    call void @__kmpc_target_deinit(), !dbg [[DBG227:![0-9]+]]
// CHECK1-NEXT:    ret void, !dbg [[DBG228:![0-9]+]]
// CHECK1:       worker.exit:
// CHECK1-NEXT:    ret void, !dbg [[DBG223]]
//
//
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l51
// CHECK1-SAME: (ptr noalias noundef [[DYN_PTR:%.*]], ptr noundef nonnull align 4 dereferenceable(4000) [[C:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[A:%.*]], ptr noundef nonnull align 4 dereferenceable(400) [[B:%.*]], ptr noundef nonnull align 1 dereferenceable(1) [[BB:%.*]]) #[[ATTR1]] !dbg [[DBG229:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DYN_PTR_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DYN_PTR_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DYN_PTR_ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    store ptr [[DYN_PTR]], ptr [[DYN_PTR_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DYN_PTR_ADDR]], [[META232:![0-9]+]], !DIExpression(), [[META233:![0-9]+]])
// CHECK1-NEXT:    store ptr [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META234:![0-9]+]], !DIExpression(), [[META233]])
// CHECK1-NEXT:    store ptr [[A]], ptr [[A_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META235:![0-9]+]], !DIExpression(), [[META233]])
// CHECK1-NEXT:    store ptr [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META236:![0-9]+]], !DIExpression(), [[META233]])
// CHECK1-NEXT:    store ptr [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META237:![0-9]+]], !DIExpression(), [[META233]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG238:![0-9]+]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A_ADDR_ASCAST]], align 8, !dbg [[DBG238]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG238]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG238]], !nonnull [[META38]]
// CHECK1-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DYN_PTR_ADDR_ASCAST]], align 8, !dbg [[DBG238]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG238]]
// CHECK1-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[A_ADDR_ASCAST]], align 8, !dbg [[DBG238]]
// CHECK1-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG238]]
// CHECK1-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG238]]
// CHECK1-NEXT:    [[TMP9:%.*]] = addrspacecast ptr [[TMP5]] to ptr addrspace(1), !dbg [[DBG238]]
// CHECK1-NEXT:    [[TMP10:%.*]] = addrspacecast ptr [[TMP6]] to ptr addrspace(1), !dbg [[DBG238]]
// CHECK1-NEXT:    [[TMP11:%.*]] = addrspacecast ptr [[TMP7]] to ptr addrspace(1), !dbg [[DBG238]]
// CHECK1-NEXT:    [[TMP12:%.*]] = addrspacecast ptr [[TMP8]] to ptr addrspace(1), !dbg [[DBG238]]
// CHECK1-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l51_debug__(ptr [[TMP4]], ptr addrspace(1) [[TMP9]], ptr addrspace(1) [[TMP10]], ptr addrspace(1) [[TMP11]], ptr addrspace(1) [[TMP12]]) #[[ATTR3]], !dbg [[DBG238]]
// CHECK1-NEXT:    ret void, !dbg [[DBG238]]
//
//
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l51_debug___omp_outlined_debug__
// CHECK1-SAME: (ptr noalias noundef [[DOTGLOBAL_TID_:%.*]], ptr noalias noundef [[DOTBOUND_TID_:%.*]], ptr addrspace(1) noalias noundef [[C:%.*]], ptr addrspace(1) noalias noundef [[A:%.*]], ptr addrspace(1) noalias noundef [[B:%.*]], ptr addrspace(1) noalias noundef [[BB:%.*]]) #[[ATTR0]] !dbg [[DBG239:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr addrspace(1), align 8, addrspace(5)
// CHECK1-NEXT:    [[TMP:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP1:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP2:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[_TMP3:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[F:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[G:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[H:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[D:%.*]] = alloca i32, align 4, addrspace(5)
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTBOUND_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    [[TMP_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[TMP]] to ptr
// CHECK1-NEXT:    [[TMP1_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP1]] to ptr
// CHECK1-NEXT:    [[TMP2_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP2]] to ptr
// CHECK1-NEXT:    [[TMP3_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[_TMP3]] to ptr
// CHECK1-NEXT:    [[F_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[F]] to ptr
// CHECK1-NEXT:    [[G_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[G]] to ptr
// CHECK1-NEXT:    [[H_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[H]] to ptr
// CHECK1-NEXT:    [[D_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[D]] to ptr
// CHECK1-NEXT:    store ptr [[DOTGLOBAL_TID_]], ptr [[DOTGLOBAL_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]], [[META242:![0-9]+]], !DIExpression(), [[META243:![0-9]+]])
// CHECK1-NEXT:    store ptr [[DOTBOUND_TID_]], ptr [[DOTBOUND_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTBOUND_TID__ADDR]], [[META244:![0-9]+]], !DIExpression(), [[META243]])
// CHECK1-NEXT:    store ptr addrspace(1) [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META245:![0-9]+]], !DIExpression(), [[META246:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[A]], ptr [[A_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META247:![0-9]+]], !DIExpression(), [[META248:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META249:![0-9]+]], !DIExpression(), [[META250:![0-9]+]])
// CHECK1-NEXT:    store ptr addrspace(1) [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META251:![0-9]+]], !DIExpression(), [[META252:![0-9]+]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr addrspace(1), ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG253:![0-9]+]]
// CHECK1-NEXT:    [[TMP1:%.*]] = addrspacecast ptr addrspace(1) [[TMP0]] to ptr, !dbg [[DBG253]]
// CHECK1-NEXT:    store ptr [[TMP1]], ptr [[TMP_ASCAST]], align 8, !dbg [[DBG253]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[TMP_ASCAST]], align 8, !dbg [[DBG253]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr addrspace(1), ptr [[A_ADDR_ASCAST]], align 8, !dbg [[DBG253]]
// CHECK1-NEXT:    [[TMP4:%.*]] = addrspacecast ptr addrspace(1) [[TMP3]] to ptr, !dbg [[DBG253]]
// CHECK1-NEXT:    store ptr [[TMP4]], ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG253]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP1_ASCAST]], align 8, !dbg [[DBG253]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP6:%.*]] = load ptr addrspace(1), ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG253]]
// CHECK1-NEXT:    [[TMP7:%.*]] = addrspacecast ptr addrspace(1) [[TMP6]] to ptr, !dbg [[DBG253]]
// CHECK1-NEXT:    store ptr [[TMP7]], ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG253]]
// CHECK1-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[TMP2_ASCAST]], align 8, !dbg [[DBG253]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP9:%.*]] = load ptr addrspace(1), ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG253]]
// CHECK1-NEXT:    [[TMP10:%.*]] = addrspacecast ptr addrspace(1) [[TMP9]] to ptr, !dbg [[DBG253]]
// CHECK1-NEXT:    store ptr [[TMP10]], ptr [[TMP3_ASCAST]], align 8, !dbg [[DBG253]]
// CHECK1-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TMP3_ASCAST]], align 8, !dbg [[DBG253]], !nonnull [[META38]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[F]], [[META254:![0-9]+]], !DIExpression(), [[META256:![0-9]+]])
// CHECK1-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [10 x [10 x [10 x i32]]], ptr [[TMP2]], i64 0, i64 1, !dbg [[DBG257:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[ARRAYIDX]], i64 0, i64 1, !dbg [[DBG257]]
// CHECK1-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX4]], i64 0, i64 1, !dbg [[DBG257]]
// CHECK1-NEXT:    store ptr [[ARRAYIDX5]], ptr [[F_ASCAST]], align 8, !dbg [[META256]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[G]], [[META258:![0-9]+]], !DIExpression(), [[META259:![0-9]+]])
// CHECK1-NEXT:    store ptr [[TMP5]], ptr [[G_ASCAST]], align 8, !dbg [[META259]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[H]], [[META260:![0-9]+]], !DIExpression(), [[META261:![0-9]+]])
// CHECK1-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[TMP8]], i64 0, i64 1, !dbg [[DBG262:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX6]], i64 0, i64 1, !dbg [[DBG262]]
// CHECK1-NEXT:    store ptr [[ARRAYIDX7]], ptr [[H_ASCAST]], align 8, !dbg [[META261]]
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[D]], [[META263:![0-9]+]], !DIExpression(), [[META264:![0-9]+]])
// CHECK1-NEXT:    store i32 15, ptr [[D_ASCAST]], align 4, !dbg [[META264]]
// CHECK1-NEXT:    store i32 5, ptr [[TMP5]], align 4, !dbg [[DBG265:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[TMP8]], i64 0, i64 0, !dbg [[DBG266:![0-9]+]]
// CHECK1-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP5]], align 4, !dbg [[DBG267:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM:%.*]] = sext i32 [[TMP12]] to i64, !dbg [[DBG266]]
// CHECK1-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX8]], i64 0, i64 [[IDXPROM]], !dbg [[DBG266]]
// CHECK1-NEXT:    store i32 10, ptr [[ARRAYIDX9]], align 4, !dbg [[DBG268:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX10:%.*]] = getelementptr inbounds [10 x [10 x [10 x i32]]], ptr [[TMP2]], i64 0, i64 0, !dbg [[DBG269:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX11:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[ARRAYIDX10]], i64 0, i64 0, !dbg [[DBG269]]
// CHECK1-NEXT:    [[TMP13:%.*]] = load i32, ptr [[TMP5]], align 4, !dbg [[DBG270:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM12:%.*]] = sext i32 [[TMP13]] to i64, !dbg [[DBG269]]
// CHECK1-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX11]], i64 0, i64 [[IDXPROM12]], !dbg [[DBG269]]
// CHECK1-NEXT:    store i32 11, ptr [[ARRAYIDX13]], align 4, !dbg [[DBG271:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX14:%.*]] = getelementptr inbounds [10 x [10 x [10 x i32]]], ptr [[TMP2]], i64 0, i64 0, !dbg [[DBG272:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[ARRAYIDX14]], i64 0, i64 0, !dbg [[DBG272]]
// CHECK1-NEXT:    [[TMP14:%.*]] = load i32, ptr [[TMP5]], align 4, !dbg [[DBG273:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM16:%.*]] = sext i32 [[TMP14]] to i64, !dbg [[DBG272]]
// CHECK1-NEXT:    [[ARRAYIDX17:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX15]], i64 0, i64 [[IDXPROM16]], !dbg [[DBG272]]
// CHECK1-NEXT:    [[TMP15:%.*]] = load i32, ptr [[ARRAYIDX17]], align 4, !dbg [[DBG272]]
// CHECK1-NEXT:    [[ARRAYIDX18:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[TMP8]], i64 0, i64 0, !dbg [[DBG274:![0-9]+]]
// CHECK1-NEXT:    [[TMP16:%.*]] = load i32, ptr [[TMP5]], align 4, !dbg [[DBG275:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM19:%.*]] = sext i32 [[TMP16]] to i64, !dbg [[DBG274]]
// CHECK1-NEXT:    [[ARRAYIDX20:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX18]], i64 0, i64 [[IDXPROM19]], !dbg [[DBG274]]
// CHECK1-NEXT:    store i32 [[TMP15]], ptr [[ARRAYIDX20]], align 4, !dbg [[DBG276:![0-9]+]]
// CHECK1-NEXT:    [[ARRAYIDX21:%.*]] = getelementptr inbounds [10 x [10 x i32]], ptr [[TMP8]], i64 0, i64 0, !dbg [[DBG277:![0-9]+]]
// CHECK1-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP5]], align 4, !dbg [[DBG278:![0-9]+]]
// CHECK1-NEXT:    [[IDXPROM22:%.*]] = sext i32 [[TMP17]] to i64, !dbg [[DBG277]]
// CHECK1-NEXT:    [[ARRAYIDX23:%.*]] = getelementptr inbounds [10 x i32], ptr [[ARRAYIDX21]], i64 0, i64 [[IDXPROM22]], !dbg [[DBG277]]
// CHECK1-NEXT:    [[TMP18:%.*]] = load i32, ptr [[ARRAYIDX23]], align 4, !dbg [[DBG277]]
// CHECK1-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[TMP18]], 0, !dbg [[DBG277]]
// CHECK1-NEXT:    [[STOREDV:%.*]] = zext i1 [[TOBOOL]] to i8, !dbg [[DBG279:![0-9]+]]
// CHECK1-NEXT:    store i8 [[STOREDV]], ptr [[TMP11]], align 1, !dbg [[DBG279]]
// CHECK1-NEXT:    ret void, !dbg [[DBG280:![0-9]+]]
//
//
// CHECK1-LABEL: define {{[^@]+}}@{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l51_debug___omp_outlined
// CHECK1-SAME: (ptr noalias noundef [[DOTGLOBAL_TID_:%.*]], ptr noalias noundef [[DOTBOUND_TID_:%.*]], ptr noundef nonnull align 4 dereferenceable(4000) [[C:%.*]], ptr noundef nonnull align 4 dereferenceable(4) [[A:%.*]], ptr noundef nonnull align 4 dereferenceable(400) [[B:%.*]], ptr noundef nonnull align 1 dereferenceable(1) [[BB:%.*]]) #[[ATTR0]] !dbg [[DBG281:![0-9]+]] {
// CHECK1-NEXT:  entry:
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[C_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[B_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[BB_ADDR:%.*]] = alloca ptr, align 8, addrspace(5)
// CHECK1-NEXT:    [[DOTGLOBAL_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[DOTBOUND_TID__ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[DOTBOUND_TID__ADDR]] to ptr
// CHECK1-NEXT:    [[C_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[C_ADDR]] to ptr
// CHECK1-NEXT:    [[A_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[A_ADDR]] to ptr
// CHECK1-NEXT:    [[B_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[B_ADDR]] to ptr
// CHECK1-NEXT:    [[BB_ADDR_ASCAST:%.*]] = addrspacecast ptr addrspace(5) [[BB_ADDR]] to ptr
// CHECK1-NEXT:    store ptr [[DOTGLOBAL_TID_]], ptr [[DOTGLOBAL_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTGLOBAL_TID__ADDR]], [[META284:![0-9]+]], !DIExpression(), [[META285:![0-9]+]])
// CHECK1-NEXT:    store ptr [[DOTBOUND_TID_]], ptr [[DOTBOUND_TID__ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[DOTBOUND_TID__ADDR]], [[META286:![0-9]+]], !DIExpression(), [[META285]])
// CHECK1-NEXT:    store ptr [[C]], ptr [[C_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[C_ADDR]], [[META287:![0-9]+]], !DIExpression(), [[META285]])
// CHECK1-NEXT:    store ptr [[A]], ptr [[A_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[A_ADDR]], [[META288:![0-9]+]], !DIExpression(), [[META285]])
// CHECK1-NEXT:    store ptr [[B]], ptr [[B_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[B_ADDR]], [[META289:![0-9]+]], !DIExpression(), [[META285]])
// CHECK1-NEXT:    store ptr [[BB]], ptr [[BB_ADDR_ASCAST]], align 8
// CHECK1-NEXT:      #dbg_declare(ptr addrspace(5) [[BB_ADDR]], [[META290:![0-9]+]], !DIExpression(), [[META285]])
// CHECK1-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG291:![0-9]+]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[A_ADDR_ASCAST]], align 8, !dbg [[DBG291]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG291]], !nonnull [[META38]], !align [[META50]]
// CHECK1-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG291]], !nonnull [[META38]]
// CHECK1-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DOTGLOBAL_TID__ADDR_ASCAST]], align 8, !dbg [[DBG291]]
// CHECK1-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[DOTBOUND_TID__ADDR_ASCAST]], align 8, !dbg [[DBG291]]
// CHECK1-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[C_ADDR_ASCAST]], align 8, !dbg [[DBG291]]
// CHECK1-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[A_ADDR_ASCAST]], align 8, !dbg [[DBG291]]
// CHECK1-NEXT:    [[TMP8:%.*]] = load ptr, ptr [[B_ADDR_ASCAST]], align 8, !dbg [[DBG291]]
// CHECK1-NEXT:    [[TMP9:%.*]] = load ptr, ptr [[BB_ADDR_ASCAST]], align 8, !dbg [[DBG291]]
// CHECK1-NEXT:    [[TMP10:%.*]] = addrspacecast ptr [[TMP6]] to ptr addrspace(1), !dbg [[DBG291]]
// CHECK1-NEXT:    [[TMP11:%.*]] = addrspacecast ptr [[TMP7]] to ptr addrspace(1), !dbg [[DBG291]]
// CHECK1-NEXT:    [[TMP12:%.*]] = addrspacecast ptr [[TMP8]] to ptr addrspace(1), !dbg [[DBG291]]
// CHECK1-NEXT:    [[TMP13:%.*]] = addrspacecast ptr [[TMP9]] to ptr addrspace(1), !dbg [[DBG291]]
// CHECK1-NEXT:    call void @{{__omp_offloading_[0-9a-z]+_[0-9a-z]+}}_main_l51_debug___omp_outlined_debug__(ptr [[TMP4]], ptr [[TMP5]], ptr addrspace(1) [[TMP10]], ptr addrspace(1) [[TMP11]], ptr addrspace(1) [[TMP12]], ptr addrspace(1) [[TMP13]]) #[[ATTR3]], !dbg [[DBG291]]
// CHECK1-NEXT:    ret void, !dbg [[DBG291]]
//
