// RUN: %clang_cc1 -triple x86_64-pc-win32 -ast-dump=json %s | FileCheck %s

#define _INLINE_VAR inline
#define _NODISCARD [[nodiscard]]

// template <class _Ty, _Ty _Val>
// struct integral_constant {
//     static constexpr _Ty value = _Val;

//     using value_type = _Ty;
//     using type       = integral_constant;

//     constexpr operator value_type() const noexcept {
//         return value;
//     }

//     _NODISCARD constexpr value_type operator()() const noexcept {
//         return value;
//     }
// };

// template <bool _Val>
// using bool_constant = integral_constant<bool, _Val>;

template <class>
_INLINE_VAR constexpr bool is_const_v = false; // determine whether type argument is const qualified

template <class _Ty>
_INLINE_VAR constexpr bool is_const_v<const _Ty> = true;

// template <class>
// _INLINE_VAR constexpr bool is_reference_v = false; // determine whether type argument is a reference

// template <class _Ty>
// _INLINE_VAR constexpr bool is_reference_v<_Ty&> = true;

// template <class _Ty>
// _INLINE_VAR constexpr bool is_reference_v<_Ty&&> = true;

// template <class _Ty>
// struct is_reference : bool_constant<is_reference_v<_Ty>> {};

// template <class _Ty>
// _INLINE_VAR constexpr bool is_function_v = // only function types and reference types can't be const qualified
//     !is_const_v<const _Ty> && !is_reference_v<_Ty>;

// template <class _Ty>
// struct is_function : bool_constant<is_function_v<_Ty>> {};

// template <class>
// struct _Is_member_object_pointer {
//     static constexpr bool value = false;
// };

// template <class _Ty1, class _Ty2>
// struct _Is_member_object_pointer<_Ty1 _Ty2::*> {
//     static constexpr bool value = !is_function_v<_Ty1>;
//     using _Class_type           = _Ty2;
// };

// template <class _Ty>
// _INLINE_VAR constexpr bool is_member_object_pointer_v = __is_member_object_pointer(_Ty);

// template <class _Ty>
// struct is_member_object_pointer : bool_constant<is_member_object_pointer_v<_Ty>> {};

// template <class _Ty>
// _INLINE_VAR constexpr bool is_member_pointer_v = __is_member_pointer(_Ty);

// int main()
// {
//     return 0;
// }
// NOTE: CHECK lines have been autogenerated by gen_ast_dump_json_test.py


// CHECK-NOT: {{^}}Dumping
// CHECK:  "kind": "TranslationUnitDecl",
// CHECK-NEXT:  "loc": {},
// CHECK-NEXT:  "range": {
// CHECK-NEXT:   "begin": {},
// CHECK-NEXT:   "end": {}
// CHECK-NEXT:  },
// CHECK-NEXT:  "inner": [
// CHECK-NEXT:   {
// CHECK-NEXT:    "id": "0x{{.*}}",
// CHECK-NEXT:    "kind": "TypedefDecl",
// CHECK-NEXT:    "loc": {},
// CHECK-NEXT:    "range": {
// CHECK-NEXT:     "begin": {},
// CHECK-NEXT:     "end": {}
// CHECK-NEXT:    },
// CHECK-NEXT:    "isImplicit": true,
// CHECK-NEXT:    "name": "__int128_t",
// CHECK-NEXT:    "type": {
// CHECK-NEXT:     "qualType": "__int128"
// CHECK-NEXT:    },
// CHECK-NEXT:    "typeDetails": [
// CHECK-NEXT:     {
// CHECK-NEXT:      "id": "0x{{.*}}",
// CHECK-NEXT:      "kind": "BuiltinType",
// CHECK-NEXT:      "type": {
// CHECK-NEXT:       "qualType": "__int128"
// CHECK-NEXT:      },
// CHECK-NEXT:      "qualDetails": [
// CHECK-NEXT:       "signed",
// CHECK-NEXT:       "integer"
// CHECK-NEXT:      ]
// CHECK-NEXT:     }
// CHECK-NEXT:    ]
// CHECK-NEXT:   },
// CHECK-NEXT:   {
// CHECK-NEXT:    "id": "0x{{.*}}",
// CHECK-NEXT:    "kind": "TypedefDecl",
// CHECK-NEXT:    "loc": {},
// CHECK-NEXT:    "range": {
// CHECK-NEXT:     "begin": {},
// CHECK-NEXT:     "end": {}
// CHECK-NEXT:    },
// CHECK-NEXT:    "isImplicit": true,
// CHECK-NEXT:    "name": "__uint128_t",
// CHECK-NEXT:    "type": {
// CHECK-NEXT:     "qualType": "unsigned __int128"
// CHECK-NEXT:    },
// CHECK-NEXT:    "typeDetails": [
// CHECK-NEXT:     {
// CHECK-NEXT:      "id": "0x{{.*}}",
// CHECK-NEXT:      "kind": "BuiltinType",
// CHECK-NEXT:      "type": {
// CHECK-NEXT:       "qualType": "unsigned __int128"
// CHECK-NEXT:      },
// CHECK-NEXT:      "qualDetails": [
// CHECK-NEXT:       "unsigned",
// CHECK-NEXT:       "integer"
// CHECK-NEXT:      ]
// CHECK-NEXT:     }
// CHECK-NEXT:    ]
// CHECK-NEXT:   },
// CHECK-NEXT:   {
// CHECK-NEXT:    "id": "0x{{.*}}",
// CHECK-NEXT:    "kind": "TypedefDecl",
// CHECK-NEXT:    "loc": {},
// CHECK-NEXT:    "range": {
// CHECK-NEXT:     "begin": {},
// CHECK-NEXT:     "end": {}
// CHECK-NEXT:    },
// CHECK-NEXT:    "isImplicit": true,
// CHECK-NEXT:    "name": "__NSConstantString",
// CHECK-NEXT:    "type": {
// CHECK-NEXT:     "qualType": "__NSConstantString_tag"
// CHECK-NEXT:    },
// CHECK-NEXT:    "typeDetails": [
// CHECK-NEXT:     {
// CHECK-NEXT:      "id": "0x{{.*}}",
// CHECK-NEXT:      "kind": "RecordType",
// CHECK-NEXT:      "type": {
// CHECK-NEXT:       "qualType": "__NSConstantString_tag"
// CHECK-NEXT:      },
// CHECK-NEXT:      "decl": {
// CHECK-NEXT:       "id": "0x{{.*}}",
// CHECK-NEXT:       "kind": "CXXRecordDecl",
// CHECK-NEXT:       "name": "__NSConstantString_tag"
// CHECK-NEXT:      },
// CHECK-NEXT:      "qualDetails": [
// CHECK-NEXT:       "struct"
// CHECK-NEXT:      ]
// CHECK-NEXT:     }
// CHECK-NEXT:    ]
// CHECK-NEXT:   },
// CHECK-NEXT:   {
// CHECK-NEXT:    "id": "0x{{.*}}",
// CHECK-NEXT:    "kind": "TypedefDecl",
// CHECK-NEXT:    "loc": {},
// CHECK-NEXT:    "range": {
// CHECK-NEXT:     "begin": {},
// CHECK-NEXT:     "end": {}
// CHECK-NEXT:    },
// CHECK-NEXT:    "isImplicit": true,
// CHECK-NEXT:    "name": "__builtin_ms_va_list",
// CHECK-NEXT:    "type": {
// CHECK-NEXT:     "qualType": "char *"
// CHECK-NEXT:    },
// CHECK-NEXT:    "typeDetails": [
// CHECK-NEXT:     {
// CHECK-NEXT:      "id": "0x{{.*}}",
// CHECK-NEXT:      "kind": "PointerType",
// CHECK-NEXT:      "type": {
// CHECK-NEXT:       "qualType": "char *"
// CHECK-NEXT:      },
// CHECK-NEXT:      "qualDetails": [
// CHECK-NEXT:       "ptr"
// CHECK-NEXT:      ],
// CHECK-NEXT:      "typeDetails": [
// CHECK-NEXT:       {
// CHECK-NEXT:        "id": "0x{{.*}}",
// CHECK-NEXT:        "kind": "BuiltinType",
// CHECK-NEXT:        "type": {
// CHECK-NEXT:         "qualType": "char"
// CHECK-NEXT:        },
// CHECK-NEXT:        "qualDetails": [
// CHECK-NEXT:         "signed",
// CHECK-NEXT:         "integer"
// CHECK-NEXT:        ]
// CHECK-NEXT:       }
// CHECK-NEXT:      ]
// CHECK-NEXT:     }
// CHECK-NEXT:    ]
// CHECK-NEXT:   },
// CHECK-NEXT:   {
// CHECK-NEXT:    "id": "0x{{.*}}",
// CHECK-NEXT:    "kind": "TypedefDecl",
// CHECK-NEXT:    "loc": {},
// CHECK-NEXT:    "range": {
// CHECK-NEXT:     "begin": {},
// CHECK-NEXT:     "end": {}
// CHECK-NEXT:    },
// CHECK-NEXT:    "isImplicit": true,
// CHECK-NEXT:    "name": "__builtin_va_list",
// CHECK-NEXT:    "type": {
// CHECK-NEXT:     "qualType": "char *"
// CHECK-NEXT:    },
// CHECK-NEXT:    "typeDetails": [
// CHECK-NEXT:     {
// CHECK-NEXT:      "qualDetails": [
// CHECK-NEXT:       "ptr"
// CHECK-NEXT:      ],
// CHECK-NEXT:      "typeDetails": [
// CHECK-NEXT:       {
// CHECK-NEXT:        "refId": "0x{{.*}}"
// CHECK-NEXT:       },
// CHECK-NEXT:       {
// CHECK-NEXT:        "qualDetails": [
// CHECK-NEXT:         "signed",
// CHECK-NEXT:         "integer"
// CHECK-NEXT:        ],
// CHECK-NEXT:        "typeDetails": [
// CHECK-NEXT:         {
// CHECK-NEXT:          "refId": "0x{{.*}}"
// CHECK-NEXT:         }
// CHECK-NEXT:        ]
// CHECK-NEXT:       }
// CHECK-NEXT:      ]
// CHECK-NEXT:     }
// CHECK-NEXT:    ]
// CHECK-NEXT:   },
// CHECK-NEXT:   {
// CHECK-NEXT:    "id": "0x{{.*}}",
// CHECK-NEXT:    "kind": "VarTemplateDecl",
// CHECK-NEXT:    "loc": {
// CHECK-NEXT:     "offset": 673,
// CHECK-NEXT:     "file": "{{.*}}",
// CHECK-NEXT:     "line": 26,
// CHECK-NEXT:     "col": 28,
// CHECK-NEXT:     "tokLen": 10
// CHECK-NEXT:    },
// CHECK-NEXT:    "range": {
// CHECK-NEXT:     "begin": {
// CHECK-NEXT:      "offset": 628,
// CHECK-NEXT:      "line": 25,
// CHECK-NEXT:      "col": 1,
// CHECK-NEXT:      "tokLen": 8
// CHECK-NEXT:     },
// CHECK-NEXT:     "end": {
// CHECK-NEXT:      "offset": 686,
// CHECK-NEXT:      "line": 26,
// CHECK-NEXT:      "col": 41,
// CHECK-NEXT:      "tokLen": 5
// CHECK-NEXT:     }
// CHECK-NEXT:    },
// CHECK-NEXT:    "name": "is_const_v",
// CHECK-NEXT:    "inner": [
// CHECK-NEXT:     {
// CHECK-NEXT:      "id": "0x{{.*}}",
// CHECK-NEXT:      "kind": "TemplateTypeParmDecl",
// CHECK-NEXT:      "loc": {
// CHECK-NEXT:       "offset": 643,
// CHECK-NEXT:       "line": 25,
// CHECK-NEXT:       "col": 16,
// CHECK-NEXT:       "tokLen": 1
// CHECK-NEXT:      },
// CHECK-NEXT:      "range": {
// CHECK-NEXT:       "begin": {
// CHECK-NEXT:        "offset": 638,
// CHECK-NEXT:        "col": 11,
// CHECK-NEXT:        "tokLen": 5
// CHECK-NEXT:       },
// CHECK-NEXT:       "end": {
// CHECK-NEXT:        "offset": 638,
// CHECK-NEXT:        "col": 11,
// CHECK-NEXT:        "tokLen": 5
// CHECK-NEXT:       }
// CHECK-NEXT:      },
// CHECK-NEXT:      "tagUsed": "class",
// CHECK-NEXT:      "depth": 0,
// CHECK-NEXT:      "index": 0
// CHECK-NEXT:     },
// CHECK-NEXT:     {
// CHECK-NEXT:      "id": "0x{{.*}}",
// CHECK-NEXT:      "kind": "VarDecl",
// CHECK-NEXT:      "loc": {
// CHECK-NEXT:       "offset": 673,
// CHECK-NEXT:       "line": 26,
// CHECK-NEXT:       "col": 28,
// CHECK-NEXT:       "tokLen": 10
// CHECK-NEXT:      },
// CHECK-NEXT:      "range": {
// CHECK-NEXT:       "begin": {
// CHECK-NEXT:        "spellingLoc": {
// CHECK-NEXT:         "offset": 99,
// CHECK-NEXT:         "line": 3,
// CHECK-NEXT:         "col": 21,
// CHECK-NEXT:         "tokLen": 6
// CHECK-NEXT:        },
// CHECK-NEXT:        "expansionLoc": {
// CHECK-NEXT:         "offset": 646,
// CHECK-NEXT:         "line": 26,
// CHECK-NEXT:         "col": 1,
// CHECK-NEXT:         "tokLen": 11
// CHECK-NEXT:        }
// CHECK-NEXT:       },
// CHECK-NEXT:       "end": {
// CHECK-NEXT:        "offset": 686,
// CHECK-NEXT:        "col": 41,
// CHECK-NEXT:        "tokLen": 5
// CHECK-NEXT:       }
// CHECK-NEXT:      },
// CHECK-NEXT:      "name": "is_const_v",
// CHECK-NEXT:      "type": {
// CHECK-NEXT:       "qualType": "const bool"
// CHECK-NEXT:      },
// CHECK-NEXT:      "inline": true,
// CHECK-NEXT:      "constexpr": true,
// CHECK-NEXT:      "init": "c",
// CHECK-NEXT:      "inner": [
// CHECK-NEXT:       {
// CHECK-NEXT:        "id": "0x{{.*}}",
// CHECK-NEXT:        "kind": "CXXBoolLiteralExpr",
// CHECK-NEXT:        "range": {
// CHECK-NEXT:         "begin": {
// CHECK-NEXT:          "offset": 686,
// CHECK-NEXT:          "col": 41,
// CHECK-NEXT:          "tokLen": 5
// CHECK-NEXT:         },
// CHECK-NEXT:         "end": {
// CHECK-NEXT:          "offset": 686,
// CHECK-NEXT:          "col": 41,
// CHECK-NEXT:          "tokLen": 5
// CHECK-NEXT:         }
// CHECK-NEXT:        },
// CHECK-NEXT:        "type": {
// CHECK-NEXT:         "qualType": "bool"
// CHECK-NEXT:        },
// CHECK-NEXT:        "valueCategory": "prvalue",
// CHECK-NEXT:        "value": false
// CHECK-NEXT:       },
// CHECK-NEXT:       {
// CHECK-NEXT:        "qualType": {
// CHECK-NEXT:         "id": "0x{{.*}}",
// CHECK-NEXT:         "kind": "QualType",
// CHECK-NEXT:         "type": {
// CHECK-NEXT:          "qualType": "const bool"
// CHECK-NEXT:         },
// CHECK-NEXT:         "qualifiers": "const",
// CHECK-NEXT:         "qualDetails": [
// CHECK-NEXT:          "unsigned",
// CHECK-NEXT:          "integer"
// CHECK-NEXT:         ]
// CHECK-NEXT:        },
// CHECK-NEXT:        "typeDetails": [
// CHECK-NEXT:         {
// CHECK-NEXT:          "id": "0x{{.*}}",
// CHECK-NEXT:          "kind": "BuiltinType",
// CHECK-NEXT:          "type": {
// CHECK-NEXT:           "qualType": "bool"
// CHECK-NEXT:          },
// CHECK-NEXT:          "qualDetails": [
// CHECK-NEXT:           "unsigned",
// CHECK-NEXT:           "integer"
// CHECK-NEXT:          ]
// CHECK-NEXT:         }
// CHECK-NEXT:        ]
// CHECK-NEXT:       }
// CHECK-NEXT:      ]
// CHECK-NEXT:     }
// CHECK-NEXT:    ]
// CHECK-NEXT:   },
// CHECK-NEXT:   {
// CHECK-NEXT:    "id": "0x{{.*}}",
// CHECK-NEXT:    "kind": "VarTemplatePartialSpecializationDecl",
// CHECK-NEXT:    "loc": {
// CHECK-NEXT:     "offset": 799,
// CHECK-NEXT:     "line": 29,
// CHECK-NEXT:     "col": 28,
// CHECK-NEXT:     "tokLen": 10
// CHECK-NEXT:    },
// CHECK-NEXT:    "range": {
// CHECK-NEXT:     "begin": {
// CHECK-NEXT:      "offset": 750,
// CHECK-NEXT:      "line": 28,
// CHECK-NEXT:      "col": 1,
// CHECK-NEXT:      "tokLen": 8
// CHECK-NEXT:     },
// CHECK-NEXT:     "end": {
// CHECK-NEXT:      "offset": 823,
// CHECK-NEXT:      "line": 29,
// CHECK-NEXT:      "col": 52,
// CHECK-NEXT:      "tokLen": 4
// CHECK-NEXT:     }
// CHECK-NEXT:    },
// CHECK-NEXT:    "name": "is_const_v",
// CHECK-NEXT:    "type": {
// CHECK-NEXT:     "qualType": "const bool"
// CHECK-NEXT:    },
// CHECK-NEXT:    "inline": true,
// CHECK-NEXT:    "constexpr": true,
// CHECK-NEXT:    "init": "c",
// CHECK-NEXT:    "inner": [
// CHECK-NEXT:     {
// CHECK-NEXT:      "id": "0x{{.*}}",
// CHECK-NEXT:      "kind": "TemplateTypeParmDecl",
// CHECK-NEXT:      "loc": {
// CHECK-NEXT:       "offset": 766,
// CHECK-NEXT:       "line": 28,
// CHECK-NEXT:       "col": 17,
// CHECK-NEXT:       "tokLen": 3
// CHECK-NEXT:      },
// CHECK-NEXT:      "range": {
// CHECK-NEXT:       "begin": {
// CHECK-NEXT:        "offset": 760,
// CHECK-NEXT:        "col": 11,
// CHECK-NEXT:        "tokLen": 5
// CHECK-NEXT:       },
// CHECK-NEXT:       "end": {
// CHECK-NEXT:        "offset": 766,
// CHECK-NEXT:        "col": 17,
// CHECK-NEXT:        "tokLen": 3
// CHECK-NEXT:       }
// CHECK-NEXT:      },
// CHECK-NEXT:      "isReferenced": true,
// CHECK-NEXT:      "name": "_Ty",
// CHECK-NEXT:      "tagUsed": "class",
// CHECK-NEXT:      "depth": 0,
// CHECK-NEXT:      "index": 0
// CHECK-NEXT:     },
// CHECK-NEXT:     {
// CHECK-NEXT:      "kind": "TemplateArgument",
// CHECK-NEXT:      "type": {
// CHECK-NEXT:       "qualType": "const type-parameter-0-0"
// CHECK-NEXT:      },
// CHECK-NEXT:      "qualTypeDetail": [
// CHECK-NEXT:       {
// CHECK-NEXT:        "qualType": {
// CHECK-NEXT:         "id": "0x{{.*}}",
// CHECK-NEXT:         "kind": "QualType",
// CHECK-NEXT:         "type": {
// CHECK-NEXT:          "qualType": "const type-parameter-0-0"
// CHECK-NEXT:         },
// CHECK-NEXT:         "qualifiers": "const",
// CHECK-NEXT:         "qualDetails": []
// CHECK-NEXT:        },
// CHECK-NEXT:        "typeDetails": [
// CHECK-NEXT:         {
// CHECK-NEXT:          "id": "0x{{.*}}",
// CHECK-NEXT:          "kind": "TemplateTypeParmType",
// CHECK-NEXT:          "type": {
// CHECK-NEXT:           "qualType": "type-parameter-0-0"
// CHECK-NEXT:          },
// CHECK-NEXT:          "isDependent": true,
// CHECK-NEXT:          "isInstantiationDependent": true,
// CHECK-NEXT:          "depth": 0,
// CHECK-NEXT:          "index": 0,
// CHECK-NEXT:          "decl": {
// CHECK-NEXT:           "id": "0x0"
// CHECK-NEXT:          },
// CHECK-NEXT:          "qualDetails": []
// CHECK-NEXT:         }
// CHECK-NEXT:        ]
// CHECK-NEXT:       }
// CHECK-NEXT:      ]
// CHECK-NEXT:     },
// CHECK-NEXT:     {
// CHECK-NEXT:      "id": "0x{{.*}}",
// CHECK-NEXT:      "kind": "CXXBoolLiteralExpr",
// CHECK-NEXT:      "range": {
// CHECK-NEXT:       "begin": {
// CHECK-NEXT:        "offset": 823,
// CHECK-NEXT:        "line": 29,
// CHECK-NEXT:        "col": 52,
// CHECK-NEXT:        "tokLen": 4
// CHECK-NEXT:       },
// CHECK-NEXT:       "end": {
// CHECK-NEXT:        "offset": 823,
// CHECK-NEXT:        "col": 52,
// CHECK-NEXT:        "tokLen": 4
// CHECK-NEXT:       }
// CHECK-NEXT:      },
// CHECK-NEXT:      "type": {
// CHECK-NEXT:       "qualType": "bool"
// CHECK-NEXT:      },
// CHECK-NEXT:      "valueCategory": "prvalue",
// CHECK-NEXT:      "value": true
// CHECK-NEXT:     },
// CHECK-NEXT:     {
// CHECK-NEXT:      "qualType": {
// CHECK-NEXT:       "refId": "0x{{.*}}",
// CHECK-NEXT:       "qualDetails": [
// CHECK-NEXT:        "unsigned",
// CHECK-NEXT:        "integer"
// CHECK-NEXT:       ]
// CHECK-NEXT:      },
// CHECK-NEXT:      "typeDetails": [
// CHECK-NEXT:       {
// CHECK-NEXT:        "qualDetails": [
// CHECK-NEXT:         "unsigned",
// CHECK-NEXT:         "integer"
// CHECK-NEXT:        ],
// CHECK-NEXT:        "typeDetails": [
// CHECK-NEXT:         {
// CHECK-NEXT:          "refId": "0x{{.*}}"
// CHECK-NEXT:         }
// CHECK-NEXT:        ]
// CHECK-NEXT:       }
// CHECK-NEXT:      ]
// CHECK-NEXT:     }
// CHECK-NEXT:    ]
// CHECK-NEXT:   }
// CHECK-NEXT:  ]
// CHECK-NEXT: }
