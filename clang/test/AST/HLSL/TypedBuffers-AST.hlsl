// RUN: %clang_cc1 -triple dxil-pc-shadermodel6.0-library -x hlsl -ast-dump -DEMPTY \
// RUN:   -DRESOURCE=RWBuffer %s | FileCheck -DRESOURCE=RWBuffer -check-prefix=EMPTY %s
//
// RUN: %clang_cc1 -triple dxil-pc-shadermodel6.0-library -x hlsl -ast-dump -DEMPTY \
// RUN:   -DRESOURCE=Buffer %s | FileCheck -DRESOURCE=Buffer -check-prefix=EMPTY %s
//
// RUN: %clang_cc1 -triple dxil-pc-shadermodel6.0-library -x hlsl -ast-dump \
// RUN:   -DRESOURCE=RWBuffer %s | FileCheck -DRESOURCE=RWBuffer \
// RUN:   -check-prefixes=CHECK,CHECK-UAV %s
//
// RUN: %clang_cc1 -triple dxil-pc-shadermodel6.0-library -x hlsl -ast-dump \
// RUN:   -DRESOURCE=Buffer %s | FileCheck -DRESOURCE=Buffer \
// RUN:   -check-prefixes=CHECK,CHECK-SRV %s

// TODO: Add AST tests for RasterizerOrderedBuffer here

// This test tests two different AST generations each typed buffer.
// The "EMPTY" test mode verifies the AST generated by forward declaration
// of the HLSL types which happens on initializing the HLSL external AST with
// an AST Context.

// The non-empty mode has a use that requires the resource type be complete,
// which results in the AST being populated by the external AST source. That
// case covers the full implementation of the template declaration and the
// instantiated specialization.

// EMPTY: ClassTemplateDecl {{.*}} implicit [[RESOURCE]]
// EMPTY: TemplateTypeParmDecl {{.*}} typename depth 0 index 0 element_type
// EMPTY: ConceptSpecializationExpr {{.*}} 'bool' Concept {{.*}} '__is_typed_resource_element_compatible'
// EMPTY: ImplicitConceptSpecializationDecl
// EMPTY: TemplateArgument type 'type-parameter-0-0'
// EMPTY: TemplateTypeParmType {{.*}}  'type-parameter-0-0' dependent depth 0 index 0
// EMPTY: TemplateTypeParm {{.*}}  depth 0 index 0
// EMPTY: TemplateArgument type 'element_type':'type-parameter-0-0'
// EMPTY: TemplateTypeParmType {{.*}}  'element_type' dependent depth 0 index 0
// EMPTY: TemplateTypeParm {{.*}}  'element_type'
// EMPTY: CXXRecordDecl {{.*}} implicit <undeserialized declarations> class [[RESOURCE]]
// EMPTY: FinalAttr {{.*}} Implicit final

// There should be no more occurrences of the resource type
// EMPTY-NOT: {{[^[:alnum:]]}}[[RESOURCE]]

#ifndef EMPTY

RESOURCE<float> Buffer;

#endif

// CHECK: ClassTemplateDecl {{.*}} implicit [[RESOURCE]]
// CHECK: TemplateTypeParmDecl {{.*}} typename depth 0 index 0 element_type
// CHECK: ConceptSpecializationExpr {{.*}} 'bool' Concept {{.*}}  '__is_typed_resource_element_compatible'
// CHECK: ImplicitConceptSpecializationDecl
// CHECK: TemplateArgument type 'type-parameter-0-0'
// CHECK: TemplateTypeParmType {{.*}}  'type-parameter-0-0' dependent depth 0 index 0
// CHECK: TemplateTypeParm {{.*}}  depth 0 index 0
// CHECK: TemplateArgument type 'element_type':'type-parameter-0-0'
// CHECK: TemplateTypeParmType {{.*}}  'element_type' dependent depth 0 index 0
// CHECK: TemplateTypeParm {{.*}}  'element_type'
// CHECK: CXXRecordDecl {{.*}} implicit class [[RESOURCE]] definition

// CHECK: FinalAttr {{.*}} Implicit final
// CHECK: FieldDecl {{.*}} implicit __handle '__hlsl_resource_t
// CHECK-UAV-SAME{LITERAL}: [[hlsl::resource_class(UAV)]]
// CHECK-SRV-SAME{LITERAL}: [[hlsl::resource_class(SRV)]]
// CHECK-SAME{LITERAL}: [[hlsl::contained_type(element_type)]]

// Default constructor

// CHECK: CXXConstructorDecl {{.*}} [[RESOURCE]]<element_type> 'void ()' inline
// CHECK: CompoundStmt
// CHECK: BinaryOperator {{.*}} '='
// CHECK: MemberExpr {{.*}} lvalue .__handle
// CHECK: CXXThisExpr {{.*}} '[[RESOURCE]]<element_type>' lvalue implicit this
// CHECK: CallExpr {{.*}} '__hlsl_resource_t
// CHECK: ImplicitCastExpr {{.*}} <BuiltinFnToFnPtr>
// CHECK: DeclRefExpr {{.*}} '<builtin fn type>' Function {{.*}} '__builtin_hlsl_resource_uninitializedhandle'
// CHECK: MemberExpr {{.*}} lvalue .__handle
// CHECK: CXXThisExpr {{.*}} '[[RESOURCE]]<element_type>' lvalue implicit this
// CHECK: AlwaysInlineAttr

// Constructor from binding

// CHECK: CXXConstructorDecl {{.*}} [[RESOURCE]]<element_type> 'void (unsigned int, unsigned int, int, unsigned int, const char *)' inline
// CHECK: ParmVarDecl {{.*}} registerNo 'unsigned int'
// CHECK: ParmVarDecl {{.*}} spaceNo 'unsigned int'
// CHECK: ParmVarDecl {{.*}} range 'int'
// CHECK: ParmVarDecl {{.*}} index 'unsigned int'
// CHECK: ParmVarDecl {{.*}} name 'const char *'
// CHECK: CompoundStmt {{.*}}
// CHECK: BinaryOperator {{.*}} '='
// CHECK: MemberExpr {{.*}} lvalue .__handle
// CHECK: CXXThisExpr {{.*}} '[[RESOURCE]]<element_type>' lvalue implicit this
// CHECK: CallExpr {{.*}} '__hlsl_resource_t
// CHECK: ImplicitCastExpr {{.*}} <BuiltinFnToFnPtr>
// CHECK: DeclRefExpr {{.*}} '<builtin fn type>' Function {{.*}} '__builtin_hlsl_resource_handlefrombinding'
// CHECK: MemberExpr {{.*}} lvalue .__handle
// CHECK: CXXThisExpr {{.*}} '[[RESOURCE]]<element_type>' lvalue implicit this
// CHECK: DeclRefExpr {{.*}} 'unsigned int' ParmVar {{.*}} 'registerNo' 'unsigned int'
// CHECK: DeclRefExpr {{.*}} 'unsigned int' ParmVar {{.*}} 'spaceNo' 'unsigned int'
// CHECK: DeclRefExpr {{.*}} 'int' ParmVar {{.*}} 'range' 'int'
// CHECK: DeclRefExpr {{.*}} 'unsigned int' ParmVar {{.*}} 'index' 'unsigned int'
// CHECK: DeclRefExpr {{.*}} 'const char *' ParmVar {{.*}} 'name' 'const char *'
// CHECK: AlwaysInlineAttr

// Constructor from implicit binding

// CHECK: CXXConstructorDecl {{.*}} [[RESOURCE]]<element_type> 'void (unsigned int, int, unsigned int, unsigned int, const char *)' inline
// CHECK: ParmVarDecl {{.*}} spaceNo 'unsigned int'
// CHECK: ParmVarDecl {{.*}} range 'int'
// CHECK: ParmVarDecl {{.*}} index 'unsigned int'
// CHECK: ParmVarDecl {{.*}} orderId 'unsigned int'
// CHECK: ParmVarDecl {{.*}} name 'const char *'
// CHECK: CompoundStmt {{.*}}
// CHECK: BinaryOperator {{.*}} '='
// CHECK: MemberExpr {{.*}} lvalue .__handle
// CHECK: CXXThisExpr {{.*}} '[[RESOURCE]]<element_type>' lvalue implicit this
// CHECK: CallExpr {{.*}} '__hlsl_resource_t
// CHECK: ImplicitCastExpr {{.*}} <BuiltinFnToFnPtr>
// CHECK: DeclRefExpr {{.*}} '<builtin fn type>' Function {{.*}} '__builtin_hlsl_resource_handlefromimplicitbinding'
// CHECK: MemberExpr {{.*}} lvalue .__handle
// CHECK: CXXThisExpr {{.*}} '[[RESOURCE]]<element_type>' lvalue implicit this
// CHECK: DeclRefExpr {{.*}} 'unsigned int' ParmVar {{.*}} 'spaceNo' 'unsigned int'
// CHECK: DeclRefExpr {{.*}} 'int' ParmVar {{.*}} 'range' 'int'
// CHECK: DeclRefExpr {{.*}} 'unsigned int' ParmVar {{.*}} 'index' 'unsigned int'
// CHECK: DeclRefExpr {{.*}} 'unsigned int' ParmVar {{.*}} 'orderId' 'unsigned int'
// CHECK: DeclRefExpr {{.*}} 'const char *' ParmVar {{.*}} 'name' 'const char *'
// CHECK: AlwaysInlineAttr

// Subscript operators

// CHECK: CXXMethodDecl {{.*}} operator[] 'const hlsl_device element_type &(unsigned int) const'
// CHECK: ParmVarDecl {{.*}} Index 'unsigned int'
// CHECK: CompoundStmt
// CHECK: ReturnStmt
// CHECK: UnaryOperator {{.*}} 'hlsl_device element_type' prefix '*' cannot overflow
// CHECK: CallExpr {{.*}} 'hlsl_device element_type *'
// CHECK: ImplicitCastExpr {{.*}} <BuiltinFnToFnPtr>
// CHECK: DeclRefExpr {{.*}} '<builtin fn type>' Function {{.*}}  '__builtin_hlsl_resource_getpointer' 'void (...) noexcept'
// CHECK: MemberExpr {{.*}} '__hlsl_resource_t
// CHECK-UAV-SAME{LITERAL}: [[hlsl::resource_class(UAV)]]
// CHECK-SRV-SAME{LITERAL}: [[hlsl::resource_class(SRV)]]
// CHECK-SAME{LITERAL}: [[hlsl::contained_type(element_type)]]
// CHECK-SAME: ' lvalue .__handle {{.*}}
// CHECK: CXXThisExpr {{.*}} 'const [[RESOURCE]]<element_type>' lvalue implicit this
// CHECK: DeclRefExpr {{.*}} 'unsigned int' ParmVar {{.*}}  'Index' 'unsigned int'
// CHECK: AlwaysInlineAttr {{.*}} Implicit always_inline

// CHECK-UAV: CXXMethodDecl {{.*}} operator[] 'hlsl_device element_type &(unsigned int)'
// CHECK-UAV: ParmVarDecl {{.*}} Index 'unsigned int'
// CHECK-UAV: CompoundStmt
// CHECK-UAV: ReturnStmt
// CHECK-UAV: UnaryOperator {{.*}} 'hlsl_device element_type' prefix '*' cannot overflow
// CHECK-UAV: CallExpr {{.*}} 'hlsl_device element_type *'
// CHECK-UAV: ImplicitCastExpr {{.*}} <BuiltinFnToFnPtr>
// CHECK-UAV: DeclRefExpr {{.*}} '<builtin fn type>' Function {{.*}}  '__builtin_hlsl_resource_getpointer' 'void (...) noexcept'
// CHECK-UAV: MemberExpr {{.*}} '__hlsl_resource_t
// CHECK-UAV-SAME{LITERAL}: [[hlsl::resource_class(UAV)]]
// CHECK-UAV-SAME{LITERAL}: [[hlsl::contained_type(element_type)]]
// CHECK-UAV-SAME: ' lvalue .__handle {{.*}}
// CHECK-UAV: CXXThisExpr {{.*}} '[[RESOURCE]]<element_type>' lvalue implicit this
// CHECK-UAV: DeclRefExpr {{.*}} 'unsigned int' ParmVar {{.*}}  'Index' 'unsigned int'
// CHECK-UAV: AlwaysInlineAttr {{.*}} Implicit always_inline

// Load method

// CHECK: CXXMethodDecl {{.*}} Load 'element_type (unsigned int)'
// CHECK: ParmVarDecl {{.*}} Index 'unsigned int'
// CHECK: CompoundStmt
// CHECK: ReturnStmt
// CHECK: UnaryOperator {{.*}} 'hlsl_device element_type' prefix '*' cannot overflow
// CHECK: CallExpr {{.*}} 'hlsl_device element_type *'
// CHECK: ImplicitCastExpr {{.*}} <BuiltinFnToFnPtr>
// CHECK: DeclRefExpr {{.*}} '<builtin fn type>' Function {{.*}}  '__builtin_hlsl_resource_getpointer' 'void (...) noexcept'
// CHECK: MemberExpr {{.*}} '__hlsl_resource_t
// CHECK-UAV-SAME{LITERAL}: [[hlsl::resource_class(UAV)]]
// CHECK-SRV-SAME{LITERAL}: [[hlsl::resource_class(SRV)]]
// CHECK-SAME{LITERAL}: [[hlsl::contained_type(element_type)]]
// CHECK-SAME: ' lvalue .__handle {{.*}}
// CHECK: CXXThisExpr {{.*}} '[[RESOURCE]]<element_type>' lvalue implicit this
// CHECK: DeclRefExpr {{.*}} 'unsigned int' ParmVar {{.*}}  'Index' 'unsigned int'
// CHECK: AlwaysInlineAttr {{.*}} Implicit always_inline

// CHECK: ClassTemplateSpecializationDecl {{.*}} class [[RESOURCE]] definition

// CHECK: TemplateArgument type 'float'
// CHECK: BuiltinType {{.*}}  'float'
// CHECK: FinalAttr {{.*}} Implicit final
// CHECK: FieldDecl {{.*}} implicit referenced __handle '__hlsl_resource_t
// CHECK-UAV-SAME{LITERAL}: [[hlsl::resource_class(UAV)]]
// CHECK-SRV-SAME{LITERAL}: [[hlsl::resource_class(SRV)]]
// CHECK-SAME{LITERAL}: [[hlsl::contained_type(float)]]