// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --filter-out-after "call.*bar" --version 5
// RUN: %clang_cc1 -triple=aarch64-unknown-linux-gnu -emit-llvm -o - %s | FileCheck -check-prefixes=CHECK %s

extern void bar(void);

// CHECK-LABEL: define dso_local void @foo(
// CHECK-SAME: ptr noundef [[P:%.*]], ptr noundef [[Q:%.*]], ptr noundef [[T:%.*]]) #[[ATTR0:[0-9]+]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[P_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[Q_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[T_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[P]], ptr [[P_ADDR]], align 8
// CHECK-NEXT:    store ptr [[Q]], ptr [[Q_ADDR]], align 8
// CHECK-NEXT:    store ptr [[T]], ptr [[T_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[P_ADDR]], align 8
// CHECK-NEXT:    store i32 5, ptr [[TMP0]], align 4
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[Q_ADDR]], align 8
// CHECK-NEXT:    store i32 7, ptr [[TMP1]], align 4
// CHECK-NEXT:    call void @bar()
//
void foo(int *p, int *q, double *t) {
  *p = 5;
  *q = 7;
  bar();
  *t = 1.3l;
}
