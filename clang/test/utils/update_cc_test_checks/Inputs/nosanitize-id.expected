// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang_cc1 -fsanitize=shift-exponent,shift-base -triple=x86_64-unknown-linux-gnu -O1 -disable-llvm-passes -emit-llvm -o - %s | FileCheck %s

// CHECK-LABEL: @foo(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[C_ADDR:%.*]] = alloca i32*, align 8
// CHECK-NEXT:    [[SHAMT_ADDR:%.*]] = alloca i32*, align 8
// CHECK-NEXT:    store i32* [[C:%.*]], i32** [[C_ADDR]], align 8, !tbaa [[TBAA2:![0-9]+]]
// CHECK-NEXT:    store i32* [[SHAMT:%.*]], i32** [[SHAMT_ADDR]], align 8, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP0:%.*]] = load i32*, i32** [[C_ADDR]], align 8, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP1:%.*]] = load i32, i32* [[TMP0]], align 4, !tbaa [[TBAA6:![0-9]+]]
// CHECK-NEXT:    [[TMP2:%.*]] = load i32*, i32** [[SHAMT_ADDR]], align 8, !tbaa [[TBAA2]]
// CHECK-NEXT:    [[TMP3:%.*]] = load i32, i32* [[TMP2]], align 4, !tbaa [[TBAA6]]
// CHECK-NEXT:    [[TMP4:%.*]] = icmp ule i32 [[TMP3]], 31, !nosanitize [[NOSAN8:![0-9]+]]
// CHECK-NEXT:    br i1 [[TMP4]], label [[CHECK:%.*]], label [[CONT:%.*]], !nosanitize [[NOSAN8]]
// CHECK:       check:
// CHECK-NEXT:    [[SHL_ZEROS:%.*]] = sub nuw nsw i32 31, [[TMP3]], !nosanitize [[NOSAN8]]
// CHECK-NEXT:    [[SHL_CHECK:%.*]] = lshr i32 [[TMP1]], [[SHL_ZEROS]], !nosanitize [[NOSAN8]]
// CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[SHL_CHECK]], 0, !nosanitize [[NOSAN8]]
// CHECK-NEXT:    br label [[CONT]], !nosanitize [[NOSAN8]]
// CHECK:       cont:
// CHECK-NEXT:    [[TMP6:%.*]] = phi i1 [ true, [[ENTRY:%.*]] ], [ [[TMP5]], [[CHECK]] ], !nosanitize [[NOSAN8]]
// CHECK-NEXT:    [[TMP7:%.*]] = and i1 [[TMP4]], [[TMP6]], !nosanitize [[NOSAN8]]
// CHECK-NEXT:    br i1 [[TMP7]], label [[CONT1:%.*]], label [[HANDLER_SHIFT_OUT_OF_BOUNDS:%.*]], !prof [[PROF9:![0-9]+]], !nosanitize [[NOSAN8]]
// CHECK:       handler.shift_out_of_bounds:
// CHECK-NEXT:    [[TMP8:%.*]] = zext i32 [[TMP1]] to i64, !nosanitize [[NOSAN8]]
// CHECK-NEXT:    [[TMP9:%.*]] = zext i32 [[TMP3]] to i64, !nosanitize [[NOSAN8]]
// CHECK-NEXT:    call void @__ubsan_handle_shift_out_of_bounds_abort(i8* bitcast ({ { [124 x i8]*, i32, i32 }, { i16, i16, [6 x i8] }*, { i16, i16, [6 x i8] }* }* @[[GLOB1:[0-9]+]] to i8*), i64 [[TMP8]], i64 [[TMP9]]) #[[ATTR2:[0-9]+]], !nosanitize [[NOSAN8]]
// CHECK-NEXT:    unreachable, !nosanitize [[NOSAN8]]
// CHECK:       cont1:
// CHECK-NEXT:    [[SHL:%.*]] = shl i32 [[TMP1]], [[TMP3]]
// CHECK-NEXT:    [[TMP10:%.*]] = icmp ule i32 [[SHL]], 31, !nosanitize [[NOSAN8]]
// CHECK-NEXT:    br i1 [[TMP10]], label [[CHECK2:%.*]], label [[CONT5:%.*]], !nosanitize [[NOSAN8]]
// CHECK:       check2:
// CHECK-NEXT:    [[SHL_ZEROS3:%.*]] = sub nuw nsw i32 31, [[SHL]], !nosanitize [[NOSAN8]]
// CHECK-NEXT:    [[SHL_CHECK4:%.*]] = lshr i32 1, [[SHL_ZEROS3]], !nosanitize [[NOSAN8]]
// CHECK-NEXT:    [[TMP11:%.*]] = icmp eq i32 [[SHL_CHECK4]], 0, !nosanitize [[NOSAN8]]
// CHECK-NEXT:    br label [[CONT5]], !nosanitize [[NOSAN8]]
// CHECK:       cont5:
// CHECK-NEXT:    [[TMP12:%.*]] = phi i1 [ true, [[CONT1]] ], [ [[TMP11]], [[CHECK2]] ], !nosanitize [[NOSAN8]]
// CHECK-NEXT:    [[TMP13:%.*]] = and i1 [[TMP10]], [[TMP12]], !nosanitize [[NOSAN8]]
// CHECK-NEXT:    br i1 [[TMP13]], label [[CONT7:%.*]], label [[HANDLER_SHIFT_OUT_OF_BOUNDS6:%.*]], !prof [[PROF9]], !nosanitize [[NOSAN8]]
// CHECK:       handler.shift_out_of_bounds6:
// CHECK-NEXT:    [[TMP14:%.*]] = zext i32 [[SHL]] to i64, !nosanitize [[NOSAN8]]
// CHECK-NEXT:    call void @__ubsan_handle_shift_out_of_bounds_abort(i8* bitcast ({ { [124 x i8]*, i32, i32 }, { i16, i16, [6 x i8] }*, { i16, i16, [6 x i8] }* }* @[[GLOB2:[0-9]+]] to i8*), i64 1, i64 [[TMP14]]) #[[ATTR2]], !nosanitize [[NOSAN8]]
// CHECK-NEXT:    unreachable, !nosanitize [[NOSAN8]]
// CHECK:       cont7:
// CHECK-NEXT:    [[SHL8:%.*]] = shl i32 1, [[SHL]]
// CHECK-NEXT:    [[TMP15:%.*]] = load i32*, i32** [[C_ADDR]], align 8, !tbaa [[TBAA2]]
// CHECK-NEXT:    store i32 [[SHL8]], i32* [[TMP15]], align 4, !tbaa [[TBAA6]]
// CHECK-NEXT:    ret void
//
void foo(int* c, int* shamt) {
  *c = 1 << (*c << *shamt);
}
