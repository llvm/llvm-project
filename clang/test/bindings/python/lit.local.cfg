def is_libclang_loadable():
    # Do not try to run if libclang was built with sanitizers because
    # the sanitizer library will likely be loaded too late to perform
    # interception and will then fail.
    # We could use LD_PRELOAD/DYLD_INSERT_LIBRARIES but this isn't
    # portable so its easier just to not run the tests when building
    # with ASan.
    if config.llvm_use_sanitizer != "":
        return False
    try:
        sys.path.append(os.path.join(config.clang_src_dir, "bindings/python"))
        from clang.cindex import Config
        conf = Config()
        Config.set_library_path(config.clang_lib_dir)
        conf.lib
        return True
    except Exception as e:
        # Expected failure modes are considered benign when nothing can be
        # done about them.
        #
        # Cannot load a 32-bit libclang.so into a 64-bit python.
        if "wrong ELF class: ELFCLASS32" in str(e):
            return False
        # If libclang.so is missing, it must have been disabled intentionally,
        # e.g. by building with LLVM_ENABLE_PIC=OFF.
        elif "No such file or directory" in str(e):
            return False
        # Unexpected failure modes need to be investigated to either fix an
        # underlying bug or accept the failure, so return True.  This causes
        # tests to run and FAIL, drawing developer attention.
        else:
            print("warning: unhandled failure in is_libclang_loadable: "
                  + str(e), file=sys.stderr)
            return True

if is_libclang_loadable():
    config.available_features.add("libclang-loadable")

config.substitutions.append(('%libdir', config.clang_lib_dir))

config.suffixes = ['.sh']
