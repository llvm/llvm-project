// RUN: cir-opt %s | FileCheck %s

!s32i = !cir.int<s, 32>

module {

cir.func @f1()

cir.func @f2() {
  cir.call @f1() : () -> ()
  cir.return
}

// CHECK:      cir.func @f2() {
// CHECK-NEXT:   cir.call @f1() : () -> ()
// CHECK-NEXT:   cir.return
// CHECK-NEXT: }

cir.func @f3() -> !s32i

cir.func @f4() -> !s32i {
  %0 = cir.call @f3() : () -> !s32i
  cir.return %0 : !s32i
}

// CHECK:      cir.func @f4() -> !s32i {
// CHECK-NEXT:   %[[#x:]] = cir.call @f3() : () -> !s32i
// CHECK-NEXT:   cir.return %[[#x]] : !s32i
// CHECK-NEXT: }

cir.func @f5(!s32i, !s32i) -> !s32i
cir.func @f6() -> !s32i {
  %0 = cir.const #cir.int<1> : !s32i
  %1 = cir.const #cir.int<2> : !s32i
  %2 = cir.call @f5(%0, %1) : (!s32i, !s32i) -> !s32i
  cir.return %2 : !s32i
}

// CHECK:      cir.func @f6() -> !s32i {
// CHECK-NEXT:   %[[#a:]] = cir.const #cir.int<1> : !s32i
// CHECK-NEXT:   %[[#b:]] = cir.const #cir.int<2> : !s32i
// CHECK-NEXT:   %[[#c:]] = cir.call @f5(%[[#a]], %[[#b]]) : (!s32i, !s32i) -> !s32i
// CHECK-NEXT:   cir.return %[[#c]] : !s32i
// CHECK-NEXT: }

cir.func @f7(%arg0: !cir.ptr<!cir.func<(!s32i, !s32i) -> !s32i>>) -> !s32i {
  %0 = cir.const #cir.int<1> : !s32i
  %1 = cir.const #cir.int<2> : !s32i
  %2 = cir.call %arg0(%0, %1) : (!cir.ptr<!cir.func<(!s32i, !s32i) -> !s32i>>, !s32i, !s32i) -> !s32i
  cir.return %2 : !s32i
}

// CHECK:      cir.func @f7(%[[ptr:.+]]: !cir.ptr<!cir.func<(!s32i, !s32i) -> !s32i>>) -> !s32i {
// CHECK-NEXT:   %[[#a:]] = cir.const #cir.int<1> : !s32i
// CHECK-NEXT:   %[[#b:]] = cir.const #cir.int<2> : !s32i
// CHECK-NEXT:   %[[#ret:]] = cir.call %[[ptr]](%[[#a]], %[[#b]]) : (!cir.ptr<!cir.func<(!s32i, !s32i) -> !s32i>>, !s32i, !s32i) -> !s32i
// CHECK-NEXT:   cir.return %[[#ret]] : !s32i
// CHECK-NEXT: }

}
