// RUN: cir-opt %s -verify-diagnostics -split-input-file

!u8i = !cir.int<u, 8>
!rec_NeedsCtor = !cir.record<struct "NeedsCtor" padded {!u8i}>

module {
  cir.global external @needsCtor = ctor : !rec_NeedsCtor {
  }
  // expected-error@+1 {{custom op 'cir.global' ctor region must have exactly one block}}
}

// -----

!u8i = !cir.int<u, 8>
!rec_NeedsCtor = !cir.record<struct "NeedsCtor" padded {!u8i}>

module {
  cir.func private @_ZN9NeedsCtorC1Ev(!cir.ptr<!rec_NeedsCtor>)
  cir.global external @needsCtor = ctor : !rec_NeedsCtor {
    %0 = cir.get_global @needsCtor : !cir.ptr<!rec_NeedsCtor>
    cir.call @_ZN9NeedsCtorC1Ev(%0) : (!cir.ptr<!rec_NeedsCtor>) -> ()
    cir.goto "label"
  ^bb1:
    cir.label "label"
    cir.return
  }
  // expected-error@+1 {{custom op 'cir.global' ctor region must have exactly one block}}
}

// -----

!u8i = !cir.int<u, 8>
!rec_NeedsCtor = !cir.record<struct "NeedsCtor" padded {!u8i}>

module {
  cir.func private @_ZN9NeedsCtorC1Ev(!cir.ptr<!rec_NeedsCtor>)
  cir.global external @needsCtor = ctor : !rec_NeedsCtor {
  ^bb1:
  }
  // expected-error@+1 {{custom op 'cir.global' ctor region shall not be empty}}
}

// -----

!u8i = !cir.int<u, 8>
!rec_NeedsCtorDtor = !cir.record<struct "NeedsCtorDtor" padded {!u8i}>
module {
  cir.func private @_ZN13NeedsCtorDtorC1Ev(!cir.ptr<!rec_NeedsCtorDtor>)
  cir.global external dso_local @needsCtorDtor = ctor : !rec_NeedsCtorDtor {
    %0 = cir.get_global @needsCtorDtor : !cir.ptr<!rec_NeedsCtorDtor>
    cir.call @_ZN13NeedsCtorDtorC1Ev(%0) : (!cir.ptr<!rec_NeedsCtorDtor>) -> ()
  } dtor {}
  // expected-error@+1 {{custom op 'cir.global' dtor region must have exactly one block}}
}

// -----

!u8i = !cir.int<u, 8>
!rec_NeedsCtorDtor = !cir.record<struct "NeedsCtorDtor" padded {!u8i}>
module {
  cir.func private @_ZN13NeedsCtorDtorC1Ev(!cir.ptr<!rec_NeedsCtorDtor>)
  cir.global external dso_local @needsCtorDtor = ctor : !rec_NeedsCtorDtor {
    %0 = cir.get_global @needsCtorDtor : !cir.ptr<!rec_NeedsCtorDtor>
    cir.call @_ZN13NeedsCtorDtorC1Ev(%0) : (!cir.ptr<!rec_NeedsCtorDtor>) -> ()
  } dtor {
    %0 = cir.get_global @needsCtorDtor : !cir.ptr<!rec_NeedsCtorDtor>
    cir.call @_ZN13NeedsCtorDtorD1Ev(%0) : (!cir.ptr<!rec_NeedsCtorDtor>) -> ()
    cir.goto "label"
  ^bb1:
    cir.label "label"
    cir.return
  }
  // expected-error@+1 {{custom op 'cir.global' dtor region must have exactly one block}}
}

// -----

!u8i = !cir.int<u, 8>
!rec_NeedsCtorDtor = !cir.record<struct "NeedsCtorDtor" padded {!u8i}>
module {
  cir.func private @_ZN13NeedsCtorDtorC1Ev(!cir.ptr<!rec_NeedsCtorDtor>)
  cir.global external dso_local @needsCtorDtor = ctor : !rec_NeedsCtorDtor {
    %0 = cir.get_global @needsCtorDtor : !cir.ptr<!rec_NeedsCtorDtor>
    cir.call @_ZN13NeedsCtorDtorC1Ev(%0) : (!cir.ptr<!rec_NeedsCtorDtor>) -> ()
  } dtor {
  ^bb1:
  }
  // expected-error@+1 {{custom op 'cir.global' dtor region shall not be empty}}
}
