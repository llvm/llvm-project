// RUN: cir-opt %s -cir-flatten-cfg -o - | FileCheck %s

!s32i = !cir.int<s, 32>

module {
  cir.func @foo(%arg0: !s32i) -> !s32i {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64}
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64}
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i>
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i
    %3 = cir.const #cir.int<0> : !s32i
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool
    %5 = cir.ternary(%4, true {
      %7 = cir.const #cir.int<3> : !s32i
      cir.yield %7 : !s32i
    }, false {
      %7 = cir.const #cir.int<5> : !s32i
      cir.yield %7 : !s32i
    }) : (!cir.bool) -> !s32i
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i>
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i
    cir.return %6 : !s32i
  }

// CHECK: cir.func @foo(%arg0: !s32i) -> !s32i {
// CHECK:   %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64}
// CHECK:   %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64}
// CHECK:   cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i>
// CHECK:   %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i
// CHECK:   %3 = cir.const #cir.int<0> : !s32i
// CHECK:   %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool
// CHECK:    cir.brcond %4 ^bb1, ^bb2
// CHECK:  ^bb1:  // pred: ^bb0
// CHECK:    %5 = cir.const #cir.int<3> : !s32i
// CHECK:    cir.br ^bb3(%5 : !s32i)
// CHECK:  ^bb2:  // pred: ^bb0
// CHECK:    %6 = cir.const #cir.int<5> : !s32i
// CHECK:    cir.br ^bb3(%6 : !s32i)
// CHECK:  ^bb3(%7: !s32i):  // 2 preds: ^bb1, ^bb2
// CHECK:    cir.br ^bb4
// CHECK:  ^bb4:  // pred: ^bb3
// CHECK:    cir.store %7, %1 : !s32i, !cir.ptr<!s32i>
// CHECK:    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i
// CHECK:    cir.return %8 : !s32i
// CHECK:  }

  cir.func @foo2(%arg0: !cir.bool) {
    cir.ternary(%arg0, true {
      cir.yield
    }, false {
      cir.yield
    }) : (!cir.bool) -> ()
    cir.return
  }

// CHECK: cir.func @foo2(%arg0: !cir.bool) {
// CHECK:   cir.brcond %arg0 ^bb1, ^bb2
// CHECK: ^bb1:  // pred: ^bb0
// CHECK:   cir.br ^bb3
// CHECK: ^bb2:  // pred: ^bb0
// CHECK:   cir.br ^bb3
// CHECK: ^bb3:  // 2 preds: ^bb1, ^bb2
// CHECK:   cir.br ^bb4
// CHECK: ^bb4:  // pred: ^bb3
// CHECK:   cir.return
// CHECK: }

}
