// RUN: cir-opt -cir-canonicalize -cir-simplify -o %t.cir %s
// RUN: FileCheck --input-file=%t.cir %s

!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>

module {
  cir.func @fold_clrsb() -> !s32i {
    %0 = cir.const #cir.int<1> : !s32i
    %1 = cir.clrsb %0 : !s32i
    cir.return %1 : !s32i
  }
  // CHECK-LABEL: @fold_clrsb
  // CHECK-NEXT:    %[[R:.+]] = cir.const #cir.int<30> : !s32i
  // CHECK-NEXT:    cir.return %[[R]] : !s32i
  // CHECK-NEXT:  }

  cir.func @fold_clz() -> !u32i {
    %0 = cir.const #cir.int<1> : !u32i
    %1 = cir.clz %0 : !u32i
    cir.return %1 : !u32i
  }
  // CHECK-LABEL: @fold_clz
  // CHECK-NEXT:    %[[R:.+]] = cir.const #cir.int<31> : !u32i
  // CHECK-NEXT:    cir.return %[[R]] : !u32i
  // CHECK-NEXT:  }

  cir.func @fold_ctz() -> !u32i {
    %0 = cir.const #cir.int<2> : !u32i
    %1 = cir.ctz %0 : !u32i
    cir.return %1 : !u32i
  }
  // CHECK-LABEL: @fold_ctz
  // CHECK-NEXT:    %[[R:.+]] = cir.const #cir.int<1> : !u32i
  // CHECK-NEXT:    cir.return %[[R]] : !u32i
  // CHECK-NEXT:  }

  cir.func @fold_parity() -> !u32i {
    // 0xdeadbeef is 0b1101_1110_1010_1101_1011_1110_1110_1111
    // 0xdeadbeef contains 24 ones
    %0 = cir.const #cir.int<0xdeadbeef> : !u32i
    %1 = cir.parity %0 : !u32i
    cir.return %1 : !u32i
  }
  // CHECK-LABEL: @fold_parity
  // CHECK-NEXT:    %[[R:.+]] = cir.const #cir.int<0> : !u32i
  // CHECK-NEXT:    cir.return %[[R]] : !u32i
  // CHECK-NEXT:  }

  cir.func @fold_popcount() -> !u32i {
    // 0xdeadbeef is 0b1101_1110_1010_1101_1011_1110_1110_1111
    // 0xdeadbeef contains 24 ones
    %0 = cir.const #cir.int<0xdeadbeef> : !u32i
    %1 = cir.popcount %0 : !u32i
    cir.return %1 : !u32i
  }
  // CHECK-LABEL: @fold_popcount
  // CHECK-NEXT:    %[[R:.+]] = cir.const #cir.int<24> : !u32i
  // CHECK-NEXT:    cir.return %[[R]] : !u32i
  // CHECK-NEXT:  }

  cir.func @fold_bitreverse() -> !u32i {
    // 0xdeadbeef is 0b1101_1110_1010_1101_1011_1110_1110_1111
    %0 = cir.const #cir.int<0xdeadbeef> : !u32i
    %1 = cir.bitreverse %0 : !u32i
    cir.return %1 : !u32i
  }
  // CHECK-LABEL: @fold_bitreverse
  // 4152210811 is 0b1111_0111_0111_1101_1011_0101_0111_1011
  // CHECK-NEXT:    %[[R:.+]] = cir.const #cir.int<4152210811> : !u32i
  // CHECK-NEXT:    cir.return %[[R]] : !u32i
  // CHECK-NEXT:  }

  cir.func @fold_byte_swap() -> !u32i {
    %0 = cir.const #cir.int<0xdeadbeef> : !u32i
    %1 = cir.byte_swap %0 : !u32i
    cir.return %1 : !u32i
  }
  // CHECK-LABEL: @fold_byte_swap
  // 4022250974 is 0xefbeadde
  // CHECK-NEXT:    %[[R:.+]] = cir.const #cir.int<4022250974> : !u32i
  // CHECK-NEXT:    cir.return %[[R]] : !u32i
  // CHECK-NEXT:  }

  cir.func @fold_rotate_input_all_zeros(%arg0 : !u32i) -> !u32i {
    %0 = cir.const #cir.int<0> : !u32i
    %1 = cir.rotate left %0, %arg0 : !u32i
    cir.return %1 : !u32i
  }
  // CHECK-LABEL: @fold_rotate_input_all_zeros
  // CHECK-NEXT:    %[[R:.+]] = cir.const #cir.int<0> : !u32i
  // CHECK-NEXT:    cir.return %[[R]] : !u32i
  // CHECK-NEXT:  }

  cir.func @fold_rotate_input_all_ones(%arg0 : !u32i) -> !u32i {
    // 4294967295 is 0b1111_1111_1111_1111_1111_1111_1111_1111
    %0 = cir.const #cir.int<4294967295> : !u32i
    %1 = cir.rotate left %0, %arg0 : !u32i
    cir.return %1 : !u32i
  }
  // CHECK-LABEL: @fold_rotate_input_all_ones
  // CHECK-NEXT:    %[[R:.+]] = cir.const #cir.int<4294967295> : !u32i
  // CHECK-NEXT:    cir.return %[[R]] : !u32i
  // CHECK-NEXT:  }

  cir.func @fold_rotate_zero_amount(%arg0 : !u32i) -> !u32i {
    %0 = cir.const #cir.int<32> : !u32i
    %1 = cir.rotate left %arg0, %0 : !u32i
    cir.return %1 : !u32i
  }
  // CHECK-LABEL: @fold_rotate_zero_amount
  // CHECK-SAME:  (%[[R:.+]]: !u32i)
  // CHECK-NEXT:    cir.return %[[R]] : !u32i
  // CHECK-NEXT:  }

  cir.func @fold_rotate_left() -> !u32i {
    // 0xdeadbeef is 0b1101_1110_1010_1101_1011_1110_1110_1111
    %0 = cir.const #cir.int<0xdeadbeef> : !u32i
    %1 = cir.const #cir.int<8> : !u32i
    %2 = cir.rotate left %0, %1 : !u32i
    cir.return %2 : !u32i
  }
  // CHECK-LABEL: @fold_rotate_left
  // 2914971614 is 0b1010_1101_1011_1110_1110_1111_1101_1110
  // CHECK-NEXT:    %[[R:.+]] = cir.const #cir.int<2914971614> : !u32i
  // CHECK-NEXT:    cir.return %[[R]] : !u32i
  // CHECK-NEXT:  }

  cir.func @fold_rotate_right() -> !u32i {
    // 0xdeadbeef is 0b1101_1110_1010_1101_1011_1110_1110_1111
    %0 = cir.const #cir.int<0xdeadbeef> : !u32i
    %1 = cir.const #cir.int<8> : !u32i
    %2 = cir.rotate right %0, %1 : !u32i
    cir.return %2 : !u32i
  }
  // CHECK-LABEL: @fold_rotate_right
  // 4260027374 is 0b1110_1111_1101_1110_1010_1101_1011_1110
  // CHECK-NEXT:    %[[R:.+]] = cir.const #cir.int<4024348094> : !u32i
  // CHECK-NEXT:    cir.return %[[R]] : !u32i
  // CHECK-NEXT:  }
}
