name: LLVM Premerge Checks

permissions:
  contents: read

on:
  pull_request:
    paths:
      - .github/workflows/premerge.yaml
  push:
    branches:
      - 'main'

jobs:
  premerge-checks-linux:
    if: github.repository_owner == 'llvm'
    runs-on: llvm-premerge-linux-runners
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
      cancel-in-progress: true
    container:
      image: ghcr.io/llvm/ci-ubuntu-22.04:latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout LLVM
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2.14
      - name: Build and Test
        run: |
          git config --global --add safe.directory '*'

          modified_files=$(git diff --name-only HEAD~1...HEAD)
          modified_dirs=$(echo "$modified_files" | cut -d'/' -f1 | sort -u)

          echo $modified_files
          echo $modified_dirs

          . ./.ci/compute-projects.sh

          all_projects="bolt clang clang-tools-extra compiler-rt cross-project-tests flang libc libclc lld lldb llvm mlir openmp polly pstl"
          modified_projects="$(keep-modified-projects ${all_projects})"

          linux_projects_to_test=$(exclude-linux $(compute-projects-to-test 0 ${modified_projects}))
          linux_check_targets=$(check-targets ${linux_projects_to_test} | sort | uniq)
          linux_projects=$(add-dependencies ${linux_projects_to_test} | sort | uniq)

          linux_runtimes_to_test=$(compute-runtimes-to-test ${linux_projects_to_test})
          linux_runtime_check_targets=$(check-targets ${linux_runtimes_to_test} | sort | uniq)
          linux_runtimes=$(echo ${linux_runtimes_to_test} | sort | uniq)

          if [[ "${linux_projects}" == "" ]]; then
            echo "No projects to build"
            exit 0
          fi

          echo "Building projects: ${linux_projects}"
          echo "Running project checks targets: ${linux_check_targets}"
          echo "Building runtimes: ${linux_runtimes}"
          echo "Running runtimes checks targets: ${linux_runtime_check_targets}"

          export CC=/opt/llvm/bin/clang
          export CXX=/opt/llvm/bin/clang++

          ./.ci/monolithic-linux.sh "$(echo ${linux_projects} | tr ' ' ';')" "$(echo ${linux_check_targets})" "$(echo ${linux_runtimes} | tr ' ' ';')" "$(echo ${linux_runtime_check_targets})"
