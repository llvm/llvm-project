# This file defines a workflow that runs the libc++ benchmarks when a comment is added to the PR.
#
# The comment is of the form:
#
#   /libcxx-bot benchmark <path-to-benchmarks-to-run>
#
# That will cause the specified benchmarks to be run on the PR and on the pull-request target, and
# their results to be compared.

name: Benchmark libc++

permissions:
  contents: read # Default everything to read-only

on:
  issue_comment:
    types:
      - created
      - edited

env:
  CC: clang-22
  CXX: clang++-22

jobs:
  run-benchmarks:
    if: >-
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/libcxx-bot benchmark')

    runs-on: llvm-premerge-libcxx-next-runners # TODO: This should run on a dedicated set of machines
    steps:
      - uses: actions/setup-python@v6
        with:
          python-version: '3.10'

      - name: Extract information from the PR
        id: vars
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python -m pip install pygithub
          cat <<EOF | python >> ${GITHUB_OUTPUT}
          import github
          repo = github.Github("${{ github.token }}").get_repo("${{ github.repository }}")
          pr = repo.get_pull(${{ github.event.issue.number }})
          print(f"pr_base={pr.base.sha}")
          print(f"pr_head={pr.head.sha}")
          EOF
          BENCHMARKS=$(echo "${{ github.event.comment.body }}" | sed -nE 's/\/libcxx-bot benchmark (.+)/\1/p')
          echo "benchmarks=${BENCHMARKS}" >> ${GITHUB_OUTPUT}

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ steps.vars.outputs.pr_head }}
          fetch-depth: 0
          fetch-tags: true # This job requires access to all the Git branches so it can diff against (usually) main
          path: repo # Avoid nuking the workspace, where we have the Python virtualenv

      - name: Run baseline
        run: |
          source .venv/bin/activate
          python -m pip install -r repo/libcxx/utils/requirements.txt
          baseline_commit=$(git -C repo merge-base ${{ steps.vars.outputs.pr_base }} ${{ steps.vars.outputs.pr_head }})
          ./repo/libcxx/utils/test-at-commit --git-repo repo --commit ${baseline_commit} -B build/baseline -- -sv -j1 --param optimization=speed ${{ steps.vars.outputs.benchmarks }}

      - name: Run candidate
        run: |
          source .venv/bin/activate
          ./repo/libcxx/utils/test-at-commit --git-repo repo --commit ${{ steps.vars.outputs.pr_head }} -B build/candidate -- -sv -j1 --param optimization=speed ${{ steps.vars.outputs.benchmarks }}

      - name: Compare baseline and candidate runs
        run: |
          source .venv/bin/activate
          ./repo/libcxx/utils/compare-benchmarks <(./repo/libcxx/utils/consolidate-benchmarks build/baseline) \
                                                 <(./repo/libcxx/utils/consolidate-benchmarks build/candidate)
