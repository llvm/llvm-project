# This file defines pre-commit CI for libc++, libc++abi, and libunwind (on Github).
#
# We split the configurations in multiple stages with the intent of saving compute time
# when a job fails early in the pipeline. This is why the jobs are marked as `continue-on-error: false`.
# We try to run the CI configurations with the most signal in the first stage.
#
# Stages 1 & 2 are meant to be "smoke tests", and are meant to catch most build/test failures quickly and without using
# too many resources.
# Stage 3 is "everything else", and is meant to catch breakages on more niche or unique configurations.
#
# Therefore, we "fail-fast" for any failures during stages 1 & 2, meaning any job failing cancels all other running jobs,
# under the assumption that if the "smoke tests" fail, then the other configurations will likely fail in the same way.
# However, stage 3 does not fail fast, as it's more likely that any one job failing is a flake or a configuration-specific
#
name: Build and Test libc++
on:
  pull_request:
    paths:
      - 'libcxx/**'
      - 'libcxxabi/**'
      - 'libunwind/**'
      - 'runtimes/**'
      - 'cmake/**'
      - '.github/workflows/libcxx-build-and-test.yaml'
  schedule:
    # Run nightly at 08:00 UTC (aka 00:00 Pacific, aka 03:00 Eastern)
    - cron: '0 8 * * *'

permissions:
  contents: read # Default everything to read-only

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  macos:
    strategy:
      fail-fast: false
      matrix:
        include:
        - config: generic-cxx03
          os: macos-15
        - config: generic-cxx23
          os: macos-15
        - config: generic-modules
          os: macos-15
        - config: apple-configuration
          os: macos-15
        # TODO: These jobs are intended to test back-deployment (building against ToT libc++ but running against an
        #       older system-provided libc++.dylib). Doing this properly would require building the test suite on a
        #       recent macOS using a recent Clang (hence recent Xcode), and then running the actual test suite on an
        #       older mac. We could do that by e.g. sharing artifacts between the two jobs.
        #
        #       However, our Lit configuration currently doesn't provide a good way to do that in a batch, so our only
        #       alternative is to actually build on the same host that we're going to run on. Sadly, that doesn't work
        #       since older macOSes don't support newer Xcodes. For now, we run the "backdeployment" jobs on recent
        #       macOS versions as a way to avoid rotting that configuration, but it doesn't provide a lot of additional
        #       coverage.
        - config: apple-system
          os: macos-15
        - config: apple-system-hardened
          os: macos-15
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd # v1.6.0
        with:
          # https://github.com/actions/runner-images/blob/main/images/macos/macos-15-Readme.md
          xcode-version: '16.3'
      - uses: seanmiddleditch/gha-setup-ninja@3b1f8f94a2f8254bd26914c4ab9474d4f0015f67 # v6
      - name: Build and test
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python -m pip install psutil
          bash libcxx/utils/ci/run-buildbot ${{ matrix.config }}
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        if: always()  # Upload artifacts even if the build or test suite fails
        with:
          name: macos-${{ matrix.config }}-results
          path: |
            **/test-results.xml
            **/*.abilist
            **/CMakeConfigureLog.yaml
            **/CMakeError.log
            **/CMakeOutput.log
            **/crash_diagnostics/*

