/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Parser-related llvm::StringSwitch cases                                    *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|* From: Attr.td                                                              *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

#if defined(CLANG_ATTR_ARG_CONTEXT_LIST)
.Case("acquire_capability", true)
.Case("acquire_shared_capability", true)
.Case("acquired_after", true)
.Case("acquired_before", true)
.Case("assert_capability", true)
.Case("assert_exclusive_lock", true)
.Case("assert_shared_capability", true)
.Case("assert_shared_lock", true)
.Case("counted_by", true)
.Case("counted_by_or_null", true)
.Case("exclusive_lock_function", true)
.Case("exclusive_locks_required", true)
.Case("exclusive_trylock_function", true)
.Case("guarded_by", true)
.Case("lock_returned", true)
.Case("locks_excluded", true)
.Case("pt_guarded_by", true)
.Case("release_capability", true)
.Case("release_generic_capability", true)
.Case("release_shared_capability", true)
.Case("requires_capability", true)
.Case("requires_shared_capability", true)
.Case("shared_lock_function", true)
.Case("shared_locks_required", true)
.Case("shared_trylock_function", true)
.Case("sized_by", true)
.Case("sized_by_or_null", true)
.Case("try_acquire_capability", true)
.Case("try_acquire_shared_capability", true)
.Case("unlock_function", true)
#endif // CLANG_ATTR_ARG_CONTEXT_LIST

#if defined(CLANG_ATTR_IDENTIFIER_ARG_LIST)
.Case("__clang_arm_builtin_alias", true)
.Case("argument_with_type_tag", true)
.Case("atomic", true)
.Case("availability", true)
.Case("blocks", true)
.Case("builtin_alias", true)
.Case("callable_when", true)
.Case("clang_builtin_alias", true)
.Case("consumable", true)
.Case("declare simd", true)
.Case("declare target", true)
.Case("enum_extensibility", true)
.Case("format", true)
.Case("format_matches", true)
.Case("function_return", true)
.Case("guard", true)
.Case("interrupt", (Syntax==AttributeCommonInfo::AS_GNU && !ScopeName && true && (T.getArch() == llvm::Triple::arm || T.getArch() == llvm::Triple::thumb || T.getArch() == llvm::Triple::armeb || T.getArch() == llvm::Triple::thumbeb)) ? 1 : (Syntax==AttributeCommonInfo::AS_CXX11 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::arm || T.getArch() == llvm::Triple::thumb || T.getArch() == llvm::Triple::armeb || T.getArch() == llvm::Triple::thumbeb)) ? 1 : (Syntax==AttributeCommonInfo::AS_C23 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::arm || T.getArch() == llvm::Triple::thumb || T.getArch() == llvm::Triple::armeb || T.getArch() == llvm::Triple::thumbeb)) ? 1 : (Syntax==AttributeCommonInfo::AS_GNU && !ScopeName && true && (T.getArch() == llvm::Triple::mips || T.getArch() == llvm::Triple::mipsel)) ? 1 : (Syntax==AttributeCommonInfo::AS_CXX11 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::mips || T.getArch() == llvm::Triple::mipsel)) ? 1 : (Syntax==AttributeCommonInfo::AS_C23 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::mips || T.getArch() == llvm::Triple::mipsel)) ? 1 : (Syntax==AttributeCommonInfo::AS_GNU && !ScopeName && true && (T.getArch() == llvm::Triple::riscv32 || T.getArch() == llvm::Triple::riscv64)) ? 1 : (Syntax==AttributeCommonInfo::AS_CXX11 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::riscv32 || T.getArch() == llvm::Triple::riscv64)) ? 1 : (Syntax==AttributeCommonInfo::AS_C23 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::riscv32 || T.getArch() == llvm::Triple::riscv64)) ? 1 : 0)
.Case("interrupt_save_fp", true)
.Case("loop", (Syntax==AttributeCommonInfo::AS_Pragma && ScopeName && ScopeName->getName()=="clang"))
.Case("mode", true)
.Case("model", true)
.Case("nounroll", true)
.Case("nounroll_and_jam", true)
.Case("ns_error_domain", true)
.Case("objc_bridge", true)
.Case("objc_bridge_mutable", true)
.Case("objc_bridge_related", true)
.Case("objc_gc", true)
.Case("objc_method_family", true)
.Case("objc_ownership", true)
.Case("ownership_holds", true)
.Case("ownership_returns", true)
.Case("ownership_takes", true)
.Case("param_typestate", true)
.Case("pcs", true)
.Case("pointer_with_type_tag", true)
.Case("ptrauth_vtable_pointer", true)
.Case("resource_class", true)
.Case("return_typestate", true)
.Case("set_typestate", true)
.Case("shader", true)
.Case("swift_async", true)
.Case("swift_async_error", true)
.Case("swift_error", true)
.Case("swift_newtype", true)
.Case("swift_wrapper", true)
.Case("test_typestate", true)
.Case("type_tag_for_datatype", true)
.Case("type_visibility", true)
.Case("unroll", (Syntax==AttributeCommonInfo::AS_Pragma && !ScopeName))
.Case("unroll_and_jam", true)
.Case("visibility", true)
.Case("zero_call_used_regs", true)
#endif // CLANG_ATTR_IDENTIFIER_ARG_LIST

#if defined(CLANG_ATTR_STRING_LITERAL_ARG_LIST)
.Case("__arm_agnostic", 4294967295)
.Case("__arm_in", 4294967295)
.Case("__arm_inout", 4294967295)
.Case("__arm_new", 4294967295)
.Case("__arm_out", 4294967295)
.Case("__arm_preserves", 4294967295)
.Case("__asm__", 1)
.Case("abi_tag", 4294967295)
.Case("acquire_handle", 1)
.Case("alias", 1)
.Case("allocate", 1)
.Case("annotate", 1)
.Case("annotate_type", 1)
.Case("asm", 1)
.Case("assume", (Syntax==AttributeCommonInfo::AS_CXX11 && ScopeName && ScopeName->getName()=="omp") ? 1 : 0)
.Case("availability", 160)
.Case("blocks", 1)
.Case("btf_decl_tag", 1)
.Case("btf_type_tag", 1)
.Case("callable_when", 4294967295)
.Case("capability", 1)
.Case("code_seg", 1)
.Case("deprecated", 3)
.Case("diagnose_if", 14)
.Case("enable_if", 2)
.Case("enforce_tcb", 1)
.Case("enforce_tcb_leaf", 1)
.Case("error", 1)
.Case("export_name", 1)
.Case("external_source_symbol", 11)
.Case("function_return", 1)
.Case("ifunc", 1)
.Case("import_module", 1)
.Case("import_name", 1)
.Case("init_seg", 1)
.Case("interrupt", (Syntax==AttributeCommonInfo::AS_GNU && !ScopeName && true && (T.getArch() == llvm::Triple::arm || T.getArch() == llvm::Triple::thumb || T.getArch() == llvm::Triple::armeb || T.getArch() == llvm::Triple::thumbeb)) ? 1 : (Syntax==AttributeCommonInfo::AS_CXX11 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::arm || T.getArch() == llvm::Triple::thumb || T.getArch() == llvm::Triple::armeb || T.getArch() == llvm::Triple::thumbeb)) ? 1 : (Syntax==AttributeCommonInfo::AS_C23 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::arm || T.getArch() == llvm::Triple::thumb || T.getArch() == llvm::Triple::armeb || T.getArch() == llvm::Triple::thumbeb)) ? 1 : (Syntax==AttributeCommonInfo::AS_GNU && !ScopeName && true && (T.getArch() == llvm::Triple::mips || T.getArch() == llvm::Triple::mipsel)) ? 1 : (Syntax==AttributeCommonInfo::AS_CXX11 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::mips || T.getArch() == llvm::Triple::mipsel)) ? 1 : (Syntax==AttributeCommonInfo::AS_C23 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::mips || T.getArch() == llvm::Triple::mipsel)) ? 1 : (Syntax==AttributeCommonInfo::AS_GNU && !ScopeName && true && (T.getArch() == llvm::Triple::riscv32 || T.getArch() == llvm::Triple::riscv64)) ? 1 : (Syntax==AttributeCommonInfo::AS_CXX11 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::riscv32 || T.getArch() == llvm::Triple::riscv64)) ? 1 : (Syntax==AttributeCommonInfo::AS_C23 && ScopeName && ScopeName->getName()=="gnu" && true && (T.getArch() == llvm::Triple::riscv32 || T.getArch() == llvm::Triple::riscv64)) ? 1 : 0)
.Case("interrupt_save_fp", 1)
.Case("model", 1)
.Case("no_builtin", 4294967295)
.Case("no_sanitize", 4294967295)
.Case("no_specializations", 1)
.Case("nodiscard", 1)
.Case("objc_runtime_name", 1)
.Case("patchable_function_entry", 4)
.Case("pcs", 1)
.Case("ptrauth_vtable_pointer", 7)
.Case("register", 3)
.Case("release_handle", 1)
.Case("resource_class", 1)
.Case("section", 1)
.Case("shader", 1)
.Case("shared_capability", 1)
.Case("suppress", 4294967295)
.Case("swift_async_name", 1)
.Case("swift_attr", 1)
.Case("swift_bridge", 1)
.Case("swift_name", 1)
.Case("target", 1)
.Case("target_clones", 4294967295)
.Case("target_version", 1)
.Case("tls_model", 1)
.Case("type_visibility", 1)
.Case("unavailable", 1)
.Case("use_handle", 1)
.Case("uuid", 1)
.Case("visibility", 1)
.Case("warn_unused_result", 1)
.Case("warning", 1)
.Case("weakref", 1)
.Case("zero_call_used_regs", 1)
#endif // CLANG_ATTR_STRING_LITERAL_ARG_LIST

#if defined(CLANG_ATTR_VARIADIC_IDENTIFIER_ARG_LIST)
.Case("callback", true)
.Case("cpu_dispatch", true)
.Case("cpu_specific", true)
.Case("lifetime_capture_by", true)
#endif // CLANG_ATTR_VARIADIC_IDENTIFIER_ARG_LIST

#if defined(CLANG_ATTR_THIS_ISA_IDENTIFIER_ARG_LIST)
.Case("callback", true)
.Case("lifetime_capture_by", true)
#endif // CLANG_ATTR_THIS_ISA_IDENTIFIER_ARG_LIST

#if defined(CLANG_ATTR_ACCEPTS_EXPR_PACK)
.Case("annotate", true)
.Case("annotate_type", true)
#endif // CLANG_ATTR_ACCEPTS_EXPR_PACK

#if defined(CLANG_ATTR_TYPE_ARG_LIST)
.Case("Owner", true)
.Case("Pointer", true)
.Case("contained_type", true)
.Case("iboutletcollection", true)
.Case("preferred_name", true)
.Case("preferred_type", true)
.Case("sycl_kernel_entry_point", true)
.Case("vec_type_hint", true)
#endif // CLANG_ATTR_TYPE_ARG_LIST

#if defined(CLANG_ATTR_LATE_PARSED_LIST)
.Case("acquire_capability", 1)
.Case("acquire_shared_capability", 1)
.Case("exclusive_lock_function", 1)
.Case("shared_lock_function", 1)
.Case("assert_capability", 1)
.Case("assert_shared_capability", 1)
.Case("assert_exclusive_lock", 1)
.Case("assert_shared_lock", 1)
.Case("diagnose_if", 1)
.Case("lock_returned", 1)
.Case("locks_excluded", 1)
.Case("release_capability", 1)
.Case("release_shared_capability", 1)
.Case("release_generic_capability", 1)
.Case("unlock_function", 1)
.Case("requires_capability", 1)
.Case("exclusive_locks_required", 1)
.Case("requires_shared_capability", 1)
.Case("shared_locks_required", 1)
.Case("try_acquire_capability", 1)
.Case("try_acquire_shared_capability", 1)
.Case("exclusive_trylock_function", 1)
.Case("shared_trylock_function", 1)
#endif // CLANG_ATTR_LATE_PARSED_LIST

#if defined(CLANG_ATTR_LATE_PARSED_EXPERIMENTAL_EXT_LIST)
.Case("acquired_after", 1)
.Case("acquired_before", 1)
.Case("counted_by", 1)
.Case("counted_by_or_null", 1)
.Case("guarded_by", 1)
.Case("pt_guarded_by", 1)
.Case("sized_by", 1)
.Case("sized_by_or_null", 1)
#endif // CLANG_ATTR_LATE_PARSED_EXPERIMENTAL_EXT_LIST

#if defined(CLANG_ATTR_STRICT_IDENTIFIER_ARG_LIST)
.Case("atomic", true)
.Case("ptrauth_vtable_pointer", true)
#endif // CLANG_ATTR_STRICT_IDENTIFIER_ARG_LIST

