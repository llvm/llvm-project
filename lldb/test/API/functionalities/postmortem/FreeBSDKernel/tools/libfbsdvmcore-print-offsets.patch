diff --git a/lib/fvc.c b/lib/fvc.c
index e6b96c1..4033f78 100644
--- a/lib/fvc.c
+++ b/lib/fvc.c
@@ -297,6 +297,7 @@ fvc_read(fvc_t *kd, fvc_addr_t kva, void *buf, size_t len)
 			_fvc_syserr(kd, kd->program, "fvc_read");
 			break;
 		}
+		printf("%% RD: %zu %d\n", pa, cc);
 		/*
 		 * If ka_kvatop returns a bogus value or our core file is
 		 * truncated, we might wind up seeking beyond the end of the
@@ -331,3 +332,8 @@ fvc_kerndisp(fvc_t *kd)
 
 	return (kd->arch->ka_kerndisp(kd));
 }
+
+ssize_t xpread(int fd, void *buf, size_t count, off_t offset) {
+	printf("%% RD: %zu %zu\n", offset, count);
+	return pread(fd, buf, count, offset);
+}
diff --git a/lib/fvc.h b/lib/fvc.h
index 8680079..ff1e0f0 100644
--- a/lib/fvc.h
+++ b/lib/fvc.h
@@ -54,6 +54,8 @@ typedef unsigned char fvc_vm_prot_t;
 #define	FVC_VM_PROT_WRITE		((fvc_vm_prot_t) 0x02)
 #define	FVC_VM_PROT_EXECUTE		((fvc_vm_prot_t) 0x04)
 
+ssize_t xpread(int fd, void *buf, size_t count, off_t offset);
+
 struct fvc_page {
 	unsigned int	kp_version;
 	fvc_addr_t	kp_paddr;
diff --git a/lib/fvc_amd64.c b/lib/fvc_amd64.c
index 4d27998..69f1807 100644
--- a/lib/fvc_amd64.c
+++ b/lib/fvc_amd64.c
@@ -205,7 +205,7 @@ _amd64_vatop(fvc_t *kd, fvc_addr_t va, off_t *pa)
 		_fvc_err(kd, kd->program, "_amd64_vatop: pdpe_pa not found");
 		goto invalid;
 	}
-	if (pread(kd->pmfd, &pdpe, sizeof(pdpe), ofs) != sizeof(pdpe)) {
+	if (xpread(kd->pmfd, &pdpe, sizeof(pdpe), ofs) != sizeof(pdpe)) {
 		_fvc_syserr(kd, kd->program, "_amd64_vatop: read pdpe");
 		goto invalid;
 	}
@@ -237,7 +237,7 @@ _amd64_vatop(fvc_t *kd, fvc_addr_t va, off_t *pa)
 		_fvc_syserr(kd, kd->program, "_amd64_vatop: pde_pa not found");
 		goto invalid;
 	}
-	if (pread(kd->pmfd, &pde, sizeof(pde), ofs) != sizeof(pde)) {
+	if (xpread(kd->pmfd, &pde, sizeof(pde), ofs) != sizeof(pde)) {
 		_fvc_syserr(kd, kd->program, "_amd64_vatop: read pde");
 		goto invalid;
 	}
@@ -269,7 +269,7 @@ _amd64_vatop(fvc_t *kd, fvc_addr_t va, off_t *pa)
 		_fvc_err(kd, kd->program, "_amd64_vatop: pte_pa not found");
 		goto invalid;
 	}
-	if (pread(kd->pmfd, &pte, sizeof(pte), ofs) != sizeof(pte)) {
+	if (xpread(kd->pmfd, &pte, sizeof(pte), ofs) != sizeof(pte)) {
 		_fvc_syserr(kd, kd->program, "_amd64_vatop: read");
 		goto invalid;
 	}
diff --git a/lib/fvc_minidump_aarch64.c b/lib/fvc_minidump_aarch64.c
index 4b8477a..a1c5b42 100644
--- a/lib/fvc_minidump_aarch64.c
+++ b/lib/fvc_minidump_aarch64.c
@@ -86,7 +86,7 @@ _aarch64_minidump_initvtop(fvc_t *kd)
 		return (-1);
 	}
 	kd->vmst = vmst;
-	if (pread(kd->pmfd, &vmst->hdr, sizeof(vmst->hdr), 0) !=
+	if (xpread(kd->pmfd, &vmst->hdr, sizeof(vmst->hdr), 0) !=
 	    sizeof(vmst->hdr)) {
 		_fvc_err(kd, kd->program, "cannot read dump header");
 		return (-1);
diff --git a/lib/fvc_minidump_amd64.c b/lib/fvc_minidump_amd64.c
index 93e8238..0d2237f 100644
--- a/lib/fvc_minidump_amd64.c
+++ b/lib/fvc_minidump_amd64.c
@@ -126,7 +126,7 @@ _amd64_minidump_initvtop(fvc_t *kd)
 		return (-1);
 	}
 	kd->vmst = vmst;
-	if (pread(kd->pmfd, &vmst->hdr, sizeof(vmst->hdr), 0) !=
+	if (xpread(kd->pmfd, &vmst->hdr, sizeof(vmst->hdr), 0) !=
 	    sizeof(vmst->hdr)) {
 		_fvc_err(kd, kd->program, "cannot read dump header");
 		return (-1);
@@ -269,7 +269,7 @@ _amd64_minidump_vatop(fvc_t *kd, fvc_addr_t va, off_t *pa)
 				    (uintmax_t)a);
 				goto invalid;
 			}
-			if (pread(kd->pmfd, &pt, AMD64_PAGE_SIZE, ofs) !=
+			if (xpread(kd->pmfd, &pt, AMD64_PAGE_SIZE, ofs) !=
 			    AMD64_PAGE_SIZE) {
 				_fvc_err(kd, kd->program,
 				    "cannot read page table entry for %ju",
diff --git a/lib/fvc_minidump_i386.c b/lib/fvc_minidump_i386.c
index 61cc3db..b3ab955 100644
--- a/lib/fvc_minidump_i386.c
+++ b/lib/fvc_minidump_i386.c
@@ -94,7 +94,7 @@ _i386_minidump_initvtop(fvc_t *kd)
 		return (-1);
 	}
 	kd->vmst = vmst;
-	if (pread(kd->pmfd, &vmst->hdr, sizeof(vmst->hdr), 0) !=
+	if (xpread(kd->pmfd, &vmst->hdr, sizeof(vmst->hdr), 0) !=
 	    sizeof(vmst->hdr)) {
 		_fvc_err(kd, kd->program, "cannot read dump header");
 		return (-1);
diff --git a/lib/fvc_private.c b/lib/fvc_private.c
index 0069a54..fc798fe 100644
--- a/lib/fvc_private.c
+++ b/lib/fvc_private.c
@@ -130,7 +130,7 @@ _fvc_is_minidump(fvc_t *kd)
 {
 	char minihdr[8];
 
-	if (pread(kd->pmfd, &minihdr, 8, 0) == 8 &&
+	if (xpread(kd->pmfd, &minihdr, 8, 0) == 8 &&
 	    memcmp(&minihdr, "minidump", 8) == 0)
 		return (1);
 	return (0);
@@ -256,6 +256,7 @@ _fvc_pmap_get(fvc_t *kd, u_long idx, size_t len)
 
 	if ((off_t)off >= kd->pt_sparse_off)
 		return (NULL);
+	printf("%% RD: %zu %zu\n", kd->page_map_off+off, len);
 	return (void *)((uintptr_t)kd->page_map + off);
 }
 
@@ -270,8 +271,13 @@ _fvc_map_get(fvc_t *kd, u_long pa, unsigned int page_size)
 		return NULL;
 
 	addr = (uintptr_t)kd->page_map + off;
-	if (off >= kd->pt_sparse_off)
+	if (off >= kd->pt_sparse_off) {
+
 		addr = (uintptr_t)kd->sparse_map + (off - kd->pt_sparse_off);
+		printf("%% RD: %zu %u\n", off, page_size);
+	}
+	else
+		printf("%% RD: %zu %u\n", kd->page_map_off+off, page_size);
 	return (void *)addr;
 }
 
@@ -289,6 +295,7 @@ _fvc_pt_init(fvc_t *kd, size_t dump_avail_size, off_t dump_avail_off,
 	if (dump_avail_size > 0) {
 		kd->dump_avail = mmap(NULL, kd->dump_avail_size, PROT_READ,
 		    MAP_PRIVATE, kd->pmfd, dump_avail_off);
+		printf("%% RD: %zu %zu\n", dump_avail_off, dump_avail_size);
 	} else {
 		/*
 		 * Older version minidumps don't provide dump_avail[],
@@ -309,7 +316,7 @@ _fvc_pt_init(fvc_t *kd, size_t dump_avail_size, off_t dump_avail_off,
 		    map_len);
 		return (-1);
 	}
-	rd = pread(kd->pmfd, kd->pt_map, map_len, map_off);
+	rd = xpread(kd->pmfd, kd->pt_map, map_len, map_off);
 	if (rd < 0 || rd != (ssize_t)map_len) {
 		_fvc_err(kd, kd->program, "cannot read %zu bytes for bitmap",
 		    map_len);
