# Test successful startup with valid TCP listen address
# The socket file is created immediately when the server is ready to accept connections,
# so we can verify successful startup without arbitrary sleep delays.
RUN: rm -f %t.socket1
RUN: timeout 0.2s %platformserver --listen tcp://127.0.0.1:0 --socket-file %t.socket1 > %t.out1 2>&1 || true
RUN: test -f %t.socket1
RUN: FileCheck --allow-empty --check-prefix=NO-ERROR %s < %t.out1

# Test successful startup with valid gdbserver-port
RUN: rm -f %t.socket3
RUN: timeout 0.2s %platformserver --listen tcp://127.0.0.1:0 --gdbserver-port 0 --socket-file %t.socket3 > %t.out3 2>&1 || true
RUN: test -f %t.socket3
RUN: FileCheck --allow-empty --check-prefix=NO-ERROR %s < %t.out3

# Test successful startup with specific valid gdbserver-port number
RUN: rm -f %t.socket4
RUN: timeout 0.2s %platformserver --listen tcp://127.0.0.1:0 --gdbserver-port 12345 --socket-file %t.socket4 > %t.out4 2>&1 || true
RUN: test -f %t.socket4
RUN: FileCheck --allow-empty --check-prefix=NO-ERROR %s < %t.out4

# Test successful startup with server mode (accepting multiple connections)
RUN: rm -f %t.socket5
RUN: timeout 0.2s %platformserver --server --listen tcp://127.0.0.1:0 --socket-file %t.socket5 > %t.out5 2>&1 || true
RUN: test -f %t.socket5
RUN: FileCheck --allow-empty --check-prefix=NO-ERROR %s < %t.out5

# Test successful startup with abbreviated 'p' command
RUN: rm -f %t.socket6
RUN: timeout 0.2s %lldb-server p --listen tcp://127.0.0.1:0 --socket-file %t.socket6 > %t.out6 2>&1 || true
RUN: test -f %t.socket6
RUN: FileCheck --allow-empty --check-prefix=NO-ERROR %s < %t.out6

# Verify no error or warning messages appear in successful startup
NO-ERROR-NOT: error:
NO-ERROR-NOT: warning:
