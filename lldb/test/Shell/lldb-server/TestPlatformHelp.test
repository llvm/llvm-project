RUN: %platformserver --help 2>&1 | FileCheck %s
RUN: %platformserver -h 2>&1 | FileCheck %s
RUN: %lldb-server p --help 2>&1 | FileCheck %s
RUN: %lldb-server p -h 2>&1 | FileCheck %s
RUN: %lldb-server platform --help 2>&1 | FileCheck %s
RUN: %lldb-server platform -h 2>&1 | FileCheck %s

CHECK: OVERVIEW: lldb-server{{(\.exe)?}} platform

CHECK: USAGE: lldb-server{{(\.exe)?}} {{p|platform}} [options] --listen <[host]:port> {{\[}}[--] program args...]

CHECK: CONNECTION OPTIONS:
CHECK: --gdbserver-port <port>
CHECK-SAME: Short form: -P
CHECK: --listen <[host]:port>
CHECK-SAME: Short form: -L
CHECK: --socket-file <path>
CHECK-SAME: Short form: -f

CHECK: GENERAL OPTIONS:
CHECK: --help
CHECK: --log-channels <channel1 categories...:channel2 categories...>
CHECK: Short form: -c
CHECK: --log-file <file>
CHECK-SAME: Short form: -l
CHECK: --server

CHECK: OPTIONS:
CHECK: -- program args

CHECK: DESCRIPTION
CHECK: Acts as a platform server for remote debugging

CHECK: EXAMPLES
CHECK: # Listen on port 1234, exit after first connection
CHECK: lldb-server{{(\.exe)?}} platform --listen tcp://0.0.0.0:1234
CHECK: # Listen on port 5555, accept multiple connections
CHECK: lldb-server{{(\.exe)?}} platform --server --listen tcp://localhost:5555
CHECK: # Listen on Unix domain socket
CHECK: lldb-server{{(\.exe)?}} platform --listen unix:///tmp/lldb-server.sock
