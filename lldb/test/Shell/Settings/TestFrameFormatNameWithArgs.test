# REQUIRES: system-darwin
# RUN: %clangxx_host -g -O0 %S/Inputs/names.cpp -std=c++17 -o %t.out
# RUN: %lldb -b -s %s %t.out | FileCheck %s
settings set -f frame-format "frame ${function.name-with-args}\n"
break set -n foo
break set -n operator<<
break set -n returns_func_ptr
run
# CHECK: frame int ns::foo<int ()>(t={{.*}})
c
# CHECK: frame int ns::foo<std::{{.*}}function<int ()>>(t= Function = bar() )
c
# CHECK: frame int ns::foo<(anonymous namespace)::$_0>(t={{.*}})
c
# CHECK: frame int ns::foo<std::{{.*}}function<int ()>>(t= Function = (anonymous namespace)::anon_bar() )
c
# CHECK: frame int ns::foo<void (Foo::*)(std::{{.*}}function<int (int)> const&) const noexcept>(t={{.*}})
c
# CHECK: frame ns::returns_func_ptr<int>((null)={{.*}})
c
# CHECK: frame void Foo::foo<std::{{.*}}function<int ()>>(this={{.*}}, t= Function = bar() ) const
c
# CHECK: frame void Foo::foo<std::{{.*}}function<int ()>>(this={{.*}}, t= Function = (anonymous namespace)::anon_bar() ) const
c
# CHECK: frame void Foo::operator<<<1ul>(this={{.*}}, (null)=0)
c
# CHECK: frame Foo::returns_func_ptr<int>(this={{.*}}, (null)={{.*}})
q
