#===----------------------------------------------------------------------===##
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
#===----------------------------------------------------------------------===##

#
# This file describes the various pre-commit CI bots used to test libc++.
#
# This file should never contain logic -- all the logic must be offloaded
# into scripts. This is critical to being able to reproduce CI issues outside
# of the CI environment, which is important for debugging.
#
# It is also worth noting that this script is split into several sections, the
# goal being to reduce the load on testers when a commit is known to fail.
#

# The Linux CI runners use the nightly ToT build provided by the Docker image.
# (Note the image isn't updated daily.) The LLVM_HEAD_VERSION contains that
# version number. The Linux CI runners for GCC use the latest stable version.
# Theses numbers are available in all runners, making it easier to update the
# version number.
env:
    LLVM_HEAD_VERSION: "16"
    GCC_STABLE_VERSION: "12"
steps:
  #
  # Light pre-commit tests for things like formatting or when people forget
  # to update generated files.
  #
  - label: "Format"
    command: "libcxx/utils/ci/run-buildbot check-format"
    artifact_paths:
      - "**/clang-format.patch"
    agents:
      queue: "libcxx-builders"
      os: "linux"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
    soft_fail:
        - exit_status: 1
    timeout_in_minutes: 120

  - label: "Generated output"
    command: "libcxx/utils/ci/run-buildbot check-generated-output"
    artifact_paths:
      - "**/generated_output.patch"
      - "**/generated_output.status"
    agents:
      queue: "libcxx-builders"
      os: "linux"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
    timeout_in_minutes: 120

  #
  # General testing with the default configuration, under all the supported
  # Standard modes, with Clang and GCC. This catches most issues upfront.
  # The goal of this step is to catch most issues while being very fast.
  #
  - wait

  # Tests with the various supported ways to build libc++.
  - label: "Bootstrapping build"
    command: "libcxx/utils/ci/run-buildbot bootstrapping-build"
    artifact_paths:
      - "**/test-results.xml"
      - "**/*.abilist"
      - "**/crash_diagnostics/*"
    env:
        CC: "clang-${LLVM_HEAD_VERSION}"
        CXX: "clang++-${LLVM_HEAD_VERSION}"
        LLVM_SYMBOLIZER_PATH: "/usr/bin/llvm-symbolizer-${LLVM_HEAD_VERSION}"
        CLANG_CRASH_DIAGNOSTICS_DIR: "crash_diagnostics"
    agents:
      queue: "libcxx-builders"
      os: "linux"
    retry:
      automatic:
        - exit_status: -1  # Agent was lost
          limit: 2
    timeout_in_minutes: 120
