#===----------------------------------------------------------------------===##
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
#===----------------------------------------------------------------------===##

#
# This file describes the various pre-commit CI bots used to test libc++.
#
# This file should never contain logic -- all the logic must be offloaded
# into scripts. This is critical to being able to reproduce CI issues outside
# of the CI environment, which is important for debugging.
#

steps:
  - label: "C++03"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-cxx03 | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "C++11"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-cxx11 | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "C++14"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-cxx14 | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "C++17"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-cxx17 | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "C++20"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-cxx2a | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "-fno-exceptions"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-noexceptions | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "GCC/C++20"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-gcc | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "ASAN"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-asan | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "TSAN"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-tsan | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "UBSAN"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-ubsan | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "With LLVM's libunwind"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-with_llvm_unwinder | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "Single-threaded"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-singlethreaded | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "No debug mode"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-nodebug | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "No random device"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-no-random_device | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-builders"

  - label: "MacOS C++20"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh generic-cxx2a | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-macos-builders"

  # Build with the configuration we use to generate libc++.dylib on Apple platforms
  - label: "Apple system"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh x86_64-apple-system | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-macos-builders"
  - label: "Apple system -fno-exceptions"
    command: "set -o pipefail && libcxx/utils/ci/run-buildbot.sh x86_64-apple-system-noexceptions | libcxx/utils/ci/phabricator-report"
    agents:
      queue: "libcxx-macos-builders"
