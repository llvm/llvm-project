Section,Description,Dependencies,Assignee,Patch,Complete
[concepts],"Normally this would be more fine-grained, but it’s already been implemented.",,Christopher Di Bella,,✅
[tuple.helper],Update <tuple> includes.,,,,
[function.objects],"Comparison functions: equal_to, less, etc.",[concepts],Zoe Carver,D100429,
[memory.syn],Add specializations for uninitialized_* and destroy_*. ,"[concepts], [readable.traits]: iter_value_t",,,
[readable.traits]: indirectly_readable_traits,indirectly_readable_traits only. ,[concepts],Christopher Di Bella,D99461,
[iterator.traits],Mainly updates to iterator_traits.,"[readable.traits]: indirectly_readable_traits, [concepts]",Christopher Di Bella,"D99854, D99855",
[readable.traits]: iter_value_t,Finish implementing readable.traits.,"[readable.traits]: indirectly_readable_traits, [concepts], [iterator.traits]",Christopher Di Bella,D99863,
[specialized.algorithms],NOT FINISHED,NOT FINISHED,,,
[strings],Adds begin/end and updates const_iterator.,[iterator.concepts],,,
[views.span],Same as [strings],[iterator.concepts],,,
[incrementable.traits],,[concepts],Christopher Di Bella,"D99141, D99863",1/2
[iterator.cust.move],Implement iter_move.,,Christopher Di Bella,D99873,
[iterator.cust.swap],Implement iter_swap.,"[concepts], [readable.traits]: iter_value_t",,,
[iterator.concepts],"indirectly_­readable, indirectly_writable, weakly_incrementable, incrementable, input_or_output_iterator, sentinel_for, sized_sentinel_for, input_iterator, output_iterator, forward_iterator, bidirectional_iterator, random_access_iterator, and contiguous_iterator.","[concepts], [readable.traits]: iter_value_t, [iterator.traits]",Christopher Di Bella,"indirectly_readable: D100073
indirectly_wriatable: D100078 weakly_incrementable, incrementable: D100080 input_or_output_iterator, sentinel_for: D100160
input_iterator: D100271
forward_iterator: D100275
bidirectional_iterator: D100278",
[indirectcallable.indirectinvocable],"indirectly_unary_invocable, indirectly_regular_unary_invocable, indirectly_unary_predicate, indirectly_binary_predicate, indirectly_equivalence_relation, and indirectly_strict_weak_order.","[concepts], [readable.traits]: iter_value_t, [iterator.traits]",,,
[projected],,[iterator.concepts],,,
[common.alg.req]: pt. 1,"indirectly_movable, indirectly_movable_storable, indirectly_copyable, and indirectly_copyable_storable.",[iterator.concepts],,,
[common.alg.req]: pt. 2,indirectly_swappable,"[iterator.concepts], [iterator.cust.swap]",,,
[common.alg.req]: pt. 3,indirectly_comparable,[projected],,,
[common.alg.req]: pt. 4,"Note: could be done with pt. 1.           …                              permutable, mergeable, and sortable",[iterator.concepts],,,
[std.iterator.tags],,[iterator.traits],,,
[range.iterator.operations.advance],ranges::advance,[iterator.concepts],,,
[range.iterator.operations.distance],ranges::distance,"[iterator.concepts], [range.range]",,,
[range.iterator.operations.next],ranges::next,[iterator.concepts],,,
[range.iterator.operations.prev],ranges::prev,[iterator.concepts],,,
[predef.iterators],Updates to predefined iterators.,"[iterator.concepts], [iterator.cust.swap], [iterator.cust.move]",,,
[move.sentinel],,[concepts] … Note: for testing it may be beneficial to have completed [predef.iterators]. ,,,
[common.iterator],,"[iterator.concepts], [iterator.cust.swap], [iterator.cust.move]",,,
[default.sentinels],The empty std::default_sentinel_t.,,,,
[counted.iterator],,"[iterator.concepts], [iterator.cust.swap], [iterator.cust.move], [default.sentinels]",,,
[stream.iterators],,[default.sentinels],,,
[ranges.syn]: pt. 1,All the stuff not specified elsewhere. ,"[range.access], [iterator.concepts], [range.all], [range.subrange], unreachable, [range.empty]",,,
[ranges.syn]: pt. 2,"iterator_t, sentinel_t, and safe_iterator_t",[range.access],Christopher Di Bella,"D100255, D100269",
[range.access],"ranges::begin, end, cbegin, cend, rbegin, rend, crbegin, and crend",[iterator.concepts],Christopher Di Bella,D100255,
[ranges.primitives],"size, empty, data, and cdata",[iterator.concepts],Zoe Carver,,
[range.range],,[range.access],,,
[range.sized],,"[range.primitives], [range.range]",,,
[range.view],View and enable_view,[range.range],,,
[range.refinements],"OutputRange, InputRange, ForwardRange, BidirectionalRange, RandomAccessRange, ContiguousRange, CommonRange, ViewableRange","[ranges.syn]: pt. 2, [range.range]",Christopher Di Bella,"input_range: D100271
forward_range: D100275
bidirectional_range: D100278",
[view.interface],[range.utility.helpers] and view_interface,"[ranges.syn]: pt. 2, [range.view], [range.iterator.operations.prev], [range.refinements]",,,
[range.subrange],,[view.interface],,,
[range.all],view::all,"[range.subrange], [range.view.ref]",,,
[range.view.ref],ref-view,[view.interface],,,
[range.filter],filter_view,[range.all],,,
[range.transform],transform_view,[range.all],,,
[range.iota],iota_view,[range.all],,,
[range.take],take_view,[range.all],,,
[range.join],join_view,[range.all],,,
[range.empty],empty_view,[view.interface],,,
[range.single],single_view,[view.interface],,,
[range.split],split_view,[range.all],,,
[range.counted],view::counted,[range.subrange],,,
[range.common],common_view,[range.all],,,
[range.reverse],reverse_view,[range.all],,,