# This testing configuration handles running the test suite against LLVM's libc++
# using a static library, with Clang-cl on Windows.

lit_config.load_config(config, '@CMAKE_CURRENT_BINARY_DIR@/cmake-bridge.cfg')

dbg_include = ''
runtime_library = '@CMAKE_MSVC_RUNTIME_LIBRARY@'

if runtime_library == '' or runtime_library.endswith('DLL'):
    crt_lib = 'msvcrt'
    cxx_lib = 'msvcprt'
else:
    crt_lib = 'libcmt'
    cxx_lib = 'libcpmt'

if '@uppercase_CMAKE_BUILD_TYPE@' == 'DEBUG':
    dbg_include = ' -D_DEBUG -include set_windows_crt_report_mode.h'
    crt_lib += 'd'
    cxx_lib += 'd'

config.substitutions.append(('%{flags}', '--driver-mode=g++'))
config.substitutions.append(('%{compile_flags}',
    '-nostdinc++ -I %{include} -I %{target-include} -I %{libcxx}/test/support -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_WARNINGS -D_CRT_STDIO_ISO_WIDE_SPECIFIERS -DNOMINMAX' + dbg_include
))
config.substitutions.append(('%{link_flags}',
    '-nostdlib -L %%{lib} -llibc++ -l%s -l%s -loldnames' % (crt_lib, cxx_lib)
))
config.substitutions.append(('%{exec}',
    '%{executor} --execdir %T -- '
))

import os, site
site.addsitedir(os.path.join('@LIBCXX_SOURCE_DIR@', 'utils'))
import libcxx.test.params, libcxx.test.config
libcxx.test.config.configure(
    libcxx.test.params.DEFAULT_PARAMETERS,
    libcxx.test.features.DEFAULT_FEATURES,
    config,
    lit_config
)
