// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP___LOG_HARDENING_FAILURE
#define _LIBCPP___LOG_HARDENING_FAILURE

#include <__config>

#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
#  pragma GCC system_header
#endif

_LIBCPP_BEGIN_NAMESPACE_STD

// This function should never be called directly from the code -- it should only be called through the
// `_LIBCPP_LOG_HARDENING_FAILURE` macro.
_LIBCPP_AVAILABILITY_LOG_HARDENING_FAILURE _LIBCPP_OVERRIDABLE_FUNC_VIS void
__libcpp_log_hardening_failure(const char* message) _NOEXCEPT;

// _LIBCPP_LOG_HARDENING_FAILURE(message)
//
// This macro is used to log a hardening failure without terminating the program (as is the case if the `observe`
// assertion semantic is used). Where possible, it logs in a way that indicates a fatal error (which might include
// capturing the stack trace).
#if !defined(_LIBCPP_LOG_HARDENING_FAILURE)

#  if !_LIBCPP_AVAILABILITY_HAS_LOG_HARDENING_FAILURE
// The decltype is there to suppress -Wunused warnings in this configuration.
void __use(const char*);
#    define _LIBCPP_LOG_HARDENING_FAILURE(message) (decltype(::std::__use(message))())
#  else
#    define _LIBCPP_LOG_HARDENING_FAILURE(message) ::std::__libcpp_log_hardening_failure(message)
#  endif

#endif // !defined(_LIBCPP_LOG_HARDENING_FAILURE)

_LIBCPP_END_NAMESPACE_STD

#endif // _LIBCPP___LOG_HARDENING_FAILURE
